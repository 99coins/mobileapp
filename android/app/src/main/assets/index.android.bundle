var __DEV__=true,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='development';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
  }

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        } else {
          console.warn("Trying to define twice module ID " + moduleId + " in the same bundle");
        }
      }

      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };

    if (__DEV__) {
      modules[moduleId].hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        modules[moduleId].verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function _require(moduleId) {
    if (__DEV__ && typeof moduleId === 'string') {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: '" + verboseName + "'");
      } else {
        console.warn("Requiring module '" + verboseName + "' by name is only supported for " + 'debugging purposes and will BREAK IN PRODUCTION!');
      }
    }

    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = _require.Systrace;
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      if (__DEV__) {
        Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
      }

      var moduleObject = {
        exports: exports
      };

      if (__DEV__ && module.hot) {
        moduleObject.hot = module.hot;
      }

      factory(global, _require, moduleObject, exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();
      }

      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += 'If you are sure the module is there, try restarting Metro Bundler. ' + 'You may also want to run `yarn`, or `npm install` (depending on your environment).';
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    _require.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    _require.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        acceptCallback: null,
        accept: function accept(callback) {
          hot.acceptCallback = callback;
        }
      };
      return hot;
    };

    var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
      if (!dependentModules || dependentModules.length === 0) {
        return true;
      }

      var notAccepted = dependentModules.filter(function (module) {
        return !accept(module, undefined, undefined, inverseDependencies);
      });
      var parents = [];

      for (var i = 0; i < notAccepted.length; i++) {
        if (inverseDependencies[notAccepted[i]].length === 0) {
          return false;
        }

        parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
      }

      return acceptAll(parents, inverseDependencies);
    };

    var accept = function accept(id, factory, dependencyMap, inverseDependencies) {
      var mod = modules[id];

      if (!mod && factory) {
        return true;
      }

      var hot = mod.hot;

      if (!hot) {
        console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
        return false;
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.isInitialized = false;

      _require(id);

      if (hot.acceptCallback) {
        hot.acceptCallback();
        return true;
      } else {
        if (!inverseDependencies) {
          throw new Error('Undefined `inverseDependencies`');
        }

        return acceptAll(inverseDependencies[id], inverseDependencies);
      }
    };

    global.__accept = accept;
  }
})(this);
(function (global) {
  Object.assign = function (target, sources) {
    if (__DEV__) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      if (typeof target !== 'object' && typeof target !== 'function') {
        throw new TypeError('In this environment the target of assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      if (__DEV__) {
        if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
          throw new TypeError('In this environment the sources for assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }

      for (var key in nextSource) {
        if (__DEV__) {
          var hasOwnProperty = Object.prototype.hasOwnProperty;

          if (!hasOwnProperty.call(nextSource, key)) {
            throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
          }
        }

        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  if (global.nativeLoggingHook) {
    function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    }

    function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    }

    function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    }

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }

      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
            reactNativeMethod.apply(console, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, require, module, exports, _dependencyMap) {
  var _reactNative = require(_dependencyMap[0], "react-native");

  var _index = require(_dependencyMap[1], "./index.js");

  var _index2 = babelHelpers.interopRequireDefault(_index);

  _reactNative.AppRegistry.registerComponent('NNCoins', function () {
    return _index2.default;
  });
},11,[12,334],"NNCoins/index.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNative = {
    get AccessibilityInfo() {
      return require(_dependencyMap[1], 'AccessibilityInfo');
    },

    get ActivityIndicator() {
      return require(_dependencyMap[2], 'ActivityIndicator');
    },

    get ART() {
      return require(_dependencyMap[3], 'ReactNativeART');
    },

    get Button() {
      return require(_dependencyMap[4], 'Button');
    },

    get CheckBox() {
      return require(_dependencyMap[5], 'CheckBox');
    },

    get DatePickerIOS() {
      return require(_dependencyMap[6], 'DatePickerIOS');
    },

    get DrawerLayoutAndroid() {
      return require(_dependencyMap[7], 'DrawerLayoutAndroid');
    },

    get FlatList() {
      return require(_dependencyMap[8], 'FlatList');
    },

    get Image() {
      return require(_dependencyMap[9], 'Image');
    },

    get ImageBackground() {
      return require(_dependencyMap[10], 'ImageBackground');
    },

    get ImageEditor() {
      return require(_dependencyMap[11], 'ImageEditor');
    },

    get ImageStore() {
      return require(_dependencyMap[12], 'ImageStore');
    },

    get KeyboardAvoidingView() {
      return require(_dependencyMap[13], 'KeyboardAvoidingView');
    },

    get ListView() {
      return require(_dependencyMap[14], 'ListView');
    },

    get MaskedViewIOS() {
      return require(_dependencyMap[15], 'MaskedViewIOS');
    },

    get Modal() {
      return require(_dependencyMap[16], 'Modal');
    },

    get NavigatorIOS() {
      return require(_dependencyMap[17], 'NavigatorIOS');
    },

    get Picker() {
      return require(_dependencyMap[18], 'Picker');
    },

    get PickerIOS() {
      return require(_dependencyMap[19], 'PickerIOS');
    },

    get ProgressBarAndroid() {
      return require(_dependencyMap[20], 'ProgressBarAndroid');
    },

    get ProgressViewIOS() {
      return require(_dependencyMap[21], 'ProgressViewIOS');
    },

    get SafeAreaView() {
      return require(_dependencyMap[22], 'SafeAreaView');
    },

    get ScrollView() {
      return require(_dependencyMap[23], 'ScrollView');
    },

    get SectionList() {
      return require(_dependencyMap[24], 'SectionList');
    },

    get SegmentedControlIOS() {
      return require(_dependencyMap[25], 'SegmentedControlIOS');
    },

    get Slider() {
      return require(_dependencyMap[26], 'Slider');
    },

    get SnapshotViewIOS() {
      return require(_dependencyMap[27], 'SnapshotViewIOS');
    },

    get Switch() {
      return require(_dependencyMap[28], 'Switch');
    },

    get RefreshControl() {
      return require(_dependencyMap[29], 'RefreshControl');
    },

    get StatusBar() {
      return require(_dependencyMap[30], 'StatusBar');
    },

    get SwipeableFlatList() {
      return require(_dependencyMap[31], 'SwipeableFlatList');
    },

    get SwipeableListView() {
      return require(_dependencyMap[32], 'SwipeableListView');
    },

    get TabBarIOS() {
      return require(_dependencyMap[33], 'TabBarIOS');
    },

    get Text() {
      return require(_dependencyMap[34], 'Text');
    },

    get TextInput() {
      return require(_dependencyMap[35], 'TextInput');
    },

    get ToastAndroid() {
      return require(_dependencyMap[36], 'ToastAndroid');
    },

    get ToolbarAndroid() {
      return require(_dependencyMap[37], 'ToolbarAndroid');
    },

    get Touchable() {
      return require(_dependencyMap[38], 'Touchable');
    },

    get TouchableHighlight() {
      return require(_dependencyMap[39], 'TouchableHighlight');
    },

    get TouchableNativeFeedback() {
      return require(_dependencyMap[40], 'TouchableNativeFeedback');
    },

    get TouchableOpacity() {
      return require(_dependencyMap[41], 'TouchableOpacity');
    },

    get TouchableWithoutFeedback() {
      return require(_dependencyMap[42], 'TouchableWithoutFeedback');
    },

    get View() {
      return require(_dependencyMap[43], 'View');
    },

    get ViewPagerAndroid() {
      return require(_dependencyMap[44], 'ViewPagerAndroid');
    },

    get VirtualizedList() {
      return require(_dependencyMap[45], 'VirtualizedList');
    },

    get WebView() {
      return require(_dependencyMap[46], 'WebView');
    },

    get ActionSheetIOS() {
      return require(_dependencyMap[47], 'ActionSheetIOS');
    },

    get Alert() {
      return require(_dependencyMap[48], 'Alert');
    },

    get AlertIOS() {
      return require(_dependencyMap[49], 'AlertIOS');
    },

    get Animated() {
      return require(_dependencyMap[50], 'Animated');
    },

    get AppRegistry() {
      return require(_dependencyMap[51], 'AppRegistry');
    },

    get AppState() {
      return require(_dependencyMap[52], 'AppState');
    },

    get AsyncStorage() {
      return require(_dependencyMap[53], 'AsyncStorage');
    },

    get BackAndroid() {
      return require(_dependencyMap[54], 'BackAndroid');
    },

    get BackHandler() {
      return require(_dependencyMap[55], 'BackHandler');
    },

    get CameraRoll() {
      return require(_dependencyMap[56], 'CameraRoll');
    },

    get Clipboard() {
      return require(_dependencyMap[57], 'Clipboard');
    },

    get DatePickerAndroid() {
      return require(_dependencyMap[58], 'DatePickerAndroid');
    },

    get DeviceInfo() {
      return require(_dependencyMap[59], 'DeviceInfo');
    },

    get Dimensions() {
      return require(_dependencyMap[60], 'Dimensions');
    },

    get Easing() {
      return require(_dependencyMap[61], 'Easing');
    },

    get findNodeHandle() {
      return require(_dependencyMap[62], 'ReactNative').findNodeHandle;
    },

    get I18nManager() {
      return require(_dependencyMap[63], 'I18nManager');
    },

    get ImagePickerIOS() {
      return require(_dependencyMap[64], 'ImagePickerIOS');
    },

    get InteractionManager() {
      return require(_dependencyMap[65], 'InteractionManager');
    },

    get Keyboard() {
      return require(_dependencyMap[66], 'Keyboard');
    },

    get LayoutAnimation() {
      return require(_dependencyMap[67], 'LayoutAnimation');
    },

    get Linking() {
      return require(_dependencyMap[68], 'Linking');
    },

    get NativeEventEmitter() {
      return require(_dependencyMap[69], 'NativeEventEmitter');
    },

    get NetInfo() {
      return require(_dependencyMap[70], 'NetInfo');
    },

    get PanResponder() {
      return require(_dependencyMap[71], 'PanResponder');
    },

    get PermissionsAndroid() {
      return require(_dependencyMap[72], 'PermissionsAndroid');
    },

    get PixelRatio() {
      return require(_dependencyMap[73], 'PixelRatio');
    },

    get PushNotificationIOS() {
      return require(_dependencyMap[74], 'PushNotificationIOS');
    },

    get Settings() {
      return require(_dependencyMap[75], 'Settings');
    },

    get Share() {
      return require(_dependencyMap[76], 'Share');
    },

    get StatusBarIOS() {
      return require(_dependencyMap[77], 'StatusBarIOS');
    },

    get StyleSheet() {
      return require(_dependencyMap[78], 'StyleSheet');
    },

    get Systrace() {
      return require(_dependencyMap[79], 'Systrace');
    },

    get TimePickerAndroid() {
      return require(_dependencyMap[80], 'TimePickerAndroid');
    },

    get TVEventHandler() {
      return require(_dependencyMap[81], 'TVEventHandler');
    },

    get UIManager() {
      return require(_dependencyMap[82], 'UIManager');
    },

    get unstable_batchedUpdates() {
      return require(_dependencyMap[62], 'ReactNative').unstable_batchedUpdates;
    },

    get Vibration() {
      return require(_dependencyMap[83], 'Vibration');
    },

    get VibrationIOS() {
      return require(_dependencyMap[84], 'VibrationIOS');
    },

    get YellowBox() {
      return require(_dependencyMap[85], 'YellowBox');
    },

    get DeviceEventEmitter() {
      return require(_dependencyMap[86], 'RCTDeviceEventEmitter');
    },

    get NativeAppEventEmitter() {
      return require(_dependencyMap[87], 'RCTNativeAppEventEmitter');
    },

    get NativeModules() {
      return require(_dependencyMap[88], 'NativeModules');
    },

    get Platform() {
      return require(_dependencyMap[89], 'Platform');
    },

    get processColor() {
      return require(_dependencyMap[90], 'processColor');
    },

    get requireNativeComponent() {
      return require(_dependencyMap[91], 'requireNativeComponent');
    },

    get takeSnapshot() {
      return require(_dependencyMap[92], 'takeSnapshot');
    },

    get ColorPropType() {
      return require(_dependencyMap[93], 'ColorPropType');
    },

    get EdgeInsetsPropType() {
      return require(_dependencyMap[94], 'EdgeInsetsPropType');
    },

    get PointPropType() {
      return require(_dependencyMap[95], 'PointPropType');
    },

    get ViewPropTypes() {
      return require(_dependencyMap[96], 'ViewPropTypes');
    },

    get Navigator() {
      invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
    }

  };
  module.exports = ReactNative;
},12,[13,14,123,175,181,236,237,238,240,223,253,255,256,257,242,259,261,282,283,284,127,286,280,225,287,289,290,291,292,247,239,293,297,299,182,301,98,308,183,272,190,194,191,171,309,248,310,311,85,86,195,312,100,318,319,317,320,321,322,166,165,220,21,281,323,203,229,258,324,70,325,295,89,164,326,327,328,329,169,19,330,187,108,331,332,279,71,93,15,53,153,146,333,124,133,226,132],"react-native-implementation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},13,[],"fbjs/lib/invariant.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var RCTDeviceEventEmitter = require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},14,[15,71],"AccessibilityInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = babelHelpers.slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    babelHelpers.extends(module, constants);

    if (__DEV__) {
      BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        if (__DEV__) {
          invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = babelHelpers.objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return babelHelpers.extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = require(_dependencyMap[2], 'defineLazyObjectProperty');

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},15,[16,13,24],"NativeModules");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = require(_dependencyMap[0], 'MessageQueue');

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},16,[17],"BatchedBridge");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ErrorUtils = require(_dependencyMap[0], 'ErrorUtils');

  var Systrace = require(_dependencyMap[1], 'Systrace');

  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var stringifySafe = require(_dependencyMap[4], 'stringifySafe');

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    babelHelpers.createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val;

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {
              return true;
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);
          deepFreezeAndThrowOnMutationInDev(params);
        }

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods;
        }
      }
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = require(_dependencyMap[5], 'JSTimers');
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          if (!callback) {
            var errorMessage = "Callback with id " + cbID + ": " + _module + "." + _method + "() not found";

            if (_method) {
              errorMessage = "The callback " + _method + "() exists in module " + _module + ", " + 'but only one callback may be registered to a function in a native module.';
            }

            invariant(callback, errorMessage);
          }

          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, babelHelpers.toConsumableArray(args));

        if (__DEV__) {
          Systrace.endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
    return MessageQueue;
  }();

  module.exports = MessageQueue;
},17,[18,19,119,13,41,52],"MessageQueue");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},18,[],"ErrorUtils");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var _useFiber = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;
  var reactDebugToolHook = __DEV__ ? {
    onBeforeMountComponent: function onBeforeMountComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.mountComponent(" + displayName + ")");
    },
    onMountComponent: function onMountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.updateComponent(" + displayName + ")");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.unmountComponent(" + displayName + ")");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
      var ReactComponentTreeHook = require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent(displayName + "." + timerType + "()");
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
      Systrace.endEvent();
    }
  } : null;
  var Systrace = {
    installReactHook: function installReactHook(useFiber) {
      if (_enabled) {
        if (__DEV__) {
          if (useFiber) {
            global.performance = userTimingPolyfill;
          } else {
            require(_dependencyMap[2], 'ReactDebugTool').addHook(reactDebugToolHook);
          }
        }
      }

      _useFiber = useFiber;
      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (_useFiber) {
              if (enabled && global.performance === undefined) {
                global.performance = userTimingPolyfill;
              }
            } else {
              var ReactDebugTool = require(_dependencyMap[2], 'ReactDebugTool');

              if (enabled) {
                ReactDebugTool.addHook(reactDebugToolHook);
              } else {
                ReactDebugTool.removeHook(reactDebugToolHook);
              }
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    },
    attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
      relayProfiler.attachProfileHandler('*', function (name) {
        var cookie = Systrace.beginAsyncEvent(name);
        return function () {
          Systrace.endAsyncEvent(name, cookie);
        };
      });
      relayProfiler.attachAggregateHandler('*', function (name, callback) {
        Systrace.beginEvent(name);
        callback();
        Systrace.endEvent();
      });
    },
    swizzleJSON: function swizzleJSON() {
      Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
    },
    measureMethods: function measureMethods(object, objectName, methodNames) {
      if (!__DEV__) {
        return;
      }

      methodNames.forEach(function (methodName) {
        object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
      });
    },
    measure: function measure(objName, fnName, func) {
      if (!__DEV__) {
        return func;
      }

      var profileName = objName + "." + fnName;
      return function () {
        if (!_enabled) {
          return func.apply(this, arguments);
        }

        Systrace.beginEvent(profileName);
        var ret = func.apply(this, arguments);
        Systrace.endEvent();
        return ret;
      };
    }
  };

  if (__DEV__) {
    require.Systrace = Systrace;
  }

  module.exports = Systrace;
},19,[13,20,122],"Systrace");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactGlobalSharedState;
},20,[21],"ReactGlobalSharedState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;

  if (__DEV__) {
    ReactNative = require(_dependencyMap[0], 'ReactNativeRenderer-dev');
  } else {
    ReactNative = require(_dependencyMap[1], 'ReactNativeRenderer-prod');
  }

  module.exports = ReactNative;
},21,[22,121],"ReactNative");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      require(_dependencyMap[0], "InitializeCore");

      var invariant = require(_dependencyMap[1], "fbjs/lib/invariant");

      var warning = require(_dependencyMap[2], "fbjs/lib/warning");

      var emptyFunction = require(_dependencyMap[3], "fbjs/lib/emptyFunction");

      var RCTEventEmitter = require(_dependencyMap[4], "RCTEventEmitter");

      var UIManager = require(_dependencyMap[5], "UIManager");

      var React = require(_dependencyMap[6], "react");

      var ExceptionsManager = require(_dependencyMap[7], "ExceptionsManager");

      var TextInputState = require(_dependencyMap[8], "TextInputState");

      var deepDiffer = require(_dependencyMap[9], "deepDiffer");

      var flattenStyle = require(_dependencyMap[10], "flattenStyle");

      var emptyObject = require(_dependencyMap[11], "fbjs/lib/emptyObject");

      var checkPropTypes = require(_dependencyMap[12], "prop-types/checkPropTypes");

      var shallowEqual = require(_dependencyMap[13], "fbjs/lib/shallowEqual");

      var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[14], "deepFreezeAndThrowOnMutationInDev");

      var ReactErrorUtils = {
        _caughtError: null,
        _hasCaughtError: false,
        _rethrowError: null,
        _hasRethrowError: false,
        injection: {
          injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant(typeof injectedErrorUtils.invokeGuardedCallback === "function", "Injected invokeGuardedCallback() must be a function.");
            _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
          }
        },
        invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
        },
        invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

          if (ReactErrorUtils.hasCaughtError()) {
            var error = ReactErrorUtils.clearCaughtError();

            if (!ReactErrorUtils._hasRethrowError) {
              ReactErrorUtils._hasRethrowError = true;
              ReactErrorUtils._rethrowError = error;
            }
          }
        },
        rethrowCaughtError: function rethrowCaughtError() {
          return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
        },
        hasCaughtError: function hasCaughtError() {
          return ReactErrorUtils._hasCaughtError;
        },
        clearCaughtError: function clearCaughtError() {
          if (ReactErrorUtils._hasCaughtError) {
            var error = ReactErrorUtils._caughtError;
            ReactErrorUtils._caughtError = null;
            ReactErrorUtils._hasCaughtError = false;
            return error;
          } else {
            invariant(false, "clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
      };

      var _invokeGuardedCallback = function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        ReactErrorUtils._hasCaughtError = false;
        ReactErrorUtils._caughtError = null;
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          ReactErrorUtils._caughtError = error;
          ReactErrorUtils._hasCaughtError = true;
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            invariant(typeof document !== "undefined", "The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            var evt = document.createEvent("Event");
            var didError = true;
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              func.apply(context, funcArgs);
              didError = false;
            }

            var error = void 0;
            var didSetError = false;
            var isCrossOriginError = false;

            function onError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", onError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              ReactErrorUtils._hasCaughtError = true;
              ReactErrorUtils._caughtError = error;
            } else {
              ReactErrorUtils._hasCaughtError = false;
              ReactErrorUtils._caughtError = null;
            }

            window.removeEventListener("error", onError);
          };

          _invokeGuardedCallback = invokeGuardedCallbackDev;
        }
      }

      var _rethrowCaughtError = function _rethrowCaughtError() {
        if (ReactErrorUtils._hasRethrowError) {
          var error = ReactErrorUtils._rethrowError;
          ReactErrorUtils._rethrowError = null;
          ReactErrorUtils._hasRethrowError = false;
          throw error;
        }
      };

      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName);

          if (plugins[pluginIndex]) {
            continue;
          }

          invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName);
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React.");
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName);
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      var injection$1 = {
        injectComponentTree: function injectComponentTree(Injected) {
          getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
          getInstanceFromNode = Injected.getInstanceFromNode;
          getNodeFromInstance = Injected.getNodeFromInstance;
          {
            warning(getNodeFromInstance && getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      };

      function isEndish(topLevelType) {
        return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
      }

      function isMoveish(topLevelType) {
        return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
      }

      function isStartish(topLevelType) {
        return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
        };
      }

      function executeDispatch(event, simulated, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;
        invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function accumulateInto(current, next) {
        invariant(next != null, "accumulateInto(...): Accumulated items must not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
        if (event) {
          executeDispatchesInOrder(event, simulated);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
        return executeDispatchesAndRelease(e, true);
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e, false);
      };

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName
      };

      function getListener(inst, registrationName) {
        var listener;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        invariant(!listener || typeof listener === "function", "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        return listener;
      }

      function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function enqueueEvents(events) {
        if (events) {
          eventQueue = accumulateInto(eventQueue, events);
        }
      }

      function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        if (simulated) {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }

        invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.");
        ReactErrorUtils.rethrowCaughtError();
      }

      var IndeterminateComponent = 0;
      var FunctionalComponent = 1;
      var ClassComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var CallComponent = 7;
      var CallHandlerPhase = 8;
      var ReturnComponent = 9;
      var Fragment = 10;

      function getParent(inst) {
        do {
          inst = inst["return"];
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          warning(inst, "Dispatching inst must not be null");
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var didWarnForAddedNewProperty = false;
      var isProxySupported = typeof Proxy === "function";
      var EVENT_POOL_SIZE = 10;
      var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: emptyFunction.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
        return this;
      }

      babelHelpers.extends(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
          }

          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
          }
        }
      });
      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.augmentClass = function (Class, Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();
        babelHelpers.extends(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
        Class.augmentClass = Super.augmentClass;
        addEventPoolingTo(Class);
      };

      {
        if (isProxySupported) {
          SyntheticEvent = new Proxy(SyntheticEvent, {
            construct: function construct(target, args) {
              return this.apply(target, Object.create(target.prototype), args);
            },
            apply: function apply(constructor, that, args) {
              return new Proxy(constructor.apply(that, args), {
                set: function set(target, prop, value) {
                  if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                    warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information.");
                    didWarnForAddedNewProperty = true;
                  }

                  target[prop] = value;
                  return true;
                }
              });
            }
          });
        }
      }
      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          var warningCondition = false;
          warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;
        invariant(event instanceof EventConstructor, "Trying to release an event instance  into a pool of a different type.");
        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var SyntheticEvent$1 = SyntheticEvent;
      var ResponderEventInterface = {
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      };

      function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
        return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
      }

      SyntheticEvent$1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;
        invariant(identifier != null, "Touch object is missing identifier.");
        {
          warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                warning(activeRecord != null && activeRecord.touchActive, "Cannot find single active touch.");
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        invariant(next != null, "accumulate(...): Accumulated items must be not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;
      var previousActiveTouches = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          }
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          }
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          }
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          }
        },
        responderStart: {
          registrationName: "onResponderStart"
        },
        responderMove: {
          registrationName: "onResponderMove"
        },
        responderEnd: {
          registrationName: "onResponderEnd"
        },
        responderRelease: {
          registrationName: "onResponderRelease"
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest"
        },
        responderGrant: {
          registrationName: "onResponderGrant"
        },
        responderReject: {
          registrationName: "onResponderReject"
        },
        responderTerminate: {
          registrationName: "onResponderTerminate"
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === "topSelectionChange" ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === "topScroll" && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === "topSelectionChange" || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === "topTouchCancel";
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;

          if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
            ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
          }

          previousActiveTouches = numberActiveTouches;
          return extracted;
        },
        GlobalResponderHandler: null,
        GlobalInteractionHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          },
          injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
          }
        }
      };
      var customBubblingEventTypes = {};
      var customDirectEventTypes = {};
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];
          invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
          var event = SyntheticEvent$1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        },
        processEventTypes: function processEventTypes(viewConfig) {
          var bubblingEventTypes = viewConfig.bubblingEventTypes,
              directEventTypes = viewConfig.directEventTypes;
          {
            if (bubblingEventTypes != null && directEventTypes != null) {
              for (var topLevelType in directEventTypes) {
                invariant(bubblingEventTypes[topLevelType] == null, "Event cannot be both direct and bubbling: %s", topLevelType);
              }
            }
          }

          if (bubblingEventTypes != null) {
            for (var _topLevelType in bubblingEventTypes) {
              if (customBubblingEventTypes[_topLevelType] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
              }
            }
          }

          if (directEventTypes != null) {
            for (var _topLevelType2 in directEventTypes) {
              if (customDirectEventTypes[_topLevelType2] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
              }
            }
          }
        }
      };
      var instanceCache = {};
      var instanceProps = {};

      function precacheFiberNode(hostInst, tag) {
        instanceCache[tag] = hostInst;
      }

      function uncacheFiberNode(tag) {
        delete instanceCache[tag];
        delete instanceProps[tag];
      }

      function getInstanceFromTag(tag) {
        return instanceCache[tag] || null;
      }

      function getTagFromInstance(inst) {
        var tag = inst.stateNode._nativeTag;
        invariant(tag, "All native instances should have a tag.");
        return tag;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps[stateNode._nativeTag] || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps[tag] = props;
      }

      var ReactNativeComponentTree = Object.freeze({
        precacheFiberNode: precacheFiberNode,
        uncacheFiberNode: uncacheFiberNode,
        getClosestInstanceFromNode: getInstanceFromTag,
        getInstanceFromNode: getInstanceFromTag,
        getNodeFromInstance: getTagFromInstance,
        getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
        updateFiberProps: updateFiberProps
      });
      var fiberHostComponent = null;
      var restoreTarget = null;
      var restoreQueue = null;

      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);

        if (!internalInstance) {
          return;
        }

        invariant(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function", "Fiber needs to be injected to handle a fiber target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
      }

      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }

        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }

      var fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isNestingBatched = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isNestingBatched) {
          return fiberBatchedUpdates(fn, bookkeeping);
        }

        isNestingBatched = true;

        try {
          return fiberBatchedUpdates(fn, bookkeeping);
        } finally {
          isNestingBatched = false;
          restoreStateIfNeeded();
        }
      }

      var ReactGenericBatchingInjection = {
        injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
          fiberBatchedUpdates = _batchedUpdates;
        }
      };
      var injection$2 = ReactGenericBatchingInjection;

      function runEventQueueInBatch(events) {
        enqueueEvents(events);
        processEventQueue(false);
      }

      function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventQueueInBatch(events);
      }

      var INITIAL_TAG_COUNT = 1;
      var ReactNativeTagHandles = {
        tagsStartAt: INITIAL_TAG_COUNT,
        tagCount: INITIAL_TAG_COUNT,
        allocateTag: function allocateTag() {
          while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
            ReactNativeTagHandles.tagCount++;
          }

          var tag = ReactNativeTagHandles.tagCount;
          ReactNativeTagHandles.tagCount++;
          return tag;
        },
        assertRootTag: function assertRootTag(tag) {
          invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
        },
        reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
          return reactTag % 10 === 1;
        }
      };
      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        batchedUpdates(function () {
          handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < ReactNativeTagHandles.tagsStartAt) {
              {
                warning(false, "A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeEventEmitter = Object.freeze({
        getListener: getListener,
        registrationNames: registrationNameModules,
        _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches,
        handleTopLevel: handleTopLevel
      });
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            UIManager.clearJSResponder();
          }
        }
      };
      RCTEventEmitter.register(ReactNativeEventEmitter);
      injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
      injection$1.injectComponentTree(ReactNativeComponentTree);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);
      injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });

      var defaultShowDialog = function defaultShowDialog(capturedError) {
        return true;
      };

      var showDialog = defaultShowDialog;

      function logCapturedError(capturedError) {
        var logError = showDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        var suppressLogging = error && error.suppressReactErrorLogging;

        if (suppressLogging) {
          return;
        }

        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage = void 0;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }

      var injection$4 = {
        injectDialog: function injectDialog(fn) {
          invariant(showDialog === defaultShowDialog, "The custom dialog was already injected.");
          invariant(typeof fn === "function", "Injected showDialog() must be a function.");
          showDialog = fn;
        }
      };
      var hasSymbol = typeof Symbol === "function" && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 0xeacb;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === "undefined") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function _createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var TouchHistoryMath = {
        centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
          var touchBank = touchHistory.touchBank;
          var total = 0;
          var count = 0;
          var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

          if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
              total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
              count = 1;
            }
          } else {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrack = touchBank[i];

              if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;

                if (ofCurrent && isXAxis) {
                  toAdd = touchTrack.currentPageX;
                } else if (ofCurrent && !isXAxis) {
                  toAdd = touchTrack.currentPageY;
                } else if (!ofCurrent && isXAxis) {
                  toAdd = touchTrack.previousPageX;
                } else {
                  toAdd = touchTrack.previousPageY;
                }

                total += toAdd;
                count++;
              }
            }
          }

          return count > 0 ? total / count : TouchHistoryMath.noCentroid;
        },
        currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
        },
        currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
        },
        previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
        },
        previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
        },
        currentCentroidX: function currentCentroidX(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
        },
        currentCentroidY: function currentCentroidY(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
        },
        noCentroid: -1
      };
      var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;
      var ReactGlobalSharedState = Object.freeze({
        ReactCurrentOwner: ReactCurrentOwner,
        ReactDebugCurrentFrame: ReactDebugCurrentFrame
      });
      var ReactVersion = "16.2.0";

      function showDialog$1(capturedError) {
        var componentStack = capturedError.componentStack,
            error = capturedError.error;
        var errorToHandle = void 0;

        if (error instanceof Error) {
          var message = error.message,
              name = error.name;
          var summary = message ? name + ": " + message : name;
          errorToHandle = error;

          try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
          } catch (e) {}
        } else if (typeof error === "string") {
          errorToHandle = new Error(error + "\n\nThis error is located at:" + componentStack);
        } else {
          errorToHandle = new Error("Unspecified error at:" + componentStack);
        }

        ExceptionsManager.handleException(errorToHandle, false);
        return false;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var objects = {};
      var uniqueID = 1;
      var emptyObject$2 = {};

      var ReactNativePropRegistry = function () {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry);
        }

        ReactNativePropRegistry.register = function register(object) {
          var id = ++uniqueID;
          {
            Object.freeze(object);
          }
          objects[id] = object;
          return id;
        };

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            return emptyObject$2;
          }

          var object = objects[id];

          if (!object) {
            console.warn("Invalid style with id `" + id + "`. Skipping ...");
            return emptyObject$2;
          }

          return object;
        };

        return ReactNativePropRegistry;
      }();

      var emptyObject$1 = {};
      var removedKeys = null;
      var removedKeyCount = 0;

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return deepDiffer(prevProp, nextProp);
        }
      }

      function resolveObject(idOrObject) {
        if (typeof idOrObject === "number") {
          return ReactNativePropRegistry.getByID(idOrObject);
        }

        return idOrObject;
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = resolveObject(node);

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
        }

        return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              (updatePayload || (updatePayload = {}))[propKey] = nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (propKey in prevProps) {
          if (nextProps[propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[propKey]) {
              removedKeys[propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject$1, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          } else if (typeof context.isMounted === "function") {
            if (!context.isMounted()) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function throwOnStylesProp(component, props) {
        if (props.styles !== undefined) {
          var owner = component._owner || null;
          var name = component.constructor.displayName;
          var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

          if (owner && owner.constructor && owner.constructor.displayName) {
            msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
          }

          throw new Error(msg);
        }
      }

      function warnForStyleProps(props, validAttributes) {
        for (var key in validAttributes.style) {
          if (!(validAttributes[key] || props[key] === undefined)) {
            console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
          }
        }
      }

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === "string") {
          return type;
        }

        if (typeof type === "function") {
          return type.displayName || type.name;
        }

        return null;
      }

      var _require = require(_dependencyMap[15], "ReactFeatureFlags");

      var debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects;
      var enableAsyncSubtreeAPI = true;
      var enableUserTimingAPI = true;
      var enableMutatingReconciler = true;
      var enableNoopReconciler = false;
      var enablePersistentReconciler = false;
      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var Err = 64;
      var Ref = 128;
      var MOUNTING = 1;
      var MOUNTED = 2;
      var UNMOUNTED = 3;

      function isFiberMountedImpl(fiber) {
        var node = fiber;

        if (!fiber.alternate) {
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }

          while (node["return"]) {
            node = node["return"];

            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
          }
        } else {
          while (node["return"]) {
            node = node["return"];
          }
        }

        if (node.tag === HostRoot) {
          return MOUNTED;
        }

        return UNMOUNTED;
      }

      function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            warning(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function assertIsMounted(fiber) {
        invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var state = isFiberMountedImpl(fiber);
          invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component.");

          if (state === MOUNTING) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a["return"];
          var parentB = parentA ? parentA.alternate : null;

          if (!parentA || !parentB) {
            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            invariant(false, "Unable to find node on an unmounted component.");
          }

          if (a["return"] !== b["return"]) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
            }
          }

          invariant(a.alternate === b, "Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
        }

        invariant(a.tag === HostRoot, "Unable to find node on an unmounted component.");

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      var valueStack = [];
      {
        var fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warning(false, "Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            warning(false, "Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      function reset() {
        while (index > -1) {
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
      };

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case IndeterminateComponent:
          case FunctionalComponent:
          case ClassComponent:
          case HostComponent:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner);
            }

            return describeComponentFrame(name, source, ownerName);

          default:
            return "";
        }
      }

      function getStackAddendumByWorkInProgressFiber(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node["return"];
        } while (node);

        return info;
      }

      function getCurrentFiberOwnerName() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          var owner = fiber._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner);
          }
        }
        return null;
      }

      function getCurrentFiberStackAddendum() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          return getStackAddendumByWorkInProgressFiber(fiber);
        }
        return null;
      }

      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFiber.current = null;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
        ReactDebugCurrentFiber.current = fiber;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentPhase(phase) {
        ReactDebugCurrentFiber.phase = phase;
      }

      var ReactDebugCurrentFiber = {
        current: null,
        phase: null,
        resetCurrentFiber: resetCurrentFiber,
        setCurrentFiber: setCurrentFiber,
        setCurrentPhase: setCurrentPhase,
        getCurrentFiberOwnerName: getCurrentFiberOwnerName,
        getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
      };
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var isWaitingForCallback = false;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning$$1) {
        var prefix = warning$$1 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning$$1 ? " Warning: " + warning$$1 : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning$$1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning$$1);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning$$1);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case ReturnComponent:
          case Fragment:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber["return"];
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber["return"] !== null) {
          resumeTimersRecursively(fiber["return"]);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
          if (supportsUserTiming && !isWaitingForCallback) {
            isWaitingForCallback = true;
            beginMark("(Waiting for async callback...)");
          }
        }
      }

      function stopRequestCallbackTimer(didExpire) {
        if (enableUserTimingAPI) {
          if (supportsUserTiming) {
            isWaitingForCallback = false;
            var warning$$1 = didExpire ? "React was blocked by main thread" : null;
            endMark("(Waiting for async callback...)", "(Waiting for async callback...)", warning$$1);
          }
        }
      }

      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning$$1 = "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning$$1);
        }
      }

      function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning$$1 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning$$1 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy) || "Unknown";
              warning$$1 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning$$1 = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          pauseTimers();
          endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
      }

      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning$$1 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning$$1 = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
      }

      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      {
        var warnedAboutMissingGetChildContext = {};
      }
      var contextStackCursor = createCursor(emptyObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyObject;

      function getUnmaskedContext(workInProgress) {
        var hasOwnContext = isContextProvider(workInProgress);

        if (hasOwnContext) {
          return previousContext;
        }

        return contextStackCursor.current;
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;

        if (!contextTypes) {
          return emptyObject;
        }

        var instance = workInProgress.stateNode;

        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }

        var context = {};

        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        {
          var name = getComponentName(workInProgress) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }

        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return context;
      }

      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }

      function isContextConsumer(fiber) {
        return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
      }

      function isContextProvider(fiber) {
        return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
      }

      function popContextProvider(fiber) {
        if (!isContextProvider(fiber)) {
          return;
        }

        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(contextStackCursor.cursor == null, "Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }

      function processChildContext(fiber, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = fiber.type.childContextTypes;

        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentName(fiber) || "Unknown";

            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              warning(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }

        var childContext = void 0;
        {
          ReactDebugCurrentFiber.setCurrentPhase("getChildContext");
        }
        startPhaseTimer(fiber, "getChildContext");
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
          ReactDebugCurrentFiber.setCurrentPhase(null);
        }

        for (var contextKey in childContext) {
          invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
        }

        {
          var name = getComponentName(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }
        return babelHelpers.extends({}, parentContext, childContext);
      }

      function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) {
          return false;
        }

        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }

      function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }

      function resetContext() {
        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = false;
      }

      function findCurrentUnmaskedContext(fiber) {
        invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent, "Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;

        while (node.tag !== HostRoot) {
          if (isContextProvider(node)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }

          var parent = node["return"];
          invariant(parent, "Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
          node = parent;
        }

        return node.stateNode.context;
      }

      var NoWork = 0;
      var Sync = 1;
      var Never = 2147483647;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = 2;

      function msToExpirationTime(ms) {
        return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
      }

      function expirationTimeToMs(expirationTime) {
        return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var NoContext = 0;
      var AsyncUpdates = 1;
      {
        var hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      {
        var debugCounter = 1;
      }

      function FiberNode(tag, pendingProps, key, internalContextTag) {
        this.tag = tag;
        this.key = key;
        this.type = null;
        this.stateNode = null;
        this["return"] = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.internalContextTag = internalContextTag;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.alternate = null;
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugIsCurrentlyTiming = false;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, internalContextTag) {
        return new FiberNode(tag, pendingProps, key, internalContextTag);
      };

      function shouldConstruct(Component) {
        return !!(Component.prototype && Component.prototype.isReactComponent);
      }

      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.internalContextTag);
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
        }

        workInProgress.expirationTime = expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        return workInProgress;
      }

      function createHostRootFiber() {
        var fiber = createFiber(HostRoot, null, NoContext);
        return fiber;
      }

      function createFiberFromElement(element, internalContextTag, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var fiber = void 0;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;

        if (typeof type === "function") {
          fiber = shouldConstruct(type) ? createFiber(ClassComponent, pendingProps, key, internalContextTag) : createFiber(IndeterminateComponent, pendingProps, key, internalContextTag);
          fiber.type = type;
        } else if (typeof type === "string") {
          fiber = createFiber(HostComponent, pendingProps, key, internalContextTag);
          fiber.type = type;
        } else if (typeof type === "object" && type !== null && typeof type.tag === "number") {
          fiber = type;
          fiber.pendingProps = pendingProps;
        } else {
          var info = "";
          {
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
            }

            var ownerName = owner ? getComponentName(owner) : null;

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
          }
          invariant(false, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", type == null ? type : typeof type, info);
        }

        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, internalContextTag, expirationTime) {
        var fiber = createFiber(HostText, content, null, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        fiber.type = "DELETED";
        return fiber;
      }

      function createFiberFromCall(call, internalContextTag, expirationTime) {
        var fiber = createFiber(CallComponent, call, call.key, internalContextTag);
        fiber.type = call.handler;
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
        var fiber = createFiber(ReturnComponent, null, null, internalContextTag);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromPortal(portal, internalContextTag, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, internalContextTag);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function createFiberRoot(containerInfo, hydrate) {
        var uninitializedFiber = createHostRootFiber();
        var root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          remainingExpirationTime: NoWork,
          isReadyForCommit: false,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          firstBatch: null,
          nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root;
        return root;
      }

      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;

      function catchErrors(fn) {
        return function (arg) {
          try {
            return fn(arg);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warning(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      }

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            warning(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = catchErrors(function (root) {
            return hook.onCommitFiberRoot(rendererID, root);
          });
          onCommitFiberUnmount = catchErrors(function (fiber) {
            return hook.onCommitFiberUnmount(rendererID, fiber);
          });
        } catch (err) {
          {
            warning(false, "React DevTools encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      {
        var didWarnUpdateInsideUpdate = false;
      }

      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          expirationTime: NoWork,
          first: null,
          last: null,
          callbackList: null,
          hasForceUpdate: false,
          isInitialized: false
        };
        {
          queue.isProcessing = false;
        }
        return queue;
      }

      function insertUpdateIntoQueue(queue, update) {
        if (queue.last === null) {
          queue.first = queue.last = update;
        } else {
          queue.last.next = update;
          queue.last = update;
        }

        if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
          queue.expirationTime = update.expirationTime;
        }
      }

      function insertUpdateIntoFiber(fiber, update) {
        var alternateFiber = fiber.alternate;
        var queue1 = fiber.updateQueue;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(null);
        }

        var queue2 = void 0;

        if (alternateFiber !== null) {
          queue2 = alternateFiber.updateQueue;

          if (queue2 === null) {
            queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
          }
        } else {
          queue2 = null;
        }

        queue2 = queue2 !== queue1 ? queue2 : null;
        {
          if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
            warning(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }

        if (queue2 === null) {
          insertUpdateIntoQueue(queue1, update);
          return;
        }

        if (queue1.last === null || queue2.last === null) {
          insertUpdateIntoQueue(queue1, update);
          insertUpdateIntoQueue(queue2, update);
          return;
        }

        insertUpdateIntoQueue(queue1, update);
        queue2.last = update;
      }

      function getUpdateExpirationTime(fiber) {
        if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
          return NoWork;
        }

        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return NoWork;
        }

        return updateQueue.expirationTime;
      }

      function getStateFromUpdate(update, instance, prevState, props) {
        var partialState = update.partialState;

        if (typeof partialState === "function") {
          var updateFn = partialState;

          if (debugRenderPhaseSideEffects) {
            updateFn.call(instance, prevState, props);
          }

          return updateFn.call(instance, prevState, props);
        } else {
          return partialState;
        }
      }

      function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
        if (current !== null && current.updateQueue === queue) {
          var currentQueue = queue;
          queue = workInProgress.updateQueue = {
            baseState: currentQueue.baseState,
            expirationTime: currentQueue.expirationTime,
            first: currentQueue.first,
            last: currentQueue.last,
            isInitialized: currentQueue.isInitialized,
            callbackList: null,
            hasForceUpdate: false
          };
        }

        {
          queue.isProcessing = true;
        }
        queue.expirationTime = NoWork;
        var state = void 0;

        if (queue.isInitialized) {
          state = queue.baseState;
        } else {
          state = queue.baseState = workInProgress.memoizedState;
          queue.isInitialized = true;
        }

        var dontMutatePrevState = true;
        var update = queue.first;
        var didSkip = false;

        while (update !== null) {
          var updateExpirationTime = update.expirationTime;

          if (updateExpirationTime > renderExpirationTime) {
            var remainingExpirationTime = queue.expirationTime;

            if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
              queue.expirationTime = updateExpirationTime;
            }

            if (!didSkip) {
              didSkip = true;
              queue.baseState = state;
            }

            update = update.next;
            continue;
          }

          if (!didSkip) {
            queue.first = update.next;

            if (queue.first === null) {
              queue.last = null;
            }
          }

          var _partialState = void 0;

          if (update.isReplace) {
            state = getStateFromUpdate(update, instance, state, props);
            dontMutatePrevState = true;
          } else {
            _partialState = getStateFromUpdate(update, instance, state, props);

            if (_partialState) {
              if (dontMutatePrevState) {
                state = babelHelpers.extends({}, state, _partialState);
              } else {
                state = babelHelpers.extends(state, _partialState);
              }

              dontMutatePrevState = false;
            }
          }

          if (update.isForced) {
            queue.hasForceUpdate = true;
          }

          if (update.callback !== null) {
            var _callbackList = queue.callbackList;

            if (_callbackList === null) {
              _callbackList = queue.callbackList = [];
            }

            _callbackList.push(update);
          }

          update = update.next;
        }

        if (queue.callbackList !== null) {
          workInProgress.effectTag |= Callback;
        } else if (queue.first === null && !queue.hasForceUpdate) {
          workInProgress.updateQueue = null;
        }

        if (!didSkip) {
          didSkip = true;
          queue.baseState = state;
        }

        {
          queue.isProcessing = false;
        }
        return state;
      }

      function commitCallbacks(queue, context) {
        var callbackList = queue.callbackList;

        if (callbackList === null) {
          return;
        }

        queue.callbackList = null;

        for (var i = 0; i < callbackList.length; i++) {
          var update = callbackList[i];
          var _callback = update.callback;
          update.callback = null;
          invariant(typeof _callback === "function", "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback);

          _callback.call(context);
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      {
        var didWarnAboutStateAssignmentForComponent = {};

        var warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          warning(callback === null || typeof callback === "function", "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            invariant(false, "_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      var ReactFiberClassComponent = function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
        var updater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "setState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: partialState,
              callback: callback,
              isReplace: false,
              isForced: false,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: state,
              callback: callback,
              isReplace: true,
              isForced: false,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: null,
              callback: callback,
              isReplace: false,
              isForced: true,
              nextCallback: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
          if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
            return true;
          }

          var instance = workInProgress.stateNode;
          var type = workInProgress.type;

          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            stopPhaseTimer();

            if (debugRenderPhaseSideEffects) {
              instance.shouldComponentUpdate(newProps, newState, newContext);
            }

            {
              warning(shouldUpdate !== undefined, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(workInProgress) || "Unknown");
            }
            return shouldUpdate;
          }

          if (type.prototype && type.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress) {
          var instance = workInProgress.stateNode;
          var type = workInProgress.type;
          {
            var name = getComponentName(workInProgress);
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (type.prototype && typeof type.prototype.render === "function") {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
              } else {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
              }
            }

            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            warning(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            warning(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
            var noInstancePropTypes = !instance.propTypes;
            warning(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
            var noInstanceContextTypes = !instance.contextTypes;
            warning(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            warning(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);

            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warning(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(workInProgress) || "A pure component");
            }

            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            warning(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            warning(noComponentDidReceiveProps, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            warning(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
            warning(instance.props === undefined || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
            var noInstanceDefaultProps = !instance.defaultProps;
            warning(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          var state = instance.state;

          if (state && (typeof state !== "object" || isArray(state))) {
            warning(false, "%s.state: must be set to an object or null", getComponentName(workInProgress));
          }

          if (typeof instance.getChildContext === "function") {
            warning(typeof workInProgress.type.childContextTypes === "object", "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName(workInProgress));
          }
        }

        function resetInputPointers(workInProgress, instance) {
          instance.props = workInProgress.memoizedProps;
          instance.state = workInProgress.memoizedState;
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = updater;
          workInProgress.stateNode = instance;
          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, props) {
          var ctor = workInProgress.type;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var needsContext = isContextConsumer(workInProgress);
          var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
          var instance = new ctor(props, context);
          adoptClassInstance(workInProgress, instance);

          if (needsContext) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          startPhaseTimer(workInProgress, "componentWillMount");
          var oldState = instance.state;
          instance.componentWillMount();
          stopPhaseTimer();

          if (debugRenderPhaseSideEffects) {
            instance.componentWillMount();
          }

          if (oldState !== instance.state) {
            {
              warning(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress));
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
          startPhaseTimer(workInProgress, "componentWillReceiveProps");
          var oldState = instance.state;
          instance.componentWillReceiveProps(newProps, newContext);
          stopPhaseTimer();

          if (debugRenderPhaseSideEffects) {
            instance.componentWillReceiveProps(newProps, newContext);
          }

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                warning(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
                didWarnAboutStateAssignmentForComponent[componentName] = true;
              }
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function mountClassInstance(workInProgress, renderExpirationTime) {
          var current = workInProgress.alternate;
          {
            checkClassInstance(workInProgress);
          }
          var instance = workInProgress.stateNode;
          var state = instance.state || null;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          instance.props = props;
          instance.state = workInProgress.memoizedState = state;
          instance.refs = emptyObject;
          instance.context = getMaskedContext(workInProgress, unmaskedContext);

          if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
            workInProgress.internalContextTag |= AsyncUpdates;
          }

          if (typeof instance.componentWillMount === "function") {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null) {
              instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        }

        function updateClassInstance(current, workInProgress, renderExpirationTime) {
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if (typeof instance.componentWillReceiveProps === "function" && (oldProps !== newProps || oldContext !== newContext)) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          } else {
            newState = oldState;
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if (typeof instance.componentWillUpdate === "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");
              instance.componentWillUpdate(newProps, newState, newContext);
              stopPhaseTimer();

              if (debugRenderPhaseSideEffects) {
                instance.componentWillUpdate(newProps, newState, newContext);
              }
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        return {
          adoptClassInstance: adoptClassInstance,
          constructClassInstance: constructClassInstance,
          mountClassInstance: mountClassInstance,
          updateClassInstance: updateClassInstance
        };
      };

      var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
      {
        var didWarnAboutMaps = false;
        var ownerHasKeyUseWarning = {};
        var ownerHasFunctionTypeWarning = {};

        var warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          invariant(typeof child._store === "object", "React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning(false, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1());
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function") {
          if (element._owner) {
            var owner = element._owner;
            var inst = void 0;

            if (owner) {
              var ownerFiber = owner;
              invariant(ownerFiber.tag === ClassComponent, "Stateless function components cannot have refs.");
              inst = ownerFiber.stateNode;
            }

            invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            invariant(typeof mixedRef === "string", "Expected ref to be a function or a string.");
            invariant(element._owner, "Element ref was specified as a string (%s) but no owner was " + "set. You may have multiple copies of React loaded. " + "(details: https://fb.me/react-refs-must-have-owner).", mixedRef);
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || "");
          }
          invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
        }
      }

      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + (getCurrentFiberStackAddendum$1() || "");

        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$1() || "");
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null && current.type === element.type) {
            var existing = useFiber(current, element.props, expirationTime);
            existing.ref = coerceRef(current, element);
            existing["return"] = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
            created.ref = coerceRef(current, element);
            created["return"] = returnFiber;
            return created;
          }
        }

        function updateCall(returnFiber, current, call, expirationTime) {
          if (current === null || current.tag !== CallComponent) {
            var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, call, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateReturn(returnFiber, current, returnNode, expirationTime) {
          if (current === null || current.tag !== ReturnComponent) {
            var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
            created.type = returnNode.value;
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, null, expirationTime);
            existing.type = returnNode.value;
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || [], expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.internalContextTag, expirationTime);
            created["return"] = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);

                    _created["return"] = returnFiber;
                    return _created;
                  } else {
                    var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);

                    _created2.ref = coerceRef(null, newChild);
                    _created2["return"] = returnFiber;
                    return _created2;
                  }
                }

              case REACT_CALL_TYPE:
                {
                  var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);

                  _created3["return"] = returnFiber;
                  return _created3;
                }

              case REACT_RETURN_TYPE:
                {
                  var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);

                  _created4.type = newChild.value;
                  _created4["return"] = returnFiber;
                  return _created4;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);

                  _created5["return"] = returnFiber;
                  return _created5;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);

              _created6["return"] = returnFiber;
              return _created6;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_CALL_TYPE:
                {
                  if (newChild.key === key) {
                    return updateCall(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_RETURN_TYPE:
                {
                  if (key === null) {
                    return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_CALL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
                }

              case REACT_RETURN_TYPE:
                {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;

                  return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber5 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_CALL_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                warning(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
                break;

              default:
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (!_newFiber) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          invariant(typeof iteratorFn === "function", "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          {
            if (typeof newChildrenIterable.entries === "function") {
              var possibleMap = newChildrenIterable;

              if (possibleMap.entries === iteratorFn) {
                warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1());
                didWarnAboutMaps = true;
              }
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          invariant(newChildren != null, "An iterable object provided no iterator.");
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (!oldFiber) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(child, element);
                existing["return"] = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
            created["return"] = returnFiber;
            return created;
          } else {
            var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);

            _created7.ref = coerceRef(currentFirstChild, element);
            _created7["return"] = returnFiber;
            return _created7;
          }
        }

        function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
          var key = call.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === CallComponent) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, call, expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
          var child = currentFirstChild;

          if (child !== null) {
            if (child.tag === ReturnComponent) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, null, expirationTime);
              existing.type = returnNode.value;
              existing["return"] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
            }
          }

          var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
          created.type = returnNode.value;
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          if (typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_CALL_TYPE:
                return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_RETURN_TYPE:
                return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined") {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionalComponent:
                {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", Component.displayName || Component.name || "Component");
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        invariant(current === null || workInProgress.child === current.child, "Resuming work not yet implemented.");

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild["return"] = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      {
        var warnedAboutStatelessRefs = {};
      }

      var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
        var shouldSetTextContent = config.shouldSetTextContent,
            useSyncScheduling = config.useSyncScheduling,
            shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
        var pushHostContext = hostContext.pushHostContext,
            pushHostContainer = hostContext.pushHostContainer;
        var enterHydrationState = hydrationContext.enterHydrationState,
            resetHydrationState = hydrationContext.resetHydrationState,
            tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

        var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
            adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
            constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
            mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
            updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

        function reconcileChildren(current, workInProgress, nextChildren) {
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
        }

        function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
          if (current === null) {
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          } else {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
          }
        }

        function updateFragment(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (ref !== null && (!current || current.ref !== ref)) {
            workInProgress.effectTag |= Ref;
          }
        }

        function updateFunctionalComponent(current, workInProgress) {
          var fn = workInProgress.type;
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else {
            if (workInProgress.memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var nextChildren;
          {
            ReactCurrentOwner.current = workInProgress;
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = fn(nextProps, context);
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, renderExpirationTime) {
          var hasContext = pushContextProvider(workInProgress);
          var shouldUpdate = void 0;

          if (current === null) {
            if (!workInProgress.stateNode) {
              constructClassInstance(workInProgress, workInProgress.pendingProps);
              mountClassInstance(workInProgress, renderExpirationTime);
              shouldUpdate = true;
            } else {
              invariant(false, "Resuming work not yet implemented.");
            }
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
          }

          return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
        }

        function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
          markRef(current, workInProgress);

          if (!shouldUpdate) {
            if (hasContext) {
              invalidateContextProvider(workInProgress, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var instance = workInProgress.stateNode;
          ReactCurrentOwner.current = workInProgress;
          var nextChildren = void 0;
          {
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = instance.render();

            if (debugRenderPhaseSideEffects) {
              instance.render();
            }

            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeState(workInProgress, instance.state);
          memoizeProps(workInProgress, instance.props);

          if (hasContext) {
            invalidateContextProvider(workInProgress, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderExpirationTime) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            var prevState = workInProgress.memoizedState;
            var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);

            if (prevState === state) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }

            var element = state.element;
            var root = workInProgress.stateNode;

            if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
              workInProgress.effectTag |= Placement;
              workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
            } else {
              resetHydrationState();
              reconcileChildren(current, workInProgress, element);
            }

            memoizeState(workInProgress, state);
            return workInProgress.child;
          }

          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        function updateHostComponent(current, workInProgress, renderExpirationTime) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var memoizedProps = workInProgress.memoizedProps;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;

          if (hasContextChanged()) {} else if (memoizedProps === nextProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps && shouldSetTextContent(type, prevProps)) {
            workInProgress.effectTag |= ContentReset;
          }

          markRef(current, workInProgress);

          if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
            workInProgress.expirationTime = Never;
            return null;
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var nextProps = workInProgress.pendingProps;
          memoizeProps(workInProgress, nextProps);
          return null;
        }

        function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
          invariant(current === null, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
          var fn = workInProgress.type;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var value;
          {
            if (fn.prototype && typeof fn.prototype.render === "function") {
              var componentName = getComponentName(workInProgress);
              warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            }

            ReactCurrentOwner.current = workInProgress;
            value = fn(props, context);
          }
          workInProgress.effectTag |= PerformedWork;

          if (typeof value === "object" && value !== null && typeof value.render === "function") {
            workInProgress.tag = ClassComponent;
            var hasContext = pushContextProvider(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, renderExpirationTime);
            return finishClassComponent(current, workInProgress, true, hasContext);
          } else {
            workInProgress.tag = FunctionalComponent;
            {
              var Component = workInProgress.type;

              if (Component) {
                warning(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component");
              }

              if (workInProgress.ref !== null) {
                var info = "";
                var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }

                var warningKey = ownerName || workInProgress._debugID || "";
                var debugSource = workInProgress._debugSource;

                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }

                if (!warnedAboutStatelessRefs[warningKey]) {
                  warnedAboutStatelessRefs[warningKey] = true;
                  warning(false, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                }
              }
            }
            reconcileChildren(current, workInProgress, value);
            memoizeProps(workInProgress, props);
            return workInProgress.child;
          }
        }

        function updateCallComponent(current, workInProgress, renderExpirationTime) {
          var nextCall = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextCall) {
            nextCall = workInProgress.memoizedProps;
          }

          var nextChildren = nextCall.children;

          if (current === null) {
            workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          } else {
            workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          }

          memoizeProps(workInProgress, nextCall);
          return workInProgress.stateNode;
        }

        function updatePortalComponent(current, workInProgress, renderExpirationTime) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          if (current === null) {
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            memoizeProps(workInProgress, nextChildren);
          } else {
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
          }

          return workInProgress.child;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress) {
          cancelWorkTimer(workInProgress);
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function bailoutOnLowPriority(current, workInProgress) {
          cancelWorkTimer(workInProgress);

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;
          }

          return null;
        }

        function memoizeProps(workInProgress, nextProps) {
          workInProgress.memoizedProps = nextProps;
        }

        function memoizeState(workInProgress, nextState) {
          workInProgress.memoizedState = nextState;
        }

        function beginWork(current, workInProgress, renderExpirationTime) {
          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

            case FunctionalComponent:
              return updateFunctionalComponent(current, workInProgress);

            case ClassComponent:
              return updateClassComponent(current, workInProgress, renderExpirationTime);

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderExpirationTime);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderExpirationTime);

            case HostText:
              return updateHostText(current, workInProgress);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;

            case CallComponent:
              return updateCallComponent(current, workInProgress, renderExpirationTime);

            case ReturnComponent:
              return null;

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderExpirationTime);

            case Fragment:
              return updateFragment(current, workInProgress);

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        function beginFailedWork(current, workInProgress, renderExpirationTime) {
          switch (workInProgress.tag) {
            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            default:
              invariant(false, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue.");
          }

          workInProgress.effectTag |= Err;

          if (current === null) {
            workInProgress.child = null;
          } else if (workInProgress.child !== current.child) {
            workInProgress.child = current.child;
          }

          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          var nextChildren = null;
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

          if (workInProgress.tag === ClassComponent) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props;
            workInProgress.memoizedState = instance.state;
          }

          return workInProgress.child;
        }

        return {
          beginWork: beginWork,
          beginFailedWork: beginFailedWork
        };
      };

      var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
        var createInstance = config.createInstance,
            createTextInstance = config.createTextInstance,
            appendInitialChild = config.appendInitialChild,
            finalizeInitialChildren = config.finalizeInitialChildren,
            prepareUpdate = config.prepareUpdate,
            mutation = config.mutation,
            persistence = config.persistence;
        var getRootHostContainer = hostContext.getRootHostContainer,
            popHostContext = hostContext.popHostContext,
            getHostContext = hostContext.getHostContext,
            popHostContainer = hostContext.popHostContainer;
        var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
            popHydrationState = hydrationContext.popHydrationState;

        function markUpdate(workInProgress) {
          workInProgress.effectTag |= Update;
        }

        function markRef(workInProgress) {
          workInProgress.effectTag |= Ref;
        }

        function appendAllReturns(returns, workInProgress) {
          var node = workInProgress.stateNode;

          if (node) {
            node["return"] = workInProgress;
          }

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
              invariant(false, "A call cannot have host component children.");
            } else if (node.tag === ReturnComponent) {
              returns.push(node.type);
            } else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
          var call = workInProgress.memoizedProps;
          invariant(call, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue.");
          workInProgress.tag = CallHandlerPhase;
          var returns = [];
          appendAllReturns(returns, workInProgress);
          var fn = call.handler;
          var props = call.props;
          var nextChildren = fn(props, returns);
          var currentFirstChild = current !== null ? current.child : null;
          workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
          return workInProgress.child;
        }

        function appendAllChildren(parent, workInProgress) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        var updateHostContainer = void 0;
        var updateHostComponent = void 0;
        var updateHostText = void 0;

        if (mutation) {
          if (enableMutatingReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
              workInProgress.updateQueue = updatePayload;

              if (updatePayload) {
                markUpdate(workInProgress);
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Mutating reconciler is disabled.");
          }
        } else if (persistence) {
          if (enablePersistentReconciler) {
            var cloneInstance = persistence.cloneInstance,
                createContainerChildSet = persistence.createContainerChildSet,
                appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
                finalizeContainerChildren = persistence.finalizeContainerChildren;

            var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
              var node = workInProgress.child;

              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendChildToContainerChildSet(containerChildSet, node.stateNode);
                } else if (node.tag === HostPortal) {} else if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node["return"] === null || node["return"] === workInProgress) {
                    return;
                  }

                  node = node["return"];
                }

                node.sibling["return"] = node["return"];
                node = node.sibling;
              }
            };

            updateHostContainer = function updateHostContainer(workInProgress) {
              var portalOrRoot = workInProgress.stateNode;
              var childrenUnchanged = workInProgress.firstEffect === null;

              if (childrenUnchanged) {} else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);

                if (finalizeContainerChildren(container, newChildSet)) {
                  markUpdate(workInProgress);
                }

                portalOrRoot.pendingChildren = newChildSet;
                appendAllChildrenToContainer(newChildSet, workInProgress);
                markUpdate(workInProgress);
              }
            };

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
              var childrenUnchanged = workInProgress.firstEffect === null;
              var currentInstance = current.stateNode;

              if (childrenUnchanged && updatePayload === null) {
                workInProgress.stateNode = currentInstance;
              } else {
                var recyclableInstance = workInProgress.stateNode;
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  markUpdate(workInProgress);
                } else {
                  appendAllChildren(newInstance, workInProgress);
                }
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Persistent reconciler is disabled.");
          }
        } else {
          if (enableNoopReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {};

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {};
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        function completeWork(current, workInProgress, renderExpirationTime) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case FunctionalComponent:
              return null;

            case ClassComponent:
              {
                popContextProvider(workInProgress);
                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement;
                }

                updateHostContainer(workInProgress);
                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _currentHostContext = getHostContext();

                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                    appendAllChildren(_instance, workInProgress);

                    if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = _instance;
                  }

                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  updateHostText(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext2 = getHostContext();

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }

                return null;
              }

            case CallComponent:
              return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;
              return null;

            case ReturnComponent:
              return null;

            case Fragment:
              return null;

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);
              return null;

            case IndeterminateComponent:
              invariant(false, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          completeWork: completeWork
        };
      };

      var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
      var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;

      var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
        var getPublicInstance = config.getPublicInstance,
            mutation = config.mutation,
            persistence = config.persistence;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          startPhaseTimer(current, "componentWillUnmount");
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError$1()) {
              var unmountError = clearCaughtError$1();
              captureError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            {
              invokeGuardedCallback$2(null, ref, null, null);

              if (hasCaughtError$1()) {
                var refError = clearCaughtError$1();
                captureError(current, refError);
              }
            }
          }
        }

        function commitLifeCycles(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var instance = finishedWork.stateNode;

                if (finishedWork.effectTag & Update) {
                  if (current === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidMount();
                    stopPhaseTimer();
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    instance.componentDidUpdate(prevProps, prevState);
                    stopPhaseTimer();
                  }
                }

                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  commitCallbacks(updateQueue, instance);
                }

                return;
              }

            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;

                  commitCallbacks(_updateQueue, _instance);
                }

                return;
              }

            case HostComponent:
              {
                var _instance2 = finishedWork.stateNode;

                if (current === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props, finishedWork);
                }

                return;
              }

            case HostText:
              {
                return;
              }

            case HostPortal:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var instance = finishedWork.stateNode;

            switch (finishedWork.tag) {
              case HostComponent:
                ref(getPublicInstance(instance));
                break;

              default:
                ref(instance);
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            currentRef(null);
          }
        }

        function commitUnmount(current) {
          if (typeof onCommitUnmount === "function") {
            onCommitUnmount(current);
          }

          switch (current.tag) {
            case ClassComponent:
              {
                safelyDetachRef(current);
                var instance = current.stateNode;

                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, instance);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case CallComponent:
              {
                commitNestedUnmounts(current.stateNode);
                return;
              }

            case HostPortal:
              {
                if (enableMutatingReconciler && mutation) {
                  unmountHostComponents(current);
                } else if (enablePersistentReconciler && persistence) {
                  emptyPortalContainer(current);
                }

                return;
              }
          }
        }

        function commitNestedUnmounts(root) {
          var node = root;

          while (true) {
            commitUnmount(node);

            if (node.child !== null && (!mutation || node.tag !== HostPortal)) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === root) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function detachFiber(current) {
          current["return"] = null;
          current.child = null;

          if (current.alternate) {
            current.alternate.child = null;
            current.alternate["return"] = null;
          }
        }

        if (!mutation) {
          var commitContainer = void 0;

          if (persistence) {
            var replaceContainerChildren = persistence.replaceContainerChildren,
                createContainerChildSet = persistence.createContainerChildSet;

            var emptyPortalContainer = function emptyPortalContainer(current) {
              var portal = current.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            };

            commitContainer = function commitContainer(finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    return;
                  }

                case HostText:
                  {
                    return;
                  }

                case HostRoot:
                case HostPortal:
                  {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                  }

                default:
                  {
                    invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                  }
              }
            };
          } else {
            commitContainer = function commitContainer(finishedWork) {};
          }

          if (enablePersistentReconciler || enableNoopReconciler) {
            return {
              commitResetTextContent: function commitResetTextContent(finishedWork) {},
              commitPlacement: function commitPlacement(finishedWork) {},
              commitDeletion: function commitDeletion(current) {
                commitNestedUnmounts(current);
                detachFiber(current);
              },
              commitWork: function commitWork(current, finishedWork) {
                commitContainer(finishedWork);
              },
              commitLifeCycles: commitLifeCycles,
              commitAttachRef: commitAttachRef,
              commitDetachRef: commitDetachRef
            };
          } else if (persistence) {
            invariant(false, "Persistent reconciler is disabled.");
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        var commitMount = mutation.commitMount,
            commitUpdate = mutation.commitUpdate,
            resetTextContent = mutation.resetTextContent,
            commitTextUpdate = mutation.commitTextUpdate,
            appendChild = mutation.appendChild,
            appendChildToContainer = mutation.appendChildToContainer,
            insertBefore = mutation.insertBefore,
            insertInContainerBefore = mutation.insertInContainerBefore,
            removeChild = mutation.removeChild,
            removeChildFromContainer = mutation.removeChildFromContainer;

        function getHostParentFiber(fiber) {
          var parent = fiber["return"];

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          var node = fiber;

          siblings: while (true) {
            while (node.sibling === null) {
              if (node["return"] === null || isHostParent(node["return"])) {
                return null;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText) {
              if (node.effectTag & Placement) {
                continue siblings;
              }

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child["return"] = node;
                node = node.child;
              }
            }

            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent = void 0;
          var isContainer = void 0;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentFiber.stateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            default:
              invariant(false, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
          }

          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork);
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, node.stateNode, before);
                } else {
                  insertBefore(parent, node.stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, node.stateNode);
                } else {
                  appendChild(parent, node.stateNode);
                }
              }
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === finishedWork) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function unmountHostComponents(current) {
          var node = current;
          var currentParentIsValid = false;
          var currentParent = void 0;
          var currentParentIsContainer = void 0;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node["return"];

              findParent: while (true) {
                invariant(parent !== null, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parent.stateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent["return"];
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(node);

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              currentParent = node.stateNode.containerInfo;

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(node);

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === current) {
                return;
              }

              node = node["return"];

              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function commitDeletion(current) {
          unmountHostComponents(current);
          detachFiber(current);
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var instance = finishedWork.stateNode;

                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }

                return;
              }

            case HostText:
              {
                invariant(finishedWork.stateNode !== null, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        if (enableMutatingReconciler) {
          return {
            commitResetTextContent: commitResetTextContent,
            commitPlacement: commitPlacement,
            commitDeletion: commitDeletion,
            commitWork: commitWork,
            commitLifeCycles: commitLifeCycles,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else {
          invariant(false, "Mutating reconciler is disabled.");
        }
      };

      var NO_CONTEXT = {};

      var ReactFiberHostContext = function ReactFiberHostContext(config) {
        var getChildHostContext = config.getChildHostContext,
            getRootHostContext = config.getRootHostContext;
        var contextStackCursor = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);

          if (context === nextContext) {
            return;
          }

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextContext, fiber);
        }

        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        function resetHostContainer() {
          contextStackCursor.current = NO_CONTEXT;
          rootInstanceStackCursor.current = NO_CONTEXT;
        }

        return {
          getHostContext: getHostContext,
          getRootHostContainer: getRootHostContainer,
          popHostContainer: popHostContainer,
          popHostContext: popHostContext,
          pushHostContainer: pushHostContainer,
          pushHostContext: pushHostContext,
          resetHostContainer: resetHostContainer
        };
      };

      var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
        var shouldSetTextContent = config.shouldSetTextContent,
            hydration = config.hydration;

        if (!hydration) {
          return {
            enterHydrationState: function enterHydrationState() {
              return false;
            },
            resetHydrationState: function resetHydrationState() {},
            tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
            prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
              invariant(false, "Expected prepareToHydrateHostInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
              invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            popHydrationState: function popHydrationState(fiber) {
              return false;
            }
          };
        }

        var canHydrateInstance = hydration.canHydrateInstance,
            canHydrateTextInstance = hydration.canHydrateTextInstance,
            getNextHydratableSibling = hydration.getNextHydratableSibling,
            getFirstHydratableChild = hydration.getFirstHydratableChild,
            hydrateInstance = hydration.hydrateInstance,
            hydrateTextInstance = hydration.hydrateTextInstance,
            didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
            didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
            didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
            didNotHydrateInstance = hydration.didNotHydrateInstance,
            didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
            didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
            didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
            didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete["return"] = returnFiber;
          childToDelete.effectTag = Deletion;

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag |= Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type, props);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(nextInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }

            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function popToNextHostParent(fiber) {
          var parent = fiber["return"];

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
            parent = parent["return"];
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }

          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type;

          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        return {
          enterHydrationState: enterHydrationState,
          resetHydrationState: resetHydrationState,
          tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
          prepareToHydrateHostInstance: prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
          popHydrationState: popHydrationState
        };
      };

      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError = ReactErrorUtils.hasCaughtError;
      var clearCaughtError = ReactErrorUtils.clearCaughtError;
      {
        var didWarnAboutStateTransition = false;
        var didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};

        var warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
          var componentName = getComponentName(fiber) || "ReactClass";

          if (didWarnStateUpdateForUnmountedComponent[componentName]) {
            return;
          }

          warning(false, "Can only update a mounted or mounting " + "component. This usually means you called setState, replaceState, " + "or forceUpdate on an unmounted component. This is a no-op.\n\nPlease " + "check the code for the %s component.", componentName);
          didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };

        var warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
          switch (ReactDebugCurrentFiber.phase) {
            case "getChildContext":
              if (didWarnSetStateChildContext) {
                return;
              }

              warning(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnSetStateChildContext = true;
              break;

            case "render":
              if (didWarnAboutStateTransition) {
                return;
              }

              warning(false, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
              didWarnAboutStateTransition = true;
              break;
          }
        };
      }

      var ReactFiberScheduler = function ReactFiberScheduler(config) {
        var hostContext = ReactFiberHostContext(config);
        var hydrationContext = ReactFiberHydrationContext(config);
        var popHostContainer = hostContext.popHostContainer,
            popHostContext = hostContext.popHostContext,
            resetHostContainer = hostContext.resetHostContainer;

        var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
            beginWork = _ReactFiberBeginWork.beginWork,
            beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

        var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
            completeWork = _ReactFiberCompleteWo.completeWork;

        var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
            commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
            commitPlacement = _ReactFiberCommitWork.commitPlacement,
            commitDeletion = _ReactFiberCommitWork.commitDeletion,
            commitWork = _ReactFiberCommitWork.commitWork,
            commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
            commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
            commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

        var now = config.now,
            scheduleDeferredCallback = config.scheduleDeferredCallback,
            cancelDeferredCallback = config.cancelDeferredCallback,
            useSyncScheduling = config.useSyncScheduling,
            prepareForCommit = config.prepareForCommit,
            resetAfterCommit = config.resetAfterCommit;
        var startTime = now();
        var mostRecentCurrentTime = msToExpirationTime(0);
        var lastUniqueAsyncExpiration = 0;
        var expirationContext = NoWork;
        var isWorking = false;
        var nextUnitOfWork = null;
        var nextRoot = null;
        var nextRenderExpirationTime = NoWork;
        var nextEffect = null;
        var capturedErrors = null;
        var failedBoundaries = null;
        var commitPhaseBoundaries = null;
        var firstUncaughtError = null;
        var didFatal = false;
        var isCommitting = false;
        var isUnmounting = false;
        var interruptedBy = null;

        function resetContextStack() {
          reset();
          resetContext();
          resetHostContainer();
        }

        function commitAllHostEffects() {
          while (nextEffect !== null) {
            {
              ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;

            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (effectTag & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            }

            var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);

            switch (primaryEffectTag) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Deletion:
                {
                  isUnmounting = true;
                  commitDeletion(nextEffect);
                  isUnmounting = false;
                  break;
                }
            }

            nextEffect = nextEffect.nextEffect;
          }

          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
        }

        function commitAllLifeCycles() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current = nextEffect.alternate;
              commitLifeCycles(current, nextEffect);
            }

            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }

            if (effectTag & Err) {
              recordEffect();
              commitErrorHandling(nextEffect);
            }

            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        }

        function commitRoot(finishedWork) {
          isWorking = true;
          isCommitting = true;
          startCommitTimer();
          var root = finishedWork.stateNode;
          invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue.");
          root.isReadyForCommit = false;
          ReactCurrentOwner.current = null;
          var firstEffect = void 0;

          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }

          prepareForCommit();
          nextEffect = firstEffect;
          startCommitHostEffectsTimer();

          while (nextEffect !== null) {
            var didError = false;

            var _error = void 0;

            {
              invokeGuardedCallback$1(null, commitAllHostEffects, null);

              if (hasCaughtError()) {
                didError = true;
                _error = clearCaughtError();
              }
            }

            if (didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              captureError(nextEffect, _error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitHostEffectsTimer();
          resetAfterCommit();
          root.current = finishedWork;
          nextEffect = firstEffect;
          startCommitLifeCyclesTimer();

          while (nextEffect !== null) {
            var _didError = false;

            var _error2 = void 0;

            {
              invokeGuardedCallback$1(null, commitAllLifeCycles, null);

              if (hasCaughtError()) {
                _didError = true;
                _error2 = clearCaughtError();
              }
            }

            if (_didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              captureError(nextEffect, _error2);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          isCommitting = false;
          isWorking = false;
          stopCommitLifeCyclesTimer();
          stopCommitTimer();

          if (typeof onCommitRoot === "function") {
            onCommitRoot(finishedWork.stateNode);
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
          }

          if (commitPhaseBoundaries) {
            commitPhaseBoundaries.forEach(scheduleErrorRecovery);
            commitPhaseBoundaries = null;
          }

          if (firstUncaughtError !== null) {
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            onUncaughtError(_error3);
          }

          var remainingTime = root.current.expirationTime;

          if (remainingTime === NoWork) {
            capturedErrors = null;
            failedBoundaries = null;
          }

          return remainingTime;
        }

        function resetExpirationTime(workInProgress, renderTime) {
          if (renderTime !== Never && workInProgress.expirationTime === Never) {
            return;
          }

          var newExpirationTime = getUpdateExpirationTime(workInProgress);
          var child = workInProgress.child;

          while (child !== null) {
            if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
              newExpirationTime = child.expirationTime;
            }

            child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        function completeUnitOfWork(workInProgress) {
          while (true) {
            var current = workInProgress.alternate;
            {
              ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
            }
            var next = completeWork(current, workInProgress, nextRenderExpirationTime);
            {
              ReactDebugCurrentFiber.resetCurrentFiber();
            }
            var returnFiber = workInProgress["return"];
            var siblingFiber = workInProgress.sibling;
            resetExpirationTime(workInProgress, nextRenderExpirationTime);

            if (next !== null) {
              stopWorkTimer(workInProgress);

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              return next;
            }

            if (returnFiber !== null) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = workInProgress.firstEffect;
              }

              if (workInProgress.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                }

                returnFiber.lastEffect = workInProgress.lastEffect;
              }

              var effectTag = workInProgress.effectTag;

              if (effectTag > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = workInProgress;
                } else {
                  returnFiber.firstEffect = workInProgress;
                }

                returnFiber.lastEffect = workInProgress;
              }
            }

            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            }

            if (siblingFiber !== null) {
              return siblingFiber;
            } else if (returnFiber !== null) {
              workInProgress = returnFiber;
              continue;
            } else {
              var root = workInProgress.stateNode;
              root.isReadyForCommit = true;
              return null;
            }
          }

          return null;
        }

        function performUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }
          var next = beginWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function performFailedUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }
          var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function workLoop(expirationTime) {
          if (capturedErrors !== null) {
            slowWorkLoopThatChecksForFailedWork(expirationTime);
            return;
          }

          if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
            return;
          }

          if (nextRenderExpirationTime <= mostRecentCurrentTime) {
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }

        function slowWorkLoopThatChecksForFailedWork(expirationTime) {
          if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
            return;
          }

          if (nextRenderExpirationTime <= mostRecentCurrentTime) {
            while (nextUnitOfWork !== null) {
              if (hasCapturedError(nextUnitOfWork)) {
                nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
              } else {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
              }
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              if (hasCapturedError(nextUnitOfWork)) {
                nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
              } else {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
              }
            }
          }
        }

        function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
          unwindContexts(failedWork, boundary);
          nextUnitOfWork = performFailedUnitOfWork(boundary);
          workLoop(expirationTime);
        }

        function renderRoot(root, expirationTime) {
          invariant(!isWorking, "renderRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isWorking = true;
          root.isReadyForCommit = false;

          if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
            resetContextStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
          }

          startWorkLoopTimer(nextUnitOfWork);
          var didError = false;
          var error = null;
          {
            invokeGuardedCallback$1(null, workLoop, null, expirationTime);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
            }
          }

          while (didError) {
            if (didFatal) {
              firstUncaughtError = error;
              break;
            }

            var failedWork = nextUnitOfWork;

            if (failedWork === null) {
              didFatal = true;
              continue;
            }

            var boundary = captureError(failedWork, error);
            invariant(boundary !== null, "Should have found an error boundary. This error is likely " + "caused by a bug in React. Please file an issue.");

            if (didFatal) {
              continue;
            }

            didError = false;
            error = null;
            {
              invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);

              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
                continue;
              }
            }
            break;
          }

          var uncaughtError = firstUncaughtError;
          stopWorkLoopTimer(interruptedBy);
          interruptedBy = null;
          isWorking = false;
          didFatal = false;
          firstUncaughtError = null;

          if (uncaughtError !== null) {
            onUncaughtError(uncaughtError);
          }

          return root.isReadyForCommit ? root.current.alternate : null;
        }

        function captureError(failedWork, error) {
          ReactCurrentOwner.current = null;
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
          var boundary = null;
          var errorBoundaryFound = false;
          var willRetry = false;
          var errorBoundaryName = null;

          if (failedWork.tag === HostRoot) {
            boundary = failedWork;

            if (isFailedBoundary(failedWork)) {
              didFatal = true;
            }
          } else {
            var node = failedWork["return"];

            while (node !== null && boundary === null) {
              if (node.tag === ClassComponent) {
                var instance = node.stateNode;

                if (typeof instance.componentDidCatch === "function") {
                  errorBoundaryFound = true;
                  errorBoundaryName = getComponentName(node);
                  boundary = node;
                  willRetry = true;
                }
              } else if (node.tag === HostRoot) {
                boundary = node;
              }

              if (isFailedBoundary(node)) {
                if (isUnmounting) {
                  return null;
                }

                if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                  return null;
                }

                boundary = null;
                willRetry = false;
              }

              node = node["return"];
            }
          }

          if (boundary !== null) {
            if (failedBoundaries === null) {
              failedBoundaries = new Set();
            }

            failedBoundaries.add(boundary);

            var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);

            var _componentName = getComponentName(failedWork);

            if (capturedErrors === null) {
              capturedErrors = new Map();
            }

            var capturedError = {
              componentName: _componentName,
              componentStack: _componentStack,
              error: error,
              errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
              errorBoundaryFound: errorBoundaryFound,
              errorBoundaryName: errorBoundaryName,
              willRetry: willRetry
            };
            capturedErrors.set(boundary, capturedError);

            try {
              logCapturedError(capturedError);
            } catch (e) {
              var suppressLogging = e && e.suppressReactErrorLogging;

              if (!suppressLogging) {
                console.error(e);
              }
            }

            if (isCommitting) {
              if (commitPhaseBoundaries === null) {
                commitPhaseBoundaries = new Set();
              }

              commitPhaseBoundaries.add(boundary);
            } else {
              scheduleErrorRecovery(boundary);
            }

            return boundary;
          } else if (firstUncaughtError === null) {
            firstUncaughtError = error;
          }

          return null;
        }

        function hasCapturedError(fiber) {
          return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
        }

        function isFailedBoundary(fiber) {
          return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
        }

        function commitErrorHandling(effectfulFiber) {
          var capturedError = void 0;

          if (capturedErrors !== null) {
            capturedError = capturedErrors.get(effectfulFiber);
            capturedErrors["delete"](effectfulFiber);

            if (capturedError == null) {
              if (effectfulFiber.alternate !== null) {
                effectfulFiber = effectfulFiber.alternate;
                capturedError = capturedErrors.get(effectfulFiber);
                capturedErrors["delete"](effectfulFiber);
              }
            }
          }

          invariant(capturedError != null, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");

          switch (effectfulFiber.tag) {
            case ClassComponent:
              var instance = effectfulFiber.stateNode;
              var info = {
                componentStack: capturedError.componentStack
              };
              instance.componentDidCatch(capturedError.error, info);
              return;

            case HostRoot:
              if (firstUncaughtError === null) {
                firstUncaughtError = capturedError.error;
              }

              return;

            default:
              invariant(false, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        function unwindContexts(from, to) {
          var node = from;

          while (node !== null) {
            switch (node.tag) {
              case ClassComponent:
                popContextProvider(node);
                break;

              case HostComponent:
                popHostContext(node);
                break;

              case HostRoot:
                popHostContainer(node);
                break;

              case HostPortal:
                popHostContainer(node);
                break;
            }

            if (node === to || node.alternate === to) {
              stopFailedWorkTimer(node);
              break;
            } else {
              stopWorkTimer(node);
            }

            node = node["return"];
          }
        }

        function computeAsyncExpiration() {
          var currentTime = recalculateCurrentTime();
          var expirationMs = 1000;
          var bucketSizeMs = 200;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeUniqueAsyncExpiration() {
          var result = computeAsyncExpiration();

          if (result <= lastUniqueAsyncExpiration) {
            result = lastUniqueAsyncExpiration + 1;
          }

          lastUniqueAsyncExpiration = result;
          return lastUniqueAsyncExpiration;
        }

        function computeExpirationForFiber(fiber) {
          var expirationTime = void 0;

          if (expirationContext !== NoWork) {
            expirationTime = expirationContext;
          } else if (isWorking) {
            if (isCommitting) {
              expirationTime = Sync;
            } else {
              expirationTime = nextRenderExpirationTime;
            }
          } else {
            if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
              expirationTime = Sync;
            } else {
              expirationTime = computeAsyncExpiration();
            }
          }

          return expirationTime;
        }

        function scheduleWork(fiber, expirationTime) {
          return scheduleWorkImpl(fiber, expirationTime, false);
        }

        function checkRootNeedsClearing(root, fiber, expirationTime) {
          if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
            if (nextUnitOfWork !== null) {
              interruptedBy = fiber;
            }

            nextRoot = null;
            nextUnitOfWork = null;
            nextRenderExpirationTime = NoWork;
          }
        }

        function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
          recordScheduleUpdate();
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              var instance = fiber.stateNode;
              warnAboutInvalidUpdates(instance);
            }
          }
          var node = fiber;

          while (node !== null) {
            if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
              node.expirationTime = expirationTime;
            }

            if (node.alternate !== null) {
              if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                node.alternate.expirationTime = expirationTime;
              }
            }

            if (node["return"] === null) {
              if (node.tag === HostRoot) {
                var root = node.stateNode;
                checkRootNeedsClearing(root, fiber, expirationTime);
                requestWork(root, expirationTime);
                checkRootNeedsClearing(root, fiber, expirationTime);
              } else {
                {
                  if (!isErrorRecovery && fiber.tag === ClassComponent) {
                    warnAboutUpdateOnUnmounted(fiber);
                  }
                }
                return;
              }
            }

            node = node["return"];
          }
        }

        function scheduleErrorRecovery(fiber) {
          scheduleWorkImpl(fiber, Sync, true);
        }

        function recalculateCurrentTime() {
          var ms = now() - startTime;
          mostRecentCurrentTime = msToExpirationTime(ms);
          return mostRecentCurrentTime;
        }

        function deferredUpdates(fn) {
          var previousExpirationContext = expirationContext;
          expirationContext = computeAsyncExpiration();

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        function syncUpdates(fn) {
          var previousExpirationContext = expirationContext;
          expirationContext = Sync;

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var callbackExpirationTime = NoWork;
        var callbackID = -1;
        var isRendering = false;
        var nextFlushedRoot = null;
        var nextFlushedExpirationTime = NoWork;
        var deadlineDidExpire = false;
        var hasUnhandledError = false;
        var unhandledError = null;
        var deadline = null;
        var isBatchingUpdates = false;
        var isUnbatchingUpdates = false;
        var completedBatches = null;
        var NESTED_UPDATE_LIMIT = 1000;
        var nestedUpdateCount = 0;
        var timeHeuristicForUnitOfWork = 1;

        function scheduleCallbackWithExpiration(expirationTime) {
          if (callbackExpirationTime !== NoWork) {
            if (expirationTime > callbackExpirationTime) {
              return;
            } else {
              cancelDeferredCallback(callbackID);
            }
          } else {
            startRequestCallbackTimer();
          }

          var currentMs = now() - startTime;
          var expirationMs = expirationTimeToMs(expirationTime);
          var timeout = expirationMs - currentMs;
          callbackExpirationTime = expirationTime;
          callbackID = scheduleDeferredCallback(performAsyncWork, {
            timeout: timeout
          });
        }

        function requestWork(root, expirationTime) {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            invariant(false, "Maximum update depth exceeded. This can happen when a " + "component repeatedly calls setState inside componentWillUpdate or " + "componentDidUpdate. React limits the number of nested updates to " + "prevent infinite loops.");
          }

          if (root.nextScheduledRoot === null) {
            root.remainingExpirationTime = expirationTime;

            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root;
              root.nextScheduledRoot = root;
            } else {
              lastScheduledRoot.nextScheduledRoot = root;
              lastScheduledRoot = root;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
          } else {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
              root.remainingExpirationTime = expirationTime;
            }
          }

          if (isRendering) {
            return;
          }

          if (isBatchingUpdates) {
            if (isUnbatchingUpdates) {
              nextFlushedRoot = root;
              nextFlushedExpirationTime = Sync;
              performWorkOnRoot(root, Sync, recalculateCurrentTime());
            }

            return;
          }

          if (expirationTime === Sync) {
            performWork(Sync, null);
          } else {
            scheduleCallbackWithExpiration(expirationTime);
          }
        }

        function findHighestPriorityRoot() {
          var highestPriorityWork = NoWork;
          var highestPriorityRoot = null;

          if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;

            while (root !== null) {
              var remainingExpirationTime = root.remainingExpirationTime;

              if (remainingExpirationTime === NoWork) {
                invariant(previousScheduledRoot !== null && lastScheduledRoot !== null, "Should have a previous and last root. This error is likely " + "caused by a bug in React. Please file an issue.");

                if (root === root.nextScheduledRoot) {
                  root.nextScheduledRoot = null;
                  firstScheduledRoot = lastScheduledRoot = null;
                  break;
                } else if (root === firstScheduledRoot) {
                  var next = root.nextScheduledRoot;
                  firstScheduledRoot = next;
                  lastScheduledRoot.nextScheduledRoot = next;
                  root.nextScheduledRoot = null;
                } else if (root === lastScheduledRoot) {
                  lastScheduledRoot = previousScheduledRoot;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                  root.nextScheduledRoot = null;
                  break;
                } else {
                  previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                  root.nextScheduledRoot = null;
                }

                root = previousScheduledRoot.nextScheduledRoot;
              } else {
                if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                  highestPriorityWork = remainingExpirationTime;
                  highestPriorityRoot = root;
                }

                if (root === lastScheduledRoot) {
                  break;
                }

                previousScheduledRoot = root;
                root = root.nextScheduledRoot;
              }
            }
          }

          var previousFlushedRoot = nextFlushedRoot;

          if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
          }

          nextFlushedRoot = highestPriorityRoot;
          nextFlushedExpirationTime = highestPriorityWork;
        }

        function performAsyncWork(dl) {
          performWork(NoWork, dl);
        }

        function performWork(minExpirationTime, dl) {
          deadline = dl;
          findHighestPriorityRoot();

          if (enableUserTimingAPI && deadline !== null) {
            var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
            stopRequestCallbackTimer(didExpire);
          }

          while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, recalculateCurrentTime());
            findHighestPriorityRoot();
          }

          if (deadline !== null) {
            callbackExpirationTime = NoWork;
            callbackID = -1;
          }

          if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpiration(nextFlushedExpirationTime);
          }

          deadline = null;
          deadlineDidExpire = false;
          nestedUpdateCount = 0;
          finishRendering();
        }

        function flushRoot(root, expirationTime) {
          invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely " + "means you attempted to commit from inside a lifecycle method.");
          performWorkOnRoot(root, expirationTime, expirationTime);
          finishRendering();
        }

        function finishRendering() {
          if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;

            for (var i = 0; i < batches.length; i++) {
              var batch = batches[i];

              try {
                batch._onComplete();
              } catch (error) {
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }

          if (hasUnhandledError) {
            var _error4 = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw _error4;
          }
        }

        function performWorkOnRoot(root, expirationTime, currentTime) {
          invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isRendering = true;

          if (expirationTime <= currentTime) {
            var finishedWork = root.finishedWork;

            if (finishedWork !== null) {
              completeRoot(root, finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              finishedWork = renderRoot(root, expirationTime);

              if (finishedWork !== null) {
                completeRoot(root, finishedWork, expirationTime);
              }
            }
          } else {
            var _finishedWork = root.finishedWork;

            if (_finishedWork !== null) {
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              _finishedWork = renderRoot(root, expirationTime);

              if (_finishedWork !== null) {
                if (!shouldYield()) {
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = _finishedWork;
                }
              }
            }
          }

          isRendering = false;
        }

        function completeRoot(root, finishedWork, expirationTime) {
          var firstBatch = root.firstBatch;

          if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
            if (completedBatches === null) {
              completedBatches = [firstBatch];
            } else {
              completedBatches.push(firstBatch);
            }

            if (firstBatch._defer) {
              root.finishedWork = finishedWork;
              root.remainingExpirationTime = NoWork;
              return;
            }
          }

          root.finishedWork = null;
          root.remainingExpirationTime = commitRoot(finishedWork);
        }

        function shouldYield() {
          if (deadline === null) {
            return false;
          }

          if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
            return false;
          }

          deadlineDidExpire = true;
          return true;
        }

        function onUncaughtError(error) {
          invariant(nextFlushedRoot !== null, "Should be working on a root. This error is likely caused by a bug in " + "React. Please file an issue.");
          nextFlushedRoot.remainingExpirationTime = NoWork;

          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }

        function batchedUpdates(fn, a) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performWork(Sync, null);
            }
          }
        }

        function unbatchedUpdates(fn) {
          if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;

            try {
              return fn();
            } finally {
              isUnbatchingUpdates = false;
            }
          }

          return fn();
        }

        function flushSync(fn) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return syncUpdates(fn);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be " + "called when React is already rendering.");
            performWork(Sync, null);
          }
        }

        return {
          computeAsyncExpiration: computeAsyncExpiration,
          computeExpirationForFiber: computeExpirationForFiber,
          scheduleWork: scheduleWork,
          requestWork: requestWork,
          flushRoot: flushRoot,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          flushSync: flushSync,
          deferredUpdates: deferredUpdates,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration
        };
      };

      {
        var didWarnAboutNestedUpdates = false;
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
      }

      var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
        var getPublicInstance = config.getPublicInstance;

        var _ReactFiberScheduler = ReactFiberScheduler(config),
            computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
            computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,
            computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
            scheduleWork = _ReactFiberScheduler.scheduleWork,
            requestWork = _ReactFiberScheduler.requestWork,
            flushRoot = _ReactFiberScheduler.flushRoot,
            batchedUpdates = _ReactFiberScheduler.batchedUpdates,
            unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
            flushSync = _ReactFiberScheduler.flushSync,
            deferredUpdates = _ReactFiberScheduler.deferredUpdates;

        function computeRootExpirationTime(current, element) {
          var expirationTime = void 0;

          if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
            expirationTime = computeAsyncExpiration();
          } else {
            expirationTime = computeExpirationForFiber(current);
          }

          return expirationTime;
        }

        function scheduleRootUpdate(current, element, expirationTime, callback) {
          {
            if (ReactDebugCurrentFiber.phase === "render" && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warning(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
            }
          }
          callback = callback === undefined ? null : callback;
          {
            warning(callback === null || typeof callback === "function", "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
          }
          var update = {
            expirationTime: expirationTime,
            partialState: {
              element: element
            },
            callback: callback,
            isReplace: false,
            isForced: false,
            next: null
          };
          insertUpdateIntoFiber(current, update);
          scheduleWork(current, expirationTime);
          return expirationTime;
        }

        function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          return scheduleRootUpdate(current, element, expirationTime, callback);
        }

        function findHostInstance(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        return {
          createContainer: function createContainer(containerInfo, hydrate) {
            return createFiberRoot(containerInfo, hydrate);
          },
          updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            var expirationTime = computeRootExpirationTime(current, element);
            return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
          },
          updateContainerAtExpirationTime: updateContainerAtExpirationTime,
          flushRoot: flushRoot,
          requestWork: requestWork,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          deferredUpdates: deferredUpdates,
          flushSync: flushSync,
          getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;

            if (!containerFiber.child) {
              return null;
            }

            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);

              default:
                return containerFiber.child.stateNode;
            }
          },
          findHostInstance: findHostInstance,
          findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
            var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            return injectInternals(babelHelpers.extends({}, devToolsConfig, {
              findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
                return findHostInstance(fiber);
              },
              findFiberByHostInstance: function findFiberByHostInstance(instance) {
                if (!_findFiberByHostInstance) {
                  return null;
                }

                return _findFiberByHostInstance(instance);
              }
            }));
          }
        };
      };

      var ReactFiberReconciler$2 = Object.freeze({
        default: ReactFiberReconciler$1
      });
      var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2;
      var reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3;
      var viewConfigCallbacks = new Map();
      var viewConfigs = new Map();

      function register(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      }

      function get$1(name) {
        var viewConfig = void 0;

        if (!viewConfigs.has(name)) {
          var callback = viewConfigCallbacks.get(name);
          invariant(typeof callback === "function", "View config not found for name %s", name);
          viewConfigCallbacks.set(name, null);
          viewConfig = callback();
          viewConfigs.set(name, viewConfig);
        } else {
          viewConfig = viewConfigs.get(name);
        }

        invariant(viewConfig, "View config not found for name %s", name);
        return viewConfig;
      }

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          _classCallCheck$1(this, ReactNativeFiberHostComponent);

          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        ReactNativeFiberHostComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
          UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var scheduledCallback = null;
      var frameDeadline = 0;
      var frameDeadlineObject = {
        timeRemaining: function timeRemaining() {
          return frameDeadline - now();
        }
      };

      function setTimeoutCallback() {
        frameDeadline = now() + 5;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      }

      function scheduleDeferredCallback(callback) {
        scheduledCallback = callback;
        return setTimeout(setTimeoutCallback, 1);
      }

      function cancelDeferredCallback(callbackID) {
        scheduledCallback = null;
        clearTimeout(callbackID);
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      var NativeRenderer = reactReconciler({
        appendInitialChild: function appendInitialChild(parentInstance, child) {
          parentInstance._children.push(child);
        },
        createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          var viewConfig = get$1(type);
          {
            for (var key in viewConfig.validAttributes) {
              if (props.hasOwnProperty(key)) {
                deepFreezeAndThrowOnMutationInDev(props[key]);
              }
            }
          }
          var updatePayload = create(props, viewConfig.validAttributes);
          UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
          var component = new ReactNativeFiberHostComponent(tag, viewConfig);
          precacheFiberNode(internalInstanceHandle, tag);
          updateFiberProps(tag, props);
          return component;
        },
        createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
          });
          precacheFiberNode(internalInstanceHandle, tag);
          return tag;
        },
        finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
          if (parentInstance._children.length === 0) {
            return false;
          }

          var nativeTags = parentInstance._children.map(function (child) {
            return typeof child === "number" ? child : child._nativeTag;
          });

          UIManager.setChildren(parentInstance._nativeTag, nativeTags);
          return false;
        },
        getRootHostContext: function getRootHostContext() {
          return emptyObject;
        },
        getChildHostContext: function getChildHostContext() {
          return emptyObject;
        },
        getPublicInstance: function getPublicInstance(instance) {
          return instance;
        },
        now: now,
        prepareForCommit: function prepareForCommit() {},
        prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
          return emptyObject;
        },
        resetAfterCommit: function resetAfterCommit() {},
        scheduleDeferredCallback: scheduleDeferredCallback,
        cancelDeferredCallback: cancelDeferredCallback,
        shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
          return false;
        },
        shouldSetTextContent: function shouldSetTextContent(type, props) {
          return false;
        },
        useSyncScheduling: true,
        mutation: {
          appendChild: function appendChild(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
            } else {
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
            }
          },
          appendChildToContainer: function appendChildToContainer(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            UIManager.setChildren(parentInstance, [childTag]);
          },
          commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
            UIManager.updateView(textInstance, "RCTRawText", {
              text: newText
            });
          },
          commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
          commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
            var viewConfig = instance.viewConfig;
            updateFiberProps(instance._nativeTag, newProps);
            var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

            if (updatePayload != null) {
              UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
            }
          },
          insertBefore: function insertBefore(parentInstance, child, beforeChild) {
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              var beforeChildIndex = children.indexOf(beforeChild);
              children.splice(beforeChildIndex, 0, child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
            } else {
              var _beforeChildIndex = children.indexOf(beforeChild);

              children.splice(_beforeChildIndex, 0, child);
              var childTag = typeof child === "number" ? child : child._nativeTag;
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
            }
          },
          insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
            invariant(typeof parentInstance !== "number", "Container does not support insertBefore operation");
          },
          removeChild: function removeChild(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            var children = parentInstance._children;
            var index = children.indexOf(child);
            children.splice(index, 1);
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
          },
          removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
          },
          resetTextContent: function resetTextContent(instance) {}
        }
      });

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            warning(owner.stateNode._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        var component = componentOrHandle;
        var internalInstance = get(component);

        if (internalInstance) {
          return NativeRenderer.findHostInstance(internalInstance);
        } else {
          if (component) {
            return component;
          } else {
            invariant(typeof component === "object" && "_nativeTag" in component || component.render != null && typeof component.render === "function", "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component));
            invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted " + "component.");
          }
        }
      }

      function findNumericNodeHandleFiber(componentOrHandle) {
        var instance = findNodeHandle(componentOrHandle);

        if (instance == null || typeof instance === "number") {
          return instance;
        }

        return instance._nativeTag;
      }

      var NativeMethodsMixin = {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;
        invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions.");

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };
      }

      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$2(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      var getInspectorDataForViewTag = void 0;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject;
          }

          return emptyObject;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode = void 0;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  measure: function measure(callback) {
                    return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                  },
                  props: getHostProps(fiber),
                  source: fiber._debugSource
                };
              }
            };
          });
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject,
              selection: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selection = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selection: selection,
            source: source
          };
        };
      }

      var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

      function takeSnapshot(view, options) {
        if (typeof view !== "number" && view !== "window") {
          view = findNumericNodeHandleFiber(view) || "window";
        }

        return UIManager.__takeSnapshot(view, options);
      }

      injection$2.injectFiberBatchedUpdates(NativeRenderer.batchedUpdates);
      var roots = new Map();
      injection$4.injectDialog(showDialog$1);
      var ReactNativeRenderer = {
        NativeComponent: ReactNativeComponent,
        findNodeHandle: findNumericNodeHandleFiber,
        render: function render(element, containerTag, callback) {
          var root = roots.get(containerTag);

          if (!root) {
            root = NativeRenderer.createContainer(containerTag, false);
            roots.set(containerTag, root);
          }

          NativeRenderer.updateContainer(element, root, null, callback);
          return NativeRenderer.getPublicRootInstance(root);
        },
        unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
          var root = roots.get(containerTag);

          if (root) {
            NativeRenderer.updateContainer(null, root, null, function () {
              roots["delete"](containerTag);
            });
          }
        },
        unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
          ReactNativeRenderer.unmountComponentAtNode(containerTag);
          UIManager.removeRootView(containerTag);
        },
        createPortal: function createPortal(children, containerTag) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          return _createPortal(children, containerTag, null, key);
        },
        unstable_batchedUpdates: batchedUpdates,
        flushSync: NativeRenderer.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          NativeMethodsMixin: NativeMethodsMixin,
          ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
          ReactGlobalSharedState: ReactGlobalSharedState,
          ReactNativeComponentTree: ReactNativeComponentTree,
          ReactNativePropRegistry: ReactNativePropRegistry,
          TouchHistoryMath: TouchHistoryMath,
          createReactNativeComponentClass: createReactNativeComponentClass,
          takeSnapshot: takeSnapshot
        }
      };
      {
        babelHelpers.extends(ReactNativeRenderer.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugTool: {
            addHook: function addHook() {},
            removeHook: function removeHook() {}
          },
          ReactPerf: {
            start: function start() {},
            stop: function stop() {},
            printInclusive: function printInclusive() {},
            printWasted: function printWasted() {}
          }
        });
      }
      NativeRenderer.injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        getInspectorDataForViewTag: getInspectorDataForViewTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer"
      });
      var ReactNativeRenderer$2 = Object.freeze({
        default: ReactNativeRenderer
      });
      var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
      var reactNativeRenderer = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
      module.exports = reactNativeRenderer;
    })();
  }
},22,[23,13,57,58,107,108,109,31,116,117,102,112,114,118,119,120],"ReactNativeRenderer-dev");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var defineLazyObjectProperty = require(_dependencyMap[0], 'defineLazyObjectProperty');

  var _shouldPolyfillCollection = require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return require(_dependencyMap[2], 'Map');
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return require(_dependencyMap[3], 'Set');
    });
  }

  function defineLazyProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
        value: object[name]
      }));
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    defineLazyProperty(global, name, getValue);
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = require(_dependencyMap[4], 'Systrace');

    Systrace.installReactHook(true);
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = require(_dependencyMap[5], 'ExceptionsManager');

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = require(_dependencyMap[6], 'ErrorUtils');

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = require(_dependencyMap[7], 'ReactNativeVersionCheck');

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return require(_dependencyMap[8], 'Promise');
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    require(_dependencyMap[9], 'regenerator-runtime/runtime');

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return require(_dependencyMap[10], 'JSTimers')[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return require(_dependencyMap[11], 'XMLHttpRequest');
  });
  polyfillGlobal('FormData', function () {
    return require(_dependencyMap[12], 'FormData');
  });
  polyfillGlobal('fetch', function () {
    return require(_dependencyMap[13], 'fetch').fetch;
  });
  polyfillGlobal('Headers', function () {
    return require(_dependencyMap[13], 'fetch').Headers;
  });
  polyfillGlobal('Request', function () {
    return require(_dependencyMap[13], 'fetch').Request;
  });
  polyfillGlobal('Response', function () {
    return require(_dependencyMap[13], 'fetch').Response;
  });
  polyfillGlobal('WebSocket', function () {
    return require(_dependencyMap[14], 'WebSocket');
  });
  polyfillGlobal('Blob', function () {
    return require(_dependencyMap[15], 'Blob');
  });
  polyfillGlobal('URL', function () {
    return require(_dependencyMap[16], 'URL');
  });

  if (!global.alert) {
    global.alert = function (text) {
      require(_dependencyMap[17], 'Alert').alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  defineLazyProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  defineLazyProperty(navigator, 'geolocation', function () {
    return require(_dependencyMap[18], 'Geolocation');
  });

  var BatchedBridge = require(_dependencyMap[19], 'BatchedBridge');

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return require(_dependencyMap[4], 'Systrace');
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return require(_dependencyMap[10], 'JSTimers');
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return require(_dependencyMap[20], 'HeapCapture');
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return require(_dependencyMap[21], 'SamplingProfiler');
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return require(_dependencyMap[22], 'RCTLog');
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return require(_dependencyMap[23], 'RCTDeviceEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return require(_dependencyMap[24], 'RCTNativeAppEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return require(_dependencyMap[25], 'PerformanceLogger');
  });

  global.fetchSegment = function (segmentId, callback) {
    var _require = require(_dependencyMap[26], 'NativeModules'),
        SegmentFetcher = _require.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error('SegmentFetcher is missing. Please ensure that it is ' + 'included as a NativeModule.');
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      BatchedBridge.registerCallableModule('HMRClient', require(_dependencyMap[27], 'HMRClient'));

      if (!window.document) {
        require(_dependencyMap[28], 'setupDevtools');
      }

      var JSInspector = require(_dependencyMap[29], 'JSInspector');

      JSInspector.registerAgent(require(_dependencyMap[30], 'NetworkAgent'));
    }
  }
},23,[24,25,26,30,19,31,18,42,44,37,52,59,75,39,76,77,84,85,87,16,90,91,92,71,93,94,15,96,99,104,105],"InitializeCore");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},24,[],"defineLazyObjectProperty");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},25,[],"_shouldPolyfillES6Collection");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _shouldPolyfillES6Collection = require(_dependencyMap[0], '_shouldPolyfillES6Collection');

  var guid = require(_dependencyMap[1], 'guid');

  var isNode = require(_dependencyMap[2], 'fbjs/lib/isNode');

  var toIterator = require(_dependencyMap[3], 'toIterator');

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;

    if (__DEV__) {
      SECRET_SIZE_PROP = '$size' + guid();
    }

    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        babelHelpers.classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      babelHelpers.createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);

            if (__DEV__) {
              this[SECRET_SIZE_PROP] += 1;
            } else {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;

            if (__DEV__) {
              this[SECRET_SIZE_PROP] -= 1;
            } else {
              this.size -= 1;
            }

            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);
      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        babelHelpers.classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      babelHelpers.createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);
      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};

      if (__DEV__) {
        if (isES5) {
          if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
            map[SECRET_SIZE_PROP] = 0;
          } else {
            Object.defineProperty(map, SECRET_SIZE_PROP, {
              value: 0,
              writable: true
            });
            Object.defineProperty(map, 'size', {
              set: function set(v) {
                console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
                throw new Error('The map size property is not writable.');
              },
              get: function get() {
                return map[SECRET_SIZE_PROP];
              }
            });
          }

          return;
        }
      }

      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},26,[25,27,28,29],"Map");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
  }

  module.exports = guid;
},27,[],"guid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},28,[],"fbjs/lib/isNode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            babelHelpers.classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            babelHelpers.classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  babelHelpers.extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });
  module.exports = toIterator;
},29,[],"toIterator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Map = require(_dependencyMap[0], 'Map');

  var _shouldPolyfillES6Collection = require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  var toIterator = require(_dependencyMap[2], 'toIterator');

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        babelHelpers.classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      babelHelpers.createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);
      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},30,[26,25,29],"Set");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = require(_dependencyMap[0], 'NativeModules'),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = require(_dependencyMap[1], 'parseErrorStack');

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }

      if (__DEV__) {
        var symbolicateStackTrace = require(_dependencyMap[2], 'symbolicateStackTrace');

        symbolicateStackTrace(stack).then(function (prettyStack) {
          if (prettyStack) {
            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          return console.warn('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = require(_dependencyMap[3], 'stringifySafe');

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},31,[15,32,35,41],"ExceptionsManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = require(_dependencyMap[0], 'stacktrace-parser');

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},32,[33],"parseErrorStack");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], './lib/stacktrace-parser.js');
},33,[34],"stacktrace-parser/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},34,[],"stacktrace-parser/lib/stacktrace-parser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var getDevServer = require(_dependencyMap[1], 'getDevServer');

  var _require = require(_dependencyMap[2], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || require(_dependencyMap[3], 'fetch').fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return babelHelpers.extends({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},35,[36,38,15,39],"symbolicateStackTrace");
__d(function (global, require, module, exports, _dependencyMap) {
  var g = function () {
    return this;
  }() || Function("return this")();

  var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
  var oldRuntime = hadRuntime && g.regeneratorRuntime;
  g.regeneratorRuntime = undefined;
  module.exports = require(_dependencyMap[0], "./runtime");

  if (hadRuntime) {
    g.regeneratorRuntime = oldRuntime;
  } else {
    try {
      delete g.regeneratorRuntime;
    } catch (e) {
      g.regeneratorRuntime = undefined;
    }
  }
},36,[37],"regenerator-runtime/runtime-module.js");
__d(function (global, require, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},37,[],"regenerator-runtime/runtime.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},38,[15],"getDevServer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = require(_dependencyMap[0], "whatwg-fetch");

  var _whatwgFetch2 = babelHelpers.interopRequireDefault(_whatwgFetch);

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},39,[40],"fetch");
__d(function (global, require, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},40,[],"whatwg-fetch/fetch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},41,[],"stringifySafe");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'NativeModules'),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = require(_dependencyMap[1], 'ReactNativeVersion');

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},42,[15,43],"ReactNativeVersionCheck");
__d(function (global, require, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 52,
    patch: 3,
    prerelease: null
  };
},43,[],"ReactNativeVersion");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], 'fbjs/lib/Promise.native');

  if (__DEV__) {
    require(_dependencyMap[1], 'promise/setimmediate/rejection-tracking').enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message = void 0;
        var stack = void 0;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          message = require(_dependencyMap[2], 'pretty-format')(error);
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = Promise;
},44,[45,49,50],"Promise");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], 'promise/setimmediate/es6-extensions');

  require(_dependencyMap[1], 'promise/setimmediate/done');

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},45,[46,48],"fbjs/lib/Promise.native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core.js');

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},46,[47],"promise/setimmediate/es6-extensions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},47,[],"promise/setimmediate/core.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core.js');

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},48,[47],"promise/setimmediate/done.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0], './core');

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    Promise._37 = null;
    Promise._87 = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    Promise._37 = function (promise) {
      if (promise._65 === 2 && rejections[promise._51]) {
        if (rejections[promise._51].logged) {
          onHandled(promise._51);
        } else {
          clearTimeout(rejections[promise._51].timeout);
        }

        delete rejections[promise._51];
      }
    };

    Promise._87 = function (promise, err) {
      if (promise._40 === 0) {
        promise._51 = id++;
        rejections[promise._51] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},49,[47],"promise/setimmediate/rejection-tracking.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var printString = require(_dependencyMap[0], './printString');

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = (typeof Symbol === "function" ? Symbol.prototype : "@@prototype").toString;
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/ig;

  var getSymbols = Object.getOwnPropertySymbols || function (obj) {
    return [];
  };

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    } else if (val.name === '') {
      return '[Function anonymous]';
    } else {
      return '[Function ' + val.name + ']';
    }
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) return '' + val;
    if (val === undefined) return 'undefined';
    if (val === null) return 'null';
    var typeOf = typeof val;
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return '"' + printString(val) + '"';
    if (typeOf === 'function') return printFunction(val, printFunctionName);
    if (typeOf === 'symbol') return printSymbol(val);
    var toStringed = toString.call(val);
    if (toStringed === '[object WeakMap]') return 'WeakMap {}';
    if (toStringed === '[object WeakSet]') return 'WeakSet {}';
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
    if (toStringed === '[object Symbol]') return printSymbol(val);
    if (toStringed === '[object Date]') return toISOString.call(val);
    if (toStringed === '[object Error]') return printError(val);

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return printString(regExpToString.call(val));
      }

      return regExpToString.call(val);
    }

    ;
    if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
    if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';
    if (val instanceof Error) return printError(val);
    return false;
  }

  function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var body = '';

    if (list.length) {
      body += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < list.length; i++) {
        body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

        if (i < list.length - 1) {
          body += ',' + spacing;
        }
      }

      body += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return '[' + body + ']';
  }

  function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Map {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + key + ' => ' + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
    var result = constructor + '{';
    var keys = Object.keys(val).sort();
    var symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(function (key) {
        return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
      }).concat(symbols);
    }

    if (keys.length) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Set {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    refs = refs.slice();

    if (refs.indexOf(val) > -1) {
      return '[Circular]';
    } else {
      refs.push(val);
    }

    currentDepth++;
    var hitMaxDepth = currentDepth > maxDepth;

    if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
      return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (typeof val === 'object') {
      return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }
  }

  function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var match = false;
    var plugin = void 0;

    for (var p = 0; p < plugins.length; p++) {
      plugin = plugins[p];

      if (plugin.test(val)) {
        match = true;
        break;
      }
    }

    if (!match) {
      return false;
    }

    function boundPrint(val) {
      return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    function boundIndent(str) {
      var indentation = prevIndent + indent;
      return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
    }

    return plugin.print(val, boundPrint, boundIndent, {
      edgeSpacing: edgeSpacing,
      spacing: spacing
    });
  }

  function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var basic = printBasicValue(val, printFunctionName, escapeRegex);
    if (basic) return basic;
    var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    if (plugin) return plugin;
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var DEFAULTS = {
    callToJSON: true,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    escapeRegex: false
  };

  function validateOptions(opts) {
    Object.keys(opts).forEach(function (key) {
      if (!DEFAULTS.hasOwnProperty(key)) {
        throw new Error('prettyFormat: Invalid option: ' + key);
      }
    });

    if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
      throw new Error('prettyFormat: Cannot run with min option and indent');
    }
  }

  function normalizeOptions(opts) {
    var result = {};
    Object.keys(DEFAULTS).forEach(function (key) {
      return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
    });

    if (result.min) {
      result.indent = 0;
    }

    return result;
  }

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, opts) {
    if (!opts) {
      opts = DEFAULTS;
    } else {
      validateOptions(opts);
      opts = normalizeOptions(opts);
    }

    var indent = void 0;
    var refs = void 0;
    var prevIndent = '';
    var currentDepth = 0;
    var spacing = opts.min ? ' ' : '\n';
    var edgeSpacing = opts.min ? '' : '\n';

    if (opts && opts.plugins.length) {
      indent = createIndent(opts.indent);
      refs = [];
      var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
      if (pluginsResult) return pluginsResult;
    }

    var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
    if (basicResult) return basicResult;
    if (!indent) indent = createIndent(opts.indent);
    if (!refs) refs = [];
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
  }

  module.exports = prettyFormat;
},50,[51],"pretty-format/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

  module.exports = function printString(val) {
    return val.replace(ESCAPED_CHARACTERS, '\\$1');
  };
},51,[],"pretty-format/printString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var Systrace = require(_dependencyMap[1], 'Systrace');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[3], 'NativeModules'),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = require(_dependencyMap[4], 'fbjs/lib/performanceNow');
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = Platform.OS === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;

    if (__DEV__) {
      var parseErrorStack = require(_dependencyMap[5], 'parseErrorStack');

      var error = new Error();
      error.framesToPop = 1;
      var stack = parseErrorStack(error);

      if (stack) {
        identifiers[freeIndex] = stack.shift();
      }
    }

    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    require(_dependencyMap[6], 'fbjs/lib/warning')(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  }

  function _callImmediatesPass() {
    if (__DEV__) {
      Systrace.beginEvent('callImmediatesPass()');
    }

    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},52,[53,19,13,15,54,32,57],"JSTimers");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},53,[15],"Platform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var performance = require(_dependencyMap[0], './performance');

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},54,[55],"fbjs/lib/performanceNow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = require(_dependencyMap[0], './ExecutionEnvironment');

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},55,[56],"fbjs/lib/performance.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},56,[],"fbjs/lib/ExecutionEnvironment.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], './emptyFunction');

  var warning = emptyFunction;

  if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  module.exports = warning;
},57,[58],"fbjs/lib/warning.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},58,[],"fbjs/lib/emptyFunction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var EventTarget = require(_dependencyMap[0], 'event-target-shim');

  var RCTNetworking = require(_dependencyMap[1], 'RCTNetworking');

  var base64 = require(_dependencyMap[2], 'base64-js');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[4], 'fbjs/lib/warning');

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
      return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = (_temp = _class = function (_EventTarget2) {
    babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
    babelHelpers.createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      babelHelpers.classCallCheck(this, XMLHttpRequest);

      var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    babelHelpers.createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
          nativeResponseType = 'base64';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], {
              type: this.getResponseHeader('content-type') || ''
            });
            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);
    return XMLHttpRequest;
  }(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS))), _class.UNSENT = UNSENT, _class.OPENED = OPENED, _class.HEADERS_RECEIVED = HEADERS_RECEIVED, _class.LOADING = LOADING, _class.DONE = DONE, _class._interceptor = null, _temp);
  module.exports = XMLHttpRequest;
},59,[60,64,74,13,57],"XMLHttpRequest");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = require(_dependencyMap[0], "./commons");

    var CustomEventTarget = require(_dependencyMap[1], "./custom-event-target");

    var EventWrapper = require(_dependencyMap[2], "./event-wrapper");

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},60,[61,62,63],"event-target-shim/lib/event-target.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},61,[],"event-target-shim/lib/commons.js");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = require(_dependencyMap[0], "./commons");

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && typeof listener !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},62,[61],"event-target-shim/lib/custom-event-target.js");
__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = require(_dependencyMap[0], "./commons").createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},63,[61],"event-target-shim/lib/event-wrapper.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTNetworkingNative = require(_dependencyMap[2], 'NativeModules').Networking;

  var convertRequestBody = require(_dependencyMap[3], 'convertRequestBody');

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      babelHelpers.classCallCheck(this, RCTNetworking);

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    babelHelpers.createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return babelHelpers.extends({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), babelHelpers.extends({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTNetworkingNative) {
    var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

      function MissingNativeRCTNetworkingShim() {
        babelHelpers.classCallCheck(this, MissingNativeRCTNetworkingShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
      }

      babelHelpers.createClass(MissingNativeRCTNetworkingShim, [{
        key: "sendRequest",
        value: function sendRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "abortRequest",
        value: function abortRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "clearCookies",
        value: function clearCookies() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeRCTNetworkingShim;
    }(MissingNativeEventEmitterShim);

    RCTNetworking = new MissingNativeRCTNetworkingShim();
  } else {
    RCTNetworking = new RCTNetworking();
  }

  module.exports = RCTNetworking;
},64,[65,70,15,72],"RCTNetworking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    babelHelpers.inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      babelHelpers.classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = babelHelpers.possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    babelHelpers.createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},65,[66,68,13],"MissingNativeEventEmitterShim");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = require(_dependencyMap[0], 'EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    babelHelpers.inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      babelHelpers.classCallCheck(this, EmitterSubscription);

      var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    babelHelpers.createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);
    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},66,[67],"EmitterSubscription");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      babelHelpers.classCallCheck(this, EventSubscription);
      this.subscriber = subscriber;
    }

    babelHelpers.createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);
    return EventSubscription;
  }();

  module.exports = EventSubscription;
},67,[],"EventSubscription");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var EventSubscriptionVendor = require(_dependencyMap[1], 'EventSubscriptionVendor');

  var emptyFunction = require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
},68,[66,69,58,13],"EventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      babelHelpers.classCallCheck(this, EventSubscriptionVendor);
      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    babelHelpers.createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);
    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},69,[13],"EventSubscriptionVendor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var Platform = require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var NativeEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      babelHelpers.classCallCheck(this, NativeEventEmitter);

      var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      if (Platform.OS === 'ios') {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    babelHelpers.createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);
    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},70,[68,53,71,13],"NativeEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var EventSubscriptionVendor = require(_dependencyMap[1], 'EventSubscriptionVendor');

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);
      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    babelHelpers.createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);
    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},71,[68,69],"RCTDeviceEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = require(_dependencyMap[0], 'binaryToBase64');

  var FormData = require(_dependencyMap[1], 'FormData');

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},72,[73,75],"convertRequestBody");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = require(_dependencyMap[0], 'base64-js');

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},73,[74],"binaryToBase64");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

    for (var i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }

    return parts.join('');
  }
},74,[],"base64-js/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var FormData = function () {
    function FormData() {
      babelHelpers.classCallCheck(this, FormData);
      this._parts = [];
    }

    babelHelpers.createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return babelHelpers.extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);
    return FormData;
  }();

  module.exports = FormData;
},75,[],"FormData");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var Blob = require(_dependencyMap[0], 'Blob');

  var EventTarget = require(_dependencyMap[1], 'event-target-shim');

  var NativeEventEmitter = require(_dependencyMap[2], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[3], 'NativeModules');

  var Platform = require(_dependencyMap[4], 'Platform');

  var WebSocketEvent = require(_dependencyMap[5], 'WebSocketEvent');

  var base64 = require(_dependencyMap[6], 'base64-js');

  var binaryToBase64 = require(_dependencyMap[7], 'binaryToBase64');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  var WebSocket = (_temp = _class = function (_EventTarget) {
    babelHelpers.inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      babelHelpers.classCallCheck(this, WebSocket);

      var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = babelHelpers.objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    babelHelpers.createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          var BlobModule = NativeModules.BlobModule;
          invariant(BlobModule, 'Native module BlobModule is required for blob support');
          BlobModule.sendBlob(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        if (Platform.OS === 'android') {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        } else {
          WebSocketModule.close(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = Blob.create(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          var BlobModule = NativeModules.BlobModule;
          invariant(BlobModule, 'Native module BlobModule is required for blob support');

          if (BlobModule) {
            if (binaryType === 'blob') {
              BlobModule.enableBlobSupport(this._socketId);
            } else {
              BlobModule.disableBlobSupport(this._socketId);
            }
          }
        }

        this._binaryType = binaryType;
      }
    }]);
    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS)), _class.CONNECTING = CONNECTING, _class.OPEN = OPEN, _class.CLOSING = CLOSING, _class.CLOSED = CLOSED, _class.isAvailable = !!WebSocketModule, _temp);
  module.exports = WebSocket;
},76,[77,60,70,15,53,83,74,73,13],"WebSocket");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var uuid = require(_dependencyMap[1], 'uuid');

  var _require = require(_dependencyMap[2], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var Blob = function () {
    babelHelpers.createClass(Blob, null, [{
      key: "create",
      value: function create(props) {
        return babelHelpers.extends(Object.create(Blob.prototype), props);
      }
    }]);

    function Blob(parts, options) {
      babelHelpers.classCallCheck(this, Blob);
      var blobId = uuid();
      var size = 0;
      parts.forEach(function (part) {
        invariant(part instanceof Blob, 'Can currently only create a Blob from other Blobs');
        size += part.size;
      });
      BlobModule.createFromParts(parts, blobId);
      return Blob.create({
        blobId: blobId,
        offset: 0,
        size: size
      });
    }

    babelHelpers.createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var offset = this.offset;
        var size = this.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return Blob.create({
          blobId: this.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        BlobModule.release(this.blobId);
      }
    }]);
    return Blob;
  }();

  module.exports = Blob;
},77,[13,78,15],"Blob");
__d(function (global, require, module, exports, _dependencyMap) {
  var v1 = require(_dependencyMap[0], './v1');

  var v4 = require(_dependencyMap[1], './v4');

  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  module.exports = uuid;
},78,[79,82],"uuid/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var rng = require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = require(_dependencyMap[1], './lib/bytesToUuid');

  var _nodeId;

  var _clockseq;

  var _lastMSecs = 0;
  var _lastNSecs = 0;

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    if (node == null || clockseq == null) {
      var seedBytes = rng();

      if (node == null) {
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
    b[i++] = tmh >>> 24 & 0xf | 0x10;
    b[i++] = tmh >>> 16 & 0xff;
    b[i++] = clockseq >>> 8 | 0x80;
    b[i++] = clockseq & 0xff;

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid(b);
  }

  module.exports = v1;
},79,[80,81],"uuid/v1.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && msCrypto.getRandomValues.bind(msCrypto);

  if (getRandomValues) {
    var rnds8 = new Uint8Array(16);

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }
},80,[],"uuid/lib/rng-browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
  }

  module.exports = bytesToUuid;
},81,[],"uuid/lib/bytesToUuid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var rng = require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = require(_dependencyMap[1], './lib/bytesToUuid');

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof options == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }

    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;

    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  module.exports = v4;
},82,[80,81],"uuid/v4.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    babelHelpers.classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    babelHelpers.extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},83,[],"WebSocketEvent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = require(_dependencyMap[0], 'Blob');

  var _require = require(_dependencyMap[1], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      babelHelpers.classCallCheck(this, URL);
      throw new Error('Creating BlobURL objects is not supported yet.');
    }

    babelHelpers.createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.blobId + "?offset=" + blob.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
    return URL;
  }();

  module.exports = URL;
},84,[77,15],"URL");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AlertIOS = require(_dependencyMap[0], 'AlertIOS');

  var NativeModules = require(_dependencyMap[1], 'NativeModules');

  var Platform = require(_dependencyMap[2], 'Platform');

  var Alert = function () {
    function Alert() {
      babelHelpers.classCallCheck(this, Alert);
    }

    babelHelpers.createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        if (Platform.OS === 'ios') {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        } else if (Platform.OS === 'android') {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);
    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      babelHelpers.classCallCheck(this, AlertAndroid);
    }

    babelHelpers.createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = babelHelpers.extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = babelHelpers.extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = babelHelpers.extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = babelHelpers.extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);
    return AlertAndroid;
  }();

  module.exports = Alert;
},85,[86,15,53],"Alert");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTAlertManager = require(_dependencyMap[0], 'NativeModules').AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      babelHelpers.classCallCheck(this, AlertIOS);
    }

    babelHelpers.createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');
          var callback = type;
          var defaultValue = message;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: defaultValue
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);
    return AlertIOS;
  }();

  module.exports = AlertIOS;
},86,[15],"AlertIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTLocationObserver = require(_dependencyMap[2], 'NativeModules').LocationObserver;

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var logError = require(_dependencyMap[4], 'logError');

  var warning = require(_dependencyMap[5], 'fbjs/lib/warning');

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = require(_dependencyMap[6], 'Platform');

  var PermissionsAndroid = require(_dependencyMap[7], 'PermissionsAndroid');

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},87,[36,70,15,13,88,57,53,89],"Geolocation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},88,[],"logError");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var NativeModules = require(_dependencyMap[1], 'NativeModules');

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      babelHelpers.classCallCheck(this, PermissionsAndroid);
      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    babelHelpers.createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},89,[36,15],"PermissionsAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      require(_dependencyMap[0], 'NativeModules').JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},90,[15],"HeapCapture");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = require(_dependencyMap[0], 'NativeModules'),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},91,[15],"SamplingProfiler");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(babelHelpers.toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, babelHelpers.toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, babelHelpers.toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},92,[13],"RCTLog");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},93,[71],"RCTNativeAppEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = require(_dependencyMap[0], 'Systrace');

  var infoLog = require(_dependencyMap[1], 'infoLog');

  var performanceNow = global.nativePerformanceNow || require(_dependencyMap[2], 'fbjs/lib/performanceNow');

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},94,[19,95,54],"PerformanceLogger");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},95,[],"infoLog");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var HMRClient = {
    enable: function enable(platform, bundleEntry, host, port) {
      invariant(platform, 'Missing required parameter `platform`');
      invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
      invariant(host, 'Missing required paramenter `host`');

      var WebSocket = require(_dependencyMap[2], 'WebSocket');

      var wsHostPort = port !== null && port !== '' ? host + ":" + port : host;
      bundleEntry = bundleEntry.replace(/\.(bundle|delta)/, '.js');
      var wsUrl = "ws://" + wsHostPort + "/hot?" + ("platform=" + platform + "&") + ("bundleEntry=" + bundleEntry);
      var activeWS = new WebSocket(wsUrl);

      activeWS.onerror = function (e) {
        var error = "Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network";

        if (Platform.OS === 'ios') {
          error += "\n- Ensure that the Packager server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        throw new Error(error);
      };

      activeWS.onmessage = function (_ref) {
        var data = _ref.data;

        var HMRLoadingView = require(_dependencyMap[3], 'HMRLoadingView');

        data = JSON.parse(data);

        switch (data.type) {
          case 'update-start':
            {
              HMRLoadingView.showMessage('Hot Loading...');
              break;
            }

          case 'update':
            {
              var _data$body = data.body,
                  modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              if (Platform.OS === 'ios') {
                var RCTRedBox = require(_dependencyMap[4], 'NativeModules').RedBox;

                RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
              } else {
                var RCTExceptionsManager = require(_dependencyMap[4], 'NativeModules').ExceptionsManager;

                RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
              }

              modules.forEach(function (_ref2, i) {
                var id = _ref2.id,
                    code = _ref2.code;
                code = code + '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              HMRLoadingView.hide();
              break;
            }

          case 'update-done':
            {
              HMRLoadingView.hide();
              break;
            }

          case 'error':
            {
              HMRLoadingView.hide();
              throw new Error(data.body.type + ": " + data.body.message);
            }

          default:
            {
              throw new Error("Unexpected message: " + data);
            }
        }
      };
    }
  };
  module.exports = HMRClient;
},96,[53,13,76,97,15],"HMRClient");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ToastAndroid = require(_dependencyMap[0], 'ToastAndroid');

  var TOAST_SHORT_DELAY = 2000;

  var HMRLoadingView = function () {
    function HMRLoadingView() {
      babelHelpers.classCallCheck(this, HMRLoadingView);
    }

    babelHelpers.createClass(HMRLoadingView, null, [{
      key: "showMessage",
      value: function showMessage(message) {
        if (HMRLoadingView._showing) {
          return;
        }

        ToastAndroid.show(message, ToastAndroid.SHORT);
        HMRLoadingView._showing = true;
        setTimeout(function () {
          HMRLoadingView._showing = false;
        }, TOAST_SHORT_DELAY);
      }
    }, {
      key: "hide",
      value: function hide() {}
    }]);
    return HMRLoadingView;
  }();

  module.exports = HMRLoadingView;
},97,[98],"HMRLoadingView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = require(_dependencyMap[0], 'NativeModules').ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},98,[15],"ToastAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var register = function register() {};

  if (__DEV__) {
    var AppState = require(_dependencyMap[0], 'AppState');

    var WebSocket = require(_dependencyMap[1], 'WebSocket');

    var _require = require(_dependencyMap[2], 'NativeModules'),
        PlatformConstants = _require.PlatformConstants;

    var reactDevTools = require(_dependencyMap[3], 'react-devtools-core');

    if (WebSocket.isAvailable) {
      var _isAppActive = function _isAppActive() {
        return AppState.currentState !== 'background';
      };

      var _host = PlatformConstants && PlatformConstants.ServerHost ? PlatformConstants.ServerHost.split(':')[0] : 'localhost';

      reactDevTools.connectToDevTools({
        isAppActive: _isAppActive,
        host: _host,
        port: window.__REACT_DEVTOOLS_PORT__,
        resolveRNStyle: require(_dependencyMap[4], 'flattenStyle')
      });
    }
  }

  module.exports = {
    register: register
  };
},99,[100,76,15,101,102],"setupDevtools");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var RCTAppState = NativeModules.AppState;

  var logError = require(_dependencyMap[3], 'logError');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var AppState = function (_NativeEventEmitter) {
    babelHelpers.inherits(AppState, _NativeEventEmitter);

    function AppState() {
      babelHelpers.classCallCheck(this, AppState);

      var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    babelHelpers.createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);
    return AppState;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTAppState) {
    var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

      function MissingNativeAppStateShim() {
        babelHelpers.classCallCheck(this, MissingNativeAppStateShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
      }

      babelHelpers.createClass(MissingNativeAppStateShim, [{
        key: "addEventListener",
        value: function addEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "currentState",
        get: function get() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeAppStateShim;
    }(MissingNativeEventEmitterShim);

    AppState = new MissingNativeAppStateShim();
  } else {
    AppState = new AppState();
  }

  module.exports = AppState;
},100,[65,70,15,88,13],"AppState");
__d(function (global, require, module, exports, _dependencyMap) {
    !function (root, factory) {
        "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
    }(this, function () {
        return function (modules) {
            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    exports: {},
                    id: moduleId,
                    loaded: !1
                };
                return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
            }

            var installedModules = {};
            return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
        }([function (module, exports, __webpack_require__) {
            "use strict";

            function connectToDevTools(options) {
                function scheduleRetry() {
                    setTimeout(function () {
                        return connectToDevTools(options);
                    }, 2e3);
                }

                function handleClose() {
                    hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                        return fn();
                    }));
                }

                function handleMessage(evt) {
                    var data;

                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }

                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }

                var _ref = options || {},
                    _ref$host = _ref.host,
                    host = void 0 === _ref$host ? "localhost" : _ref$host,
                    _ref$port = _ref.port,
                    port = void 0 === _ref$port ? 8097 : _ref$port,
                    websocket = _ref.websocket,
                    _ref$resolveRNStyle = _ref.resolveRNStyle,
                    resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                    _ref$isAppActive = _ref.isAppActive,
                    isAppActive = void 0 === _ref$isAppActive ? function () {
                    return !0;
                } : _ref$isAppActive;

                if (!isAppActive()) return void scheduleRetry();
                var messageListeners = [],
                    closeListeners = [],
                    uri = "ws://" + host + ":" + port,
                    ws = websocket ? websocket : new window.WebSocket(uri);
                ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                    var wall = {
                        listen: function listen(fn) {
                            messageListeners.push(fn);
                        },
                        onClose: function onClose(fn) {
                            closeListeners.push(fn);
                        },
                        send: function send(data) {
                            ws.send(JSON.stringify(data));
                        }
                    };
                    setupBackend(wall, resolveRNStyle);
                };
                var hasClosed = !1;
            }

            function setupBackend(wall, resolveRNStyle) {
                wall.onClose(function () {
                    agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
                });
                var bridge = new Bridge(wall),
                    agent = new Agent(window, {
                    rnStyle: !!resolveRNStyle,
                    rnStyleMeasure: !!resolveRNStyle
                });
                agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);

                var _connectTimeout = setTimeout(function () {
                    console.warn("react-devtools agent got no connection");
                }, 2e4);

                agent.once("connected", function () {
                    agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
                });
            }

            var Agent = __webpack_require__(1),
                Bridge = __webpack_require__(6),
                installGlobalHook = __webpack_require__(31),
                installRelayHook = __webpack_require__(32),
                inject = __webpack_require__(33),
                setupRNStyle = __webpack_require__(45),
                setupRelay = __webpack_require__(47);

            installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
                var setupHighlighter = __webpack_require__(48);

                setupHighlighter(agent);
            }), module.exports = {
                connectToDevTools: connectToDevTools
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !call || "object" != typeof call && "function" != typeof call ? self : call;
            }

            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                _require = __webpack_require__(2),
                EventEmitter = _require.EventEmitter,
                assign = __webpack_require__(3),
                guid = __webpack_require__(4),
                getIn = __webpack_require__(5),
                Agent = function (_EventEmitter) {
                function Agent(global, capabilities) {
                    _classCallCheck(this, Agent);

                    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

                    _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                    var lastSelected;
                    _this.on("selected", function (id) {
                        var data = _this.elementData.get(id);

                        data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                    }), _this._prevSelected = null, _this._scrollUpdate = !1;
                    var isReactDOM = window.document && "function" == typeof window.document.createElement;
                    return _this.capabilities = assign({
                        scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                        dom: isReactDOM,
                        editTextContent: !1
                    }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
                }

                return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                    key: "sub",
                    value: function value(ev, fn) {
                        var _this2 = this;

                        return this.on(ev, fn), function () {
                            _this2.removeListener(ev, fn);
                        };
                    }
                }, {
                    key: "setReactInternals",
                    value: function value(renderer, reactInternals) {
                        this.reactInternals[renderer] = reactInternals;
                    }
                }, {
                    key: "addBridge",
                    value: function value(bridge) {
                        var _this3 = this;

                        bridge.on("requestCapabilities", function () {
                            bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                        }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                            return _this3.highlight(id);
                        }), bridge.on("highlightMany", function (id) {
                            return _this3.highlightMany(id);
                        }), bridge.on("hideHighlight", function () {
                            return _this3.emit("hideHighlight");
                        }), bridge.on("startInspecting", function () {
                            return _this3.emit("startInspecting");
                        }), bridge.on("stopInspecting", function () {
                            return _this3.emit("stopInspecting");
                        }), bridge.on("selected", function (id) {
                            return _this3.emit("selected", id);
                        }), bridge.on("setInspectEnabled", function (enabled) {
                            _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                        }), bridge.on("shutdown", function () {
                            return _this3.emit("shutdown");
                        }), bridge.on("changeTextContent", function (_ref) {
                            var id = _ref.id,
                                text = _ref.text,
                                node = _this3.getNodeForID(id);

                            node && (node.textContent = text);
                        }), bridge.on("putSelectedNode", function (id) {
                            window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                        }), bridge.on("putSelectedInstance", function (id) {
                            var node = _this3.elementData.get(id);

                            node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                        }), bridge.on("checkSelection", function () {
                            var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

                            if (newSelected !== _this3._prevSelected) {
                                _this3._prevSelected = newSelected;
                                var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                                newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                            }
                        }), bridge.on("scrollToNode", function (id) {
                            return _this3.scrollToNode(id);
                        }), bridge.on("traceupdatesstatechange", function (value) {
                            return _this3.emit("traceupdatesstatechange", value);
                        }), bridge.on("colorizerchange", function (value) {
                            return _this3.emit("colorizerchange", value);
                        }), this.on("root", function (id) {
                            return bridge.send("root", id);
                        }), this.on("mount", function (data) {
                            return bridge.send("mount", data);
                        }), this.on("update", function (data) {
                            return bridge.send("update", data);
                        }), this.on("unmount", function (id) {
                            bridge.send("unmount", id), bridge.forget(id);
                        }), this.on("setSelection", function (data) {
                            return bridge.send("select", data);
                        }), this.on("setInspectEnabled", function (data) {
                            return bridge.send("setInspectEnabled", data);
                        });
                    }
                }, {
                    key: "scrollToNode",
                    value: function value(id) {
                        var node = this.getNodeForID(id);
                        if (!node) return void console.warn("unable to get the node for scrolling");
                        var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                        return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                    }
                }, {
                    key: "highlight",
                    value: function value(id) {
                        var data = this.elementData.get(id),
                            node = this.getNodeForID(id);
                        data && node && this.emit("highlight", {
                            node: node,
                            name: data.name,
                            props: data.props
                        });
                    }
                }, {
                    key: "highlightMany",
                    value: function value(ids) {
                        var _this4 = this,
                            nodes = [];

                        ids.forEach(function (id) {
                            var node = _this4.getNodeForID(id);

                            node && nodes.push(node);
                        }), nodes.length && this.emit("highlightMany", nodes);
                    }
                }, {
                    key: "getNodeForID",
                    value: function value(id) {
                        var component = this.internalInstancesById.get(id);
                        if (!component) return null;
                        var renderer = this.renderers.get(id);
                        return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                    }
                }, {
                    key: "selectFromDOMNode",
                    value: function value(node, quiet) {
                        var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            id = this.getIDForNode(node);
                        id && this.emit("setSelection", {
                            id: id,
                            quiet: quiet,
                            offsetFromLeaf: offsetFromLeaf
                        });
                    }
                }, {
                    key: "selectFromReactInstance",
                    value: function value(instance, quiet) {
                        var id = this.getId(instance);
                        return id ? void this.emit("setSelection", {
                            id: id,
                            quiet: quiet
                        }) : void console.log("no instance id", instance);
                    }
                }, {
                    key: "getIDForNode",
                    value: function value(node) {
                        if (!this.reactInternals) return null;
                        var component;

                        for (var renderer in this.reactInternals) {
                            try {
                                component = this.reactInternals[renderer].getReactElementFromNative(node);
                            } catch (e) {}

                            if (component) return this.getId(component);
                        }

                        return null;
                    }
                }, {
                    key: "_setProps",
                    value: function value(_ref2) {
                        var id = _ref2.id,
                            path = _ref2.path,
                            value = _ref2.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                    }
                }, {
                    key: "_setState",
                    value: function value(_ref3) {
                        var id = _ref3.id,
                            path = _ref3.path,
                            value = _ref3.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                    }
                }, {
                    key: "_setContext",
                    value: function value(_ref4) {
                        var id = _ref4.id,
                            path = _ref4.path,
                            value = _ref4.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                    }
                }, {
                    key: "_makeGlobal",
                    value: function value(_ref5) {
                        var id = _ref5.id,
                            path = _ref5.path,
                            data = this.elementData.get(id);

                        if (data) {
                            var value;
                            value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                        }
                    }
                }, {
                    key: "getId",
                    value: function value(internalInstance) {
                        return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                    }
                }, {
                    key: "addRoot",
                    value: function value(renderer, internalInstance) {
                        var id = this.getId(internalInstance);
                        this.roots.add(id), this.emit("root", id);
                    }
                }, {
                    key: "onMounted",
                    value: function value(renderer, component, data) {
                        var _this5 = this,
                            id = this.getId(component);

                        this.renderers.set(id, renderer), this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this5.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                    }
                }, {
                    key: "onUpdated",
                    value: function value(component, data) {
                        var _this6 = this,
                            id = this.getId(component);

                        this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this6.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                    }
                }, {
                    key: "onUnmounted",
                    value: function value(component) {
                        var id = this.getId(component);
                        this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                    }
                }, {
                    key: "_onScroll",
                    value: function value() {
                        this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                    }
                }, {
                    key: "_updateScroll",
                    value: function value() {
                        this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                    }
                }, {
                    key: "_onClick",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                                id: id
                            }), this.emit("setInspectEnabled", !1));
                        }
                    }
                }, {
                    key: "_onMouseOver",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            if (!id) return;
                            this.highlight(id);
                        }
                    }
                }, {
                    key: "_onResize",
                    value: function value(event) {
                        this.emit("stopInspecting");
                    }
                }]), Agent;
            }(EventEmitter);

            module.exports = Agent;
        }, function (module, exports) {
            function EventEmitter() {
                this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
            }

            function isFunction(arg) {
                return "function" == typeof arg;
            }

            function isNumber(arg) {
                return "number" == typeof arg;
            }

            function isObject(arg) {
                return "object" == typeof arg && null !== arg;
            }

            function isUndefined(arg) {
                return void 0 === arg;
            }

            module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                    if (er = arguments[1], er instanceof Error) throw er;
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                    throw err.context = er, err;
                }

                if (handler = this._events[type], isUndefined(handler)) return !1;
                if (isFunction(handler)) switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;

                    case 2:
                        handler.call(this, arguments[1]);
                        break;

                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;

                    default:
                        args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
                } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                    listeners[i].apply(this, args);
                }
                return !0;
            }, EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
                function g() {
                    this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
                }

                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = !1;
                return g.listener = listener, this.on(type, g), this;
            }, EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0) return this;
                    1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
                }
                return this;
            }, EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;

                if (0 === arguments.length) {
                    for (key in this._events) {
                        "removeListener" !== key && this.removeAllListeners(key);
                    }

                    return this.removeAllListeners("removeListener"), this._events = {}, this;
                }

                if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                return delete this._events[type], this;
            }, EventEmitter.prototype.listeners = function (type) {
                var ret;
                return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
            }, EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    if (evlistener) return evlistener.length;
                }

                return 0;
            }, EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
        }, function (module, exports) {
            "use strict";

            function toObject(val) {
                if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(val);
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty,
                propIsEnumerable = Object.prototype.propertyIsEnumerable;

            module.exports = Object.assign || function (target, source) {
                for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        hasOwnProperty.call(from, key) && (to[key] = from[key]);
                    }

                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);

                        for (var i = 0; i < symbols.length; i++) {
                            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                        }
                    }
                }

                return to;
            };
        }, function (module, exports) {
            "use strict";

            function guid() {
                return "g" + Math.random().toString(16).substr(2);
            }

            module.exports = guid;
        }, function (module, exports) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function getIn(base, path) {
                return path.reduce(function (obj, attr) {
                    if (obj) {
                        if (obj.hasOwnProperty(attr)) return obj[attr];
                        if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                    }

                    return null;
                }, base);
            }

            module.exports = getIn;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function getWindowFunction(name, polyfill) {
                return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                consts = __webpack_require__(7),
                hydrate = __webpack_require__(26),
                dehydrate = __webpack_require__(27),
                getIn = __webpack_require__(5),
                performanceNow = __webpack_require__(28),
                lastRunTimeMS = 5,
                cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
                requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
                var delayMS = 3e3 * lastRunTimeMS;
                return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                    var startTime = performanceNow();
                    cb({
                        didTimeout: !1,
                        timeRemaining: function timeRemaining() {
                            return 1 / 0;
                        }
                    });
                    var endTime = performanceNow();
                    lastRunTimeMS = (endTime - startTime) / 1e3;
                }, delayMS);
            }),
                Bridge = function () {
                function Bridge(wall) {
                    _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
                }

                return _createClass(Bridge, [{
                    key: "inspect",
                    value: function value(id, path, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                            cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                        }), this._wall.send({
                            type: "inspect",
                            callback: _cid,
                            path: path,
                            id: id
                        });
                    }
                }, {
                    key: "call",
                    value: function value(name, args, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, cb), this._wall.send({
                            type: "call",
                            callback: _cid,
                            args: args,
                            name: name
                        });
                    }
                }, {
                    key: "onCall",
                    value: function value(name, handler) {
                        if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                        this._callers[name] = handler;
                    }
                }, {
                    key: "pause",
                    value: function value() {
                        this._wall.send({
                            type: "pause"
                        });
                    }
                }, {
                    key: "resume",
                    value: function value() {
                        this._wall.send({
                            type: "resume"
                        });
                    }
                }, {
                    key: "setInspectable",
                    value: function value(id, data) {
                        var prev = this._inspectables.get(id);

                        return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                    }
                }, {
                    key: "send",
                    value: function value(evt, data) {
                        this._buffer.push({
                            evt: evt,
                            data: data
                        }), this.scheduleFlush();
                    }
                }, {
                    key: "scheduleFlush",
                    value: function value() {
                        if (!this._flushHandle && this._buffer.length) {
                            var timeout = this._paused ? 5e3 : 500;
                            this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                                timeout: timeout
                            });
                        }
                    }
                }, {
                    key: "cancelFlush",
                    value: function value() {
                        this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                    }
                }, {
                    key: "flushBufferWhileIdle",
                    value: function value(deadline) {
                        this._flushHandle = null;

                        for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                            var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                                currentBuffer = this._buffer.splice(0, take);

                            this.flushBufferSlice(currentBuffer);
                        }

                        this._buffer.length && this.scheduleFlush();
                    }
                }, {
                    key: "flushBufferSlice",
                    value: function value(bufferSlice) {
                        var _this = this,
                            events = bufferSlice.map(function (_ref) {
                            var evt = _ref.evt,
                                data = _ref.data,
                                cleaned = [],
                                san = dehydrate(data, cleaned);
                            return cleaned.length && _this.setInspectable(data.id, data), {
                                type: "event",
                                evt: evt,
                                data: san,
                                cleaned: cleaned
                            };
                        });

                        this._wall.send({
                            type: "many-events",
                            events: events
                        });
                    }
                }, {
                    key: "forget",
                    value: function value(id) {
                        this._inspectables["delete"](id);
                    }
                }, {
                    key: "on",
                    value: function value(evt, fn) {
                        this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                    }
                }, {
                    key: "off",
                    value: function value(evt, fn) {
                        if (this._listeners[evt]) {
                            var ix = this._listeners[evt].indexOf(fn);

                            ix !== -1 && this._listeners[evt].splice(ix, 1);
                        }
                    }
                }, {
                    key: "once",
                    value: function value(evt, fn) {
                        var self = this,
                            listener = function listener() {
                            fn.apply(this, arguments), self.off(evt, listener);
                        };

                        this.on(evt, listener);
                    }
                }, {
                    key: "_handleMessage",
                    value: function value(payload) {
                        var _this2 = this;

                        if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                        if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();

                        if ("callback" === payload.type) {
                            var callback = this._cbs.get(payload.id);

                            return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                        }

                        if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                        if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);

                        if ("event" === payload.type) {
                            payload.cleaned && hydrate(payload.data, payload.cleaned);
                            var fns = this._listeners[payload.evt],
                                data = payload.data;
                            fns && fns.forEach(function (fn) {
                                return fn(data);
                            });
                        }

                        "many-events" === payload.type && payload.events.forEach(function (event) {
                            event.cleaned && hydrate(event.data, event.cleaned);
                            var handlers = _this2._listeners[event.evt];
                            handlers && handlers.forEach(function (fn) {
                                return fn(event.data);
                            });
                        });
                    }
                }, {
                    key: "_handleCall",
                    value: function value(name, args, callback) {
                        if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                        args = Array.isArray(args) ? args : [args];
                        var result;

                        try {
                            result = this._callers[name].apply(null, args);
                        } catch (e) {
                            return void console.error("Failed to call", e);
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result]
                        });
                    }
                }, {
                    key: "_inspectResponse",
                    value: function value(id, path, callback) {
                        var inspectable = this._inspectables.get(id),
                            result = {},
                            cleaned = [],
                            proto = null,
                            protoclean = [];

                        if (inspectable) {
                            var val = getIn(inspectable, path),
                                protod = !1,
                                isFn = "function" == typeof val;

                            if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                                var iterVal = Object.create({}),
                                    count = 0,
                                    _iteratorNormalCompletion = !0,
                                    _didIteratorError = !1,
                                    _iteratorError = void 0;

                                try {
                                    for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                        var entry = _step.value;
                                        if (count > 100) break;
                                        iterVal[count] = entry, count++;
                                    }
                                } catch (err) {
                                    _didIteratorError = !0, _iteratorError = err;
                                } finally {
                                    try {
                                        !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                    } finally {
                                        if (_didIteratorError) throw _iteratorError;
                                    }
                                }

                                val = iterVal;
                            }

                            if (Object.getOwnPropertyNames(val).forEach(function (name) {
                                "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                            }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                                var newProto = {},
                                    pIsFn = "function" == typeof val.__proto__;
                                Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                    (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                                }), proto = newProto;
                            }
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result, cleaned, proto, protoclean]
                        });
                    }
                }]), Bridge;
            }();

            module.exports = Bridge;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var _Symbol = __webpack_require__(8);

            module.exports = {
                name: _Symbol("name"),
                type: _Symbol("type"),
                inspected: _Symbol("inspected"),
                meta: _Symbol("meta"),
                proto: _Symbol("proto")
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var symbol;
                if ("function" != typeof Symbol) return !1;
                symbol = Symbol("test symbol");

                try {
                    String(symbol);
                } catch (e) {
                    return !1;
                }

                return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var NativeSymbol,
                SymbolPolyfill,
                _HiddenSymbol,
                d = __webpack_require__(11),
                validateSymbol = __webpack_require__(24),
                create = Object.create,
                defineProperties = Object.defineProperties,
                defineProperty = Object.defineProperty,
                objPrototype = Object.prototype,
                globalSymbols = create(null);

            "function" == typeof Symbol && (NativeSymbol = Symbol);

            var generateName = function () {
                var created = create(null);
                return function (desc) {
                    for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                        ++postfix;
                    }

                    return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                        ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                    })), name;
                };
            }();

            _HiddenSymbol = function HiddenSymbol(description) {
                if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return SymbolPolyfill(description);
            }, module.exports = SymbolPolyfill = function Symbol(description) {
                var symbol;
                if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                    __description__: d("", description),
                    __name__: d("", generateName(description))
                });
            }, defineProperties(SymbolPolyfill, {
                "for": d(function (key) {
                    return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
                }),
                keyFor: d(function (s) {
                    var key;
                    validateSymbol(s);

                    for (key in globalSymbols) {
                        if (globalSymbols[key] === s) return key;
                    }
                }),
                hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
            }), defineProperties(_HiddenSymbol.prototype, {
                constructor: d(SymbolPolyfill),
                toString: d("", function () {
                    return this.__name__;
                })
            }), defineProperties(SymbolPolyfill.prototype, {
                toString: d(function () {
                    return "Symbol (" + validateSymbol(this).__description__ + ")";
                }),
                valueOf: d(function () {
                    return validateSymbol(this);
                })
            }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
                return validateSymbol(this);
            })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var d,
                assign = __webpack_require__(12),
                normalizeOpts = __webpack_require__(19),
                isCallable = __webpack_require__(20),
                contains = __webpack_require__(21);

            d = module.exports = function (dscr, value) {
                var c, e, w, options, desc;
                return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                    value: value,
                    configurable: c,
                    enumerable: e,
                    writable: w
                }, options ? assign(normalizeOpts(options), desc) : desc;
            }, d.gs = function (dscr, get, set) {
                var c, e, options, desc;
                return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                    get: get,
                    set: set,
                    configurable: c,
                    enumerable: e
                }, options ? assign(normalizeOpts(options), desc) : desc;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var obj,
                    assign = Object.assign;
                return "function" == typeof assign && (obj = {
                    foo: "raz"
                }, assign(obj, {
                    bar: "dwa"
                }, {
                    trzy: "trzy"
                }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var keys = __webpack_require__(15),
                value = __webpack_require__(18),
                max = Math.max;

            module.exports = function (dest, src) {
                var error,
                    i,
                    assign,
                    l = max(arguments.length, 2);

                for (dest = Object(value(dest)), assign = function assign(key) {
                    try {
                        dest[key] = src[key];
                    } catch (e) {
                        error || (error = e);
                    }
                }, i = 1; i < l; ++i) {
                    src = arguments[i], keys(src).forEach(assign);
                }

                if (void 0 !== error) throw error;
                return dest;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                try {
                    return Object.keys("primitive"), !0;
                } catch (e) {
                    return !1;
                }
            };
        }, function (module, exports) {
            "use strict";

            var keys = Object.keys;

            module.exports = function (object) {
                return keys(null == object ? object : Object(object));
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (value) {
                if (null == value) throw new TypeError("Cannot use null or undefined");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            var forEach = Array.prototype.forEach,
                create = Object.create,
                process = function process(src, obj) {
                var key;

                for (key in src) {
                    obj[key] = src[key];
                }
            };

            module.exports = function (options) {
                var result = create(null);
                return forEach.call(arguments, function (options) {
                    null != options && process(Object(options), result);
                }), result;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (obj) {
                return "function" == typeof obj;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
        }, function (module, exports) {
            "use strict";

            var str = "razdwatrzy";

            module.exports = function () {
                return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
            };
        }, function (module, exports) {
            "use strict";

            var indexOf = String.prototype.indexOf;

            module.exports = function (searchString) {
                return indexOf.call(this, searchString, arguments[1]) > -1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var isSymbol = __webpack_require__(25);

            module.exports = function (value) {
                if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (x) {
                return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function hydrate(data, cleaned) {
                cleaned.forEach(function (path) {
                    var last = path.pop(),
                        obj = path.reduce(function (obj_, attr) {
                        return obj_ ? obj_[attr] : null;
                    }, data);

                    if (obj && obj[last]) {
                        var replace = {};
                        replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                    }
                });
            }

            var consts = __webpack_require__(7);

            module.exports = hydrate;
        }, function (module, exports) {
            "use strict";

            function getPropType(data) {
                if (!data) return null;
                var type = "undefined" == typeof data ? "undefined" : _typeof(data);

                if ("object" === type) {
                    if (data._reactFragment) return "react_fragment";
                    if (Array.isArray(data)) return "array";
                    if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                    if (data instanceof ArrayBuffer) return "array_buffer";
                    if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                    if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
                }

                return type;
            }

            function createDehydrated(type, data, cleaned, path) {
                var meta = {};
                return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                    type: type,
                    meta: meta,
                    name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
                };
            }

            function dehydrate(data, cleaned) {
                var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                    type = getPropType(data);

                switch (type) {
                    case "function":
                        return cleaned.push(path), {
                            name: data.name,
                            type: "function"
                        };

                    case "string":
                        return data.length <= 500 ? data : data.slice(0, 500) + "...";

                    case "symbol":
                        return cleaned.push(path), {
                            type: "symbol",
                            name: data.toString()
                        };

                    case "react_fragment":
                        return "A React Fragment";

                    case "array_buffer":
                    case "data_view":
                        return cleaned.push(path), {
                            type: type,
                            name: "data_view" === type ? "DataView" : "ArrayBuffer",
                            meta: {
                                length: data.byteLength,
                                uninspectable: !0
                            }
                        };

                    case "array":
                        return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                            return dehydrate(item, cleaned, path.concat([i]), level + 1);
                        });

                    case "typed_array":
                    case "iterator":
                        return createDehydrated(type, data, cleaned, path);

                    case "date":
                        return cleaned.push(path), {
                            name: data.toString(),
                            type: "date",
                            meta: {
                                uninspectable: !0
                            }
                        };

                    case "object":
                        if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                        var res = {};

                        for (var name in data) {
                            res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                        }

                        return res;

                    default:
                        return data;
                }
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            };

            module.exports = dehydrate;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performanceNow,
                performance = __webpack_require__(29);

            performanceNow = performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            }, module.exports = performanceNow;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performance,
                ExecutionEnvironment = __webpack_require__(30);

            ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
        }, function (module, exports) {
            "use strict";

            var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
                ExecutionEnvironment = {
                canUseDOM: canUseDOM,
                canUseWorkers: "undefined" != typeof Worker,
                canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
                canUseViewport: canUseDOM && !!window.screen,
                isInWorker: !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, function (module, exports) {
            "use strict";

            function installGlobalHook(window) {
                function detectReactBuildType(renderer) {
                    try {
                        if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                        var toString = Function.prototype.toString;

                        if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                            var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                            return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                        }
                    } catch (err) {}

                    return "production";
                }

                if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    var hasDetectedBadDCE = !1,
                        hook = {
                        _renderers: {},
                        helpers: {},
                        checkDCE: function checkDCE(fn) {
                            try {
                                var toString = Function.prototype.toString,
                                    code = toString.call(fn);
                                code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fb.me/react-perf-use-the-production-build");
                                }));
                            } catch (err) {}
                        },
                        inject: function inject(renderer) {
                            var id = Math.random().toString(16).slice(2);
                            hook._renderers[id] = renderer;
                            var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                            return hook.emit("renderer", {
                                id: id,
                                renderer: renderer,
                                reactBuildType: reactBuildType
                            }), id;
                        },
                        _listeners: {},
                        sub: function sub(evt, fn) {
                            return hook.on(evt, fn), function () {
                                return hook.off(evt, fn);
                            };
                        },
                        on: function on(evt, fn) {
                            hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                        },
                        off: function off(evt, fn) {
                            if (hook._listeners[evt]) {
                                var ix = hook._listeners[evt].indexOf(fn);

                                ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                            }
                        },
                        emit: function emit(evt, data) {
                            hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                                return fn(data);
                            });
                        },
                        supportsFiber: !0,
                        _fiberRoots: {},
                        getFiberRoots: function getFiberRoots(rendererID) {
                            var roots = hook._fiberRoots;
                            return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                        },
                        onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                            hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                        },
                        onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                            var mountedRoots = hook.getFiberRoots(rendererID),
                                current = root.current,
                                isKnownRoot = mountedRoots.has(root),
                                isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                            isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                        }
                    };
                    Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                        value: hook
                    });
                }
            }

            module.exports = installGlobalHook;
        }, function (module, exports) {
            "use strict";

            function installRelayHook(window) {
                function decorate(obj, attr, fn) {
                    var old = obj[attr];

                    obj[attr] = function () {
                        var res = old.apply(this, arguments);
                        return fn.apply(this, arguments), res;
                    };
                }

                function emit(name, data) {
                    _eventQueue.push({
                        name: name,
                        data: data
                    }), _listener && _listener(name, data);
                }

                function setRequestListener(listener) {
                    if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                    return _listener = listener, _eventQueue.forEach(function (_ref) {
                        var name = _ref.name,
                            data = _ref.data;
                        listener(name, data);
                    }), function () {
                        _listener = null;
                    };
                }

                function recordRequest(type, start, request, requestNumber) {
                    var id = Math.random().toString(16).substr(2);
                    request.then(function (response) {
                        emit("relay:success", {
                            id: id,
                            end: performanceNow(),
                            response: response.response
                        });
                    }, function (error) {
                        emit("relay:failure", {
                            id: id,
                            end: performanceNow(),
                            error: error
                        });
                    });

                    for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                        textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                    }

                    return {
                        id: id,
                        name: request.getDebugName(),
                        requestNumber: requestNumber,
                        start: start,
                        text: textChunks,
                        type: type,
                        variables: request.getVariables()
                    };
                }

                function instrumentRelayRequests(relayInternals) {
                    var NetworkLayer = relayInternals.NetworkLayer;
                    decorate(NetworkLayer, "sendMutation", function (mutation) {
                        requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                    }), decorate(NetworkLayer, "sendQueries", function (queries) {
                        requestNumber++;
                        var start = performanceNow();
                        emit("relay:pending", queries.map(function (query) {
                            return recordRequest("query", start, query, requestNumber);
                        }));
                    });
                    var instrumented = {};

                    for (var key in relayInternals) {
                        relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                    }

                    return instrumented.setRequestListener = setRequestListener, instrumented;
                }

                var performanceNow,
                    performance = window.performance;
                performanceNow = performance && "function" == typeof performance.now ? function () {
                    return performance.now();
                } : function () {
                    return Date.now();
                };
                var TEXT_CHUNK_LENGTH = 500,
                    hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook) {
                    var _eventQueue = [],
                        _listener = null,
                        requestNumber = 0,
                        _relayInternals = null;
                    Object.defineProperty(hook, "_relayInternals", {
                        configurable: !0,
                        set: function set(relayInternals) {
                            _relayInternals = instrumentRelayRequests(relayInternals);
                        },
                        get: function get() {
                            return _relayInternals;
                        }
                    });
                }
            }

            module.exports = installRelayHook;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var setupBackend = __webpack_require__(34);

            module.exports = function (hook, agent) {
                var subs = [hook.sub("renderer-attached", function (_ref) {
                    var id = _ref.id,
                        helpers = (_ref.renderer, _ref.helpers);
                    agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
                }), hook.sub("root", function (_ref2) {
                    var renderer = _ref2.renderer,
                        internalInstance = _ref2.internalInstance;
                    return agent.addRoot(renderer, internalInstance);
                }), hook.sub("mount", function (_ref3) {
                    var renderer = _ref3.renderer,
                        internalInstance = _ref3.internalInstance,
                        data = _ref3.data;
                    return agent.onMounted(renderer, internalInstance, data);
                }), hook.sub("update", function (_ref4) {
                    var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                        data = _ref4.data;
                    return agent.onUpdated(internalInstance, data);
                }), hook.sub("unmount", function (_ref5) {
                    var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                    return agent.onUnmounted(internalInstance);
                })],
                    success = setupBackend(hook);
                success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                    subs.forEach(function (fn) {
                        return fn();
                    }), hook.reactDevtoolsAgent = null;
                }));
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var attachRenderer = __webpack_require__(35);

            module.exports = function (hook) {
                var oldReact = window.React && window.React.__internals;
                oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);

                for (var rid in hook._renderers) {
                    hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                        id: rid,
                        renderer: hook._renderers[rid],
                        helpers: hook.helpers[rid]
                    });
                }

                hook.on("renderer", function (_ref) {
                    var id = _ref.id,
                        renderer = _ref.renderer;
                    hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                        id: id,
                        renderer: renderer,
                        helpers: hook.helpers[id]
                    });
                });

                var shutdown = function shutdown() {
                    for (var id in hook.helpers) {
                        hook.helpers[id].cleanup();
                    }

                    hook.off("shutdown", shutdown);
                };

                return hook.on("shutdown", shutdown), !0;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRenderer(hook, rid, renderer) {
                var rootNodeIDMap = new Map(),
                    extras = {},
                    isPre013 = !renderer.Reconciler;
                if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
                renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.Mount.findNodeHandle(component);
                }, extras.getReactElementFromNative = function (nativeTag) {
                    var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                    return rootNodeIDMap.get(id);
                }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.ComponentTree.getNodeFromInstance(component);
                }, extras.getReactElementFromNative = function (node) {
                    return renderer.ComponentTree.getClosestInstanceFromNode(node);
                }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                    try {
                        return renderer.Mount.getNode(component._rootNodeID);
                    } catch (e) {
                        return;
                    }
                }, extras.getReactElementFromNative = function (node) {
                    for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                        node = node.parentNode, id = renderer.Mount.getID(node);
                    }

                    return rootNodeIDMap.get(id);
                }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
                var oldMethods, oldRenderComponent, oldRenderRoot;
                return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance
                    });
                }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance._reactInternalInstance
                    });
                })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                    mountComponent: function mountComponent() {
                        var _this = this;

                        rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                            hook.emit("mount", {
                                internalInstance: _this,
                                data: getData012(_this),
                                renderer: rid
                            });
                        }, 0);
                    },
                    updateComponent: function updateComponent() {
                        var _this2 = this;

                        setTimeout(function () {
                            hook.emit("update", {
                                internalInstance: _this2,
                                data: getData012(_this2),
                                renderer: rid
                            });
                        }, 0);
                    },
                    unmountComponent: function unmountComponent() {
                        hook.emit("unmount", {
                            internalInstance: this,
                            renderer: rid
                        }), rootNodeIDMap["delete"](this._rootNodeID, this);
                    }
                })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                    mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                        var data = getData(internalInstance);
                        rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                            internalInstance: internalInstance,
                            data: data,
                            renderer: rid
                        });
                    },
                    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    unmountComponent: function unmountComponent(internalInstance) {
                        hook.emit("unmount", {
                            internalInstance: internalInstance,
                            renderer: rid
                        }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                    }
                })), extras.walkTree = function (visit, visitRoot) {
                    var onMount = function onMount(component, data) {
                        rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                    };

                    walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
                }, extras.cleanup = function () {
                    oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
                }, extras;
            }

            function walkRoots(roots, onMount, onRoot, isPre013) {
                for (var name in roots) {
                    walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
                }
            }

            function walkNode(internalInstance, onMount, isPre013) {
                var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
                data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                    return walkNode(child, onMount, isPre013);
                }), onMount(internalInstance, data);
            }

            function decorateResult(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn(res), res;
                }, old;
            }

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, old;
            }

            function decorateMany(source, fns) {
                var olds = {};

                for (var name in fns) {
                    olds[name] = decorate(source, name, fns[name]);
                }

                return olds;
            }

            function restoreMany(source, olds) {
                for (var name in olds) {
                    source[name] = olds[name];
                }
            }

            var getData = __webpack_require__(36),
                getData012 = __webpack_require__(41),
                attachRendererFiber = __webpack_require__(42);

            module.exports = attachRenderer;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData(internalInstance) {
                var children = null,
                    props = null,
                    state = null,
                    context = null,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    source = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                    var unfilteredChildren = internalInstance._currentElement.props.children,
                        filteredChildren = [];
                    traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                        var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                        "string" !== childType && "number" !== childType || filteredChildren.push(child);
                    }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
                }

                if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                    var inst = internalInstance._instance,
                        forceUpdate = inst.forceUpdate || inst.updater && inst.updater.enqueueForceUpdate && function (cb) {
                        inst.updater.enqueueForceUpdate(this, cb, "forceUpdate");
                    };

                    updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: forceUpdate && forceUpdate.bind(inst),
                        setInProps: forceUpdate && setInProps.bind(null, internalInstance, forceUpdate),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: forceUpdate && setInContext.bind(null, inst, forceUpdate)
                    }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
                }

                return "function" == typeof internalInstance.setNativeProps && (updater = {
                    setNativeProps: function setNativeProps(nativeProps) {
                        internalInstance.setNativeProps(nativeProps);
                    }
                }), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(internalInst, forceUpdate, path, value) {
                var element = internalInst._currentElement;
                internalInst._currentElement = _extends({}, element, {
                    props: copyWithSet(element.props, path, value)
                }), forceUpdate.call(internalInst._instance);
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, forceUpdate, path, value) {
                setIn(inst.context, path, value), forceUpdate.call(inst);
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                traverseAllChildrenImpl = __webpack_require__(39);

            module.exports = getData;
        }, function (module, exports) {
            "use strict";

            function copyWithSetImpl(obj, path, idx, value) {
                if (idx >= path.length) return value;
                var key = path[idx],
                    updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
                return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
            }

            function copyWithSet(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            };

            module.exports = copyWithSet;
        }, function (module, exports) {
            "use strict";

            function getDisplayName(type) {
                if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
                var displayName = void 0;
                "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
                var match = displayName.match(FB_MODULE_RE);

                if (match) {
                    var componentName = match[1],
                        moduleName = match[2];
                    componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
                }

                return cachedDisplayNames.set(type, displayName), displayName;
            }

            var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
                cachedDisplayNames = new WeakMap();
            module.exports = getDisplayName;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function escape(key) {
                var escapeRegex = /[=:]/g,
                    escaperLookup = {
                    "=": "=0",
                    ":": "=2"
                },
                    escapedString = ("" + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return "$" + escapedString;
            }

            function getComponentKey(component, index) {
                return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
            }

            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = "undefined" == typeof children ? "undefined" : _typeof(children);
                if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
                var child,
                    nextName,
                    subtreeCount = 0,
                    nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                        child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    } else if ("object" === type) {
                        var addendum = " If you meant to render a collection of children, use an array instead.",
                            childrenString = "" + children;
                        invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                invariant = __webpack_require__(40),
                SEPARATOR = ".",
                SUBSEPARATOR = ":",
                FAUX_ITERATOR_SYMBOL = "@@iterator",
                ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
                REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;

            module.exports = traverseAllChildrenImpl;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function invariant(condition, format, a, b, c, d, e, f) {
                if (!condition) {
                    var error;
                    if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                        var args = [a, b, c, d, e, f],
                            argIndex = 0;
                        error = new Error(format.replace(/%s/g, function () {
                            return args[argIndex++];
                        })), error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }

            module.exports = invariant;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData012(internalInstance) {
                var children = null,
                    props = internalInstance.props,
                    state = internalInstance.state,
                    context = internalInstance.context,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                    setState: internalInstance.setState.bind(internalInstance),
                    forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                    setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                    setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
                }, publicInstance = internalInstance), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: null,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(inst, path, value) {
                inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var copyWithSet = __webpack_require__(37);

            module.exports = getData012;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRendererFiber(hook, rid, renderer) {
                function getOpaqueNode(fiber) {
                    if (opaqueNodes.has(fiber)) return fiber;
                    var alternate = fiber.alternate;
                    return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
                }

                function hasDataChanged(prevFiber, nextFiber) {
                    if (prevFiber.tag === ClassComponent) {
                        if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                        if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                        if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                    }

                    return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
                }

                function flushPendingEvents() {
                    var events = pendingEvents;
                    pendingEvents = [];

                    for (var i = 0; i < events.length; i++) {
                        var event = events[i];
                        hook.emit(event.type, event);
                    }
                }

                function enqueueMount(fiber) {
                    pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "mount"
                    });
                    var isRoot = fiber.tag === HostRoot;
                    isRoot && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        renderer: rid,
                        type: "root"
                    });
                }

                function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                    (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "update"
                    });
                }

                function enqueueUnmount(fiber) {
                    var isRoot = fiber.tag === HostRoot,
                        opaqueNode = getOpaqueNode(fiber),
                        event = {
                        internalInstance: opaqueNode,
                        renderer: rid,
                        type: "unmount"
                    };
                    isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
                }

                function mountFiber(fiber) {
                    var node = fiber;

                    outer: for (;;) {
                        if (node.child) node.child["return"] = node, node = node.child;else {
                            if (enqueueMount(node), node == fiber) return;

                            if (!node.sibling) {
                                for (; node["return"];) {
                                    if (node = node["return"], enqueueMount(node), node == fiber) return;

                                    if (node.sibling) {
                                        node.sibling["return"] = node["return"], node = node.sibling;
                                        continue outer;
                                    }
                                }

                                return;
                            }

                            node.sibling["return"] = node["return"], node = node.sibling;
                        }
                    }
                }

                function updateFiber(nextFiber, prevFiber) {
                    var hasChildOrderChanged = !1;

                    if (nextFiber.child !== prevFiber.child) {
                        for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                            if (nextChild.alternate) {
                                var prevChild = nextChild.alternate;
                                updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                            } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);

                            nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                        }

                        hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                    }

                    enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
                }

                function walkTree() {
                    hook.getFiberRoots(rid).forEach(function (root) {
                        mountFiber(root.current);
                    }), flushPendingEvents();
                }

                function cleanup() {}

                function handleCommitFiberUnmount(fiber) {
                    enqueueUnmount(fiber);
                }

                function handleCommitFiberRoot(root) {
                    var current = root.current,
                        alternate = current.alternate;

                    if (alternate) {
                        var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                            isMounted = null != current.memoizedState && null != current.memoizedState.element;
                        !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                    } else mountFiber(current);

                    flushPendingEvents();
                }

                function getNativeFromReactElement(fiber) {
                    try {
                        var opaqueNode = fiber,
                            hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                        return hostInstance;
                    } catch (err) {
                        return null;
                    }
                }

                function getReactElementFromNative(hostInstance) {
                    var fiber = renderer.findFiberByHostInstance(hostInstance);

                    if (null != fiber) {
                        var opaqueNode = getOpaqueNode(fiber);
                        return opaqueNode;
                    }

                    return null;
                }

                var opaqueNodes = new Set(),
                    pendingEvents = [];
                return {
                    getNativeFromReactElement: getNativeFromReactElement,
                    getReactElementFromNative: getReactElementFromNative,
                    handleCommitFiberRoot: handleCommitFiberRoot,
                    handleCommitFiberUnmount: handleCommitFiberUnmount,
                    cleanup: cleanup,
                    walkTree: walkTree
                };
            }

            var getDataFiber = __webpack_require__(43),
                _require = __webpack_require__(44),
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                PerformedWork = 1;

            module.exports = attachRendererFiber;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getDataFiber(fiber, getOpaqueNode) {
                var type = fiber.type,
                    key = fiber.key,
                    ref = fiber.ref,
                    source = fiber._debugSource,
                    publicInstance = null,
                    props = null,
                    state = null,
                    children = null,
                    context = null,
                    updater = null,
                    nodeType = null,
                    name = null,
                    text = null;

                switch (fiber.tag) {
                    case FunctionalComponent:
                    case ClassComponent:
                        nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                        var inst = publicInstance;
                        inst && (updater = {
                            setState: inst.setState && inst.setState.bind(inst),
                            forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                            setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                            setInState: inst.forceUpdate && setInState.bind(null, inst),
                            setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                        }), children = [];
                        break;

                    case HostRoot:
                        nodeType = "Wrapper", children = [];
                        break;

                    case HostPortal:
                        nodeType = "Portal", name = "ReactPortal", props = {
                            target: fiber.stateNode.containerInfo
                        }, children = [];
                        break;

                    case HostComponent:
                        nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                            setNativeProps: function setNativeProps(nativeProps) {
                                fiber.stateNode.setNativeProps(nativeProps);
                            }
                        });
                        break;

                    case HostText:
                        nodeType = "Text", text = fiber.memoizedProps;
                        break;

                    case Fragment:
                        nodeType = "Wrapper", children = [];
                        break;

                    default:
                        nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
                }

                if (Array.isArray(children)) for (var child = fiber.child; child;) {
                    children.push(getOpaqueNode(child)), child = child.sibling;
                }
                return {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(fiber, path, value) {
                var inst = fiber.stateNode;
                fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            var copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                _require = __webpack_require__(44),
                FunctionalComponent = _require.FunctionalComponent,
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                HostPortal = _require.HostPortal,
                HostComponent = _require.HostComponent,
                HostText = _require.HostText,
                Fragment = _require.Fragment;

            module.exports = getDataFiber;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                IndeterminateComponent: 0,
                FunctionalComponent: 1,
                ClassComponent: 2,
                HostRoot: 3,
                HostPortal: 4,
                HostComponent: 5,
                HostText: 6,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                YieldComponent: 9,
                Fragment: 10
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }

            function measureStyle(agent, bridge, resolveRNStyle, id) {
                var node = agent.elementData.get(id);
                if (!node || !node.props) return void bridge.send("rn-style:measure", {});
                var style = resolveRNStyle(node.props.style);
                styleOverridesByHostComponentId[id] && (style = babelHelpers.extends({}, style, styleOverridesByHostComponentId[id]));
                var instance = node.publicInstance;
                return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                    if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                        style: style
                    });
                    var margin = style && resolveBoxStyle("margin", style) || blank,
                        padding = style && resolveBoxStyle("padding", style) || blank;
                    bridge.send("rn-style:measure", {
                        style: style,
                        measuredLayout: {
                            x: x,
                            y: y,
                            width: width,
                            height: height,
                            left: left,
                            top: top,
                            margin: margin,
                            padding: padding
                        }
                    });
                }) : void bridge.send("rn-style:measure", {
                    style: style
                });
            }

            function shallowClone(obj) {
                var nobj = {};

                for (var n in obj) {
                    nobj[n] = obj[n];
                }

                return nobj;
            }

            function renameStyle(agent, id, oldName, newName, val) {
                var _ref3,
                    data = agent.elementData.get(id),
                    newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);

                if (data && data.updater && data.updater.setInProps) {
                    var customStyle,
                        style = data && data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                    } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            function setStyle(agent, id, attr, val) {
                var data = agent.elementData.get(id),
                    newStyle = _defineProperty({}, attr, val);

                if (data && data.updater && data.updater.setInProps) {
                    var style = data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                    } else style = [style, newStyle], data.updater.setInProps(["style"], style);
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                resolveBoxStyle = __webpack_require__(46),
                styleOverridesByHostComponentId = {};

            module.exports = function (bridge, agent, resolveRNStyle) {
                bridge.onCall("rn-style:get", function (id) {
                    var node = agent.elementData.get(id);
                    return node && node.props ? resolveRNStyle(node.props.style) : null;
                }), bridge.on("rn-style:measure", function (id) {
                    measureStyle(agent, bridge, resolveRNStyle, id);
                }), bridge.on("rn-style:rename", function (_ref) {
                    var id = _ref.id,
                        oldName = _ref.oldName,
                        newName = _ref.newName,
                        val = _ref.val;
                    renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                }), bridge.on("rn-style:set", function (_ref2) {
                    var id = _ref2.id,
                        attr = _ref2.attr,
                        val = _ref2.val;
                    setStyle(agent, id, attr, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                });
            };

            var blank = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }, function (module, exports) {
            "use strict";

            function resolveBoxStyle(prefix, style) {
                var res = {},
                    subs = ["top", "left", "bottom", "right"],
                    set = !1;
                return subs.forEach(function (sub) {
                    res[sub] = style[prefix] || 0;
                }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                    var val = style[prefix + capFirst(sub)];
                    val && (res[sub] = val, set = !0);
                }), set ? res : null;
            }

            function capFirst(text) {
                return text[0].toUpperCase() + text.slice(1);
            }

            module.exports = resolveBoxStyle;
        }, function (module, exports) {
            "use strict";

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, function () {
                    obj[attr] = old;
                };
            }

            var subscriptionEnabled = !1;

            module.exports = function (bridge, agent, hook) {
                function sendStoreData() {
                    subscriptionEnabled && bridge.send("relay:store", {
                        id: "relay:store",
                        nodes: DefaultStoreData.getNodeData()
                    });
                }

                var shouldEnable = !!hook._relayInternals;

                if (bridge.onCall("relay:check", function () {
                    return shouldEnable;
                }), shouldEnable) {
                    var _hook$_relayInternals = hook._relayInternals,
                        DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                        setRequestListener = _hook$_relayInternals.setRequestListener;
                    bridge.onCall("relay:store:enable", function () {
                        subscriptionEnabled = !0, sendStoreData();
                    }), bridge.onCall("relay:store:disable", function () {
                        subscriptionEnabled = !1;
                    }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                    var removeListener = setRequestListener(function (event, data) {
                        bridge.send(event, data);
                    });
                    hook.on("shutdown", removeListener);
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var Highlighter = __webpack_require__(49);

            module.exports = function (agent) {
                var hl = new Highlighter(window, function (node) {
                    agent.selectFromDOMNode(node);
                });
                agent.on("highlight", function (data) {
                    return hl.highlight(data.node, data.name);
                }), agent.on("highlightMany", function (nodes) {
                    return hl.highlightMany(nodes);
                }), agent.on("hideHighlight", function () {
                    return hl.hideHighlight();
                }), agent.on("refreshMultiOverlay", function () {
                    return hl.refreshMultiOverlay();
                }), agent.on("startInspecting", function () {
                    return hl.startInspecting();
                }), agent.on("stopInspecting", function () {
                    return hl.stopInspecting();
                }), agent.on("shutdown", function () {
                    hl.remove();
                });
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function captureSubscription(obj, evt, cb) {
                return obj.addEventListener(evt, cb, !0), function () {
                    return obj.removeEventListener(evt, cb, !0);
                };
            }

            function makeMagnifier() {
                var button = window.document.createElement("button");
                return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                Overlay = __webpack_require__(50),
                MultiOverlay = __webpack_require__(52),
                Highlighter = function () {
                function Highlighter(win, onSelect) {
                    _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
                }

                return _createClass(Highlighter, [{
                    key: "startInspecting",
                    value: function value() {
                        this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                    }
                }, {
                    key: "stopInspecting",
                    value: function value() {
                        this._subs.forEach(function (unsub) {
                            return unsub();
                        }), this.hideHighlight();
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                    }
                }, {
                    key: "highlight",
                    value: function value(node, name) {
                        this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                    }
                }, {
                    key: "highlightMany",
                    value: function value(nodes) {
                        this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                    }
                }, {
                    key: "hideHighlight",
                    value: function value() {
                        this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                    }
                }, {
                    key: "refreshMultiOverlay",
                    value: function value() {
                        this._multiOverlay && this._multiOverlay.refresh();
                    }
                }, {
                    key: "removeOverlay",
                    value: function value() {
                        this._overlay && (this._overlay.remove(), this._overlay = null);
                    }
                }, {
                    key: "removeMultiOverlay",
                    value: function value() {
                        this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                    }
                }, {
                    key: "onMouseDown",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                    }
                }, {
                    key: "onClick",
                    value: function value(evt) {
                        this._inspecting && (this._subs.forEach(function (unsub) {
                            return unsub();
                        }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                    }
                }, {
                    key: "onHover",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                    }
                }, {
                    key: "injectButton",
                    value: function value() {
                        this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                    }
                }]), Highlighter;
            }();

            module.exports = Highlighter;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function findTipPos(dims, win) {
                var top,
                    tipHeight = 20,
                    margin = 5;
                return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                    top: top,
                    left: margin
                } : dims.left + 200 > win.innerWidth ? {
                    top: top,
                    right: margin
                } : {
                    top: top,
                    left: dims.left + margin + "px"
                };
            }

            function getElementDimensions(domElement) {
                var calculatedStyle = window.getComputedStyle(domElement);
                return {
                    borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                    borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                    borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                    borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                    marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                    marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                    marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                    marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                    paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                    paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                    paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                    paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
                };
            }

            function getOwnerWindow(node) {
                return node.ownerDocument ? node.ownerDocument.defaultView : null;
            }

            function getOwnerIframe(node) {
                var nodeWindow = getOwnerWindow(node);
                return nodeWindow ? nodeWindow.frameElement : null;
            }

            function getBoundingClientRectWithBorderOffset(node) {
                var dimensions = getElementDimensions(node);
                return mergeRectOffsets([node.getBoundingClientRect(), {
                    top: dimensions.borderTop,
                    left: dimensions.borderLeft,
                    bottom: dimensions.borderBottom,
                    right: dimensions.borderRight,
                    width: 0,
                    height: 0
                }]);
            }

            function mergeRectOffsets(rects) {
                return rects.reduce(function (previousRect, rect) {
                    return null == previousRect ? rect : {
                        top: previousRect.top + rect.top,
                        left: previousRect.left + rect.left,
                        width: previousRect.width,
                        height: previousRect.height,
                        bottom: previousRect.bottom + rect.bottom,
                        right: previousRect.right + rect.right
                    };
                });
            }

            function getNestedBoundingClientRect(node, boundaryWindow) {
                var ownerIframe = getOwnerIframe(node);

                if (ownerIframe && ownerIframe !== boundaryWindow) {
                    for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                        var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                        if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                        currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                    }

                    return mergeRectOffsets(rects);
                }

                return node.getBoundingClientRect();
            }

            function boxWrap(dims, what, node) {
                assign(node.style, {
                    borderTopWidth: dims[what + "Top"] + "px",
                    borderLeftWidth: dims[what + "Left"] + "px",
                    borderRightWidth: dims[what + "Right"] + "px",
                    borderBottomWidth: dims[what + "Bottom"] + "px",
                    borderStyle: "solid"
                });
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                _require = __webpack_require__(51),
                monospace = _require.monospace,
                Overlay = function () {
                function Overlay(window) {
                    _classCallCheck(this, Overlay);

                    var doc = window.document;
                    this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                        borderColor: overlayStyles.margin,
                        pointerEvents: "none",
                        position: "fixed"
                    }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                        backgroundColor: "#333740",
                        borderRadius: "2px",
                        fontFamily: monospace.family,
                        fontWeight: "bold",
                        padding: "3px 5px",
                        position: "fixed",
                        fontSize: monospace.sizes.normal
                    }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                        color: "#ee78e6",
                        borderRight: "1px solid #aaaaaa",
                        paddingRight: "0.5rem",
                        marginRight: "0.5rem"
                    }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                        color: "#d7d7d7"
                    }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
                }

                return _createClass(Overlay, [{
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && this.container.parentNode.removeChild(this.container);
                    }
                }, {
                    key: "inspect",
                    value: function value(node, name) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            var box = getNestedBoundingClientRect(node, this.win),
                                dims = getElementDimensions(node);
                            boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                                height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                                width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                            }), assign(this.node.style, {
                                top: box.top - dims.marginTop + "px",
                                left: box.left - dims.marginLeft + "px"
                            }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                            var tipPos = findTipPos({
                                top: box.top - dims.marginTop,
                                left: box.left - dims.marginLeft,
                                height: box.height + dims.marginTop + dims.marginBottom,
                                width: box.width + dims.marginLeft + dims.marginRight
                            }, this.win);
                            assign(this.tip.style, tipPos);
                        }
                    }
                }]), Overlay;
            }(),
                overlayStyles = {
                background: "rgba(120, 170, 210, 0.7)",
                padding: "rgba(77, 200, 0, 0.3)",
                margin: "rgba(255, 155, 0, 0.3)",
                border: "rgba(255, 200, 50, 0.3)"
            };

            module.exports = Overlay;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                monospace: {
                    family: "Menlo, Consolas, monospace",
                    sizes: {
                        normal: 11,
                        large: 14
                    }
                },
                sansSerif: {
                    family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                    sizes: {
                        small: 10,
                        normal: 12,
                        large: 14
                    }
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                MultiOverlay = function () {
                function MultiOverlay(window) {
                    _classCallCheck(this, MultiOverlay), this.win = window;
                    var doc = window.document;
                    this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
                }

                return _createClass(MultiOverlay, [{
                    key: "highlightMany",
                    value: function value(nodes) {
                        var _this = this;

                        this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                            var div = _this.win.document.createElement("div");

                            if ("function" == typeof node.getBoundingClientRect) {
                                var box = node.getBoundingClientRect();
                                box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                    top: box.top + "px",
                                    left: box.left + "px",
                                    width: box.width + "px",
                                    height: box.height + "px",
                                    border: "2px dotted rgba(200, 100, 100, .8)",
                                    boxSizing: "border-box",
                                    backgroundColor: "rgba(200, 100, 100, .2)",
                                    position: "fixed",
                                    zIndex: 1e7,
                                    pointerEvents: "none"
                                }), _this.container.appendChild(div));
                            }
                        });
                    }
                }, {
                    key: "refresh",
                    value: function value() {
                        this._currentNodes && this.highlightMany(this._currentNodes);
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                    }
                }]), MultiOverlay;
            }();

            module.exports = MultiOverlay;
        }]);
    });
},101,[],"react-devtools-core/build/backend.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = require(_dependencyMap[1], 'ReactNativePropRegistry');
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (!style) {
      return undefined;
    }

    invariant(style !== true, 'style may be false but not true');

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},102,[13,103],"flattenStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},103,[21],"ReactNativePropRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},104,[],"JSInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var InspectorAgent = require(_dependencyMap[0], 'InspectorAgent');

  var JSInspector = require(_dependencyMap[1], 'JSInspector');

  var Map = require(_dependencyMap[2], 'Map');

  var XMLHttpRequest = require(_dependencyMap[3], 'XMLHttpRequest');

  var Interceptor = function () {
    function Interceptor(agent) {
      babelHelpers.classCallCheck(this, Interceptor);
      this._agent = agent;
      this._requests = new Map();
    }

    babelHelpers.createClass(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: JSInspector.getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: JSInspector.getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);
    return Interceptor;
  }();

  var NetworkAgent = (_temp = _class = function (_InspectorAgent) {
    babelHelpers.inherits(NetworkAgent, _InspectorAgent);

    function NetworkAgent() {
      babelHelpers.classCallCheck(this, NetworkAgent);
      return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
    }

    babelHelpers.createClass(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);
        XMLHttpRequest.setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        XMLHttpRequest.setInterceptor(null);
        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);
    return NetworkAgent;
  }(InspectorAgent), _class.DOMAIN = 'Network', _temp);
  module.exports = NetworkAgent;
},105,[106,104,26,59],"NetworkAgent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      babelHelpers.classCallCheck(this, InspectorAgent);
      this._eventSender = eventSender;
    }

    babelHelpers.createClass(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);
    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},106,[],"InspectorAgent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},107,[16],"RCTEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var Platform = require(_dependencyMap[1], 'Platform');

  var defineLazyObjectProperty = require(_dependencyMap[2], 'defineLazyObjectProperty');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
  };

  if (Platform.OS === 'ios') {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  } else if (Platform.OS === 'android' && UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},108,[15,53,24,13],"UIManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = require(_dependencyMap[0], './cjs/react.production.min.js');
  } else {
    module.exports = require(_dependencyMap[1], './cjs/react.development.js');
  }
},109,[110,113],"react/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /** @license React v16.2.0
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var m = require(_dependencyMap[0], "object-assign"),
      n = require(_dependencyMap[1], "fbjs/lib/emptyObject"),
      p = require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.call") : 60104,
      u = q ? Symbol["for"]("react.return") : 60105,
      v = q ? Symbol["for"]("react.portal") : 60106,
      w = q ? Symbol["for"]("react.fragment") : 60107,
      x = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function y(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var z = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function A(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  A.prototype.isReactComponent = {};

  A.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? y("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  A.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function B(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  function C() {}

  C.prototype = A.prototype;
  var D = B.prototype = new C();
  D.constructor = B;
  m(D, A.prototype);
  D.isPureReactComponent = !0;

  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || z;
  }

  var F = E.prototype = new C();
  F.constructor = E;
  m(F, A.prototype);
  F.unstable_isAsyncReactComponent = !0;

  F.render = function () {
    return this.props.children;
  };

  var G = {
    current: null
  },
      H = Object.prototype.hasOwnProperty,
      I = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function J(a, b, e) {
    var c,
        d = {},
        g = null,
        k = null;
    if (null != b) for (c in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var h = Array(f), l = 0; l < f; l++) {
        h[l] = arguments[l + 2];
      }

      d.children = h;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: k,
      props: d,
      _owner: G.current
    };
  }

  function K(a) {
    return "object" === typeof a && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var L = /\/+/g,
      M = [];

  function N(a, b, e, c) {
    if (M.length) {
      var d = M.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function O(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > M.length && M.push(a);
  }

  function P(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = !1;
    if (null === a) g = !0;else switch (d) {
      case "string":
      case "number":
        g = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
          case u:
          case v:
            g = !0;
        }

    }
    if (g) return e(c, a, "" === b ? "." + Q(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
      d = a[k];
      var f = b + Q(d, k);
      g += P(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = x && a[x] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) {
      d = d.value, f = b + Q(d, k++), g += P(d, f, e, c);
    } else "object" === d && (e = "" + a, y("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function R(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function S(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(L, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function T(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(L, "$\x26/") + "/");
    b = N(b, g, c, d);
    null == a || P(a, "", S, b);
    O(b);
  }

  var U = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        T(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = N(null, null, b, e);
        null == a || P(a, "", R, b);
        O(b);
      },
      count: function count(a) {
        return null == a ? 0 : P(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        T(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        K(a) ? void 0 : y("143");
        return a;
      }
    },
    Component: A,
    PureComponent: B,
    unstable_AsyncComponent: E,
    Fragment: w,
    createElement: J,
    cloneElement: function cloneElement(a, b, e) {
      var c = m({}, a.props),
          d = a.key,
          g = a.ref,
          k = a._owner;

      if (null != b) {
        void 0 !== b.ref && (g = b.ref, k = G.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps) var f = a.type.defaultProps;

        for (h in b) {
          H.call(b, h) && !I.hasOwnProperty(h) && (c[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
        }
      }

      var h = arguments.length - 2;
      if (1 === h) c.children = e;else if (1 < h) {
        f = Array(h);

        for (var l = 0; l < h; l++) {
          f[l] = arguments[l + 2];
        }

        c.children = f;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: d,
        ref: g,
        props: c,
        _owner: k
      };
    },
    createFactory: function createFactory(a) {
      var b = J.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: K,
    version: "16.2.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: G,
      assign: m
    }
  },
      V = Object.freeze({
    default: U
  }),
      W = V && U || V;
  module.exports = W["default"] ? W["default"] : W;
},110,[111,112,58],"react/cjs/react.production.min.js");
__d(function (global, require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},111,[],"object-assign/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};

  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;
},112,[],"fbjs/lib/emptyObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /** @license React v16.2.0
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = require(_dependencyMap[0], 'object-assign');

      var emptyObject = require(_dependencyMap[1], 'fbjs/lib/emptyObject');

      var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

      var warning = require(_dependencyMap[3], 'fbjs/lib/warning');

      var emptyFunction = require(_dependencyMap[4], 'fbjs/lib/emptyFunction');

      var checkPropTypes = require(_dependencyMap[5], 'prop-types/checkPropTypes');

      var ReactVersion = '16.2.0';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== 'undefined') {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var constructor = publicInstance.constructor;
          var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function AsyncComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
      asyncComponentPrototype.constructor = AsyncComponent;

      _assign(asyncComponentPrototype, Component.prototype);

      asyncComponentPrototype.unstable_isAsyncReactComponent = true;

      asyncComponentPrototype.render = function () {
        return this.props.children;
      };

      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        var propName;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            return impl();
          }

          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }

      var POOL_SIZE = 10;
      var traverseContextPool = [];

      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }

      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;

        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }

      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_CALL_TYPE:
                case REACT_RETURN_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }

        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }

        return subtreeCount;
      }

      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }

        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }

      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }

        return index.toString(36);
      }

      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }

        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);

        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }

          result.push(mappedChild);
        }
      }

      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';

        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }

        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }

      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }

      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }

      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === 'string') {
          return type;
        }

        if (typeof type === 'function') {
          return type.displayName || type.name;
        }

        return null;
      }

      {
        var currentlyValidatingElement = null;
        var propTypesMisspellWarningShown = false;

        var getDisplayName = function getDisplayName(element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };

        var getStackAddendum = function getStackAddendum() {
          var stack = '';

          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }

          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };

        var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }

        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        var componentClass = element.type;

        if (typeof componentClass !== 'function') {
          return;
        }

        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;

        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof componentClass.getDefaultProps === 'function') {
          warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }

      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.keys(fragment.props)[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (!VALID_FRAGMENT_PROPS.has(key)) {
              warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }

        currentlyValidatingElement = null;
      }

      function createElementWithValidation(type, props, children) {
        var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += getStackAddendum() || '';
          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        Component: Component,
        PureComponent: PureComponent,
        unstable_AsyncComponent: AsyncComponent,
        Fragment: REACT_FRAGMENT_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }
},113,[111,112,13,57,58,114],"react/cjs/react.development.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV !== 'production') {
    var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

    var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

    var ReactPropTypesSecret = require(_dependencyMap[2], './lib/ReactPropTypesSecret');

    var loggedTypeFailures = {};
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
},114,[13,57,115],"prop-types/checkPropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},115,[],"prop-types/lib/ReactPropTypesSecret.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var UIManager = require(_dependencyMap[1], 'UIManager');

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;

        if (Platform.OS === 'ios') {
          UIManager.focus(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;

        if (Platform.OS === 'ios') {
          UIManager.blur(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},116,[53,108],"TextInputState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},117,[],"deepDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},118,[],"fbjs/lib/shallowEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          object.__defineGetter__(key, identity.bind(null, object[key]));

          object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(object[key]);
        }
      }
    }
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},119,[],"deepFreezeAndThrowOnMutationInDev");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false
  };
  module.exports = ReactFeatureFlags;
},120,[],"ReactFeatureFlags");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  require(_dependencyMap[0], "InitializeCore");

  var invariant = require(_dependencyMap[1], "fbjs/lib/invariant"),
      emptyFunction = require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      RCTEventEmitter = require(_dependencyMap[3], "RCTEventEmitter"),
      UIManager = require(_dependencyMap[4], "UIManager"),
      React = require(_dependencyMap[5], "react"),
      ExceptionsManager = require(_dependencyMap[6], "ExceptionsManager"),
      TextInputState = require(_dependencyMap[7], "TextInputState"),
      deepDiffer = require(_dependencyMap[8], "deepDiffer"),
      flattenStyle = require(_dependencyMap[9], "flattenStyle"),
      emptyObject = require(_dependencyMap[10], "fbjs/lib/emptyObject"),
      shallowEqual = require(_dependencyMap[11], "fbjs/lib/shallowEqual"),
      ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    injection: {
      injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
        invariant("function" === typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function.");
        _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
      }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = !0, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = !1;
        return error;
      }

      invariant(!1, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils._hasCaughtError = !1;
    ReactErrorUtils._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      ReactErrorUtils._caughtError = error, ReactErrorUtils._hasCaughtError = !0;
    }
  }

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = !1;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, !1, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, !1, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = !1,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });
  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.augmentClass = function (Class, Interface) {
    function E() {}

    E.prototype = this.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = babelHelpers.extends({}, this.Interface, Interface);
    Class.augmentClass = this.augmentClass;
    addEventPoolingTo(Class);
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }

  SyntheticEvent.augmentClass(ResponderSyntheticEvent, {
    touchHistory: function touchHistory() {
      return null;
    }
  });
  var touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
            JSCompiler_temp = getParent(JSCompiler_temp);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp = null;
        } else JSCompiler_temp = targetInst;
        targetInst = JSCompiler_temp === responderInst;
        JSCompiler_temp = ResponderSyntheticEvent.getPooled(shouldSetEventType, JSCompiler_temp, nativeEvent, nativeEventTarget);
        JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp, accumulateTwoPhaseDispatchesSingle);

        b: {
          shouldSetEventType = JSCompiler_temp._dispatchListeners;
          targetInst = JSCompiler_temp._dispatchInstances;
          if (Array.isArray(shouldSetEventType)) for (depthA = 0; depthA < shouldSetEventType.length && !JSCompiler_temp.isPropagationStopped(); depthA++) {
            if (shouldSetEventType[depthA](JSCompiler_temp, targetInst[depthA])) {
              shouldSetEventType = targetInst[depthA];
              break b;
            }
          } else if (shouldSetEventType && shouldSetEventType(JSCompiler_temp, targetInst)) {
            shouldSetEventType = targetInst;
            break b;
          }
          shouldSetEventType = null;
        }

        JSCompiler_temp._dispatchInstances = null;
        JSCompiler_temp._dispatchListeners = null;
        JSCompiler_temp.isPersistent() || JSCompiler_temp.constructor.release(JSCompiler_temp);
        if (shouldSetEventType && shouldSetEventType !== responderInst) {
          if (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, shouldSetEventType, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), targetInst = !0 === executeDirectDispatch(JSCompiler_temp), responderInst) {
            if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
              depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
              depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
              forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
              var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [JSCompiler_temp, depthA]);
              changeResponder(shouldSetEventType, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, shouldSetEventType, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
          } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp), changeResponder(shouldSetEventType, targetInst);
        } else JSCompiler_temp$jscomp$0 = null;
      } else JSCompiler_temp$jscomp$0 = null;

      shouldSetEventType = responderInst && isStartish(topLevelType);
      JSCompiler_temp = responderInst && isMoveish(topLevelType);
      targetInst = responderInst && isEndish(topLevelType);
      if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
      shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !shouldSetEventType && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) {
          if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);

            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = !0;
                  break b;
                }

                depthA = getParent(depthA);
              }

              targetInst = !1;
            }

            if (targetInst) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      inst = inst.stateNode._nativeTag;
      invariant(inst, "All native instances should have a tag.");
      return inst;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  }),
      restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  var isNestingBatched = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isNestingBatched) return fiberBatchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;

    try {
      return fiberBatchedUpdates(fn, bookkeeping);
    } finally {
      if (isNestingBatched = !1, restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    for (var events, i = 0; i < plugins.length; i++) {
      var possiblePlugin = plugins[i];
      possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget)) && (events = accumulateInto(events, possiblePlugin));
    }

    events && (eventQueue = accumulateInto(eventQueue, events));
    topLevelType = eventQueue;
    eventQueue = null;
    topLevelType && (forEachAccumulated(topLevelType, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    },
    handleTopLevel: handleTopLevel
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });

  function defaultShowDialog() {
    return !0;
  }

  var showDialog = defaultShowDialog,
      hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
  },
      ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
      ReactGlobalSharedState = Object.freeze({
    ReactCurrentOwner: ReactCurrentOwner,
    ReactDebugCurrentFrame: null
  }),
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (void 0 !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = !0);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (propKey in prevProps) {
      void 0 === nextProps[propKey] && (!(attributeConfig = validAttributes[propKey]) || updatePayload && void 0 !== updatePayload[propKey] || (prevProp = prevProps[propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  function getComponentName(fiber) {
    fiber = fiber.type;
    return "string" === typeof fiber ? fiber : "function" === typeof fiber ? fiber.displayName || fiber.name : null;
  }

  var debugRenderPhaseSideEffects = require(_dependencyMap[12], "ReactFeatureFlags").debugRenderPhaseSideEffects;

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : !1;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(!1, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = !1;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  new Set();
  var contextStackCursor = {
    current: emptyObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyObject;

  function getUnmaskedContext(workInProgress) {
    return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
  }

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(fiber) {
    return 2 === fiber.tag && null != fiber.type.childContextTypes;
  }

  function popContextProvider(fiber) {
    isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, parentContext) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
    }

    return babelHelpers.extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    if (!isContextProvider(workInProgress)) return !1;
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return !0;
  }

  function invalidateContextProvider(workInProgress, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

    if (didChange) {
      var mergedContext = processChildContext(workInProgress, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext;
      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress);
      push(contextStackCursor, mergedContext, workInProgress);
    } else pop(didPerformWorkStackCursor, workInProgress);

    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  function FiberNode(tag, pendingProps, key, internalContextTag) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.internalContextTag = internalContextTag;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, internalContextTag) {
    return new FiberNode(tag, pendingProps, key, internalContextTag);
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, internalContextTag, expirationTime) {
    var fiber = void 0,
        type = element.type,
        key = element.key;
    element = element.props;
    "function" === typeof type ? (fiber = type.prototype && type.prototype.isReactComponent ? createFiber(2, element, key, internalContextTag) : createFiber(0, element, key, internalContextTag), fiber.type = type) : "string" === typeof type ? (fiber = createFiber(5, element, key, internalContextTag), fiber.type = type) : "object" === typeof type && null !== type && "number" === typeof type.tag ? (fiber = type, fiber.pendingProps = element) : invariant(!1, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    fiber.expirationTime = expirationTime;
    return fiber;
  }

  function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
    elements = createFiber(10, elements, key, internalContextTag);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, internalContextTag, expirationTime) {
    content = createFiber(6, content, null, internalContextTag);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromCall(call, internalContextTag, expirationTime) {
    internalContextTag = createFiber(7, call, call.key, internalContextTag);
    internalContextTag.type = call.handler;
    internalContextTag.expirationTime = expirationTime;
    return internalContextTag;
  }

  function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
    returnNode = createFiber(9, null, null, internalContextTag);
    returnNode.expirationTime = expirationTime;
    return returnNode;
  }

  function createFiberFromPortal(portal, internalContextTag, expirationTime) {
    internalContextTag = createFiber(4, null !== portal.children ? portal.children : [], portal.key, internalContextTag);
    internalContextTag.expirationTime = expirationTime;
    internalContextTag.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return internalContextTag;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return !0;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  function insertUpdateIntoFiber(fiber, update) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    fiber = fiber !== queue1 ? fiber : null;
    null === fiber ? insertUpdateIntoQueue(queue1, update) : null === queue1.last || null === fiber.last ? (insertUpdateIntoQueue(queue1, update), insertUpdateIntoQueue(fiber, update)) : (insertUpdateIntoQueue(queue1, update), fiber.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? (debugRenderPhaseSideEffects && update.call(instance, prevState, props), update.call(instance, prevState, props)) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      callbackList: null,
      hasForceUpdate: !1
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = !0);

    for (var dontMutatePrevState = !0, update = queue.first, didSkip = !1; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = !0, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = !0;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? babelHelpers.extends({}, current, updateExpirationTime) : babelHelpers.extends(current, updateExpirationTime), dontMutatePrevState = !1;
        update.isForced && (queue.hasForceUpdate = !0);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    var updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: !1,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: !0,
          isForced: !1,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: !1,
          isForced: !0,
          nextCallback: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = 2 === workInProgress.tag && null != workInProgress.type.contextTypes,
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        props = new ctor(props, context);
        adoptClassInstance(workInProgress, props);
        needsContext && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
        return props;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState = state;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        null != workInProgress.type && null != workInProgress.type.prototype && !0 === workInProgress.type.prototype.unstable_isAsyncReactComponent && (workInProgress.internalContextTag |= 1);
        "function" === typeof instance.componentWillMount && (state = instance.state, instance.componentWillMount(), debugRenderPhaseSideEffects && instance.componentWillMount(), state !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), state = workInProgress.updateQueue, null !== state && (instance.state = processUpdateQueue(current, workInProgress, state, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newUnmaskedContext || (oldContext = instance.state, instance.componentWillReceiveProps(newProps, newUnmaskedContext), debugRenderPhaseSideEffects && instance.componentWillReceiveProps(newProps, newUnmaskedContext), instance.state !== oldContext && updater.enqueueReplaceState(instance, instance.state, null));
        oldContext = workInProgress.memoizedState;
        renderExpirationTime = null !== workInProgress.updateQueue ? processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime) : oldContext;
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), !1;
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) var shouldUpdate = !0;else {
          shouldUpdate = workInProgress.stateNode;
          var type = workInProgress.type;
          "function" === typeof shouldUpdate.shouldComponentUpdate ? (type = shouldUpdate.shouldComponentUpdate(newProps, renderExpirationTime, newUnmaskedContext), debugRenderPhaseSideEffects && shouldUpdate.shouldComponentUpdate(newProps, renderExpirationTime, newUnmaskedContext), shouldUpdate = type) : shouldUpdate = type.prototype && type.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldContext, renderExpirationTime) : !0;
        }
        shouldUpdate ? ("function" === typeof instance.componentWillUpdate && (instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), debugRenderPhaseSideEffects && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return shouldUpdate;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(current, element) {
    var mixedRef = element.ref;

    if (null !== mixedRef && "function" !== typeof mixedRef) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof mixedRef, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).", mixedRef);
    }

    return mixedRef;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      expirationTime.ref = coerceRef(current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updateCall(returnFiber, current, call, expirationTime) {
      if (null === current || 7 !== current.tag) return current = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, call, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateReturn(returnFiber, current, returnNode, expirationTime) {
      if (null === current || 9 !== current.tag) return current = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime), current.type = returnNode.value, current["return"] = returnFiber, current;
      current = useFiber(current, null, expirationTime);
      current.type = returnNode.value;
      current["return"] = returnFiber;
      return current;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            if (newChild.type === REACT_FRAGMENT_TYPE) return newChild = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key), newChild["return"] = returnFiber, newChild;
            expirationTime = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
            expirationTime.ref = coerceRef(null, newChild);
            expirationTime["return"] = returnFiber;
            return expirationTime;

          case REACT_CALL_TYPE:
            return newChild = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;

          case REACT_RETURN_TYPE:
            return expirationTime = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime), expirationTime.type = newChild.value, expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_CALL_TYPE:
            return newChild.key === key ? updateCall(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_RETURN_TYPE:
            return null === key ? updateReturn(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_CALL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateCall(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_RETURN_TYPE:
            return existingChildren = existingChildren.get(newIdx) || null, updateReturn(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime), expirationTime.ref = coerceRef(currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_CALL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (7 === currentFirstChild.tag) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);

        case REACT_RETURN_TYPE:
          a: {
            if (null !== currentFirstChild) if (9 === currentFirstChild.tag) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              currentFirstChild = useFiber(currentFirstChild, null, expirationTime);
              currentFirstChild.type = newChild.value;
              currentFirstChild["return"] = returnFiber;
              returnFiber = currentFirstChild;
              break a;
            } else deleteRemainingChildren(returnFiber, currentFirstChild);
            currentFirstChild = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild.type = newChild.value;
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.internalContextTag, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(!1, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1);

  function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      var renderExpirationTime = workInProgress.expirationTime;
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      null === ref || current && current.ref === ref || (workInProgress.effectTag |= 128);
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
      markRef(current, workInProgress);
      if (!shouldUpdate) return hasContext && invalidateContextProvider(workInProgress, !1), bailoutOnAlreadyFinishedWork(current, workInProgress);
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      debugRenderPhaseSideEffects && shouldUpdate.render();
      var nextChildren = shouldUpdate.render();
      workInProgress.effectTag |= 1;
      reconcileChildren(current, workInProgress, nextChildren);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, !0);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    function bailoutOnLowPriority(current, workInProgress) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 2:
          pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      }

      return null;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) return bailoutOnLowPriority(current, workInProgress);

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === typeof fn && null !== fn && "function" === typeof fn.render ? (workInProgress.tag = 2, props = pushContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, !0, props)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            return props = pushContextProvider(workInProgress), fn = void 0, null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = !0) : fn = updateClassInstance(current, workInProgress, renderExpirationTime), finishClassComponent(current, workInProgress, fn, props);

          case 3:
            return pushHostRootContext(workInProgress), props = workInProgress.updateQueue, null !== props ? (fn = workInProgress.memoizedState, props = processUpdateQueue(current, workInProgress, props, null, null, renderExpirationTime), fn === props ? (resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress)) : (fn = props.element, unmaskedContext = workInProgress.stateNode, (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn)), workInProgress.memoizedState = props, current = workInProgress.child)) : (resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress)), current;

          case 5:
            pushHostContext(workInProgress);
            null === current && tryToClaimNextHydratableInstance(workInProgress);
            props = workInProgress.type;
            var memoizedProps = workInProgress.memoizedProps;
            fn = workInProgress.pendingProps;
            unmaskedContext = null !== current ? current.memoizedProps : null;
            didPerformWorkStackCursor.current || memoizedProps !== fn ? (memoizedProps = fn.children, shouldSetTextContent(props, fn) ? memoizedProps = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16), markRef(current, workInProgress), 2147483647 !== renderExpirationTime && !useSyncScheduling && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 2147483647, current = null) : (reconcileChildren(current, workInProgress, memoizedProps), workInProgress.memoizedProps = fn, current = workInProgress.child)) : current = bailoutOnAlreadyFinishedWork(current, workInProgress);
            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      beginFailedWork: function beginFailedWork(current, workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
          case 2:
            pushContextProvider(workInProgress);
            break;

          case 3:
            pushHostRootContext(workInProgress);
            break;

          default:
            invariant(!1, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
        }

        workInProgress.effectTag |= 64;
        null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child);
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) return bailoutOnLowPriority(current, workInProgress);
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        workInProgress.child = null === current ? mountChildFibers(workInProgress, null, null, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime);
        2 === workInProgress.tag && (current = workInProgress.stateNode, workInProgress.memoizedProps = current.props, workInProgress.memoizedState = current.state);
        return workInProgress.child;
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popContextProvider(workInProgress), null;

          case 3:
            popHostContainer(workInProgress);
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              instance = prepareUpdate(instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, instance, type, oldProps, newProps, renderExpirationTime);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                current = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (oldProps = workInProgress.child; null !== oldProps;) {
                  if (5 === oldProps.tag || 6 === oldProps.tag) appendInitialChild(current, oldProps.stateNode);else if (4 !== oldProps.tag && null !== oldProps.child) {
                    oldProps.child["return"] = oldProps;
                    oldProps = oldProps.child;
                    continue;
                  }
                  if (oldProps === workInProgress) break;

                  for (; null === oldProps.sibling;) {
                    if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                    oldProps = oldProps["return"];
                  }

                  oldProps.sibling["return"] = oldProps["return"];
                  oldProps = oldProps.sibling;
                }

                finalizeInitialChildren(current, type, newProps, renderExpirationTime) && markUpdate(workInProgress);
                workInProgress.stateNode = current;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(!1, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.type);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 10:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 0:
            invariant(!1, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCommitWork(config, captureError) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      }
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var instance = current.stateNode;
          if ("function" === typeof instance.componentWillUnmount) try {
            instance.props = current.memoizedProps, instance.state = current.memoizedState, instance.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = !1;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = !0;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = !1);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(!1, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = !1;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          default:
            invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var instance = finishedWork.stateNode;

            if (null != instance) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(instance, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            instance = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : instance, instance);
            break;

          case 3:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            var instance = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) instance.props = finishedWork.memoizedProps, instance.state = finishedWork.memoizedState, instance.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, current);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, instance);
            break;

          case 3:
            instance = finishedWork.updateQueue;
            null !== instance && commitCallbacks(instance, null !== finishedWork.child ? finishedWork.child.stateNode : null);
            break;

          case 5:
            instance = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(instance, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var instance = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              ref(getPublicInstance(instance));
              break;

            default:
              ref(instance);
          }
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && current(null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = {
      current: NO_CONTEXT
    },
        contextFiberStackCursor = {
      current: NO_CONTEXT
    },
        rootInstanceStackCursor = {
      current: NO_CONTEXT
    };
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      },
      resetHostContainer: function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = createFiber(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        default:
          return !1;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(!1, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(!1, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return !1;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = !0;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = !1;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = !1, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return !0;
      }
    };
  }

  function ReactFiberScheduler(config) {
    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var next = completeWork(workInProgress$jscomp$0.alternate, workInProgress$jscomp$0, nextRenderExpirationTime),
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;
        var workInProgress = workInProgress$jscomp$0;

        if (2147483647 === nextRenderExpirationTime || 2147483647 !== workInProgress.expirationTime) {
          if (2 !== workInProgress.tag && 3 !== workInProgress.tag) var newExpirationTime = 0;else newExpirationTime = workInProgress.updateQueue, newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;

          for (var child = workInProgress.child; null !== child;) {
            0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        if (null !== next) return next;
        null !== returnFiber && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
        if (null !== siblingFiber) return siblingFiber;
        if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
          workInProgress$jscomp$0.stateNode.isReadyForCommit = !0;
          break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function performFailedUnitOfWork(workInProgress) {
      var next = beginFailedWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function workLoop(expirationTime) {
      if (null !== capturedErrors) {
        if (!(0 === nextRenderExpirationTime || nextRenderExpirationTime > expirationTime)) if (nextRenderExpirationTime <= mostRecentCurrentTime) for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork && !shouldYield();) {
          nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork);
        }
      } else if (!(0 === nextRenderExpirationTime || nextRenderExpirationTime > expirationTime)) if (nextRenderExpirationTime <= mostRecentCurrentTime) for (; null !== nextUnitOfWork;) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      } else for (; null !== nextUnitOfWork && !shouldYield();) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    }

    function renderRoot(root, expirationTime) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = !0;
      root.isReadyForCommit = !1;

      if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || null === nextUnitOfWork) {
        for (; -1 < index;) {
          valueStack[index] = null, index--;
        }

        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = !1;
        resetHostContainer();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
      }

      var didError = !1,
          error = null;

      try {
        workLoop(expirationTime);
      } catch (e) {
        didError = !0, error = e;
      }

      for (; didError;) {
        if (didFatal) {
          firstUncaughtError = error;
          break;
        }

        var failedWork = nextUnitOfWork;
        if (null === failedWork) didFatal = !0;else {
          var boundary = captureError(failedWork, error);
          invariant(null !== boundary, "Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.");

          if (!didFatal) {
            try {
              didError = boundary;
              error = expirationTime;

              for (boundary = didError; null !== failedWork;) {
                switch (failedWork.tag) {
                  case 2:
                    popContextProvider(failedWork);
                    break;

                  case 5:
                    popHostContext(failedWork);
                    break;

                  case 3:
                    popHostContainer(failedWork);
                    break;

                  case 4:
                    popHostContainer(failedWork);
                }

                if (failedWork === boundary || failedWork.alternate === boundary) break;
                failedWork = failedWork["return"];
              }

              nextUnitOfWork = performFailedUnitOfWork(didError);
              workLoop(error);
            } catch (e) {
              didError = !0;
              error = e;
              continue;
            }

            break;
          }
        }
      }

      expirationTime = firstUncaughtError;
      didFatal = isWorking = !1;
      firstUncaughtError = null;
      null !== expirationTime && onUncaughtError(expirationTime);
      return root.isReadyForCommit ? root.current.alternate : null;
    }

    function captureError(failedWork, error$jscomp$0) {
      var boundary = ReactCurrentOwner.current = null,
          errorBoundaryFound = !1,
          willRetry = !1,
          errorBoundaryName = null;
      if (3 === failedWork.tag) boundary = failedWork, isFailedBoundary(failedWork) && (didFatal = !0);else for (var node = failedWork["return"]; null !== node && null === boundary;) {
        2 === node.tag ? "function" === typeof node.stateNode.componentDidCatch && (errorBoundaryFound = !0, errorBoundaryName = getComponentName(node), boundary = node, willRetry = !0) : 3 === node.tag && (boundary = node);

        if (isFailedBoundary(node)) {
          if (isUnmounting || null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
          boundary = null;
          willRetry = !1;
        }

        node = node["return"];
      }

      if (null !== boundary) {
        null === failedBoundaries && (failedBoundaries = new Set());
        failedBoundaries.add(boundary);
        var info = "";
        node = failedWork;

        do {
          a: switch (node.tag) {
            case 0:
            case 1:
            case 2:
            case 5:
              var owner = node._debugOwner,
                  source = node._debugSource;
              var JSCompiler_inline_result = getComponentName(node);
              var ownerName = null;
              owner && (ownerName = getComponentName(owner));
              owner = source;
              JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
              break a;

            default:
              JSCompiler_inline_result = "";
          }

          info += JSCompiler_inline_result;
          node = node["return"];
        } while (node);

        node = info;
        failedWork = getComponentName(failedWork);
        null === capturedErrors && (capturedErrors = new Map());
        error$jscomp$0 = {
          componentName: failedWork,
          componentStack: node,
          error: error$jscomp$0,
          errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
          errorBoundaryFound: errorBoundaryFound,
          errorBoundaryName: errorBoundaryName,
          willRetry: willRetry
        };
        capturedErrors.set(boundary, error$jscomp$0);

        try {
          if (!1 !== showDialog(error$jscomp$0)) {
            var error = error$jscomp$0.error;
            error && error.suppressReactErrorLogging || console.error(error);
          }
        } catch (e) {
          e && e.suppressReactErrorLogging || console.error(e);
        }

        isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary);
        return boundary;
      }

      null === firstUncaughtError && (firstUncaughtError = error$jscomp$0);
      return null;
    }

    function hasCapturedError(fiber) {
      return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }

    function isFailedBoundary(fiber) {
      return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }

    function computeAsyncExpiration() {
      return 20 * (((recalculateCurrentTime() + 100) / 20 | 0) + 1);
    }

    function computeExpirationForFiber(fiber) {
      return 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : !useSyncScheduling || fiber.internalContextTag & 1 ? computeAsyncExpiration() : 1;
    }

    function scheduleWork(fiber, expirationTime) {
      return scheduleWorkImpl(fiber, expirationTime, !1);
    }

    function scheduleWorkImpl(fiber, expirationTime) {
      for (; null !== fiber;) {
        if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
        null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
        if (null === fiber["return"]) if (3 === fiber.tag) {
          var root = fiber.stateNode;
          !isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime && (nextUnitOfWork = nextRoot = null, nextRenderExpirationTime = 0);
          requestWork(root, expirationTime);
          !isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime && (nextUnitOfWork = nextRoot = null, nextRenderExpirationTime = 0);
        } else break;
        fiber = fiber["return"];
      }
    }

    function scheduleErrorRecovery(fiber) {
      scheduleWorkImpl(fiber, 1, !0);
    }

    function recalculateCurrentTime() {
      return mostRecentCurrentTime = ((now() - startTime) / 10 | 0) + 2;
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - startTime;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(!1, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, recalculateCurrentTime())) : 1 === expirationTime ? performWork(1, null) : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, dl);
    }

    function performWork(minExpirationTime, dl) {
      deadline = dl;

      for (findHighestPriorityRoot(); null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire;) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, recalculateCurrentTime()), findHighestPriorityRoot();
      }

      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = !1;
      nestedUpdateCount = 0;
      finishRendering();
    }

    function finishRendering() {
      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = !1, batches;
    }

    function performWorkOnRoot(root, expirationTime, currentTime) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = !0;
      expirationTime <= currentTime ? (currentTime = root.finishedWork, null !== currentTime ? completeRoot(root, currentTime, expirationTime) : (root.finishedWork = null, currentTime = renderRoot(root, expirationTime), null !== currentTime && completeRoot(root, currentTime, expirationTime))) : (currentTime = root.finishedWork, null !== currentTime ? completeRoot(root, currentTime, expirationTime) : (root.finishedWork = null, currentTime = renderRoot(root, expirationTime), null !== currentTime && (shouldYield() ? root.finishedWork = currentTime : completeRoot(root, currentTime, expirationTime))));
      isRendering = !1;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = !0;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.isReadyForCommit = !1;
      ReactCurrentOwner.current = null;
      1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstBatch = finishedWork.firstEffect) : firstBatch = finishedWork : firstBatch = finishedWork.firstEffect;
      prepareForCommit();

      for (nextEffect = firstBatch; null !== nextEffect;) {
        var didError = !1,
            _error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & -242) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, _error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit();
      expirationTime.current = finishedWork;

      for (nextEffect = firstBatch; null !== nextEffect;) {
        effectTag = !1;
        current = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(nextEffect.alternate, nextEffect);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            if (effectTag$jscomp$0 & 64) switch (firstBatch = nextEffect, didError = void 0, null !== capturedErrors && (didError = capturedErrors.get(firstBatch), capturedErrors["delete"](firstBatch), null == didError && null !== firstBatch.alternate && (firstBatch = firstBatch.alternate, didError = capturedErrors.get(firstBatch), capturedErrors["delete"](firstBatch))), invariant(null != didError, "No error for given unit of work. This error is likely caused by a bug in React. Please file an issue."), firstBatch.tag) {
              case 2:
                firstBatch.stateNode.componentDidCatch(didError.error, {
                  componentStack: didError.componentStack
                });
                break;

              case 3:
                null === firstUncaughtError && (firstUncaughtError = didError.error);
                break;

              default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in React. Please file an issue.");
            }
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = !0, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = !1;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null);
      null !== firstUncaughtError && (finishedWork = firstUncaughtError, firstUncaughtError = null, onUncaughtError(finishedWork));
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (failedBoundaries = capturedErrors = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? !1 : deadlineDidExpire = !0;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
    }

    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, hydrationContext).completeWork;

    hostContext = ReactFiberCommitWork(config, captureError);
    var commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        startTime = now(),
        mostRecentCurrentTime = 2,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = !1,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        didFatal = !1,
        isCommitting = !1,
        isUnmounting = !1,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = !1,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        deadlineDidExpire = !1,
        hasUnhandledError = !1,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      computeAsyncExpiration: computeAsyncExpiration,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        performWorkOnRoot(root, expirationTime, expirationTime);
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, null);
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = !0;

          try {
            return fn();
          } finally {
            isUnbatchingUpdates = !1;
          }
        }

        return fn();
      },
      flushSync: function flushSync(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          a: {
            var previousExpirationContext = expirationContext;
            expirationContext = 1;

            try {
              var JSCompiler_inline_result = fn();
              break a;
            } finally {
              expirationContext = previousExpirationContext;
            }

            JSCompiler_inline_result = void 0;
          }

          return JSCompiler_inline_result;
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering."), performWork(1, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = computeAsyncExpiration();

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = computeAsyncExpiration();
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      }
    };
  }

  function ReactFiberReconciler$1(config) {
    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      var current = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext;

        b: {
          invariant(2 === isFiberMountedImpl(parentComponent) && 2 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");

          for (parentContext = parentComponent; 3 !== parentContext.tag;) {
            if (isContextProvider(parentContext)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

            parentContext = parentContext["return"];
            invariant(parentContext, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }

          parentContext = parentContext.stateNode.context;
        }

        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(current, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: !1,
        isForced: !1,
        next: null
      });
      scheduleWork(current, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var computeAsyncExpiration = config.computeAsyncExpiration,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork;
    return {
      createContainer: function createContainer(containerInfo, hydrate) {
        var uninitializedFiber = createFiber(3, null, 0);
        containerInfo = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          remainingExpirationTime: 0,
          isReadyForCommit: !1,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return uninitializedFiber.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current;
        current = null != element && null != element.type && null != element.type.prototype && !0 === element.type.prototype.unstable_isAsyncReactComponent ? computeAsyncExpiration() : computeExpirationForFiber(current);
        return updateContainerAtExpirationTime(element, container, parentComponent, current, callback);
      },
      updateContainerAtExpirationTime: updateContainerAtExpirationTime,
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(babelHelpers.extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    }
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return !1;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return !1;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return !1;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return !1;
    },
    useSyncScheduling: !0,
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  });

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return NativeRenderer.findHostInstance(internalInstance);
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === typeof componentOrHandle && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle, Object.keys(componentOrHandle));
    invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
  };

  fiberBatchedUpdates = NativeRenderer.batchedUpdates;
  var roots = new Map();

  function fn$jscomp$inline_616(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, !1);
    return !1;
  }

  invariant(showDialog === defaultShowDialog, "The custom dialog was already injected.");
  invariant("function" === typeof fn$jscomp$inline_616, "Injected showDialog() must be a function.");
  showDialog = fn$jscomp$inline_616;
  var ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, !1), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactGlobalSharedState: ReactGlobalSharedState,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.2.0",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},121,[23,13,58,107,108,109,31,116,117,102,112,118,120],"ReactNativeRenderer-prod");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugTool;
},122,[21],"ReactDebugTool");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var ProgressBarAndroid = require(_dependencyMap[3], 'ProgressBarAndroid');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var React = require(_dependencyMap[5], 'React');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: Platform.OS === 'ios' ? GRAY : undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["onLayout", "style"]);
      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });
      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        },
        Platform.OS === 'ios' ? React.createElement(RCTActivityIndicator, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          }
        })) : React.createElement(ProgressBarAndroid, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }))
      );
    }
  });
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });

  if (Platform.OS === 'ios') {
    var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, {
      nativeOnly: {
        activityIndicatorViewStyle: true
      }
    });
  }

  module.exports = ActivityIndicator;
},123,[124,126,53,127,128,131,169,171,132,173,146],"ActivityIndicator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = require(_dependencyMap[0], 'normalizeColor');

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},124,[125],"ColorPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},125,[],"normalizeColor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},126,[21],"NativeMethodsMixin");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var requireNativeComponent = require(_dependencyMap[5], 'requireNativeComponent');

  var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

  var indeterminateType = function indeterminateType(props, propName, componentName) {
    var checker = function checker() {
      var indeterminate = props[propName];
      var styleAttr = props.styleAttr;

      if (!indeterminate && styleAttr !== 'Horizontal') {
        return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
      }
    };

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
  };

  var ProgressBarAndroid = (_temp = _class = function (_ReactNative$NativeCo) {
    babelHelpers.inherits(ProgressBarAndroid, _ReactNative$NativeCo);

    function ProgressBarAndroid() {
      babelHelpers.classCallCheck(this, ProgressBarAndroid);
      return babelHelpers.possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
    }

    babelHelpers.createClass(ProgressBarAndroid, [{
      key: "render",
      value: function render() {
        return React.createElement(AndroidProgressBar, babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }));
      }
    }]);
    return ProgressBarAndroid;
  }(ReactNative.NativeComponent), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),
    animating: PropTypes.bool,
    indeterminate: indeterminateType,
    progress: PropTypes.number,
    color: ColorPropType,
    testID: PropTypes.string
  }), _class.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  }, _temp);
  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, {
    nativeOnly: {
      animating: true
    }
  });
  module.exports = ProgressBarAndroid;
},127,[124,128,131,21,132,146],"ProgressBarAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;
    module.exports = require(_dependencyMap[0], './factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
  } else {
    module.exports = require(_dependencyMap[1], './factoryWithThrowingShims')();
  }
},128,[129,130],"prop-types/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[2], 'fbjs/lib/warning');

  var assign = require(_dependencyMap[3], 'object-assign');

  var ReactPropTypesSecret = require(_dependencyMap[4], './lib/ReactPropTypesSecret');

  var checkPropTypes = require(_dependencyMap[5], './checkPropTypes');

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
          return emptyFunction.thatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},129,[58,13,57,111,115,114],"prop-types/factoryWithTypeCheckers.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = require(_dependencyMap[2], './lib/ReactPropTypesSecret');

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},130,[58,13,115],"prop-types/factoryWithThrowingShims.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'react');
},131,[109],"React");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var PlatformViewPropTypes = require(_dependencyMap[1], 'PlatformViewPropTypes');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var StyleSheetPropType = require(_dependencyMap[3], 'StyleSheetPropType');

  var ViewStylePropTypes = require(_dependencyMap[4], 'ViewStylePropTypes');

  var _require = require(_dependencyMap[5], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = babelHelpers.extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},132,[133,138,128,139,140,145],"ViewPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},133,[128,134],"EdgeInsetsPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var merge = require(_dependencyMap[1], 'merge');

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},134,[13,135],"createStrictShapeTypeChecker");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = require(_dependencyMap[0], 'mergeInto');

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},135,[136],"merge");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = require(_dependencyMap[0], 'mergeHelpers');

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},136,[137],"mergeInto");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},137,[13],"mergeHelpers");
__d(function (global, require, module, exports, _dependencyMap) {
  module.export = {};
},138,[],"PlatformViewPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = require(_dependencyMap[0], 'createStrictShapeTypeChecker');

  var flattenStyle = require(_dependencyMap[1], 'flattenStyle');

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},139,[134,102],"StyleSheetPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var LayoutPropTypes = require(_dependencyMap[1], 'LayoutPropTypes');

  var ReactPropTypes = require(_dependencyMap[2], 'prop-types');

  var ShadowPropTypesIOS = require(_dependencyMap[3], 'ShadowPropTypesIOS');

  var TransformPropTypes = require(_dependencyMap[4], 'TransformPropTypes');

  var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });
  module.exports = ViewStylePropTypes;
},140,[124,141,128,142,143],"ViewStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = require(_dependencyMap[0], 'prop-types');

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},141,[128],"LayoutPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = require(_dependencyMap[1], 'prop-types');

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},142,[124,128],"ShadowPropTypesIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = require(_dependencyMap[0], 'prop-types');

  var deprecatedPropType = require(_dependencyMap[1], 'deprecatedPropType');

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},143,[128,144],"TransformPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = require(_dependencyMap[0], 'UIManager');

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},144,[108],"deprecatedPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},145,[],"ViewAccessibility");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var ReactNativeBridgeEventPlugin = require(_dependencyMap[1], 'ReactNativeBridgeEventPlugin');

  var ReactNativeStyleAttributes = require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var UIManager = require(_dependencyMap[3], 'UIManager');

  var createReactNativeComponentClass = require(_dependencyMap[4], 'createReactNativeComponentClass');

  var insetsDiffer = require(_dependencyMap[5], 'insetsDiffer');

  var matricesDiffer = require(_dependencyMap[6], 'matricesDiffer');

  var pointsDiffer = require(_dependencyMap[7], 'pointsDiffer');

  var processColor = require(_dependencyMap[8], 'processColor');

  var resolveAssetSource = require(_dependencyMap[9], 'resolveAssetSource');

  var sizesDiffer = require(_dependencyMap[10], 'sizesDiffer');

  var verifyPropTypes = require(_dependencyMap[11], 'verifyPropTypes');

  var invariant = require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[13], 'fbjs/lib/warning');

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      if (Platform.OS === 'android') {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var nativeProps = babelHelpers.extends({}, viewConfig.NativeProps);

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          nativeProps = babelHelpers.extends({}, nativeProps, baseModule.NativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (__DEV__) {
        componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
      }

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},146,[53,147,148,108,157,158,159,160,153,161,156,168,13,57],"requireNativeComponent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},147,[21],"ReactNativeBridgeEventPlugin");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var keyMirror = require(_dependencyMap[3], 'fbjs/lib/keyMirror');

  var processColor = require(_dependencyMap[4], 'processColor');

  var processTransform = require(_dependencyMap[5], 'processTransform');

  var sizesDiffer = require(_dependencyMap[6], 'sizesDiffer');

  var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));
  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},148,[149,152,140,151,153,154,156],"ReactNativeStyleAttributes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ImageResizeMode = require(_dependencyMap[1], 'ImageResizeMode');

  var LayoutPropTypes = require(_dependencyMap[2], 'LayoutPropTypes');

  var ReactPropTypes = require(_dependencyMap[3], 'prop-types');

  var ShadowPropTypesIOS = require(_dependencyMap[4], 'ShadowPropTypesIOS');

  var TransformPropTypes = require(_dependencyMap[5], 'TransformPropTypes');

  var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });
  module.exports = ImageStylePropTypes;
},149,[124,150,141,128,142,143],"ImageStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = require(_dependencyMap[0], 'fbjs/lib/keyMirror');

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},150,[151],"ImageResizeMode");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], './invariant');

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},151,[13],"fbjs/lib/keyMirror.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = require(_dependencyMap[1], 'prop-types');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = TextStylePropTypes;
},152,[124,128,140],"TextStylePropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var normalizeColor = require(_dependencyMap[1], 'normalizeColor');

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

    if (Platform.OS === 'android') {
      int32Color = int32Color | 0x0;
    }

    return int32Color;
  }

  module.exports = processColor;
},153,[53,125],"processColor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = require(_dependencyMap[0], 'MatrixMath');

  var Platform = require(_dependencyMap[1], 'Platform');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var stringifySafe = require(_dependencyMap[3], 'stringifySafe');

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if (Platform.OS === 'android' || Platform.OS === 'ios') {
      return transform;
    }

    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},154,[155,53,13,41],"processTransform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = babelHelpers.slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = babelHelpers.slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},155,[13],"MatrixMath");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},156,[],"sizesDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},157,[21],"createReactNativeComponentClass");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},158,[],"insetsDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},159,[],"matricesDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},160,[],"pointsDiffer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = require(_dependencyMap[0], 'AssetRegistry');

  var AssetSourceResolver = require(_dependencyMap[1], 'AssetSourceResolver');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0,
      _embeddedBundleURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var scriptURL = NativeModules.SourceCode.scriptURL;
      var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      var scriptURL = NativeModules.SourceCode.scriptURL;
      _scriptURL = _coerceLocalScriptURL(scriptURL);
    }

    return _scriptURL;
  }

  function getEmbeddedBundledURL() {
    var scriptURL = NativeModules.SourceCode.embeddedBundleURL;
    _embeddedBundleURL = _coerceLocalScriptURL(scriptURL);
    return _embeddedBundleURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), getEmbeddedBundledURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},161,[162,163,15],"resolveAssetSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},162,[],"AssetRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = require(_dependencyMap[0], 'PixelRatio');

  var Platform = require(_dependencyMap[1], 'Platform');

  var assetPathUtils = require(_dependencyMap[2], '../../local-cli/bundle/assetPathUtils');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, embeddedBundleUrl, asset) {
      babelHelpers.classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.embeddedBundleUrl = embeddedBundleUrl;
      this.asset = asset;
    }

    babelHelpers.createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "canLoadFromEmbeddedBundledLocation",
      value: function canLoadFromEmbeddedBundledLocation() {
        return !!this.embeddedBundleUrl;
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if (Platform.OS === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLInEmbeddedBundleUrl",
      value: function scaledAssetURLInEmbeddedBundleUrl() {
        var path = this.embeddedBundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);
    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},163,[164,53,167,13],"AssetSourceResolver");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var PixelRatio = function () {
    function PixelRatio() {
      babelHelpers.classCallCheck(this, PixelRatio);
    }

    babelHelpers.createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
    return PixelRatio;
  }();

  module.exports = PixelRatio;
},164,[165],"PixelRatio");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = require(_dependencyMap[0], 'DeviceInfo');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var Platform = require(_dependencyMap[2], 'Platform');

  var RCTDeviceEventEmitter = require(_dependencyMap[3], 'RCTDeviceEventEmitter');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      babelHelpers.classCallCheck(this, Dimensions);
    }

    babelHelpers.createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };

          if (Platform.OS === 'android') {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          } else {
            dims.screen = dims.window;
          }

          delete dims.windowPhysicalPixels;
        }

        babelHelpers.extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);
    return Dimensions;
  }();

  Dimensions.set(DeviceInfo.Dimensions);
  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
    Dimensions.set(update);
  });
  module.exports = Dimensions;
},165,[166,68,53,71,13],"Dimensions");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = require(_dependencyMap[0], 'NativeModules').DeviceInfo;

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},166,[15,13],"DeviceInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},167,[],"react-native/local-cli/bundle/assetPathUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      throw new Error('`' + componentName + '` has no propTypes defined`');
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that " + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},168,[148],"verifyPropTypes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = require(_dependencyMap[0], 'PixelRatio');

  var ReactNativePropRegistry = require(_dependencyMap[1], 'ReactNativePropRegistry');

  var ReactNativeStyleAttributes = require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var StyleSheetValidation = require(_dependencyMap[3], 'StyleSheetValidation');

  var flatten = require(_dependencyMap[4], 'flattenStyle');

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 && style2) {
        return [style1, style2];
      } else {
        return style1 || style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},169,[164,103,148,170,102],"StyleSheet");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = require(_dependencyMap[2], 'ViewStylePropTypes');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      babelHelpers.classCallCheck(this, StyleSheetValidation);
    }

    babelHelpers.createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__) {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);
    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},170,[149,152,140,13],"StyleSheetValidation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/View/View.js";

  var NativeMethodsMixin = require(_dependencyMap[0], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[1], 'Platform');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNativeStyleAttributes = require(_dependencyMap[4], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  var requireNativeComponent = require(_dependencyMap[9], 'requireNativeComponent');

  var View = createReactClass({
    displayName: 'View',
    mixins: [NativeMethodsMixin],
    propTypes: ViewPropTypes,
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    render: function render() {
      invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');
      return React.createElement(RCTView, babelHelpers.extends({}, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }));
    }
  });
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });

  if (__DEV__) {
    var UIManager = require(_dependencyMap[10], 'UIManager');

    var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};

    for (var prop in viewConfig.nativeProps) {
      var viewAny = View;

      if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
        throw new Error('View is missing propType for native prop `' + prop + '`');
      }
    }
  }

  var ViewToExport = RCTView;

  if (__DEV__) {
    ViewToExport = View;
  }

  module.exports = ViewToExport;
},171,[126,53,128,131,148,172,132,173,13,146,108],"View");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},172,[148],"ReactNativeViewAttributes");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'react');

  var factory = require(_dependencyMap[1], './factory');

  if (typeof React === 'undefined') {
    throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},173,[109,174],"create-react-class/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _assign = require(_dependencyMap[0], 'object-assign');

  var emptyObject = require(_dependencyMap[1], 'fbjs/lib/emptyObject');

  var _invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  if (process.env.NODE_ENV !== 'production') {
    var warning = require(_dependencyMap[3], 'fbjs/lib/warning');
  }

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;

  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  } else {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _childContextTypes, 'childContext');
        }

        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _contextTypes, 'context');
        }

        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _propTypes, 'prop');
        }

        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (process.env.NODE_ENV !== 'production') {
            warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
          }
        }
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (process.env.NODE_ENV !== 'production') {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === 'object' && spec !== null;

          if (process.env.NODE_ENV !== 'production') {
            warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
          }
        }

        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;

              if (process.env.NODE_ENV !== 'production') {
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);

      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;

        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (newThis !== component && newThis !== null) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
            }
          } else if (!args.length) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
            }

            return boundMethod;
          }

          var reboundMethod = _bind.apply(boundMethod, arguments);

          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }

      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        if (process.env.NODE_ENV !== 'production') {
          warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
          this.__didWarnIsMounted = true;
        }

        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
        }

        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        if (process.env.NODE_ENV !== 'production') {
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }

        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      if (process.env.NODE_ENV !== 'production') {
        warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
        warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
        warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
      }

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},174,[111,112,13,57],"create-react-class/factory.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/ART/ReactNativeART.js",
      _class2,
      _temp2;

  var Color = require(_dependencyMap[0], 'art/core/color');

  var Path = require(_dependencyMap[1], 'ARTSerializablePath');

  var Transform = require(_dependencyMap[2], 'art/core/transform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var createReactNativeComponentClass = require(_dependencyMap[6], 'createReactNativeComponentClass');

  var merge = require(_dependencyMap[7], 'merge');

  var invariant = require(_dependencyMap[8], 'fbjs/lib/invariant');

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Surface, _React$Component);

    function Surface() {
      babelHelpers.classCallCheck(this, Surface);
      return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    babelHelpers.createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 159
            }
          },
          this.props.children
        );
      }
    }]);
    return Surface;
  }(React.Component), _class.childContextTypes = {
    isInSurface: PropTypes.bool
  }, _temp);

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Group, _React$Component2);

    function Group() {
      babelHelpers.classCallCheck(this, Group);
      return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    babelHelpers.createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          this.props.children
        );
      }
    }]);
    return Group;
  }(React.Component), _class2.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  }, _temp2);

  var ClippingRectangle = function (_React$Component3) {
    babelHelpers.inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      babelHelpers.classCallCheck(this, ClippingRectangle);
      return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    babelHelpers.createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 253
            }
          },
          this.props.children
        );
      }
    }]);
    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    babelHelpers.inherits(Shape, _React$Component4);

    function Shape() {
      babelHelpers.classCallCheck(this, Shape);
      return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    babelHelpers.createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 401
          }
        });
      }
    }]);
    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    babelHelpers.inherits(Text, _React$Component5);

    function Text() {
      babelHelpers.classCallCheck(this, Text);
      return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    babelHelpers.createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 500
          }
        });
      }
    }]);
    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},175,[176,177,180,131,128,172,157,135,13],"ReactNativeART");
__d(function (global, require, module, exports, _dependencyMap) {
	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (this.hex == null) this.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (this.hsb == null) this.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (this.hsl == null) this.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (this.rgb == null) this.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},176,[],"art/core/color.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Class = require(_dependencyMap[0], 'art/core/class.js');

  var Path = require(_dependencyMap[1], 'art/core/path.js');

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},177,[178,179],"ARTSerializablePath");
__d(function (global, require, module, exports, _dependencyMap) {
	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},178,[],"art/core/class.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var Class = require(_dependencyMap[0], './class');

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 4 / 3 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},179,[178],"art/core/path.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var Class = require(_dependencyMap[0], './class');

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && typeof xx == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && typeof xx == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},180,[178],"art/core/transform.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Button.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var Text = require(_dependencyMap[5], 'Text');

  var TouchableNativeFeedback = require(_dependencyMap[6], 'TouchableNativeFeedback');

  var TouchableOpacity = require(_dependencyMap[7], 'TouchableOpacity');

  var View = require(_dependencyMap[8], 'View');

  var invariant = require(_dependencyMap[9], 'fbjs/lib/invariant');

  var Button = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Button, _React$Component);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if (Platform.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.createElement(
            View,
            {
              style: buttonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 136
              }
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 137
                }
              },
              formattedTitle
            )
          )
        );
      }
    }]);
    return Button;
  }(React.Component), _class.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string,
    hasTVPreferredFocus: PropTypes.bool
  }, _temp);
  var styles = StyleSheet.create({
    button: Platform.select({
      ios: {},
      android: {
        elevation: 4,
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Platform.select({
      ios: {
        color: '#007AFF',
        textAlign: 'center',
        padding: 8,
        fontSize: 18
      },
      android: {
        color: 'white',
        textAlign: 'center',
        padding: 8,
        fontWeight: '500'
      }
    }),
    buttonDisabled: Platform.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: Platform.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},181,[124,53,131,128,169,182,190,194,171,13],"Button");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Text/Text.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var EdgeInsetsPropType = require(_dependencyMap[1], 'EdgeInsetsPropType');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheetPropType = require(_dependencyMap[7], 'StyleSheetPropType');

  var TextStylePropTypes = require(_dependencyMap[8], 'TextStylePropTypes');

  var Touchable = require(_dependencyMap[9], 'Touchable');

  var createReactClass = require(_dependencyMap[10], 'create-react-class');

  var createReactNativeComponentClass = require(_dependencyMap[11], 'createReactNativeComponentClass');

  var mergeFast = require(_dependencyMap[12], 'mergeFast');

  var processColor = require(_dependencyMap[13], 'processColor');

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: {
      ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
      numberOfLines: PropTypes.number,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onLayout: PropTypes.func,
      onPress: PropTypes.func,
      onLongPress: PropTypes.func,
      pressRetentionOffset: EdgeInsetsPropType,
      selectable: PropTypes.bool,
      selectionColor: ColorPropType,
      suppressHighlighting: PropTypes.bool,
      style: stylePropType,
      testID: PropTypes.string,
      nativeID: PropTypes.string,
      allowFontScaling: PropTypes.bool,
      accessible: PropTypes.bool,
      adjustsFontSizeToFit: PropTypes.bool,
      minimumFontScale: PropTypes.number,
      disabled: PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: {
      isInAParentText: PropTypes.bool
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = babelHelpers.extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = babelHelpers.extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = babelHelpers.extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 546
          }
        }));
      } else {
        return React.createElement(RCTText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 548
          }
        }));
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (Platform.OS === 'android') {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},182,[124,133,126,53,131,128,172,139,152,183,173,157,189,153],"Text");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Touchable/Touchable.js";

  var BoundingDimensions = require(_dependencyMap[0], 'BoundingDimensions');

  var Platform = require(_dependencyMap[1], 'Platform');

  var Position = require(_dependencyMap[2], 'Position');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var TVEventHandler = require(_dependencyMap[5], 'TVEventHandler');

  var TouchEventUtils = require(_dependencyMap[6], 'fbjs/lib/TouchEventUtils');

  var UIManager = require(_dependencyMap[7], 'UIManager');

  var View = require(_dependencyMap[8], 'View');

  var keyMirror = require(_dependencyMap[9], 'fbjs/lib/keyMirror');

  var normalizeColor = require(_dependencyMap[10], 'normalizeColor');

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTVOS) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: babelHelpers.extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 793
        }
      });
    }
  };
  module.exports = Touchable;
},183,[184,53,186,131,21,187,188,108,171,151,125],"Touchable");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},184,[185],"BoundingDimensions");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},185,[13],"PooledClass");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},186,[185],"Position");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function TVEventHandler() {}

  TVEventHandler.prototype.enable = function (component, callback) {};

  TVEventHandler.prototype.disable = function () {};

  module.exports = TVEventHandler;
},187,[],"TVEventHandler");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},188,[],"fbjs/lib/TouchEventUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},189,[],"mergeFast");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var React = require(_dependencyMap[1], 'React');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var Touchable = require(_dependencyMap[4], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[5], 'TouchableWithoutFeedback');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[8], 'ensurePositiveDelayProps');

  var processColor = require(_dependencyMap[9], 'processColor');

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.OS === 'android' && Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _babelHelpers$extends;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
      var childProps = babelHelpers.extends({}, child.props, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, drawableProp, this.props.background), babelHelpers.defineProperty(_babelHelpers$extends, "accessible", this.props.accessible !== false), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityLabel", this.props.accessibilityLabel), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityComponentType", this.props.accessibilityComponentType), babelHelpers.defineProperty(_babelHelpers$extends, "accessibilityTraits", this.props.accessibilityTraits), babelHelpers.defineProperty(_babelHelpers$extends, "children", children), babelHelpers.defineProperty(_babelHelpers$extends, "testID", this.props.testID), babelHelpers.defineProperty(_babelHelpers$extends, "onLayout", this.props.onLayout), babelHelpers.defineProperty(_babelHelpers$extends, "hitSlop", this.props.hitSlop), babelHelpers.defineProperty(_babelHelpers$extends, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderGrant", this.touchableHandleResponderGrant), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderMove", this._handleResponderMove), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderRelease", this.touchableHandleResponderRelease), babelHelpers.defineProperty(_babelHelpers$extends, "onResponderTerminate", this.touchableHandleResponderTerminate), _babelHelpers$extends));
      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},190,[53,131,128,21,183,191,108,173,193,153],"TouchableNativeFeedback");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var React = require(_dependencyMap[1], 'React');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var TimerMixin = require(_dependencyMap[3], 'react-timer-mixin');

  var Touchable = require(_dependencyMap[4], 'Touchable');

  var createReactClass = require(_dependencyMap[5], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[6], 'ensurePositiveDelayProps');

  var warning = require(_dependencyMap[7], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[8], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},191,[133,131,128,192,183,173,193,57,145],"TouchableWithoutFeedback");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},192,[],"react-timer-mixin/TimerMixin.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},193,[13],"ensurePositiveDelayProps");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var Easing = require(_dependencyMap[1], 'Easing');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var TimerMixin = require(_dependencyMap[5], 'react-timer-mixin');

  var Touchable = require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[9], 'ensurePositiveDelayProps');

  var flattenStyle = require(_dependencyMap[10], 'flattenStyle');

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          }
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},194,[195,220,126,131,128,192,183,191,173,193,102],"TouchableOpacity");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = require(_dependencyMap[0], 'AnimatedImplementation');

  var Image = require(_dependencyMap[1], 'Image');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var AnimatedScrollView = void 0;
  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),

    get ScrollView() {
      if (!AnimatedScrollView) {
        AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(require(_dependencyMap[4], 'ScrollView'));
      }

      return AnimatedScrollView;
    }

  };
  babelHelpers.extends(Animated, AnimatedImplementation);
  module.exports = Animated;
},195,[196,223,182,171,225],"Animated");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = require(_dependencyMap[1], './nodes/AnimatedAddition');

  var AnimatedDiffClamp = require(_dependencyMap[2], './nodes/AnimatedDiffClamp');

  var AnimatedDivision = require(_dependencyMap[3], './nodes/AnimatedDivision');

  var AnimatedInterpolation = require(_dependencyMap[4], './nodes/AnimatedInterpolation');

  var AnimatedModulo = require(_dependencyMap[5], './nodes/AnimatedModulo');

  var AnimatedMultiplication = require(_dependencyMap[6], './nodes/AnimatedMultiplication');

  var AnimatedNode = require(_dependencyMap[7], './nodes/AnimatedNode');

  var AnimatedProps = require(_dependencyMap[8], './nodes/AnimatedProps');

  var AnimatedTracking = require(_dependencyMap[9], './nodes/AnimatedTracking');

  var AnimatedValue = require(_dependencyMap[10], './nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[11], './nodes/AnimatedValueXY');

  var DecayAnimation = require(_dependencyMap[12], './animations/DecayAnimation');

  var SpringAnimation = require(_dependencyMap[13], './animations/SpringAnimation');

  var TimingAnimation = require(_dependencyMap[14], './animations/TimingAnimation');

  var createAnimatedComponent = require(_dependencyMap[15], './createAnimatedComponent');

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = babelHelpers.extends({}, config);
      var configY = babelHelpers.extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},196,[197,205,206,207,199,208,209,200,210,213,198,214,215,217,219,222],"AnimatedImplementation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './nodes/AnimatedValue');

  var NativeAnimatedHelper = require(_dependencyMap[1], './NativeAnimatedHelper');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[1], './NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, AnimatedEvent);
      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);

      if (__DEV__) {
        this._validateMapping();
      }
    }

    babelHelpers.createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, babelHelpers.toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);
    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},197,[198,201,21,13],"AnimatedEvent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var InteractionManager = require(_dependencyMap[3], 'InteractionManager');

  var NativeAnimatedHelper = require(_dependencyMap[4], '../NativeAnimatedHelper');

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      babelHelpers.classCallCheck(this, AnimatedValue);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},198,[199,200,202,203,201],"AnimatedValue");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[2], '../NativeAnimatedHelper');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var normalizeColor = require(_dependencyMap[4], 'normalizeColor');

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(babelHelpers.extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = (_temp = _class = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      babelHelpers.classCallCheck(this, AnimatedInterpolation);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    babelHelpers.createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          NativeAnimatedHelper.validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
    return AnimatedInterpolation;
  }(AnimatedWithChildren), _class.__createInterpolation = createInterpolation, _temp);
  module.exports = AnimatedInterpolation;
},199,[200,202,201,13,125],"AnimatedInterpolation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = require(_dependencyMap[0], '../NativeAnimatedHelper');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var AnimatedNode = function () {
    function AnimatedNode() {
      babelHelpers.classCallCheck(this, AnimatedNode);
    }

    babelHelpers.createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);
    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},200,[201,13],"AnimatedNode");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = require(_dependencyMap[0], 'NativeModules').NativeAnimatedModule;

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},201,[15,70,13],"NativeAnimatedHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var NativeAnimatedHelper = require(_dependencyMap[1], '../NativeAnimatedHelper');

  var AnimatedWithChildren = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      babelHelpers.classCallCheck(this, AnimatedWithChildren);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    babelHelpers.createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);
    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},202,[200,201],"AnimatedWithChildren");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var EventEmitter = require(_dependencyMap[1], 'EventEmitter');

  var Set = require(_dependencyMap[2], 'Set');

  var TaskQueue = require(_dependencyMap[3], 'TaskQueue');

  var infoLog = require(_dependencyMap[4], 'infoLog');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var keyMirror = require(_dependencyMap[6], 'fbjs/lib/keyMirror');

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},203,[16,68,30,204,95,13,151],"InteractionManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var infoLog = require(_dependencyMap[0], 'infoLog');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      babelHelpers.classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    babelHelpers.createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return babelHelpers.extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);
    return TaskQueue;
  }();

  module.exports = TaskQueue;
},204,[95,13],"TaskQueue");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedAddition = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      babelHelpers.classCallCheck(this, AnimatedAddition);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},205,[199,200,198,202],"AnimatedAddition");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      babelHelpers.classCallCheck(this, AnimatedDiffClamp);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    babelHelpers.createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},206,[199,200,202],"AnimatedDiffClamp");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedDivision = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      babelHelpers.classCallCheck(this, AnimatedDivision);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},207,[199,200,198,202],"AnimatedDivision");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedModulo = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      babelHelpers.classCallCheck(this, AnimatedModulo);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    babelHelpers.createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},208,[199,200,202],"AnimatedModulo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      babelHelpers.classCallCheck(this, AnimatedMultiplication);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},209,[199,200,198,202],"AnimatedMultiplication");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], '../AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedStyle = require(_dependencyMap[2], './AnimatedStyle');

  var NativeAnimatedHelper = require(_dependencyMap[3], '../NativeAnimatedHelper');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var AnimatedProps = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      babelHelpers.classCallCheck(this, AnimatedProps);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = babelHelpers.extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},210,[197,200,211,201,21,13],"AnimatedProps");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedTransform = require(_dependencyMap[1], './AnimatedTransform');

  var AnimatedWithChildren = require(_dependencyMap[2], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[3], '../NativeAnimatedHelper');

  var flattenStyle = require(_dependencyMap[4], 'flattenStyle');

  var AnimatedStyle = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      babelHelpers.classCallCheck(this, AnimatedStyle);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = babelHelpers.extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    babelHelpers.createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},211,[200,212,202,201,102],"AnimatedStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = require(_dependencyMap[2], '../NativeAnimatedHelper');

  var AnimatedTransform = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      babelHelpers.classCallCheck(this, AnimatedTransform);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    babelHelpers.createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);
    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},212,[200,202,201],"AnimatedTransform");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './AnimatedValue');

  var AnimatedNode = require(_dependencyMap[1], './AnimatedNode');

  var AnimatedTracking = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      babelHelpers.classCallCheck(this, AnimatedTracking);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedTracking, [{
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }]);
    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},213,[198,200],"AnimatedTracking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], './AnimatedValue');

  var AnimatedWithChildren = require(_dependencyMap[1], './AnimatedWithChildren');

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      babelHelpers.classCallCheck(this, AnimatedValueXY);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);
    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},214,[198,202,13],"AnimatedValueXY");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Animation = require(_dependencyMap[0], './Animation');

  var _require = require(_dependencyMap[1], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    babelHelpers.inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      babelHelpers.classCallCheck(this, DecayAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    babelHelpers.createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},215,[216,201],"DecayAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = require(_dependencyMap[0], 'NativeAnimatedHelper');

  var Animation = function () {
    function Animation() {
      babelHelpers.classCallCheck(this, Animation);
    }

    babelHelpers.createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);
    return Animation;
  }();

  module.exports = Animation;
},216,[201],"Animation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = require(_dependencyMap[2], './Animation');

  var SpringConfig = require(_dependencyMap[3], '../SpringConfig');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var _require = require(_dependencyMap[5], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    babelHelpers.inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      babelHelpers.classCallCheck(this, SpringAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    babelHelpers.createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},217,[198,214,216,218,13,201],"SpringAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},218,[],"SpringConfig");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = require(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = require(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = require(_dependencyMap[2], './Animation');

  var _require = require(_dependencyMap[3], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = require(_dependencyMap[4], 'Easing');

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    babelHelpers.inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      babelHelpers.classCallCheck(this, TimingAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    babelHelpers.createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},219,[198,214,216,201,220],"TimingAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      babelHelpers.classCallCheck(this, Easing);
    }

    babelHelpers.createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          t -= 1.5 / 2.75;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          t -= 2.25 / 2.75;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 2.625 / 2.75;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = require(_dependencyMap[0], 'bezier');

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);
    return Easing;
  }();

  module.exports = Easing;
},220,[221],"Easing");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},221,[],"bezier");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js";

  var _require = require(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = require(_dependencyMap[1], './nodes/AnimatedProps');

  var React = require(_dependencyMap[2], 'React');

  var ViewStylePropTypes = require(_dependencyMap[3], 'ViewStylePropTypes');

  function createAnimatedComponent(Component) {
    var _class, _temp;

    var AnimatedComponent = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        babelHelpers.classCallCheck(this, AnimatedComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      babelHelpers.createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "componentWillMount",
        value: function componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, babelHelpers.extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 147
            }
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);
      return AnimatedComponent;
    }(React.Component), _class.__skipSetNativeProps_FOR_TESTS_ONLY = false, _temp);
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},222,[197,210,131,140],"createAnimatedComponent");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Image/Image.android.js";

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var ImageResizeMode = require(_dependencyMap[1], 'ImageResizeMode');

  var ImageStylePropTypes = require(_dependencyMap[2], 'ImageStylePropTypes');

  var NativeMethodsMixin = require(_dependencyMap[3], 'NativeMethodsMixin');

  var NativeModules = require(_dependencyMap[4], 'NativeModules');

  var React = require(_dependencyMap[5], 'React');

  var PropTypes = require(_dependencyMap[6], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[7], 'ReactNativeViewAttributes');

  var Set = require(_dependencyMap[8], 'Set');

  var StyleSheet = require(_dependencyMap[9], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[10], 'StyleSheetPropType');

  var View = require(_dependencyMap[11], 'View');

  var ViewPropTypes = require(_dependencyMap[12], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[13], 'ViewStylePropTypes');

  var createReactClass = require(_dependencyMap[14], 'create-react-class');

  var filterObject = require(_dependencyMap[15], 'fbjs/lib/filterObject');

  var flattenStyle = require(_dependencyMap[16], 'flattenStyle');

  var merge = require(_dependencyMap[17], 'merge');

  var requireNativeComponent = require(_dependencyMap[18], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[19], 'resolveAssetSource');

  var ImageLoader = NativeModules.ImageLoader;
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {
    src: true,
    loadingIndicatorSrc: true,
    resizeMethod: true,
    resizeMode: true,
    progressiveRenderingEnabled: true,
    fadeDuration: true,
    shouldNotifyLoadEvents: true
  });
  var ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));
  var ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(function (x) {
    return !ViewStyleKeys.has(x);
  }));
  var Image = createReactClass({
    displayName: 'Image',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        headers: PropTypes.objectOf(PropTypes.string)
      }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        headers: PropTypes.objectOf(PropTypes.string)
      }))]),
      blurRadius: PropTypes.number,
      loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number]),
      progressiveRenderingEnabled: PropTypes.bool,
      fadeDuration: PropTypes.number,
      onLoadStart: PropTypes.func,
      onError: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func,
      testID: PropTypes.string,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
    }),
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(url, success, failure) {
        return ImageLoader.getSize(url).then(function (sizes) {
          success(sizes.width, sizes.height);
        }).catch(failure || function () {
          console.warn('Failed to get size for image: ' + url);
        });
      },
      prefetch: function prefetch(url, callback) {
        var requestId = generateRequestId();
        callback && callback(requestId);
        return ImageLoader.prefetchImage(url, requestId);
      },
      abortPrefetch: function abortPrefetch(requestId) {
        ImageLoader.abortRequest(requestId);
      },
      queryCache: function queryCache(urls) {
        return regeneratorRuntime.async(function queryCache$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      },
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: {
      isInAParentText: PropTypes.bool
    },
    render: function render() {
      var source = resolveAssetSource(this.props.source);
      var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

      if (source && source.uri === '') {
        console.warn('source.uri should not be an empty string');
      }

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      if (source && (source.uri || Array.isArray(source))) {
        var style = void 0;
        var sources = void 0;

        if (source.uri) {
          var _width = source.width,
              _height = source.height;
          style = flattenStyle([{
            width: _width,
            height: _height
          }, styles.base, this.props.style]);
          sources = [{
            uri: source.uri
          }];
        } else {
          style = flattenStyle([styles.base, this.props.style]);
          sources = source;
        }

        var _props = this.props,
            onLoadStart = _props.onLoadStart,
            onLoad = _props.onLoad,
            onLoadEnd = _props.onLoadEnd,
            onError = _props.onError;
        var nativeProps = merge(this.props, {
          style: style,
          shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
          src: sources,
          headers: source.headers,
          loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
        });

        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 302
            }
          }));
        } else {
          return React.createElement(RKImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 304
            }
          }));
        }
      }

      return null;
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var cfg = {
    nativeOnly: {
      src: true,
      headers: true,
      loadingIndicatorSrc: true,
      shouldNotifyLoadEvents: true
    }
  };
  var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);
  module.exports = Image;
},223,[36,150,149,126,15,131,128,172,30,169,139,171,132,140,173,224,102,135,146,161],"Image");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function filterObject(object, callback, context) {
    if (!object) {
      return null;
    }

    var result = {};

    for (var name in object) {
      if (hasOwnProperty.call(object, name) && callback.call(context, object[name], name, object)) {
        result[name] = object[name];
      }
    }

    return result;
  }

  module.exports = filterObject;
},224,[],"fbjs/lib/filterObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var ColorPropType = require(_dependencyMap[1], 'ColorPropType');

  var EdgeInsetsPropType = require(_dependencyMap[2], 'EdgeInsetsPropType');

  var Platform = require(_dependencyMap[3], 'Platform');

  var PointPropType = require(_dependencyMap[4], 'PointPropType');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var React = require(_dependencyMap[6], 'React');

  var ReactNative = require(_dependencyMap[7], 'ReactNative');

  var ScrollResponder = require(_dependencyMap[8], 'ScrollResponder');

  var ScrollViewStickyHeader = require(_dependencyMap[9], 'ScrollViewStickyHeader');

  var StyleSheet = require(_dependencyMap[10], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[11], 'StyleSheetPropType');

  var View = require(_dependencyMap[12], 'View');

  var ViewPropTypes = require(_dependencyMap[13], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[14], 'ViewStylePropTypes');

  var createReactClass = require(_dependencyMap[15], 'create-react-class');

  var dismissKeyboard = require(_dependencyMap[16], 'dismissKeyboard');

  var flattenStyle = require(_dependencyMap[17], 'flattenStyle');

  var invariant = require(_dependencyMap[18], 'fbjs/lib/invariant');

  var processDecelerationRate = require(_dependencyMap[19], 'processDecelerationRate');

  var requireNativeComponent = require(_dependencyMap[20], 'requireNativeComponent');

  var warning = require(_dependencyMap[21], 'fbjs/lib/warning');

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new Animated.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return this.scrollResponderMixinGetInitialState();
    },
    componentWillMount: function componentWillMount() {
      this._scrollAnimatedValue = new Animated.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      if (__DEV__) {
        if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }

      this.scrollResponderHandleScroll(e);
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;

      if (Platform.OS === 'ios') {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
        warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
      } else if (Platform.OS === 'android') {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;

      if (__DEV__ && this.props.style) {
        style = flattenStyle(this.props.style);
        childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 700
              }
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        babelHelpers.extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 717
          }
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
      var props = babelHelpers.extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });
      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 789
              }
            }),
            Platform.isTVOS ? null : refreshControl,
            contentContainer
          );
        } else if (Platform.OS === 'android') {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 804
              }
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        babelHelpers.extends({}, props, {
          ref: this._setScrollViewRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 811
          }
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;

  if (Platform.OS === 'android') {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  } else if (Platform.OS === 'ios') {
    nativeOnlyProps = {
      nativeOnly: {
        onMomentumScrollBegin: true,
        onMomentumScrollEnd: true,
        onScrollBeginDrag: true,
        onScrollEndDrag: true
      }
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  }

  module.exports = ScrollView;
},225,[195,124,133,53,226,128,131,21,227,234,169,139,171,132,140,173,230,102,13,235,146,57],"ScrollView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},226,[128,134],"PointPropType");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var FrameRateLogger = require(_dependencyMap[1], 'FrameRateLogger');

  var Keyboard = require(_dependencyMap[2], 'Keyboard');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var Subscribable = require(_dependencyMap[4], 'Subscribable');

  var TextInputState = require(_dependencyMap[5], 'TextInputState');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var invariant = require(_dependencyMap[7], 'fbjs/lib/invariant');

  var nullthrows = require(_dependencyMap[8], 'fbjs/lib/nullthrows');

  var performanceNow = require(_dependencyMap[9], 'fbjs/lib/performanceNow');

  var warning = require(_dependencyMap[10], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[11], 'NativeModules'),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = require(_dependencyMap[12], 'ReactNativeComponentTree'),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTTextView' || instance.viewConfig.uiViewClassName === 'RCTTextField');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        var animated = rect.animated,
            rect = babelHelpers.objectWithoutProperties(rect, ["animated"]);
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    componentWillMount: function componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},227,[165,228,229,21,231,116,108,13,232,54,57,15,233],"ScrollResponder");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},228,[15,13],"FrameRateLogger");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var KeyboardObserver = require(_dependencyMap[2], 'NativeModules').KeyboardObserver;

  var dismissKeyboard = require(_dependencyMap[3], 'dismissKeyboard');

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;
  module.exports = Keyboard;
},229,[13,70,15,230],"Keyboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = require(_dependencyMap[0], 'TextInputState');

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},230,[116],"dismissKeyboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    componentWillMount: function componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });

      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},231,[],"Subscribable");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},232,[],"fbjs/lib/nullthrows.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},233,[21],"ReactNativeComponentTree");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var ScrollViewStickyHeader = function (_React$Component) {
    babelHelpers.inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader(props, context) {
      babelHelpers.classCallCheck(this, ScrollViewStickyHeader);

      var _this = babelHelpers.possibleConstructorReturn(this, (ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call(this, props, context));

      _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      };

      _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: props.nextHeaderLayoutY
      };
      return _this;
    }

    babelHelpers.createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          inputRange.push(layoutY);
          outputRange.push(0);
          var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

          if (collisionPoint >= layoutY) {
            inputRange.push(collisionPoint, collisionPoint + 1);
            outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          Animated.View,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 96
            }
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);
    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},234,[195,131,169],"ScrollViewStickyHeader");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},235,[],"processDecelerationRate");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js";

  var NativeMethodsMixin = require(_dependencyMap[0], 'NativeMethodsMixin');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[5], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[6], 'requireNativeComponent');

  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 140
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  var RCTCheckBox = requireNativeComponent('AndroidCheckBox', CheckBox, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true
    }
  });
  module.exports = CheckBox;
},236,[126,128,131,169,132,173,146],"CheckBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummyDatePickerIOS = function (_React$Component) {
    babelHelpers.inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      babelHelpers.classCallCheck(this, DummyDatePickerIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummyDatePickerIOS, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          React.createElement(
            Text,
            {
              style: styles.datePickerText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 23
              }
            },
            "DatePickerIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyDatePickerIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},237,[131,169,182,171],"DatePickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ReactNative = require(_dependencyMap[5], 'ReactNative');

  var StatusBar = require(_dependencyMap[6], 'StatusBar');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var UIManager = require(_dependencyMap[8], 'UIManager');

  var View = require(_dependencyMap[9], 'View');

  var ViewPropTypes = require(_dependencyMap[10], 'ViewPropTypes');

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = require(_dependencyMap[11], 'create-react-class');

  var dismissKeyboard = require(_dependencyMap[12], 'dismissKeyboard');

  var requireNativeComponent = require(_dependencyMap[13], 'requireNativeComponent');

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(
        View,
        {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 176
          }
        },
        this.props.renderNavigationView(),
        drawStatusBar && React.createElement(View, {
          style: styles.drawerStatusBar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        })
      );
      var childrenWrapper = React.createElement(
        View,
        {
          ref: INNERVIEW_REF,
          style: styles.mainSubview,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        },
        drawStatusBar && React.createElement(StatusBar, {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 188
          }
        }),
        drawStatusBar && React.createElement(View, {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        }),
        this.props.children
      );
      return React.createElement(
        AndroidDrawerLayout,
        babelHelpers.extends({}, this.props, {
          ref: RK_DRAWER_REF,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          }
        }),
        childrenWrapper,
        drawerViewWrapper
      );
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);
  module.exports = DrawerLayoutAndroid;
},238,[124,126,53,131,128,21,239,169,108,171,132,173,230,146],"DrawerLayoutAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var ColorPropType = require(_dependencyMap[2], 'ColorPropType');

  var Platform = require(_dependencyMap[3], 'Platform');

  var processColor = require(_dependencyMap[4], 'processColor');

  var StatusBarManager = require(_dependencyMap[5], 'NativeModules').StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, babelHelpers.extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

          if (Platform.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          } else if (Platform.OS === 'android') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }

          StatusBar._currentValues = mergedProps;
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if (Platform.OS === 'ios') {
          StatusBarManager.setHidden(hidden, animation);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if (Platform.OS === 'ios') {
          StatusBarManager.setStyle(style, animated);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (Platform.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (Platform.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (Platform.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);
    return StatusBar;
  }(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  }), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  }, _class.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  }, _temp2);
  module.exports = StatusBar;
},239,[131,128,124,53,153,15],"StatusBar");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/FlatList.js";

  var MetroListView = require(_dependencyMap[0], 'MetroListView');

  var React = require(_dependencyMap[1], 'React');

  var View = require(_dependencyMap[2], 'View');

  var VirtualizedList = require(_dependencyMap[3], 'VirtualizedList');

  var ListView = require(_dependencyMap[4], 'ListView');

  var invariant = require(_dependencyMap[5], 'fbjs/lib/invariant');

  var defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });
  var FlatList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(FlatList, _React$PureComponent);
    babelHelpers.createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      babelHelpers.classCallCheck(this, FlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 607
              }
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    babelHelpers.createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(babelHelpers.extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, babelHelpers.extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 626
            }
          }));
        } else {
          return React.createElement(VirtualizedList, babelHelpers.extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 634
            }
          }));
        }
      }
    }]);
    return FlatList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp);
  module.exports = FlatList;
},240,[241,131,171,248,242,13],"FlatList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/MetroListView.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var React = require(_dependencyMap[1], 'React');

  var RefreshControl = require(_dependencyMap[2], 'RefreshControl');

  var ScrollView = require(_dependencyMap[3], 'ScrollView');

  var invariant = require(_dependencyMap[4], 'fbjs/lib/invariant');

  var MetroListView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);
    return MetroListView;
  }(React.Component), _class.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }));
      }
    }
  }, _temp2);
  module.exports = MetroListView;
},241,[242,131,247,225,13],"MetroListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/ListView/ListView.js";

  var ListViewDataSource = require(_dependencyMap[0], 'ListViewDataSource');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var RCTScrollViewManager = require(_dependencyMap[5], 'NativeModules').ScrollViewManager;

  var ScrollView = require(_dependencyMap[6], 'ScrollView');

  var ScrollResponder = require(_dependencyMap[7], 'ScrollResponder');

  var StaticRenderer = require(_dependencyMap[8], 'StaticRenderer');

  var TimerMixin = require(_dependencyMap[9], 'react-timer-mixin');

  var View = require(_dependencyMap[10], 'View');

  var cloneReferencedElement = require(_dependencyMap[11], 'react-clone-referenced-element');

  var createReactClass = require(_dependencyMap[12], 'create-react-class');

  var isEmpty = require(_dependencyMap[13], 'isEmpty');

  var merge = require(_dependencyMap[14], 'merge');

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 338
            }
          }));
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: Platform.OS === 'ios',
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    componentWillMount: function componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = require(_dependencyMap[15], 'fbjs/lib/warning');

            warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = require(_dependencyMap[16], 'fbjs/lib/invariant');

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 502
                  }
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = babelHelpers.objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      babelHelpers.extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });
      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},242,[243,53,131,128,21,15,225,227,245,192,171,246,173,244,135,57,13],"ListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var isEmpty = require(_dependencyMap[1], 'isEmpty');

  var warning = require(_dependencyMap[2], 'fbjs/lib/warning');

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      babelHelpers.classCallCheck(this, ListViewDataSource);
      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    babelHelpers.createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(babelHelpers.toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);
    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},243,[13,244,57],"ListViewDataSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},244,[],"isEmpty");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var StaticRenderer = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      babelHelpers.classCallCheck(this, StaticRenderer);
      return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    babelHelpers.createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);
    return StaticRenderer;
  }(React.Component), _class.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  }, _temp);
  module.exports = StaticRenderer;
},245,[131,128],"StaticRenderer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0], 'react');

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      if (__DEV__) {
        console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
      }

      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},246,[109],"react-clone-referenced-element/cloneReferencedElement.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ViewPropTypes = require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[7], 'requireNativeComponent');

  if (Platform.OS === 'android') {
    var RefreshLayoutConsts = require(_dependencyMap[8], 'UIManager').AndroidSwipeRefreshLayout.Constants;
  } else {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 156
        }
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });

  if (Platform.OS === 'ios') {
    var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
  } else if (Platform.OS === 'android') {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }

  module.exports = RefreshControl;
},247,[124,126,53,131,128,132,173,146,108],"RefreshControl");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/VirtualizedList.js";

  var Batchinator = require(_dependencyMap[0], 'Batchinator');

  var FillRateHelper = require(_dependencyMap[1], 'FillRateHelper');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var RefreshControl = require(_dependencyMap[5], 'RefreshControl');

  var ScrollView = require(_dependencyMap[6], 'ScrollView');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var View = require(_dependencyMap[8], 'View');

  var ViewabilityHelper = require(_dependencyMap[9], 'ViewabilityHelper');

  var flattenStyle = require(_dependencyMap[10], 'flattenStyle');

  var infoLog = require(_dependencyMap[11], 'infoLog');

  var invariant = require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = require(_dependencyMap[13], 'fbjs/lib/warning');

  var _require = require(_dependencyMap[14], 'VirtualizeUtils'),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;
  var VirtualizedList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(babelHelpers.extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            horizontal: this.props.horizontal
          }
        };
      }
    }]);

    function VirtualizedList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      invariant(!(_this._isNestedWithSameOrientation() && props.onViewableItemsChanged), 'Nesting lists that scroll in the same direction does not support onViewableItemsChanged' + 'on the inner list.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      _this.state = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };
      return _this;
    }

    babelHelpers.createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (this.props.initialScrollIndex) {
          this._initialScrollIndexTimeout = setTimeout(function () {
            return _this2.scrollToIndex({
              animated: false,
              index: _this2.props.initialScrollIndex
            });
          }, 0);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose();

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();

        clearTimeout(this._initialScrollIndexTimeout);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        this.setState({
          first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
        });

        if (data !== this.props.data || extraData !== this.props.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this3 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this3._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this3._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this3._onCellLayout(e, key, ii);
            },
            onUnmount: _this3._onCellUnmount,
            parentProps: _this3.props,
            ref: function ref(_ref) {
              _this3._cellRefs[key] = _ref;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 556
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization || this._isNestedWithSameOrientation();
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        if (__DEV__) {
          var flatStyles = flattenStyle(this.props.contentContainerStyle);
          warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 633
            }
          });
          cells.push(React.createElement(
            View,
            {
              key: "$header",
              onLayout: this._onLayoutHeader,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 636
              }
            },
            element
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: babelHelpers.defineProperty({}, spacerKey, leadSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 673
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: babelHelpers.defineProperty({}, spacerKey, trailSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 687
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: babelHelpers.defineProperty({}, spacerKey, firstSpace),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 700
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: babelHelpers.defineProperty({}, spacerKey, tailSpacerLength),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 733
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 741
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 744
              }
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 757
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$footer",
              onLayout: this._onLayoutFooter,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 760
              }
            },
            _element2
          ));
        }

        var scrollProps = babelHelpers.extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 793
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: babelHelpers.extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 952
            }
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: babelHelpers.extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              }),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 961
              }
            });
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 972
            }
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 982
            }
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props6 = this.props,
            data = _props6.data,
            getItemCount = _props6.getItemCount,
            onEndReached = _props6.onEndReached,
            onEndReachedThreshold = _props6.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this4 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);
        });
      }
    }]);
    return VirtualizedList;
  }(React.PureComponent), _class.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  }, _class.contextTypes = {
    virtualizedList: PropTypes.shape({
      horizontal: PropTypes.bool
    })
  }, _class.childContextTypes = {
    virtualizedList: PropTypes.shape({
      horizontal: PropTypes.bool
    })
  }, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this5._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellRefs = {};
    this._hasDataChangedSinceEndReached = true;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._initialScrollIndexTimeout = 0;
    this._frames = {};
    this._footerLength = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this5._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this5._isNestedWithSameOrientation()) {
        return React.createElement(View, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 847
          }
        }));
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 862
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 856
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 871
          }
        }));
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this5._frames[cellKey];

      if (curr) {
        _this5._frames[cellKey] = babelHelpers.extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
      _this5.props.onLayout && _this5.props.onLayout(e);

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this5.props.onLayout && _this5.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (_this5.props.onContentSizeChange) {
        _this5.props.onContentSizeChange(width, height);
      }

      _this5._scrollMetrics.contentLength = _this5._selectLength({
        height: height,
        width: width
      });

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onScroll = function (e) {
      if (_this5.props.onScroll) {
        _this5.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this5._selectLength(e.nativeEvent.contentSize);

      var offset = _this5._selectOffset(e.nativeEvent.contentOffset);

      var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;

      if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this5._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this5._hasWarned.perf = true;
      }

      var dOffset = offset - _this5._scrollMetrics.offset;
      var velocity = dOffset / dt;
      _this5._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this5._updateViewableItems(_this5.props.data);

      if (!_this5.props) {
        return;
      }

      _this5._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this5._fillRateHelper.activate();
      }

      _this5._computeBlankness();

      _this5._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this5._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
      }

      _this5._computeBlankness();

      _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this5._scrollMetrics.velocity = 0;

      _this5._computeBlankness();

      _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props7 = _this5.props,
          data = _props7.data,
          getItemCount = _props7.getItemCount,
          onEndReachedThreshold = _props7.onEndReachedThreshold;

      var isVirtualizationDisabled = _this5._isVirtualizationDisabled();

      _this5._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this5.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this5._scrollMetrics.visibleLength) {
            if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this5._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props8 = _this5.props,
          data = _props8.data,
          getItem = _props8.getItem,
          keyExtractor = _props8.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this5._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this5.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this5._averageCellLength,
          offset: _this5._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props9 = _this5.props,
          data = _props9.data,
          getItem = _props9.getItem,
          getItemCount = _props9.getItemCount,
          getItemLayout = _props9.getItemLayout,
          keyExtractor = _props9.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this5._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);

          if (__DEV__) {
            var frameType = PropTypes.shape({
              length: PropTypes.number.isRequired,
              offset: PropTypes.number.isRequired,
              index: PropTypes.number.isRequired
            }).isRequired;
            PropTypes.checkPropTypes({
              frame: frameType
            }, {
              frame: frame
            }, 'frame', 'VirtualizedList.getItemLayout');
          }
        }
      }

      return frame;
    };
  }, _temp);

  var CellRenderer = function (_React$Component) {
    babelHelpers.inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref6;

      var _temp2, _this6, _ret2;

      babelHelpers.classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this6 = babelHelpers.possibleConstructorReturn(this, (_ref6 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref6, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this6, _ret2);
    }

    babelHelpers.createClass(CellRenderer, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props10 = this.props,
            CellRendererComponent = _props10.CellRendererComponent,
            ItemSeparatorComponent = _props10.ItemSeparatorComponent,
            fillRateHelper = _props10.fillRateHelper,
            horizontal = _props10.horizontal,
            item = _props10.item,
            index = _props10.index,
            inversionStyle = _props10.inversionStyle,
            parentProps = _props10.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1354
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1363
              }
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          babelHelpers.extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1370
            }
          }),
          element,
          itemSeparator
        );
      }
    }]);
    return CellRenderer;
  }(React.Component);

  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},248,[249,250,128,131,21,247,225,169,171,251,102,95,13,57,252],"VirtualizedList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = require(_dependencyMap[0], 'InteractionManager');

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      babelHelpers.classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }

    babelHelpers.createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);
    return Batchinator;
  }();

  module.exports = Batchinator;
},249,[203],"Batchinator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var performanceNow = require(_dependencyMap[0], 'fbjs/lib/performanceNow');

  var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

  var Info = function Info() {
    babelHelpers.classCallCheck(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    babelHelpers.createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      babelHelpers.classCallCheck(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    babelHelpers.createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;
        var info = babelHelpers.extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);
    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},250,[54,57],"FillRateHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      babelHelpers.classCallCheck(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    babelHelpers.createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(babelHelpers.extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},251,[13],"ViewabilityHelper");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;

          if (kk === offsets.length - 1) {
            invariant(out.length === offsets.length, 'bad offsets input, should be in increasing order ' + JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = babelHelpers.slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},252,[13],"VirtualizeUtils");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Image/ImageBackground.js";

  var Image = require(_dependencyMap[0], 'Image');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var View = require(_dependencyMap[3], 'View');

  var ensureComponentIsNative = require(_dependencyMap[4], 'ensureComponentIsNative');

  var ImageBackground = function (_React$Component) {
    babelHelpers.inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = babelHelpers.objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);
        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          React.createElement(Image, babelHelpers.extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          })),
          children
        );
      }
    }]);
    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},253,[223,131,169,171,254],"ImageBackground");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
  };

  module.exports = ensureComponentIsNative;
},254,[13],"ensureComponentIsNative");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageEditingManager = require(_dependencyMap[0], 'NativeModules').ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      babelHelpers.classCallCheck(this, ImageEditor);
    }

    babelHelpers.createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);
    return ImageEditor;
  }();

  module.exports = ImageEditor;
},255,[15],"ImageEditor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageStoreManager = require(_dependencyMap[0], 'NativeModules').ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      babelHelpers.classCallCheck(this, ImageStore);
    }

    babelHelpers.createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);
    return ImageStore;
  }();

  module.exports = ImageStore;
},256,[15],"ImageStore");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";

  var createReactClass = require(_dependencyMap[0], 'create-react-class');

  var Keyboard = require(_dependencyMap[1], 'Keyboard');

  var LayoutAnimation = require(_dependencyMap[2], 'LayoutAnimation');

  var Platform = require(_dependencyMap[3], 'Platform');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var React = require(_dependencyMap[5], 'React');

  var TimerMixin = require(_dependencyMap[6], 'react-timer-mixin');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    componentWillMount: function componentWillMount() {
      if (Platform.OS === 'ios') {
        this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["behavior", "children", "style"]);

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - this.state.bottom,
              flex: 0
            };
          }

          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 172
              }
            }),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: this.state.bottom
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 182
              }
            }),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 183
                }
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: this.state.bottom
          };
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 192
              }
            }),
            children
          );

        default:
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 199
              }
            }),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},257,[173,229,258,53,128,131,192,171,132],"KeyboardAvoidingView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var UIManager = require(_dependencyMap[1], 'UIManager');

  var keyMirror = require(_dependencyMap[2], 'fbjs/lib/keyMirror');

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    if (__DEV__) {
      checkConfig(config, 'config', 'LayoutAnimation.configureNext');
    }

    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},258,[128,108,151],"LayoutAnimation");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},259,[260],"MaskedViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var UnimplementedView = function (_React$Component) {
    babelHelpers.inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      babelHelpers.classCallCheck(this, UnimplementedView);
      return babelHelpers.possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    babelHelpers.createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = require(_dependencyMap[2], 'View');

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          this.props.children
        );
      }
    }]);
    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });
  module.exports = UnimplementedView;
},260,[131,169,171],"UnimplementedView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Modal/Modal.js",
      _container;

  var AppContainer = require(_dependencyMap[0], 'AppContainer');

  var I18nManager = require(_dependencyMap[1], 'I18nManager');

  var NativeEventEmitter = require(_dependencyMap[2], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[3], 'NativeModules');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var PropTypes = require(_dependencyMap[6], 'prop-types');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var View = require(_dependencyMap[8], 'View');

  var deprecatedPropType = require(_dependencyMap[9], 'deprecatedPropType');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;
  var Modal = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Modal, _React$Component);

    function Modal(props) {
      babelHelpers.classCallCheck(this, Modal);

      var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    babelHelpers.createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(
          AppContainer,
          {
            rootTag: this.context.rootTag,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 238
            }
          },
          this.props.children
        ) : this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 244
            }
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 257
              }
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);
    return Modal;
  }(React.Component), _class.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  }, _class.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  }, _class.contextTypes = {
    rootTag: PropTypes.number
  }, _temp);
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},261,[262,281,70,15,53,131,128,169,171,144,146],"Modal");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/ReactNative/AppContainer.js";

  var EmitterSubscription = require(_dependencyMap[0], 'EmitterSubscription');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var RCTDeviceEventEmitter = require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var React = require(_dependencyMap[3], 'React');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var View = require(_dependencyMap[6], 'View');

  var AppContainer = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
              var Inspector = require(_dependencyMap[7], 'Inspector');

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 66
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            var YellowBox = require(_dependencyMap[8], 'YellowBox');

            yellowBox = React.createElement(YellowBox, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }
        }

        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);
    return AppContainer;
  }(React.Component), _class.childContextTypes = {
    rootTag: PropTypes.number
  }, _temp2);
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},262,[66,128,71,131,21,169,171,263,279],"AppContainer");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/Inspector.js";

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var InspectorOverlay = require(_dependencyMap[1], 'InspectorOverlay');

  var InspectorPanel = require(_dependencyMap[2], 'InspectorPanel');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var ReactNative = require(_dependencyMap[5], 'ReactNative');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var Touchable = require(_dependencyMap[7], 'Touchable');

  var UIManager = require(_dependencyMap[8], 'UIManager');

  var View = require(_dependencyMap[9], 'View');

  var emptyObject = require(_dependencyMap[10], 'fbjs/lib/emptyObject');

  var invariant = require(_dependencyMap[11], 'fbjs/lib/invariant');

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderer = findRenderer();
  hook.resolveRNStyle = require(_dependencyMap[12], 'flattenStyle');

  function findRenderer() {
    var renderers = hook._renderers;
    var keys = Object.keys(renderers);
    invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
    return renderers[keys[0]];
  }

  var Inspector = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Inspector, _React$Component);

    function Inspector(props) {
      babelHelpers.classCallCheck(this, Inspector);

      var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedViewTag: _this.props.inspectedViewTag,
        networking: false
      };
      return _this;
    }

    babelHelpers.createClass(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this.attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this.attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this.attachToDevtools);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          inspectedViewTag: newProps.inspectedViewTag
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchViewTag",
      value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
        var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
            hierarchy = _renderer$getInspecto.hierarchy,
            props = _renderer$getInspecto.props,
            selection = _renderer$getInspecto.selection,
            source = _renderer$getInspecto.source;

        if (this.state.devtoolsAgent) {
          var offsetFromLeaf = hierarchy.length - 1 - selection;
          this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
        }

        this.setState({
          panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
          selection: selection,
          hierarchy: hierarchy,
          inspected: {
            style: props.style,
            frame: frame,
            source: source
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargetting",
      value: function setTouchTargetting(val) {
        var _this3 = this;

        Touchable.TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedViewTag) {
          _this3.setState({
            inspectedViewTag: inspectedViewTag
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: Platform.OS === 'ios' ? 20 : 0
        };
        return React.createElement(
          View,
          {
            style: styles.container,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          this.state.inspecting && React.createElement(InspectorOverlay, {
            inspected: this.state.inspected,
            inspectedViewTag: this.state.inspectedViewTag,
            onTouchViewTag: this.onTouchViewTag.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 233
            }
          }),
          React.createElement(
            View,
            {
              style: [styles.panelContainer, panelContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 238
              }
            },
            React.createElement(InspectorPanel, {
              devtoolsIsOpen: !!this.state.devtoolsAgent,
              inspecting: this.state.inspecting,
              perfing: this.state.perfing,
              setPerfing: this.setPerfing.bind(this),
              setInspecting: this.setInspecting.bind(this),
              inspected: this.state.inspected,
              hierarchy: this.state.hierarchy,
              selection: this.state.selection,
              setSelection: this.setSelection.bind(this),
              touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
              setTouchTargetting: this.setTouchTargetting.bind(this),
              networking: this.state.networking,
              setNetworking: this.setNetworking.bind(this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 239
              }
            })
          )
        );
      }
    }]);
    return Inspector;
  }(React.Component), _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.attachToDevtools = function (agent) {
      var _hideWait = null;
      var hlSub = agent.sub('highlight', function (_ref) {
        var node = _ref.node,
            name = _ref.name,
            props = _ref.props;
        clearTimeout(_hideWait);

        if (typeof node !== 'number') {
          node = ReactNative.findNodeHandle(node);
        }

        UIManager.measure(node, function (x, y, width, height, left, top) {
          _this4.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props ? props.style : emptyObject
            }
          });
        });
      });
      var hideSub = agent.sub('hideHighlight', function () {
        if (_this4.state.inspected === null) {
          return;
        }

        _hideWait = setTimeout(function () {
          _this4.setState({
            inspected: null
          });
        }, 100);
      });
      _this4._subs = [hlSub, hideSub];
      agent.on('shutdown', function () {
        _this4.setState({
          devtoolsAgent: null
        });

        _this4._subs = null;
      });

      _this4.setState({
        devtoolsAgent: agent
      });
    };
  }, _temp);
  var styles = StyleSheet.create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });
  module.exports = Inspector;
},263,[165,264,268,53,131,21,169,183,108,171,112,13,102],"Inspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  var Dimensions = require(_dependencyMap[0], 'Dimensions');

  var ElementBox = require(_dependencyMap[1], 'ElementBox');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var UIManager = require(_dependencyMap[5], 'UIManager');

  var View = require(_dependencyMap[6], 'View');

  var InspectorOverlay = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(InspectorOverlay, _React$Component);

    function InspectorOverlay() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, InspectorOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;
        UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
          _this.props.onTouchViewTag(nativeViewTag, {
            left: left,
            top: top,
            width: width,
            height: height
          }, locationY);
        });
      }, _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(ElementBox, {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          });
        }

        return React.createElement(
          View,
          {
            onStartShouldSetResponder: this.shouldSetResponser,
            onResponderMove: this.findViewForTouchEvent,
            style: [styles.inspector, {
              height: Dimensions.get('window').height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          content
        );
      }
    }]);
    return InspectorOverlay;
  }(React.Component), _class.propTypes = {
    inspected: PropTypes.shape({
      frame: PropTypes.object,
      style: PropTypes.any
    }),
    inspectedViewTag: PropTypes.number,
    onTouchViewTag: PropTypes.func.isRequired
  }, _temp2);
  var styles = StyleSheet.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
  module.exports = InspectorOverlay;
},264,[165,265,128,131,169,108,171],"InspectorOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var BorderBox = require(_dependencyMap[3], 'BorderBox');

  var resolveBoxStyle = require(_dependencyMap[4], 'resolveBoxStyle');

  var flattenStyle = require(_dependencyMap[5], 'flattenStyle');

  var ElementBox = function (_React$Component) {
    babelHelpers.inherits(ElementBox, _React$Component);

    function ElementBox() {
      babelHelpers.classCallCheck(this, ElementBox);
      return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = this.props.frame;

        if (margin) {
          frameStyle = {
            top: frameStyle.top - margin.top,
            left: frameStyle.left - margin.left,
            height: frameStyle.height + margin.top + margin.bottom,
            width: frameStyle.width + margin.left + margin.right
          };
        }

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (padding) {
          contentStyle = {
            width: contentStyle.width - padding.left - padding.right,
            height: contentStyle.height - padding.top - padding.bottom
          };
        }

        return React.createElement(
          View,
          {
            style: [styles.frame, frameStyle],
            pointerEvents: "none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          React.createElement(
            BorderBox,
            {
              box: margin,
              style: styles.margin,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            React.createElement(
              BorderBox,
              {
                box: padding,
                style: styles.padding,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              React.createElement(View, {
                style: [styles.content, contentStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                }
              })
            )
          )
        );
      }
    }]);
    return ElementBox;
  }(React.Component);

  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  module.exports = ElementBox;
},265,[131,171,169,266,267,102],"ElementBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var BorderBox = function (_React$Component) {
    babelHelpers.inherits(BorderBox, _React$Component);

    function BorderBox() {
      babelHelpers.classCallCheck(this, BorderBox);
      return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
    }

    babelHelpers.createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(
          View,
          {
            style: [style, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          this.props.children
        );
      }
    }]);
    return BorderBox;
  }(React.Component);

  module.exports = BorderBox;
},266,[131,171],"BorderBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var res = {};
    var subs = ['top', 'left', 'bottom', 'right'];
    var set = false;
    subs.forEach(function (sub) {
      res[sub] = style[prefix] || 0;
    });

    if (style[prefix]) {
      set = true;
    }

    if (style[prefix + 'Vertical']) {
      res.top = res.bottom = style[prefix + 'Vertical'];
      set = true;
    }

    if (style[prefix + 'Horizontal']) {
      res.left = res.right = style[prefix + 'Horizontal'];
      set = true;
    }

    subs.forEach(function (sub) {
      var val = style[prefix + capFirst(sub)];

      if (val) {
        res[sub] = val;
        set = true;
      }
    });

    if (!set) {
      return;
    }

    return res;
  }

  function capFirst(text) {
    return text[0].toUpperCase() + text.slice(1);
  }

  module.exports = resolveBoxStyle;
},267,[],"resolveBoxStyle");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  var ElementProperties = require(_dependencyMap[0], 'ElementProperties');

  var NetworkOverlay = require(_dependencyMap[1], 'NetworkOverlay');

  var PerformanceOverlay = require(_dependencyMap[2], 'PerformanceOverlay');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var ScrollView = require(_dependencyMap[5], 'ScrollView');

  var StyleSheet = require(_dependencyMap[6], 'StyleSheet');

  var Text = require(_dependencyMap[7], 'Text');

  var TouchableHighlight = require(_dependencyMap[8], 'TouchableHighlight');

  var View = require(_dependencyMap[9], 'View');

  var InspectorPanel = function (_React$Component) {
    babelHelpers.inherits(InspectorPanel, _React$Component);

    function InspectorPanel() {
      babelHelpers.classCallCheck(this, InspectorPanel);
      return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
    }

    babelHelpers.createClass(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(
            Text,
            {
              style: styles.waitingText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            "Tap something to inspect it"
          );
        }

        return React.createElement(
          Text,
          {
            style: styles.waitingText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          "Nothing is inspected"
        );
      }
    }, {
      key: "render",
      value: function render() {
        var contents = void 0;

        if (this.props.inspected) {
          contents = React.createElement(
            ScrollView,
            {
              style: styles.properties,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            React.createElement(ElementProperties, {
              style: this.props.inspected.style,
              frame: this.props.inspected.frame,
              source: this.props.inspected.source,
              hierarchy: this.props.hierarchy,
              selection: this.props.selection,
              setSelection: this.props.setSelection,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            })
          );
        } else if (this.props.perfing) {
          contents = React.createElement(PerformanceOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(NetworkOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          });
        } else {
          contents = React.createElement(
            View,
            {
              style: styles.waiting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            this.renderWaiting()
          );
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          !this.props.devtoolsIsOpen && contents,
          React.createElement(
            View,
            {
              style: styles.buttonRow,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            },
            React.createElement(Button, {
              title: 'Inspect',
              pressed: this.props.inspecting,
              onClick: this.props.setInspecting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 71
              }
            }),
            React.createElement(Button, {
              title: 'Perf',
              pressed: this.props.perfing,
              onClick: this.props.setPerfing,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            }),
            React.createElement(Button, {
              title: 'Network',
              pressed: this.props.networking,
              onClick: this.props.setNetworking,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            React.createElement(Button, {
              title: 'Touchables',
              pressed: this.props.touchTargetting,
              onClick: this.props.setTouchTargetting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            })
          )
        );
      }
    }]);
    return InspectorPanel;
  }(React.Component);

  InspectorPanel.propTypes = {
    devtoolsIsOpen: PropTypes.bool,
    inspecting: PropTypes.bool,
    setInspecting: PropTypes.func,
    inspected: PropTypes.object,
    perfing: PropTypes.bool,
    setPerfing: PropTypes.func,
    touchTargetting: PropTypes.bool,
    setTouchTargetting: PropTypes.func,
    networking: PropTypes.bool,
    setNetworking: PropTypes.func
  };

  var Button = function (_React$Component2) {
    babelHelpers.inherits(Button, _React$Component2);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              return _this3.props.onClick(!_this3.props.pressed);
            },
            style: [styles.button, this.props.pressed && styles.buttonPressed],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          React.createElement(
            Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 114
              }
            },
            this.props.title
          )
        );
      }
    }]);
    return Button;
  }(React.Component);

  var styles = StyleSheet.create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });
  module.exports = InspectorPanel;
},268,[269,275,278,131,128,225,169,182,272,171],"InspectorPanel");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  var BoxInspector = require(_dependencyMap[0], 'BoxInspector');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var StyleInspector = require(_dependencyMap[3], 'StyleInspector');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var Text = require(_dependencyMap[5], 'Text');

  var TouchableHighlight = require(_dependencyMap[6], 'TouchableHighlight');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = require(_dependencyMap[8], 'View');

  var flattenStyle = require(_dependencyMap[9], 'flattenStyle');

  var mapWithSeparator = require(_dependencyMap[10], 'mapWithSeparator');

  var openFileInEditor = require(_dependencyMap[11], 'openFileInEditor');

  var ElementProperties = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(ElementProperties, _React$Component);

    function ElementProperties() {
      babelHelpers.classCallCheck(this, ElementProperties);
      return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var style = flattenStyle(this.props.style);
        var selection = this.props.selection;
        var openFileButton = void 0;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(
            TouchableHighlight,
            {
              style: styles.openButton,
              onPress: openFileInEditor.bind(null, fileName, lineNumber),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            React.createElement(
              Text,
              {
                style: styles.openButtonTitle,
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 65
                }
              },
              fileNameShort,
              ":",
              lineNumber
            )
          );
        }

        return React.createElement(
          TouchableWithoutFeedback,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          React.createElement(
            View,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            React.createElement(
              View,
              {
                style: styles.breadcrumb,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 76
                }
              },
              mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
                return React.createElement(
                  TouchableHighlight,
                  {
                    key: 'item-' + i,
                    style: [styles.breadItem, i === selection && styles.selected],
                    onPress: function onPress() {
                      return _this2.props.setSelection(i);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 80
                    }
                  },
                  React.createElement(
                    Text,
                    {
                      style: styles.breadItemText,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 85
                      }
                    },
                    hierarchyItem.name
                  )
                );
              }, function (i) {
                return React.createElement(
                  Text,
                  {
                    key: 'sep-' + i,
                    style: styles.breadSep,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 91
                    }
                  },
                  "\u25B8"
                );
              })
            ),
            React.createElement(
              View,
              {
                style: styles.row,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 97
                }
              },
              React.createElement(
                View,
                {
                  style: styles.col,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                  }
                },
                React.createElement(StyleInspector, {
                  style: style,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                  }
                }),
                openFileButton
              ),
              React.createElement(BoxInspector, {
                style: style,
                frame: this.props.frame,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 104
                }
              })
            )
          )
        );
      }
    }]);
    return ElementProperties;
  }(React.Component), _class.propTypes = {
    hierarchy: PropTypes.array.isRequired,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
    source: PropTypes.shape({
      fileName: PropTypes.string,
      lineNumber: PropTypes.number
    })
  }, _temp);
  var styles = StyleSheet.create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });
  module.exports = ElementProperties;
},269,[270,128,131,271,169,182,272,191,171,102,273,274],"ElementProperties");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var resolveBoxStyle = require(_dependencyMap[4], 'resolveBoxStyle');

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = function (_React$Component) {
    babelHelpers.inherits(BoxInspector, _React$Component);

    function BoxInspector() {
      babelHelpers.classCallCheck(this, BoxInspector);
      return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && resolveBoxStyle('margin', style) || blank;
        var padding = style && resolveBoxStyle('padding', style) || blank;
        return React.createElement(
          BoxContainer,
          {
            title: "margin",
            titleStyle: styles.marginLabel,
            box: margin,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          React.createElement(
            BoxContainer,
            {
              title: "padding",
              box: padding,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 35
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 36
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                  }
                },
                "(",
                (frame.left || 0).toFixed(1),
                ", ",
                (frame.top || 0).toFixed(1),
                ")"
              ),
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  }
                },
                (frame.width || 0).toFixed(1),
                " \xD7 ",
                (frame.height || 0).toFixed(1)
              )
            )
          )
        );
      }
    }]);
    return BoxInspector;
  }(React.Component);

  var BoxContainer = function (_React$Component2) {
    babelHelpers.inherits(BoxContainer, _React$Component2);

    function BoxContainer() {
      babelHelpers.classCallCheck(this, BoxContainer);
      return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(
          View,
          {
            style: styles.box,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          },
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            },
            React.createElement(
              Text,
              {
                style: [this.props.titleStyle, styles.label],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              },
              this.props.title
            ),
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              box.top
            )
          ),
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 61
              }
            },
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              box.left
            ),
            this.props.children,
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 64
                }
              },
              box.right
            )
          ),
          React.createElement(
            Text,
            {
              style: styles.boxText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            box.bottom
          )
        );
      }
    }]);
    return BoxContainer;
  }(React.Component);

  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    buffer: {
      fontSize: 10,
      color: 'yellow',
      flex: 1,
      textAlign: 'center'
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });
  module.exports = BoxInspector;
},270,[131,169,182,171,267],"BoxInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var StyleInspector = function (_React$Component) {
    babelHelpers.inherits(StyleInspector, _React$Component);

    function StyleInspector() {
      babelHelpers.classCallCheck(this, StyleInspector);
      return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.style) {
          return React.createElement(
            Text,
            {
              style: styles.noStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "No style"
          );
        }

        var names = Object.keys(this.props.style);
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 27
              }
            },
            names.map(function (name) {
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.attr,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                name,
                ":"
              );
            })
          ),
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            },
            names.map(function (name) {
              var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.value,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                  }
                },
                value
              );
            })
          )
        );
      }
    }]);
    return StyleInspector;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });
  module.exports = StyleInspector;
},271,[131,169,182,171],"StyleInspector");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var PropTypes = require(_dependencyMap[2], 'prop-types');

  var React = require(_dependencyMap[3], 'React');

  var ReactNativeViewAttributes = require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var Touchable = require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = require(_dependencyMap[8], 'View');

  var ViewPropTypes = require(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[10], 'create-react-class');

  var ensurePositiveDelayProps = require(_dependencyMap[11], 'ensurePositiveDelayProps');

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      this._showUnderlay();

      this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 306
          }
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},272,[124,126,128,131,172,169,183,191,171,132,173,193],"TouchableHighlight");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},273,[],"mapWithSeparator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = require(_dependencyMap[0], 'getDevServer');

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},274,[38],"openFileInEditor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var React = require(_dependencyMap[1], 'React');

  var ScrollView = require(_dependencyMap[2], 'ScrollView');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var Text = require(_dependencyMap[4], 'Text');

  var TouchableHighlight = require(_dependencyMap[5], 'TouchableHighlight');

  var View = require(_dependencyMap[6], 'View');

  var WebSocketInterceptor = require(_dependencyMap[7], 'WebSocketInterceptor');

  var XHRInterceptor = require(_dependencyMap[8], 'XHRInterceptor');

  var LISTVIEW_CELL_HEIGHT = 15;
  var SEPARATOR_THICKNESS = 2;
  var nextXHRId = 0;

  var NetworkOverlay = function (_React$Component) {
    babelHelpers.inherits(NetworkOverlay, _React$Component);

    function NetworkOverlay(props) {
      babelHelpers.classCallCheck(this, NetworkOverlay);

      var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

      _this._requests = [];
      _this._detailViewItems = [];
      _this._listViewDataSource = new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: _this._listViewDataSource.cloneWithRows([]),
        newDetailInfo: false,
        detailRowID: null
      };
      _this._listViewHighlighted = false;
      _this._listViewHeight = 0;
      _this._captureRequestListView = _this._captureRequestListView.bind(_this);
      _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
      _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
      _this._renderRow = _this._renderRow.bind(_this);
      _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      return _this;
    }

    babelHelpers.createClass(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (XHRInterceptor.isInterceptorEnabled()) {
          return;
        }

        XHRInterceptor.setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2._requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            'type': 'XMLHttpRequest',
            'method': method,
            'url': url
          };

          _this2._requests.push(_xhr);

          _this2._detailViewItems.push([]);

          _this2._genDetailViewItem(xhrIndex);

          _this2.setState({
            dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests)
          }, _this2._scrollToBottom());
        });
        XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];

          if (!networkInfo.requestHeaders) {
            networkInfo.requestHeaders = {};
          }

          networkInfo.requestHeaders[header] = value;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2._requests[xhrIndex].dataSent = data;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.responseContentType = type;
          networkInfo.responseSize = size;
          networkInfo.responseHeaders = responseHeaders;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.status = status;
          networkInfo.timeout = timeout;
          networkInfo.response = response;
          networkInfo.responseURL = responseURL;
          networkInfo.responseType = responseType;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (WebSocketInterceptor.isInterceptorEnabled()) {
          return;
        }

        WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3._requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            'type': 'WebSocket',
            'url': url,
            'protocols': protocols
          };

          _this3._requests.push(_webSocket);

          _this3._detailViewItems.push([]);

          _this3._genDetailViewItem(socketIndex);

          _this3.setState({
            dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests)
          }, _this3._scrollToBottom());
        });
        WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3._requests[socketIndex].status = statusCode;
            _this3._requests[socketIndex].closeReason = closeReason;
          }

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverClose = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverError = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        XHRInterceptor.disableInterception();
        WebSocketInterceptor.disableInterception();
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
        var _this4 = this;

        var urlCellViewStyle = styles.urlEvenCellView;
        var methodCellViewStyle = styles.methodEvenCellView;

        if (rowID % 2 === 1) {
          urlCellViewStyle = styles.urlOddCellView;
          methodCellViewStyle = styles.methodOddCellView;
        }

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              _this4._pressRow(rowID);

              highlightRow(sectionID, rowID);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 300
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 304
              }
            },
            React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 305
                }
              },
              React.createElement(
                View,
                {
                  style: urlCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 306
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 307
                    }
                  },
                  rowData.url
                )
              ),
              React.createElement(
                View,
                {
                  style: methodCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 311
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 312
                    }
                  },
                  this._getTypeShortName(rowData.type)
                )
              )
            )
          )
        );
      }
    }, {
      key: "_renderSeperator",
      value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
        return React.createElement(View, {
          key: sectionID + "-" + rowID,
          style: {
            height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
            backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 327
          }
        });
      }
    }, {
      key: "_scrollToBottom",
      value: function _scrollToBottom() {
        if (this._listView) {
          var scrollResponder = this._listView.getScrollResponder();

          if (scrollResponder) {
            var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
            scrollResponder.scrollResponderScrollTo({
              x: 0,
              y: scrollY,
              animated: true
            });
          }
        }
      }
    }, {
      key: "_captureRequestListView",
      value: function _captureRequestListView(listRef) {
        this._listView = listRef;
      }
    }, {
      key: "_listViewOnLayout",
      value: function _listViewOnLayout(event) {
        var height = event.nativeEvent.layout.height;
        this._listViewHeight = height;
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowID) {
        this._listViewHighlighted = true;
        this.setState({
          detailRowID: rowID
        }, this._scrollToTop());
      }
    }, {
      key: "_scrollToTop",
      value: function _scrollToTop() {
        if (this._scrollView) {
          this._scrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      }
    }, {
      key: "_captureDetailScrollView",
      value: function _captureDetailScrollView(scrollRef) {
        this._scrollView = scrollRef;
      }
    }, {
      key: "_closeButtonClicked",
      value: function _closeButtonClicked() {
        this.setState({
          detailRowID: null
        });
      }
    }, {
      key: "_getStringByValue",
      value: function _getStringByValue(value) {
        if (value === undefined) {
          return 'undefined';
        }

        if (typeof value === 'object') {
          return JSON.stringify(value);
        }

        if (typeof value === 'string' && value.length > 500) {
          return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
        }

        return value;
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "_getTypeShortName",
      value: function _getTypeShortName(type) {
        if (type === 'XMLHttpRequest') {
          return 'XHR';
        } else if (type === 'WebSocket') {
          return 'WS';
        }

        return '';
      }
    }, {
      key: "_genDetailViewItem",
      value: function _genDetailViewItem(index) {
        this._detailViewItems[index] = [];
        var detailViewItem = this._detailViewItems[index];
        var requestItem = this._requests[index];

        for (var _key in requestItem) {
          detailViewItem.push(React.createElement(
            View,
            {
              style: styles.detailViewRow,
              key: _key,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 442
              }
            },
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailKeyCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 443
                }
              },
              _key
            ),
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailValueCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 446
                }
              },
              this._getStringByValue(requestItem[_key])
            )
          ));
        }

        if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
          this.setState({
            newDetailInfo: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 461
            }
          },
          this.state.detailRowID != null && React.createElement(
            TouchableHighlight,
            {
              style: styles.closeButton,
              onPress: this._closeButtonClicked,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 463
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 466
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.clostButtonText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 467
                  }
                },
                "v"
              )
            )
          ),
          this.state.detailRowID != null && React.createElement(
            ScrollView,
            {
              style: styles.detailScrollView,
              ref: this._captureDetailScrollView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 471
              }
            },
            this._detailViewItems[this.state.detailRowID]
          ),
          React.createElement(
            View,
            {
              style: styles.listViewTitle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 476
              }
            },
            this._requests.length > 0 && React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 478
                }
              },
              React.createElement(
                View,
                {
                  style: styles.urlTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 479
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 480
                    }
                  },
                  "URL"
                )
              ),
              React.createElement(
                View,
                {
                  style: styles.methodTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 483
                    }
                  },
                  "Type"
                )
              )
            )
          ),
          React.createElement(ListView, {
            style: styles.listView,
            ref: this._captureRequestListView,
            dataSource: this.state.dataSource,
            renderRow: this._renderRow,
            enableEmptySections: true,
            renderSeparator: this._renderSeperator,
            onLayout: this._listViewOnLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 487
            }
          })
        );
      }
    }]);
    return NetworkOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 1
    },
    urlOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 5,
      paddingLeft: 3
    },
    methodEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 1
    },
    urlEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    clostButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  module.exports = NetworkOverlay;
},275,[242,131,225,169,182,272,171,276,277],"NetworkOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTWebSocketModule = require(_dependencyMap[0], 'NativeModules').WebSocketModule;

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var base64 = require(_dependencyMap[2], 'base64-js');

  var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
  var originalRCTWebSocketSend = RCTWebSocketModule.send;
  var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
  var originalRCTWebSocketClose = RCTWebSocketModule.close;
  var eventEmitter = void 0;
  var subscriptions = void 0;
  var closeCallback = void 0;
  var sendCallback = void 0;
  var connectCallback = void 0;
  var onOpenCallback = void 0;
  var onMessageCallback = void 0;
  var onErrorCallback = void 0;
  var onCloseCallback = void 0;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new NativeEventEmitter(RCTWebSocketModule);

      WebSocketInterceptor._registerEvents();

      RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      RCTWebSocketModule.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      RCTWebSocketModule.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      RCTWebSocketModule.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = base64.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      RCTWebSocketModule.send = originalRCTWebSocketSend;
      RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
      RCTWebSocketModule.close = originalRCTWebSocketClose;
      RCTWebSocketModule.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},276,[15,70,74],"WebSocketInterceptor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = require(_dependencyMap[0], 'XMLHttpRequest');

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},277,[59],"XHRInterceptor");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  var PerformanceLogger = require(_dependencyMap[0], 'PerformanceLogger');

  var React = require(_dependencyMap[1], 'React');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var Text = require(_dependencyMap[3], 'Text');

  var View = require(_dependencyMap[4], 'View');

  var PerformanceOverlay = function (_React$Component) {
    babelHelpers.inherits(PerformanceOverlay, _React$Component);

    function PerformanceOverlay() {
      babelHelpers.classCallCheck(this, PerformanceOverlay);
      return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
    }

    babelHelpers.createClass(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = PerformanceLogger.getTimespans();
        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(
              View,
              {
                style: styles.row,
                key: key,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 29
                }
              },
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.label],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                  }
                },
                key
              ),
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.totalTime],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                  }
                },
                perfLogs[key].totalTime + unit
              )
            ));
          }
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          },
          items
        );
      }
    }]);
    return PerformanceOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });
  module.exports = PerformanceOverlay;
},278,[94,131,169,182,171],"PerformanceOverlay");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/ReactNative/YellowBox.js";

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var SafeAreaView = require(_dependencyMap[3], 'SafeAreaView');

  var StyleSheet = require(_dependencyMap[4], 'StyleSheet');

  var RCTLog = require(_dependencyMap[5], 'RCTLog');

  var infoLog = require(_dependencyMap[6], 'infoLog');

  var openFileInEditor = require(_dependencyMap[7], 'openFileInEditor');

  var parseErrorStack = require(_dependencyMap[8], 'parseErrorStack');

  var stringifySafe = require(_dependencyMap[9], 'stringifySafe');

  var symbolicateStackTrace = require(_dependencyMap[10], 'symbolicateStackTrace');

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;

    console.error = function () {
      error.apply(console, arguments);

      if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
        updateWarningMap.apply(null, arguments);
      }
    };

    console.warn = function () {
      warn.apply(console, arguments);
      updateWarningMap.apply(null, arguments);
    };

    if (Platform.isTesting) {
      console.disableYellowBox = true;
    }

    RCTLog.setWarningHandler(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      updateWarningMap.apply(null, args);
    });
  }

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(babelHelpers.toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var View = require(_dependencyMap[13], 'View');

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 197
        }
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 201
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 207
            }
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 230
        }
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = require(_dependencyMap[14], 'ScrollView');

    var Text = require(_dependencyMap[11], 'Text');

    var TouchableHighlight = require(_dependencyMap[12], 'TouchableHighlight');

    var View = require(_dependencyMap[13], 'View');

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 263
          }
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 264
            }
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 270
        }
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          }
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 272
            }
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273
              }
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 274
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 277
                }
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 282
            }
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 284
              }
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 287
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 292
                }
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 294
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 299
                }
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 301
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 306
                }
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = function (_React$Component) {
    babelHelpers.inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      babelHelpers.classCallCheck(this, YellowBox);

      var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    babelHelpers.createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = require(_dependencyMap[14], 'ScrollView');

        var View = require(_dependencyMap[13], 'View');

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 393
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 409
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 426
            }
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 427
              }
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);
    return YellowBox;
  }(React.Component);

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: Platform.OS === 'android' ? 5 : 7,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},279,[68,53,131,280,169,92,95,274,32,41,35,182,272,171,225],"YellowBox");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'View');
},280,[171],"SafeAreaView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = require(_dependencyMap[0], 'NativeModules').I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},281,[15],"I18nManager");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},282,[260],"NavigatorIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _class2,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Picker/Picker.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var PickerIOS = require(_dependencyMap[1], 'PickerIOS');

  var PickerAndroid = require(_dependencyMap[2], 'PickerAndroid');

  var Platform = require(_dependencyMap[3], 'Platform');

  var React = require(_dependencyMap[4], 'React');

  var PropTypes = require(_dependencyMap[5], 'prop-types');

  var StyleSheetPropType = require(_dependencyMap[6], 'StyleSheetPropType');

  var TextStylePropTypes = require(_dependencyMap[7], 'TextStylePropTypes');

  var UnimplementedView = require(_dependencyMap[8], 'UnimplementedView');

  var ViewPropTypes = require(_dependencyMap[9], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[10], 'ViewStylePropTypes');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';
  var PickerItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PickerItem, _React$Component);

    function PickerItem() {
      babelHelpers.classCallCheck(this, PickerItem);
      return babelHelpers.possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    babelHelpers.createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);
    return PickerItem;
  }(React.Component), _class.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  }, _temp);
  var Picker = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Picker, _React$Component2);

    function Picker() {
      babelHelpers.classCallCheck(this, Picker);
      return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    babelHelpers.createClass(Picker, [{
      key: "render",
      value: function render() {
        if (Platform.OS === 'ios') {
          return React.createElement(
            PickerIOS,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 157
              }
            }),
            this.props.children
          );
        } else if (Platform.OS === 'android') {
          return React.createElement(
            PickerAndroid,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 160
              }
            }),
            this.props.children
          );
        } else {
          return React.createElement(UnimplementedView, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          });
        }
      }
    }]);
    return Picker;
  }(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
    mode: MODE_DIALOG
  }, _class2.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  }), _temp2);
  module.exports = Picker;
},283,[124,284,285,53,131,128,139,152,260,132,140],"Picker");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},284,[260],"PickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var React = require(_dependencyMap[1], 'React');

  var ReactPropTypes = require(_dependencyMap[2], 'prop-types');

  var StyleSheet = require(_dependencyMap[3], 'StyleSheet');

  var StyleSheetPropType = require(_dependencyMap[4], 'StyleSheetPropType');

  var ViewPropTypes = require(_dependencyMap[5], 'ViewPropTypes');

  var ViewStylePropTypes = require(_dependencyMap[6], 'ViewStylePropTypes');

  var processColor = require(_dependencyMap[7], 'processColor');

  var requireNativeComponent = require(_dependencyMap[8], 'requireNativeComponent');

  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var PickerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PickerAndroid, _React$Component);

    function PickerAndroid(props, context) {
      babelHelpers.classCallCheck(this, PickerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

      _initialiseProps.call(_this);

      var state = _this._stateFromProps(props);

      _this.state = babelHelpers.extends({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    babelHelpers.createClass(PickerAndroid, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, babelHelpers.extends({
          ref: REF_PICKER
        }, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 107
          }
        }));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);
    return PickerAndroid;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  }), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._stateFromProps = function (props) {
      var selectedIndex = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        var childProps = {
          value: child.props.value,
          label: child.props.label
        };

        if (child.props.color) {
          childProps.color = processColor(child.props.color);
        }

        return childProps;
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    };

    this._onChange = function (event) {
      if (_this2.props.onValueChange) {
        var position = event.nativeEvent.position;

        if (position >= 0) {
          var children = React.Children.toArray(_this2.props.children);
          var value = children[position].props.value;

          _this2.props.onValueChange(value, position);
        } else {
          _this2.props.onValueChange(null, position);
        }
      }

      _this2._lastNativePosition = event.nativeEvent.position;

      _this2.forceUpdate();
    };
  }, _temp);
  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  var cfg = {
    nativeOnly: {
      items: true,
      selected: true
    }
  };
  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
  var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);
  module.exports = PickerAndroid;
},285,[124,131,128,169,139,132,140,153,146],"PickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummyProgressViewIOS = function (_React$Component) {
    babelHelpers.inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      babelHelpers.classCallCheck(this, DummyProgressViewIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "ProgressViewIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyProgressViewIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},286,[131,169,182,171],"ProgressViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/SectionList.js";

  var MetroListView = require(_dependencyMap[0], 'MetroListView');

  var Platform = require(_dependencyMap[1], 'Platform');

  var React = require(_dependencyMap[2], 'React');

  var ScrollView = require(_dependencyMap[3], 'ScrollView');

  var VirtualizedSectionList = require(_dependencyMap[4], 'VirtualizedSectionList');

  var defaultProps = babelHelpers.extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: Platform.OS === 'ios'
  });
  var SectionList = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, babelHelpers.extends({}, this.props, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 331
          }
        }));
      }
    }]);
    return SectionList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp2);
  module.exports = SectionList;
},287,[241,53,131,225,288],"SectionList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var VirtualizedList = require(_dependencyMap[2], 'VirtualizedList');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var VirtualizedSectionList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedSectionList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = babelHelpers.extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: babelHelpers.extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedSectionList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return babelHelpers.extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 278
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, babelHelpers.extends({}, this.state.childProps, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 367
          }
        }));
      }
    }]);
    return VirtualizedSectionList;
  }(React.PureComponent), _class.defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    data: []
  }), _temp);

  var ItemWithSeparator = function (_React$Component) {
    babelHelpers.inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp2, _this2, _ret;

      babelHelpers.classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp2 = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: babelHelpers.extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this2, _ret);
    }

    babelHelpers.createClass(ItemWithSeparator, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: babelHelpers.extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, babelHelpers.extends({}, this.state.leadingSeparatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 488
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          }
        }));
        return leadingSeparator || separator ? React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 494
            }
          },
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);
    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},288,[131,171,248,13],"VirtualizedSectionList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var Text = require(_dependencyMap[2], 'Text');

  var View = require(_dependencyMap[3], 'View');

  var DummySegmentedControlIOS = function (_React$Component) {
    babelHelpers.inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      babelHelpers.classCallCheck(this, DummySegmentedControlIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 24
              }
            },
            "SegmentedControlIOS is not supported on this platform!"
          )
        );
      }
    }]);
    return DummySegmentedControlIOS;
  }(React.Component);

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},289,[131,169,182,171],"SegmentedControlIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Slider/Slider.js";

  var Image = require(_dependencyMap[0], 'Image');

  var ColorPropType = require(_dependencyMap[1], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[2], 'NativeMethodsMixin');

  var ReactNativeViewAttributes = require(_dependencyMap[3], 'ReactNativeViewAttributes');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var PropTypes = require(_dependencyMap[6], 'prop-types');

  var StyleSheet = require(_dependencyMap[7], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[10], 'requireNativeComponent');

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = babelHelpers.objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);
      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;

        if (Platform.OS === 'android') {
          userEvent = event.nativeEvent.fromUser;
        }

        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 248
        }
      }));
    }
  });
  var styles = void 0;

  if (Platform.OS === 'ios') {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = StyleSheet.create({
      slider: {}
    });
  }

  var options = {};

  if (Platform.OS === 'android') {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }

  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},290,[223,124,126,172,53,131,128,169,132,173,146],"Slider");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], 'UnimplementedView');
},291,[260],"SnapshotViewIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/Switch/Switch.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[2], 'Platform');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = require(_dependencyMap[7], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[8], 'requireNativeComponent');

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      if (Platform.OS === 'android') {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      } else {
        this._rctSwitch.setNativeProps({
          value: this.props.value
        });
      }

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      if (Platform.OS === 'android') {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      } else if (Platform.OS === 'ios') {
        props.style = [styles.rctSwitchIOS, this.props.style];
      }

      return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });

  if (Platform.OS === 'android') {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  } else {
    var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
      nativeOnly: {
        onChange: true
      }
    });
  }

  module.exports = Switch;
},292,[124,126,53,131,128,169,132,173,146],"Switch");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js";

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var React = require(_dependencyMap[1], 'React');

  var SwipeableRow = require(_dependencyMap[2], 'SwipeableRow');

  var FlatList = require(_dependencyMap[3], 'FlatList');

  var SwipeableFlatList = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      babelHelpers.classCallCheck(this, SwipeableFlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 137
            }
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    babelHelpers.createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);
    return SwipeableFlatList;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }), _class.defaultProps = babelHelpers.extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }), _temp);
  module.exports = SwipeableFlatList;
},293,[128,131,294,240],"SwipeableFlatList");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js";

  var Animated = require(_dependencyMap[0], 'Animated');

  var I18nManager = require(_dependencyMap[1], 'I18nManager');

  var PanResponder = require(_dependencyMap[2], 'PanResponder');

  var React = require(_dependencyMap[3], 'React');

  var PropTypes = require(_dependencyMap[4], 'prop-types');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var TimerMixin = require(_dependencyMap[6], 'react-timer-mixin');

  var View = require(_dependencyMap[7], 'View');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var emptyFunction = require(_dependencyMap[9], 'fbjs/lib/emptyFunction');

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    componentWillMount: function componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
      if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
        return false;
      }

      return true;
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 176
            }
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 187
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        babelHelpers.extends({}, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 195
          }
        }),
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},294,[195,281,295,131,128,169,192,171,173,58],"SwipeableRow");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = require(_dependencyMap[0], './InteractionManager');

  var TouchHistoryMath = require(_dependencyMap[1], 'TouchHistoryMath');

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},295,[203,296],"PanResponder");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},296,[21],"TouchHistoryMath");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js";

  var ListView = require(_dependencyMap[0], 'ListView');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var React = require(_dependencyMap[2], 'React');

  var SwipeableListViewDataSource = require(_dependencyMap[3], 'SwipeableListViewDataSource');

  var SwipeableRow = require(_dependencyMap[4], 'SwipeableRow');

  var SwipeableListView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableListView, _React$Component);
    babelHelpers.createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      babelHelpers.classCallCheck(this, SwipeableListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    babelHelpers.createClass(SwipeableListView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);
    return SwipeableListView;
  }(React.Component), _class.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }, _class.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }, _temp);
  module.exports = SwipeableListView;
},297,[242,128,131,298,294],"SwipeableListView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var ListViewDataSource = require(_dependencyMap[0], 'ListViewDataSource');

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      babelHelpers.classCallCheck(this, SwipeableListViewDataSource);
      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    babelHelpers.createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);
    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},298,[243],"SwipeableListViewDataSource");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var StyleSheet = require(_dependencyMap[1], 'StyleSheet');

  var TabBarItemIOS = require(_dependencyMap[2], 'TabBarItemIOS');

  var View = require(_dependencyMap[3], 'View');

  var DummyTabBarIOS = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      babelHelpers.classCallCheck(this, DummyTabBarIOS);
      return babelHelpers.possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tabGroup],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          },
          this.props.children
        );
      }
    }]);
    return DummyTabBarIOS;
  }(React.Component), _class.Item = TabBarItemIOS, _temp);
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},299,[131,169,300,171],"TabBarIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js";

  var React = require(_dependencyMap[0], 'React');

  var View = require(_dependencyMap[1], 'View');

  var StyleSheet = require(_dependencyMap[2], 'StyleSheet');

  var DummyTab = function (_React$Component) {
    babelHelpers.inherits(DummyTab, _React$Component);

    function DummyTab() {
      babelHelpers.classCallCheck(this, DummyTab);
      return babelHelpers.possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          });
        }

        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tab],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          this.props.children
        );
      }
    }]);
    return DummyTab;
  }(React.Component);

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},300,[131,171,169],"TabBarItemIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  var ColorPropType = require(_dependencyMap[0], 'ColorPropType');

  var DocumentSelectionState = require(_dependencyMap[1], 'DocumentSelectionState');

  var EventEmitter = require(_dependencyMap[2], 'EventEmitter');

  var NativeMethodsMixin = require(_dependencyMap[3], 'NativeMethodsMixin');

  var Platform = require(_dependencyMap[4], 'Platform');

  var React = require(_dependencyMap[5], 'React');

  var createReactClass = require(_dependencyMap[6], 'create-react-class');

  var PropTypes = require(_dependencyMap[7], 'prop-types');

  var ReactNative = require(_dependencyMap[8], 'ReactNative');

  var StyleSheet = require(_dependencyMap[9], 'StyleSheet');

  var Text = require(_dependencyMap[10], 'Text');

  var TextInputState = require(_dependencyMap[11], 'TextInputState');

  var TimerMixin = require(_dependencyMap[12], 'react-timer-mixin');

  var TouchableWithoutFeedback = require(_dependencyMap[13], 'TouchableWithoutFeedback');

  var UIManager = require(_dependencyMap[14], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[15], 'ViewPropTypes');

  var emptyFunction = require(_dependencyMap[16], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[17], 'fbjs/lib/invariant');

  var requireNativeComponent = require(_dependencyMap[18], 'requireNativeComponent');

  var warning = require(_dependencyMap[19], 'fbjs/lib/warning');

  var onlyMultiline = {
    onTextInput: true,
    children: true
  };

  if (Platform.OS === 'android') {
    var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  } else if (Platform.OS === 'ios') {
    var RCTTextView = requireNativeComponent('RCTTextView', null);
    var RCTTextField = requireNativeComponent('RCTTextField', null);
  }

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      autoGrow: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      maxHeight: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    getInitialState: function getInitialState() {
      return {
        layoutHeight: this._layoutHeight
      };
    },
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    contextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    _layoutHeight: -1,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: {
      isInAParentText: PropTypes.bool
    },
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      if (Platform.OS === 'ios') {
        return this._renderIOS();
      } else if (Platform.OS === 'android') {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOS: function _renderIOS() {
      var textContainer;
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        if (__DEV__) {
          for (var propKey in onlyMultiline) {
            if (props[propKey]) {
              var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
              warning(false, '%s', error.stack);
            }
          }
        }

        textContainer = React.createElement(RCTTextField, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 727
          }
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 746
              }
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTTextView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 753
          }
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 770
          }
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = babelHelpers.extends({}, this.props);
      props.style = this.props.style;

      if (this.state.layoutHeight >= 0) {
        props.style = [props.style, {
          height: this.state.layoutHeight
        }];
      }

      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 805
            }
          },
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this._onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 811
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: this._onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 829
          }
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onContentSizeChange: function _onContentSizeChange(event) {
      var contentHeight = event.nativeEvent.contentSize.height;

      if (this.props.autoGrow) {
        if (this.props.maxHeight) {
          contentHeight = Math.min(this.props.maxHeight, contentHeight);
        }

        this.setState({
          layoutHeight: Math.max(this._layoutHeight, contentHeight)
        });
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(event);
    },
    _onLayout: function _onLayout(event) {
      var height = event.nativeEvent.layout.height;

      if (height) {
        this._layoutHeight = event.nativeEvent.layout.height;
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},301,[124,302,68,126,53,131,173,128,21,169,182,116,192,191,108,132,58,13,146,57],"TextInput");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var mixInEventEmitter = require(_dependencyMap[0], 'mixInEventEmitter');

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      babelHelpers.classCallCheck(this, DocumentSelectionState);
      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    babelHelpers.createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);
    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},302,[303],"DocumentSelectionState");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = require(_dependencyMap[0], 'EventEmitter');

  var EventEmitterWithHolding = require(_dependencyMap[1], 'EventEmitterWithHolding');

  var EventHolder = require(_dependencyMap[2], 'EventHolder');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var keyOf = require(_dependencyMap[4], 'fbjs/lib/keyOf');

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      babelHelpers.extends(target.__types, types);
    } else if (target.__types) {
      target.__types = babelHelpers.extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    babelHelpers.extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();

        if (__DEV__) {
          var EventValidator = require(_dependencyMap[5], 'EventValidator');

          emitter = EventValidator.addValidation(emitter, this.__types);
        }

        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},303,[68,304,305,13,306,307],"mixInEventEmitter");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      babelHelpers.classCallCheck(this, EventEmitterWithHolding);
      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    babelHelpers.createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);
    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},304,[],"EventEmitterWithHolding");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventHolder = function () {
    function EventHolder() {
      babelHelpers.classCallCheck(this, EventHolder);
      this._heldEvents = {};
      this._currentEventKey = null;
    }

    babelHelpers.createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);
    return EventHolder;
  }();

  module.exports = EventHolder;
},305,[13],"EventHolder");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},306,[],"fbjs/lib/keyOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventValidator = {
    addValidation: function addValidation(emitter, types) {
      var eventTypes = Object.keys(types);
      var emitterWithValidation = Object.create(emitter);
      babelHelpers.extends(emitterWithValidation, {
        emit: function emit(type, a, b, c, d, e, _) {
          assertAllowsEventType(type, eventTypes);
          return emitter.emit.call(this, type, a, b, c, d, e, _);
        }
      });
      return emitterWithValidation;
    }
  };

  function assertAllowsEventType(type, allowedTypes) {
    if (allowedTypes.indexOf(type) === -1) {
      throw new TypeError(errorMessageFor(type, allowedTypes));
    }
  }

  function errorMessageFor(type, allowedTypes) {
    var message = 'Unknown event type "' + type + '". ';

    if (__DEV__) {
      message += recommendationFor(type, allowedTypes);
    }

    message += 'Known event types: ' + allowedTypes.join(', ') + '.';
    return message;
  }

  if (__DEV__) {
    var recommendationFor = function recommendationFor(type, allowedTypes) {
      var closestTypeRecommendation = closestTypeFor(type, allowedTypes);

      if (isCloseEnough(closestTypeRecommendation, type)) {
        return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
      } else {
        return '';
      }
    };

    var closestTypeFor = function closestTypeFor(type, allowedTypes) {
      var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
      return typeRecommendations.sort(recommendationSort)[0];
    };

    var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
      return {
        type: recomendedType,
        distance: damerauLevenshteinDistance(type, recomendedType)
      };
    };

    var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
      if (recommendationA.distance < recommendationB.distance) {
        return -1;
      } else if (recommendationA.distance > recommendationB.distance) {
        return 1;
      } else {
        return 0;
      }
    };

    var isCloseEnough = function isCloseEnough(closestType, actualType) {
      return closestType.distance / actualType.length < 0.334;
    };

    var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
      var i = void 0,
          j = void 0;
      var d = [];

      for (i = 0; i <= a.length; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= b.length; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
          var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;
          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[a.length][b.length];
    };
  }

  module.exports = EventValidator;
},307,[],"EventValidator");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.android.js";

  var Image = require(_dependencyMap[0], 'Image');

  var NativeMethodsMixin = require(_dependencyMap[1], 'NativeMethodsMixin');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNativeViewAttributes = require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var UIManager = require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[6], 'ViewPropTypes');

  var ColorPropType = require(_dependencyMap[7], 'ColorPropType');

  var createReactClass = require(_dependencyMap[8], 'create-react-class');

  var requireNativeComponent = require(_dependencyMap[9], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[10], 'resolveAssetSource');

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = babelHelpers.extends({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = babelHelpers.extends({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, babelHelpers.extends({
        onSelect: this._onSelect
      }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196
        }
      }));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
    nativeOnly: {
      nativeActions: true
    }
  });
  module.exports = ToolbarAndroid;
},308,[223,126,131,128,172,108,132,124,173,146,161],"ToolbarAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js";

  var React = require(_dependencyMap[0], 'React');

  var PropTypes = require(_dependencyMap[1], 'prop-types');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var UIManager = require(_dependencyMap[3], 'UIManager');

  var ViewPropTypes = require(_dependencyMap[4], 'ViewPropTypes');

  var dismissKeyboard = require(_dependencyMap[5], 'dismissKeyboard');

  var requireNativeComponent = require(_dependencyMap[6], 'requireNativeComponent');

  var VIEWPAGER_REF = 'viewPager';
  var ViewPagerAndroid = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      }, _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = babelHelpers.extends({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      }, _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }, _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      }, _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      }, _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      }, _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, babelHelpers.extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 238
          }
        }));
      }
    }]);
    return ViewPagerAndroid;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  }), _temp2);
  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);
  module.exports = ViewPagerAndroid;
},309,[131,128,21,108,132,230,146],"ViewPagerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/Components/WebView/WebView.android.js",
      _class,
      _temp2;

  var EdgeInsetsPropType = require(_dependencyMap[0], 'EdgeInsetsPropType');

  var ActivityIndicator = require(_dependencyMap[1], 'ActivityIndicator');

  var React = require(_dependencyMap[2], 'React');

  var PropTypes = require(_dependencyMap[3], 'prop-types');

  var ReactNative = require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = require(_dependencyMap[5], 'StyleSheet');

  var UIManager = require(_dependencyMap[6], 'UIManager');

  var View = require(_dependencyMap[7], 'View');

  var ViewPropTypes = require(_dependencyMap[8], 'ViewPropTypes');

  var deprecatedPropType = require(_dependencyMap[9], 'deprecatedPropType');

  var keyMirror = require(_dependencyMap[10], 'fbjs/lib/keyMirror');

  var requireNativeComponent = require(_dependencyMap[11], 'requireNativeComponent');

  var resolveAssetSource = require(_dependencyMap[12], 'resolveAssetSource');

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      },
      React.createElement(ActivityIndicator, {
        style: styles.loadingProgressBar,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      })
    );
  };

  var WebView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      }, _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      }, _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(WebView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, babelHelpers.extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 296
          }
        }));
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 325
            }
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);
    return WebView;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  }), _class.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false
  }, _temp2);
  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},310,[133,123,131,128,21,169,108,171,132,144,151,146,161],"WebView");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTActionSheetManager = require(_dependencyMap[0], 'NativeModules').ActionSheetManager;

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = require(_dependencyMap[2], 'processColor');

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},311,[15,13,153],"ActionSheetIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0], 'BatchedBridge');

  var BugReporting = require(_dependencyMap[1], 'BugReporting');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var ReactNative = require(_dependencyMap[3], 'ReactNative');

  var SceneTracker = require(_dependencyMap[4], 'SceneTracker');

  var infoLog = require(_dependencyMap[5], 'infoLog');

  var invariant = require(_dependencyMap[6], 'fbjs/lib/invariant');

  var renderApplication = require(_dependencyMap[7], 'renderApplication');

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return babelHelpers.extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: babelHelpers.extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},312,[16,313,15,21,315,95,13,316],"AppRegistry");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var RCTDeviceEventEmitter = require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var Map = require(_dependencyMap[1], 'Map');

  var infoLog = require(_dependencyMap[2], 'infoLog');

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return require(_dependencyMap[3], 'dumpReactTree')();
    });
  }

  var BugReporting = (_temp = _class = function () {
    function BugReporting() {
      babelHelpers.classCallCheck(this, BugReporting);
    }

    babelHelpers.createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = require(_dependencyMap[4], 'NativeModules').BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }(), _class._extraSources = new Map(), _class._fileSources = new Map(), _class._subscription = null, _temp);
  module.exports = BugReporting;
},313,[71,26,95,314,15],"BugReporting");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},314,[],"dumpReactTree");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},315,[],"SceneTracker");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native/Libraries/ReactNative/renderApplication.js";

  var AppContainer = require(_dependencyMap[0], 'AppContainer');

  var React = require(_dependencyMap[1], 'React');

  var ReactNative = require(_dependencyMap[2], 'ReactNative');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  require(_dependencyMap[4], 'BackHandler');

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      },
      React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
        rootTag: rootTag,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AppContainerAsyncWrapper = function (_React$unstable_Async) {
        babelHelpers.inherits(AppContainerAsyncWrapper, _React$unstable_Async);

        function AppContainerAsyncWrapper() {
          babelHelpers.classCallCheck(this, AppContainerAsyncWrapper);
          return babelHelpers.possibleConstructorReturn(this, (AppContainerAsyncWrapper.__proto__ || Object.getPrototypeOf(AppContainerAsyncWrapper)).apply(this, arguments));
        }

        babelHelpers.createClass(AppContainerAsyncWrapper, [{
          key: "render",
          value: function render() {
            return this.props.children;
          }
        }]);
        return AppContainerAsyncWrapper;
      }(React.unstable_AsyncComponent);

      renderable = React.createElement(
        AppContainerAsyncWrapper,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},316,[262,131,21,13,317],"renderApplication");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = require(_dependencyMap[0], 'NativeModules').DeviceEventManager;

  var RCTDeviceEventEmitter = require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},317,[15,71],"BackHandler");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = require(_dependencyMap[0], 'NativeModules');

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},318,[15],"AsyncStorage");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = require(_dependencyMap[0], 'BackHandler');

  var warning = require(_dependencyMap[1], 'fbjs/lib/warning');

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},319,[317,57],"BackAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var PropTypes = require(_dependencyMap[0], 'prop-types');

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = require(_dependencyMap[1], 'NativeModules').CameraRollManager;

  var createStrictShapeTypeChecker = require(_dependencyMap[2], 'createStrictShapeTypeChecker');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });
  var CameraRoll = (_temp = _class = function () {
    function CameraRoll() {
      babelHelpers.classCallCheck(this, CameraRoll);
    }

    babelHelpers.createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (__DEV__) {
          checkPropTypes({
            params: getPhotosParamChecker
          }, {
            params: params
          }, 'params', 'CameraRoll.getPhotos');
        }

        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          if (__DEV__) {
            var callback = arguments[1];

            successCallback = function successCallback(response) {
              checkPropTypes({
                response: getPhotosReturnChecker
              }, {
                response: response
              }, 'response', 'CameraRoll.getPhotos callback');
              callback(response);
            };
          }

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);
    return CameraRoll;
  }(), _class.GroupTypesOptions = GROUP_TYPES_OPTIONS, _class.AssetTypeOptions = ASSET_TYPE_OPTIONS, _temp);
  module.exports = CameraRoll;
},320,[128,15,134,13],"CameraRoll");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = require(_dependencyMap[0], 'NativeModules').Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},321,[15],"Clipboard");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var DatePickerModule = require(_dependencyMap[1], 'NativeModules').DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      babelHelpers.classCallCheck(this, DatePickerAndroid);
    }

    babelHelpers.createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        var optionsMs;
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                optionsMs = options;

                if (optionsMs) {
                  _toMillis(options, 'date');

                  _toMillis(options, 'minDate');

                  _toMillis(options, 'maxDate');
                }

                return _context.abrupt("return", DatePickerModule.open(options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},322,[36,15],"DatePickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImagePicker = require(_dependencyMap[0], 'NativeModules').ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},323,[15],"ImagePickerIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[1], 'NativeModules');

  var Platform = require(_dependencyMap[2], 'Platform');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    babelHelpers.inherits(Linking, _NativeEventEmitter);

    function Linking() {
      babelHelpers.classCallCheck(this, Linking);
      return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    babelHelpers.createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},324,[70,15,53,13],"Linking");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Map = require(_dependencyMap[0], 'Map');

  var NativeEventEmitter = require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = require(_dependencyMap[2], 'NativeModules');

  var Platform = require(_dependencyMap[3], 'Platform');

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  if (Platform.OS === 'ios') {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  } else if (Platform.OS === 'android') {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},325,[26,70,15,53],"NetInfo");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTPushNotificationManager = require(_dependencyMap[1], 'NativeModules').PushNotificationManager;

  var invariant = require(_dependencyMap[2], 'fbjs/lib/invariant');

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
  var PushNotificationIOS = (_temp = _class = function () {
    babelHelpers.createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      babelHelpers.classCallCheck(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    babelHelpers.createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }]);
    return PushNotificationIOS;
  }(), _class.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  }, _temp);
  module.exports = PushNotificationIOS;
},326,[70,15,13],"PushNotificationIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},327,[],"Settings");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = require(_dependencyMap[0], 'Platform');

  var invariant = require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = require(_dependencyMap[2], 'processColor');

  var _require = require(_dependencyMap[3], 'NativeModules'),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      babelHelpers.classCallCheck(this, Share);
    }

    babelHelpers.createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

        if (Platform.OS === 'android') {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        } else if (Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  'action': 'sharedAction',
                  'activityType': activityType
                });
              } else {
                resolve({
                  'action': 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return Share;
  }();

  module.exports = Share;
},328,[53,13,153,15],"Share");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = require(_dependencyMap[0], 'NativeEventEmitter');

  module.exports = new NativeEventEmitter('StatusBarManager');
},329,[70],"StatusBarIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var regeneratorRuntime = require(_dependencyMap[0], "regenerator-runtime");

  var TimePickerModule = require(_dependencyMap[1], 'NativeModules').TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      babelHelpers.classCallCheck(this, TimePickerAndroid);
    }

    babelHelpers.createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return regeneratorRuntime.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", TimePickerModule.open(options));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},330,[36,15],"TimePickerAndroid");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = require(_dependencyMap[0], 'NativeModules').Vibration;

  var Platform = require(_dependencyMap[1], 'Platform');

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (Platform.OS === 'android') {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if (Platform.OS === 'ios') {
        _vibrating = false;
      } else {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},331,[15,53],"Vibration");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var warning = require(_dependencyMap[0], 'fbjs/lib/warning');

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},332,[57],"VibrationIOS");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},333,[21],"takeSnapshot");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/index.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _Store = require(_dependencyMap[1], "./src/Store");

    var _Store2 = babelHelpers.interopRequireDefault(_Store);

    var _reactRedux = require(_dependencyMap[2], "react-redux");

    var _RouterComponent = require(_dependencyMap[3], "./src/components/RouterComponent");

    var _RouterComponent2 = babelHelpers.interopRequireDefault(_RouterComponent);

    var App = function App() {
        return _react2.default.createElement(
            _reactRedux.Provider,
            {
                store: _Store2.default,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(_RouterComponent2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            })
        );
    };

    exports.default = App;
},334,[109,335,555,572],"NNCoins/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = require(_dependencyMap[0], "react-native");

    var _redux = require(_dependencyMap[1], "redux");

    var _remoteReduxDevtools = require(_dependencyMap[2], "remote-redux-devtools");

    var _remoteReduxDevtools2 = babelHelpers.interopRequireDefault(_remoteReduxDevtools);

    var _reduxPromise = require(_dependencyMap[3], "redux-promise");

    var _reduxPromise2 = babelHelpers.interopRequireDefault(_reduxPromise);

    var _reduxThunk = require(_dependencyMap[4], "redux-thunk");

    var _reduxThunk2 = babelHelpers.interopRequireDefault(_reduxThunk);

    var _reduxLogger = require(_dependencyMap[5], "redux-logger");

    var _reduxLogger2 = babelHelpers.interopRequireDefault(_reduxLogger);

    var _Reducers = require(_dependencyMap[6], "./Reducers");

    var _Reducers2 = babelHelpers.interopRequireDefault(_Reducers);

    function middleware() {
        if (__DEV__) {
            return (0, _redux.applyMiddleware)(_reduxPromise2.default, _reduxThunk2.default, _reduxLogger2.default);
        }

        return (0, _redux.applyMiddleware)(_reduxPromise2.default, _reduxThunk2.default);
    }

    var Store = (0, _redux.createStore)(_Reducers2.default, (0, _redux.compose)(middleware(), (0, _remoteReduxDevtools2.default)({
        name: _reactNative.Platform.OS,
        hostname: 'localhost',
        port: 5678
    })));
    exports.default = Store;
},335,[12,336,355,537,544,545,546],"NNCoins/src/Store.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

  var _createStore = require(_dependencyMap[0], './createStore');

  var _createStore2 = _interopRequireDefault(_createStore);

  var _combineReducers = require(_dependencyMap[1], './combineReducers');

  var _combineReducers2 = _interopRequireDefault(_combineReducers);

  var _bindActionCreators = require(_dependencyMap[2], './bindActionCreators');

  var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

  var _applyMiddleware = require(_dependencyMap[3], './applyMiddleware');

  var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

  var _compose = require(_dependencyMap[4], './compose');

  var _compose2 = _interopRequireDefault(_compose);

  var _warning = require(_dependencyMap[5], './utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function isCrushed() {}

  if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
    (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
  }

  exports.createStore = _createStore2['default'];
  exports.combineReducers = _combineReducers2['default'];
  exports.bindActionCreators = _bindActionCreators2['default'];
  exports.applyMiddleware = _applyMiddleware2['default'];
  exports.compose = _compose2['default'];
},336,[337,350,352,353,354,351],"redux/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.ActionTypes = undefined;
  exports['default'] = createStore;

  var _isPlainObject = require(_dependencyMap[0], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _symbolObservable = require(_dependencyMap[1], 'symbol-observable');

  var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var ActionTypes = exports.ActionTypes = {
    INIT: '@@redux/INIT'
  };

  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }

    if (typeof enhancer !== 'undefined') {
      if (typeof enhancer !== 'function') {
        throw new Error('Expected the enhancer to be a function.');
      }

      return enhancer(createStore)(reducer, preloadedState);
    }

    if (typeof reducer !== 'function') {
      throw new Error('Expected the reducer to be a function.');
    }

    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }

    function getState() {
      return currentState;
    }

    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Expected listener to be a function.');
      }

      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }

        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
      };
    }

    function dispatch(action) {
      if (!(0, _isPlainObject2['default'])(action)) {
        throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
      }

      if (typeof action.type === 'undefined') {
        throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
      }

      if (isDispatching) {
        throw new Error('Reducers may not dispatch actions.');
      }

      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }

      var listeners = currentListeners = nextListeners;

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        listener();
      }

      return action;
    }

    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== 'function') {
        throw new Error('Expected the nextReducer to be a function.');
      }

      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.INIT
      });
    }

    function observable() {
      var _ref;

      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe(observer) {
          if (typeof observer !== 'object') {
            throw new TypeError('Expected the observer to be an object.');
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe
          };
        }
      }, _ref[_symbolObservable2['default']] = function () {
        return this;
      }, _ref;
    }

    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: replaceReducer
    }, _ref2[_symbolObservable2['default']] = observable, _ref2;
  }
},337,[338,348],"redux/lib/createStore.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
      getPrototype = require(_dependencyMap[1], './_getPrototype'),
      isObjectLike = require(_dependencyMap[2], './isObjectLike');

  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
},338,[339,345,347],"lodash/isPlainObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var Symbol = require(_dependencyMap[0], './_Symbol'),
        getRawTag = require(_dependencyMap[1], './_getRawTag'),
        objectToString = require(_dependencyMap[2], './_objectToString');

    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    module.exports = baseGetTag;
},339,[340,343,344],"lodash/_baseGetTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var Symbol = root.Symbol;
  module.exports = Symbol;
},340,[341],"lodash/_Symbol.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var freeGlobal = require(_dependencyMap[0], './_freeGlobal');

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},341,[342],"lodash/_root.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},342,[],"lodash/_freeGlobal.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  module.exports = getRawTag;
},343,[340],"lodash/_getRawTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},344,[],"lodash/_objectToString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var overArg = require(_dependencyMap[0], './_overArg');

  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
},345,[346],"lodash/_getPrototype.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},346,[],"lodash/_overArg.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
},347,[],"lodash/isObjectLike.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ponyfill = require(_dependencyMap[0], './ponyfill.js');

  var _ponyfill2 = _interopRequireDefault(_ponyfill);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var root;

  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }

  var result = (0, _ponyfill2['default'])(root);
  exports['default'] = result;
},348,[349],"symbol-observable/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;

	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	;
},349,[],"symbol-observable/lib/ponyfill.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = combineReducers;

  var _createStore = require(_dependencyMap[0], './createStore');

  var _isPlainObject = require(_dependencyMap[1], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _warning = require(_dependencyMap[2], './utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function getUndefinedStateErrorMessage(key, action) {
    var actionType = action && action.type;
    var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
    return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
  }

  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

    if (reducerKeys.length === 0) {
      return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
    }

    if (!(0, _isPlainObject2['default'])(inputState)) {
      return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }

    var unexpectedKeys = Object.keys(inputState).filter(function (key) {
      return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function (key) {
      unexpectedKeyCache[key] = true;
    });

    if (unexpectedKeys.length > 0) {
      return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }

  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function (key) {
      var reducer = reducers[key];
      var initialState = reducer(undefined, {
        type: _createStore.ActionTypes.INIT
      });

      if (typeof initialState === 'undefined') {
        throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
      }

      var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');

      if (typeof reducer(undefined, {
        type: type
      }) === 'undefined') {
        throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
      }
    });
  }

  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};

    for (var i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];

      if (process.env.NODE_ENV !== 'production') {
        if (typeof reducers[key] === 'undefined') {
          (0, _warning2['default'])('No reducer provided for key "' + key + '"');
        }
      }

      if (typeof reducers[key] === 'function') {
        finalReducers[key] = reducers[key];
      }
    }

    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache = void 0;

    if (process.env.NODE_ENV !== 'production') {
      unexpectedKeyCache = {};
    }

    var shapeAssertionError = void 0;

    try {
      assertReducerShape(finalReducers);
    } catch (e) {
      shapeAssertionError = e;
    }

    return function combination() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var action = arguments[1];

      if (shapeAssertionError) {
        throw shapeAssertionError;
      }

      if (process.env.NODE_ENV !== 'production') {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

        if (warningMessage) {
          (0, _warning2['default'])(warningMessage);
        }
      }

      var hasChanged = false;
      var nextState = {};

      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);

        if (typeof nextStateForKey === 'undefined') {
          var errorMessage = getUndefinedStateErrorMessage(_key, action);
          throw new Error(errorMessage);
        }

        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }

      return hasChanged ? nextState : state;
    };
  }
},350,[337,338,351],"redux/lib/combineReducers.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = warning;

  function warning(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (e) {}
  }
},351,[],"redux/lib/utils/warning.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = bindActionCreators;

  function bindActionCreator(actionCreator, dispatch) {
    return function () {
      return dispatch(actionCreator.apply(undefined, arguments));
    };
  }

  function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') {
      return bindActionCreator(actionCreators, dispatch);
    }

    if (typeof actionCreators !== 'object' || actionCreators === null) {
      throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    }

    var keys = Object.keys(actionCreators);
    var boundActionCreators = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var actionCreator = actionCreators[key];

      if (typeof actionCreator === 'function') {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
      }
    }

    return boundActionCreators;
  }
},352,[],"redux/lib/bindActionCreators.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports['default'] = applyMiddleware;

  var _compose = require(_dependencyMap[0], './compose');

  var _compose2 = _interopRequireDefault(_compose);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }

    return function (createStore) {
      return function (reducer, preloadedState, enhancer) {
        var store = createStore(reducer, preloadedState, enhancer);
        var _dispatch = store.dispatch;
        var chain = [];
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch(action) {
            return _dispatch(action);
          }
        };
        chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
        return _extends({}, store, {
          dispatch: _dispatch
        });
      };
    };
  }
},353,[354],"redux/lib/applyMiddleware.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports["default"] = compose;

  function compose() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
      return function (arg) {
        return arg;
      };
    }

    if (funcs.length === 1) {
      return funcs[0];
    }

    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(undefined, arguments));
      };
    });
  }
},354,[],"redux/lib/compose.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.composeWithDevTools = exports.default = undefined;

  var _devTools = require(_dependencyMap[0], './devTools');

  Object.defineProperty(exports, 'composeWithDevTools', {
    enumerable: true,
    get: function get() {
      return _devTools.composeWithDevTools;
    }
  });

  var _devTools2 = _interopRequireDefault(_devTools);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = _devTools2.default;
},355,[356],"remote-redux-devtools/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.default = devToolsEnhancer;
  exports.preEnhancer = preEnhancer;
  exports.composeWithDevTools = composeWithDevTools;

  var _jsan = require(_dependencyMap[0], 'jsan');

  var _socketclusterClient = require(_dependencyMap[1], 'socketcluster-client');

  var _socketclusterClient2 = _interopRequireDefault(_socketclusterClient);

  var _configureStore = require(_dependencyMap[2], './configureStore');

  var _configureStore2 = _interopRequireDefault(_configureStore);

  var _constants = require(_dependencyMap[3], './constants');

  var _rnHostDetect = require(_dependencyMap[4], 'rn-host-detect');

  var _rnHostDetect2 = _interopRequireDefault(_rnHostDetect);

  var _remotedevUtils = require(_dependencyMap[5], 'remotedev-utils');

  var _catchErrors = require(_dependencyMap[6], 'remotedev-utils/lib/catchErrors');

  var _catchErrors2 = _interopRequireDefault(_catchErrors);

  var _filters = require(_dependencyMap[7], 'remotedev-utils/lib/filters');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var instanceId = void 0;
  var instanceName = void 0;
  var suppressConnectErrors = void 0;
  var errorCounts = {};
  var socketOptions = void 0;
  var socket = void 0;
  var channel = void 0;
  var store = {};
  var lastAction = void 0;
  var filters = void 0;
  var isExcess = void 0;
  var isMonitored = void 0;
  var started = void 0;
  var startOn = void 0;
  var stopOn = void 0;
  var sendOn = void 0;
  var sendOnError = void 0;
  var sendTo = void 0;
  var lastErrorMsg = void 0;
  var locked = void 0;
  var paused = void 0;
  var actionCreators = void 0;
  var stateSanitizer = void 0;
  var actionSanitizer = void 0;

  function getLiftedState() {
    return (0, _filters.filterStagedActions)(store.liftedStore.getState(), filters);
  }

  function send() {
    if (!instanceId) instanceId = socket && socket.id || Math.random().toString(36).substr(2);

    try {
      fetch(sendTo, {
        method: 'POST',
        headers: {
          'content-type': 'application/json'
        },
        body: JSON.stringify({
          type: 'STATE',
          id: instanceId,
          name: instanceName,
          payload: (0, _jsan.stringify)(getLiftedState())
        })
      }).catch(function (err) {
        console.log(err);
      });
    } catch (err) {
      console.log(err);
    }
  }

  function relay(type, state, action, nextActionId) {
    var message = {
      type: type,
      id: socket.id,
      name: instanceName
    };

    if (state) {
      message.payload = type === 'ERROR' ? state : (0, _jsan.stringify)((0, _filters.filterState)(state, type, filters, stateSanitizer, actionSanitizer, nextActionId));
    }

    if (type === 'ACTION') {
      message.action = (0, _jsan.stringify)(!actionSanitizer ? action : actionSanitizer(action.action, nextActionId - 1));
      message.isExcess = isExcess;
      message.nextActionId = nextActionId;
    } else if (action) {
      message.action = action;
    }

    socket.emit(socket.id ? 'log' : 'log-noid', message);
  }

  function dispatchRemotely(action) {
    try {
      var result = (0, _remotedevUtils.evalAction)(action, actionCreators);
      store.dispatch(result);
    } catch (e) {
      relay('ERROR', e.message);
    }
  }

  function handleMessages(message) {
    if (message.type === 'IMPORT' || message.type === 'SYNC' && socket.id && message.id !== socket.id) {
      store.liftedStore.dispatch({
        type: 'IMPORT_STATE',
        nextLiftedState: (0, _jsan.parse)(message.state)
      });
    } else if (message.type === 'UPDATE') {
      relay('STATE', getLiftedState());
    } else if (message.type === 'START') {
      isMonitored = true;
      if (typeof actionCreators === 'function') actionCreators = actionCreators();
      relay('STATE', getLiftedState(), actionCreators);
    } else if (message.type === 'STOP' || message.type === 'DISCONNECTED') {
      isMonitored = false;
      relay('STOP');
    } else if (message.type === 'ACTION') {
      dispatchRemotely(message.action);
    } else if (message.type === 'DISPATCH') {
      store.liftedStore.dispatch(message.action);
    }
  }

  function async(fn) {
    setTimeout(fn, 0);
  }

  function sendError(errorAction) {
    if (errorAction.message && errorAction.message === lastErrorMsg) return;
    lastErrorMsg = errorAction.message;
    async(function () {
      store.dispatch(errorAction);
      if (!started) send();
    });
  }

  function str2array(str) {
    return typeof str === 'string' ? [str] : str && str.length;
  }

  function init(options) {
    instanceName = options.name;

    var _ref = options.filters || {};

    var blacklist = _ref.blacklist;
    var whitelist = _ref.whitelist;
    filters = (0, _filters.getLocalFilter)({
      actionsBlacklist: blacklist || options.actionsBlacklist,
      actionsWhitelist: whitelist || options.actionsWhitelist
    });

    if (options.port) {
      socketOptions = {
        port: options.port,
        hostname: options.hostname || 'localhost',
        secure: options.secure
      };
    } else socketOptions = _constants.defaultSocketOptions;

    suppressConnectErrors = options.suppressConnectErrors !== undefined ? options.suppressConnectErrors : true;
    startOn = str2array(options.startOn);
    stopOn = str2array(options.stopOn);
    sendOn = str2array(options.sendOn);
    sendOnError = options.sendOnError;

    if (sendOn || sendOnError) {
      sendTo = options.sendTo || (socketOptions.secure ? 'https' : 'http') + '://' + socketOptions.hostname + ':' + socketOptions.port;
      instanceId = options.id;
    }

    if (sendOnError === 1) (0, _catchErrors2.default)(sendError);
    if (options.actionCreators) actionCreators = function actionCreators() {
      return (0, _remotedevUtils.getActionsArray)(options.actionCreators);
    };
    stateSanitizer = options.stateSanitizer;
    actionSanitizer = options.actionSanitizer;
  }

  function login() {
    socket.emit('login', 'master', function (err, channelName) {
      if (err) {
        console.log(err);
        return;
      }

      channel = channelName;
      socket.subscribe(channelName).watch(handleMessages);
      socket.on(channelName, handleMessages);
    });
    started = true;
    relay('START');
  }

  function stop(keepConnected) {
    started = false;
    isMonitored = false;
    if (!socket) return;
    socket.destroyChannel(channel);

    if (keepConnected) {
      socket.off(channel, handleMessages);
    } else {
      socket.off();
      socket.disconnect();
    }
  }

  function start() {
    if (started || socket && socket.getState() === socket.CONNECTING) return;
    socket = _socketclusterClient2.default.connect(socketOptions);
    socket.on('error', function (err) {
      errorCounts[err.name] = errorCounts.hasOwnProperty(err.name) ? errorCounts[err.name] + 1 : 1;

      if (suppressConnectErrors) {
        if (errorCounts[err.name] === 1) {
          console.log('remote-redux-devtools: Socket connection errors are being suppressed. ' + '\n' + 'This can be disabled by setting suppressConnectErrors to \'false\'.');
          console.log(err);
        }
      } else {
        console.log(err);
      }
    });
    socket.on('connect', function () {
      console.log('connected to remotedev-server');
      errorCounts = {};
      login();
    });
    socket.on('disconnect', function () {
      stop(true);
    });
  }

  function checkForReducerErrors() {
    var liftedState = arguments.length <= 0 || arguments[0] === undefined ? store.liftedStore.getState() : arguments[0];

    if (liftedState.computedStates[liftedState.currentStateIndex].error) {
      if (started) relay('STATE', (0, _filters.filterStagedActions)(liftedState, filters));else send();
      return true;
    }

    return false;
  }

  function monitorReducer() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var action = arguments[1];
    lastAction = action.type;
    if (!started && sendOnError === 2 && store.liftedStore) async(checkForReducerErrors);else if (action.action) {
      if (startOn && !started && startOn.indexOf(action.action.type) !== -1) async(start);else if (stopOn && started && stopOn.indexOf(action.action.type) !== -1) async(stop);else if (sendOn && !started && sendOn.indexOf(action.action.type) !== -1) async(send);
    }
    return state;
  }

  function handleChange(state, liftedState, maxAge) {
    if (checkForReducerErrors(liftedState)) return;

    if (lastAction === 'PERFORM_ACTION') {
      var nextActionId = liftedState.nextActionId;
      var liftedAction = liftedState.actionsById[nextActionId - 1];
      if ((0, _filters.isFiltered)(liftedAction.action, filters)) return;
      relay('ACTION', state, liftedAction, nextActionId);
      if (!isExcess && maxAge) isExcess = liftedState.stagedActionIds.length >= maxAge;
    } else {
      if (lastAction === 'JUMP_TO_STATE') return;

      if (lastAction === 'PAUSE_RECORDING') {
        paused = liftedState.isPaused;
      } else if (lastAction === 'LOCK_CHANGES') {
        locked = liftedState.isLocked;
      }

      if (paused || locked) {
        if (lastAction) lastAction = undefined;else return;
      }

      relay('STATE', (0, _filters.filterStagedActions)(liftedState, filters));
    }
  }

  function devToolsEnhancer() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    init(_extends({}, options, {
      hostname: (0, _rnHostDetect2.default)(options.hostname || 'localhost')
    }));
    var realtime = typeof options.realtime === 'undefined' ? process.env.NODE_ENV === 'development' : options.realtime;
    if (!realtime && !(startOn || sendOn || sendOnError)) return function (f) {
      return f;
    };
    var maxAge = options.maxAge || 30;
    return function (next) {
      return function (reducer, initialState) {
        store = (0, _configureStore2.default)(next, monitorReducer, {
          maxAge: maxAge,
          shouldCatchErrors: !!sendOnError,
          shouldHotReload: options.shouldHotReload,
          shouldRecordChanges: options.shouldRecordChanges,
          shouldStartLocked: options.shouldStartLocked,
          pauseActionType: options.pauseActionType || '@@PAUSED'
        })(reducer, initialState);
        if (realtime) start();
        store.subscribe(function () {
          if (isMonitored) handleChange(store.getState(), store.liftedStore.getState(), maxAge);
        });
        return store;
      };
    };
  }

  function preEnhancer(createStore) {
    return function (reducer, preloadedState, enhancer) {
      store = createStore(reducer, preloadedState, enhancer);
      return _extends({}, store, {
        dispatch: function dispatch(action) {
          return locked ? action : store.dispatch(action);
        }
      });
    };
  }

  devToolsEnhancer.updateStore = function (newStore) {
    console.warn('devTools.updateStore is deprecated use composeWithDevTools instead: ' + 'https://github.com/zalmoxisus/remote-redux-devtools#use-devtools-compose-helper');
    store = newStore;
  };

  var compose = function compose(options) {
    return function () {
      for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      return function () {
        return [preEnhancer].concat(funcs).reduceRight(function (composed, f) {
          return f(composed);
        }, devToolsEnhancer(options).apply(undefined, arguments));
      };
    };
  };

  function composeWithDevTools() {
    if (arguments.length === 0) {
      return devToolsEnhancer();
    }

    if (arguments.length === 1 && _typeof(arguments.length <= 0 ? undefined : arguments[0]) === 'object') {
      return compose(arguments.length <= 0 ? undefined : arguments[0]);
    }

    return compose({}).apply(undefined, arguments);
  }
},356,[357,362,383,455,456,457,471,472],"remote-redux-devtools/lib/devTools.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], './lib');
},357,[358],"jsan/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var cycle = require(_dependencyMap[0], './cycle');

  exports.stringify = function stringify(value, replacer, space, _options) {
    if (arguments.length < 4) {
      try {
        if (arguments.length === 1) {
          return JSON.stringify(value);
        } else {
          return JSON.stringify.apply(JSON, arguments);
        }
      } catch (e) {}
    }

    var options = _options || false;

    if (typeof options === 'boolean') {
      options = {
        'date': options,
        'function': options,
        'regex': options,
        'undefined': options,
        'error': options,
        'symbol': options,
        'map': options,
        'set': options,
        'nan': options,
        'infinity': options
      };
    }

    var decycled = cycle.decycle(value, options, replacer);

    if (arguments.length === 1) {
      return JSON.stringify(decycled);
    } else {
      return JSON.stringify(decycled, replacer, space);
    }
  };

  exports.parse = function parse(text, reviver) {
    var needsRetrocycle = /"\$jsan"/.test(text);
    var parsed;

    if (arguments.length === 1) {
      parsed = JSON.parse(text);
    } else {
      parsed = JSON.parse(text, reviver);
    }

    if (needsRetrocycle) {
      parsed = cycle.retrocycle(parsed);
    }

    return parsed;
  };
},358,[359],"jsan/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var pathGetter = require(_dependencyMap[0], './path-getter');

  var utils = require(_dependencyMap[1], './utils');

  var WMap = typeof WeakMap !== 'undefined' ? WeakMap : function () {
    var keys = [];
    var values = [];
    return {
      set: function set(key, value) {
        keys.push(key);
        values.push(value);
      },
      get: function get(key) {
        for (var i = 0; i < keys.length; i++) {
          if (keys[i] === key) {
            return values[i];
          }
        }
      }
    };
  };

  exports.decycle = function decycle(object, options, replacer) {
    'use strict';

    var map = new WMap();
    var hasCircular = Object.prototype.hasOwnProperty.call(options, 'circular');
    return function derez(_value, path, key) {
      var i, name, nu;
      var value = replacer ? replacer(key || '', _value) : _value;

      if (options.date && value instanceof Date) {
        return {
          $jsan: 'd' + value.getTime()
        };
      }

      if (options.regex && value instanceof RegExp) {
        return {
          $jsan: 'r' + utils.getRegexFlags(value) + ',' + value.source
        };
      }

      if (options['function'] && typeof value === 'function') {
        return {
          $jsan: 'f' + utils.stringifyFunction(value, options['function'])
        };
      }

      if (options['nan'] && typeof value === 'number' && isNaN(value)) {
        return {
          $jsan: 'n'
        };
      }

      if (options['infinity']) {
        if (Number.POSITIVE_INFINITY === value) return {
          $jsan: 'i'
        };
        if (Number.NEGATIVE_INFINITY === value) return {
          $jsan: 'y'
        };
      }

      if (options['undefined'] && value === undefined) {
        return {
          $jsan: 'u'
        };
      }

      if (options['error'] && value instanceof Error) {
        return {
          $jsan: 'e' + value.message
        };
      }

      if (options['symbol'] && typeof value === 'symbol') {
        var symbolKey = (typeof Symbol === "function" ? Symbol.keyFor : "@@keyFor")(value);

        if (symbolKey !== undefined) {
          return {
            $jsan: 'g' + symbolKey
          };
        }

        return {
          $jsan: 's' + value.toString().slice(7, -1)
        };
      }

      if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') {
        return {
          $jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))
        };
      }

      if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') {
        return {
          $jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))
        };
      }

      if (value && typeof value.toJSON === 'function') {
        value = value.toJSON(key);
      }

      if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String) && !(typeof value === 'symbol') && !(value instanceof Error)) {
        if (typeof value === 'object' && value !== null) {
          var foundPath = map.get(value);

          if (foundPath) {
            if (hasCircular && path.indexOf(foundPath) === 0) {
              return typeof options.circular === 'function' ? options.circular(value, path, foundPath) : options.circular;
            }

            return {
              $jsan: foundPath
            };
          }

          map.set(value, path);
        }

        if (Object.prototype.toString.apply(value) === '[object Array]') {
          nu = [];

          for (i = 0; i < value.length; i += 1) {
            nu[i] = derez(value[i], path + '[' + i + ']', i);
          }
        } else {
          nu = {};

          for (name in value) {
            if (Object.prototype.hasOwnProperty.call(value, name)) {
              var nextPath = /^\w+$/.test(name) ? '.' + name : '[' + JSON.stringify(name) + ']';
              nu[name] = name === '$jsan' ? [derez(value[name], path + nextPath)] : derez(value[name], path + nextPath, name);
            }
          }
        }

        return nu;
      }

      return value;
    }(object, '$');
  };

  exports.retrocycle = function retrocycle($) {
    'use strict';

    return function rez(value) {
      var i, item, name, path;

      if (value && typeof value === 'object') {
        if (Object.prototype.toString.apply(value) === '[object Array]') {
          for (i = 0; i < value.length; i += 1) {
            item = value[i];

            if (item && typeof item === 'object') {
              if (item.$jsan) {
                value[i] = utils.restore(item.$jsan, $);
              } else {
                rez(item);
              }
            }
          }
        } else {
          for (name in value) {
            if (typeof value[name] === 'string' && name === '$jsan') {
              return utils.restore(value.$jsan, $);
              break;
            } else {
              if (name === '$jsan') {
                value[name] = value[name][0];
              }

              if (typeof value[name] === 'object') {
                item = value[name];

                if (item && typeof item === 'object') {
                  if (item.$jsan) {
                    value[name] = utils.restore(item.$jsan, $);
                  } else {
                    rez(item);
                  }
                }
              }
            }
          }
        }
      }

      return value;
    }($);
  };
},359,[360,361],"jsan/lib/cycle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = pathGetter;

  function pathGetter(obj, path) {
    if (path !== '$') {
      var paths = getPaths(path);

      for (var i = 0; i < paths.length; i++) {
        path = paths[i].toString().replace(/\\"/g, '"');
        if (typeof obj[path] === 'undefined' && i !== paths.length - 1) continue;
        obj = obj[path];
      }
    }

    return obj;
  }

  function getPaths(pathString) {
    var regex = /(?:\.(\w+))|(?:\[(\d+)\])|(?:\["((?:[^\\"]|\\.)*)"\])/g;
    var matches = [];
    var match;

    while (match = regex.exec(pathString)) {
      matches.push(match[1] || match[2] || match[3]);
    }

    return matches;
  }
},360,[],"jsan/lib/path-getter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var pathGetter = require(_dependencyMap[0], './path-getter');

  var jsan = require(_dependencyMap[1], './');

  exports.getRegexFlags = function getRegexFlags(regex) {
    var flags = '';
    if (regex.ignoreCase) flags += 'i';
    if (regex.global) flags += 'g';
    if (regex.multiline) flags += 'm';
    return flags;
  };

  exports.stringifyFunction = function stringifyFunction(fn, customToString) {
    if (typeof customToString === 'function') {
      return customToString(fn);
    }

    var str = fn.toString();
    var match = str.match(/^[^{]*{|^[^=]*=>/);
    var start = match ? match[0] : '<function> ';
    var end = str[str.length - 1] === '}' ? '}' : '';
    return start.replace(/\r\n|\n/g, ' ').replace(/\s+/g, ' ') + ' /* ... */ ' + end;
  };

  exports.restore = function restore(obj, root) {
    var type = obj[0];
    var rest = obj.slice(1);

    switch (type) {
      case '$':
        return pathGetter(root, obj);

      case 'r':
        var comma = rest.indexOf(',');
        var flags = rest.slice(0, comma);
        var source = rest.slice(comma + 1);
        return RegExp(source, flags);

      case 'd':
        return new Date(+rest);

      case 'f':
        var fn = function fn() {
          throw new Error("can't run jsan parsed function");
        };

        fn.toString = function () {
          return rest;
        };

        return fn;

      case 'u':
        return undefined;

      case 'e':
        var error = new Error(rest);
        error.stack = 'Stack is unavailable for jsan parsed errors';
        return error;

      case 's':
        return Symbol(rest);

      case 'g':
        return (typeof Symbol === "function" ? Symbol.for : "@@for")(rest);

      case 'm':
        return new Map(jsan.parse(rest));

      case 'l':
        return new Set(jsan.parse(rest));

      case 'n':
        return NaN;

      case 'i':
        return Infinity;

      case 'y':
        return -Infinity;

      default:
        console.warn('unknown type', obj);
        return obj;
    }
  };
},361,[360,358],"jsan/lib/utils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SCSocket = require(_dependencyMap[0], './lib/scsocket');

  var SCSocketCreator = require(_dependencyMap[1], './lib/scsocketcreator');

  module.exports.SCSocketCreator = SCSocketCreator;
  module.exports.SCSocket = SCSocket;
  module.exports.SCEmitter = require(_dependencyMap[2], 'sc-emitter').SCEmitter;

  module.exports.connect = function (options) {
    return SCSocketCreator.connect(options);
  };

  module.exports.destroy = function (options) {
    return SCSocketCreator.destroy(options);
  };

  module.exports.connections = SCSocketCreator.connections;
  module.exports.version = '5.5.2';
},362,[363,382,364],"socketcluster-client/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SCEmitter = require(_dependencyMap[0], 'sc-emitter').SCEmitter;

  var SCChannel = require(_dependencyMap[1], 'sc-channel').SCChannel;

  var Response = require(_dependencyMap[2], './response').Response;

  var AuthEngine = require(_dependencyMap[3], './auth').AuthEngine;

  var formatter = require(_dependencyMap[4], 'sc-formatter');

  var SCTransport = require(_dependencyMap[5], './sctransport').SCTransport;

  var querystring = require(_dependencyMap[6], 'querystring');

  var LinkedList = require(_dependencyMap[7], 'linked-list');

  var base64 = require(_dependencyMap[8], 'base-64');

  var clone = require(_dependencyMap[9], 'clone');

  var scErrors = require(_dependencyMap[10], 'sc-errors');

  var InvalidArgumentsError = scErrors.InvalidArgumentsError;
  var InvalidMessageError = scErrors.InvalidMessageError;
  var SocketProtocolError = scErrors.SocketProtocolError;
  var TimeoutError = scErrors.TimeoutError;
  var isBrowser = typeof window != 'undefined';

  var SCSocket = function SCSocket(opts) {
    var self = this;
    SCEmitter.call(this);
    this.id = null;
    this.state = this.CLOSED;
    this.authState = this.PENDING;
    this.signedAuthToken = null;
    this.authToken = null;
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    this.pendingConnectCallback = false;
    this.connectTimeout = opts.connectTimeout;
    this.ackTimeout = opts.ackTimeout;
    this.channelPrefix = opts.channelPrefix || null;
    this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;
    this.pingTimeout = this.ackTimeout;
    var maxTimeout = Math.pow(2, 31) - 1;

    var verifyDuration = function verifyDuration(propertyName) {
      if (self[propertyName] > maxTimeout) {
        throw new InvalidArgumentsError('The ' + propertyName + ' value provided exceeded the maximum amount allowed');
      }
    };

    verifyDuration('connectTimeout');
    verifyDuration('ackTimeout');
    verifyDuration('pingTimeout');
    this._localEvents = {
      'connect': 1,
      'connectAbort': 1,
      'disconnect': 1,
      'message': 1,
      'error': 1,
      'raw': 1,
      'fail': 1,
      'kickOut': 1,
      'subscribe': 1,
      'unsubscribe': 1,
      'subscribeStateChange': 1,
      'authStateChange': 1,
      'authenticate': 1,
      'deauthenticate': 1,
      'removeAuthToken': 1,
      'subscribeRequest': 1
    };
    this.connectAttempts = 0;
    this._emitBuffer = new LinkedList();
    this._channels = {};
    this.options = opts;
    this._cid = 1;

    this.options.callIdGenerator = function () {
      return self._callIdGenerator();
    };

    if (this.options.autoReconnect) {
      if (this.options.autoReconnectOptions == null) {
        this.options.autoReconnectOptions = {};
      }

      var reconnectOptions = this.options.autoReconnectOptions;

      if (reconnectOptions.initialDelay == null) {
        reconnectOptions.initialDelay = 10000;
      }

      if (reconnectOptions.randomness == null) {
        reconnectOptions.randomness = 10000;
      }

      if (reconnectOptions.multiplier == null) {
        reconnectOptions.multiplier = 1.5;
      }

      if (reconnectOptions.maxDelay == null) {
        reconnectOptions.maxDelay = 60000;
      }
    }

    if (this.options.subscriptionRetryOptions == null) {
      this.options.subscriptionRetryOptions = {};
    }

    if (this.options.authEngine) {
      this.auth = this.options.authEngine;
    } else {
      this.auth = new AuthEngine();
    }

    if (this.options.codecEngine) {
      this.codec = this.options.codecEngine;
    } else {
      this.codec = formatter;
    }

    this.options.path = this.options.path.replace(/\/$/, '') + '/';
    this.options.query = opts.query || {};

    if (typeof this.options.query == 'string') {
      this.options.query = querystring.parse(this.options.query);
    }

    if (this.options.autoConnect) {
      this.connect();
    }

    this._channelEmitter = new SCEmitter();

    if (isBrowser && this.disconnectOnUnload) {
      var unloadHandler = function unloadHandler() {
        self.disconnect();
      };

      if (global.attachEvent) {
        global.attachEvent('onunload', unloadHandler);
      } else if (global.addEventListener) {
        global.addEventListener('beforeunload', unloadHandler, false);
      }
    }
  };

  SCSocket.prototype = Object.create(SCEmitter.prototype);
  SCSocket.CONNECTING = SCSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;
  SCSocket.OPEN = SCSocket.prototype.OPEN = SCTransport.prototype.OPEN;
  SCSocket.CLOSED = SCSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;
  SCSocket.AUTHENTICATED = SCSocket.prototype.AUTHENTICATED = 'authenticated';
  SCSocket.UNAUTHENTICATED = SCSocket.prototype.UNAUTHENTICATED = 'unauthenticated';
  SCSocket.PENDING = SCSocket.prototype.PENDING = 'pending';
  SCSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;
  SCSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;
  SCSocket.prototype._privateEventHandlerMap = {
    '#publish': function publish(data) {
      var undecoratedChannelName = this._undecorateChannelName(data.channel);

      var isSubscribed = this.isSubscribed(undecoratedChannelName, true);

      if (isSubscribed) {
        this._channelEmitter.emit(undecoratedChannelName, data.data);
      }
    },
    '#kickOut': function kickOut(data) {
      var undecoratedChannelName = this._undecorateChannelName(data.channel);

      var channel = this._channels[undecoratedChannelName];

      if (channel) {
        SCEmitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);
        channel.emit('kickOut', data.message, undecoratedChannelName);

        this._triggerChannelUnsubscribe(channel);
      }
    },
    '#setAuthToken': function setAuthToken(data, response) {
      var self = this;

      if (data) {
        var triggerAuthenticate = function triggerAuthenticate(err) {
          if (err) {
            response.error(err);

            self._onSCError(err);
          } else {
            self._changeToAuthenticatedState(data.token);

            response.end();
          }
        };

        this.auth.saveToken(this.options.authTokenName, data.token, {}, triggerAuthenticate);
      } else {
        response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));
      }
    },
    '#removeAuthToken': function removeAuthToken(data, response) {
      var self = this;
      this.auth.removeToken(this.options.authTokenName, function (err, oldToken) {
        if (err) {
          response.error(err);

          self._onSCError(err);
        } else {
          SCEmitter.prototype.emit.call(self, 'removeAuthToken', oldToken);

          self._changeToUnauthenticatedState();

          response.end();
        }
      });
    },
    '#disconnect': function disconnect(data) {
      this.transport.close(data.code, data.data);
    }
  };

  SCSocket.prototype._callIdGenerator = function () {
    return this._cid++;
  };

  SCSocket.prototype.getState = function () {
    return this.state;
  };

  SCSocket.prototype.getBytesReceived = function () {
    return this.transport.getBytesReceived();
  };

  SCSocket.prototype.deauthenticate = function (callback) {
    var self = this;
    this.auth.removeToken(this.options.authTokenName, function (err, oldToken) {
      if (err) {
        self._onSCError(err);
      } else {
        self.emit('#removeAuthToken');
        SCEmitter.prototype.emit.call(self, 'removeAuthToken', oldToken);

        self._changeToUnauthenticatedState();
      }

      callback && callback(err);
    });
  };

  SCSocket.prototype.connect = SCSocket.prototype.open = function () {
    var self = this;

    if (this.state == this.CLOSED) {
      this.pendingReconnect = false;
      this.pendingReconnectTimeout = null;
      clearTimeout(this._reconnectTimeoutRef);
      this.state = this.CONNECTING;
      SCEmitter.prototype.emit.call(this, 'connecting');

      this._changeToPendingAuthState();

      if (this.transport) {
        this.transport.off();
      }

      this.transport = new SCTransport(this.auth, this.codec, this.options);
      this.transport.on('open', function (status) {
        self.state = self.OPEN;

        self._onSCOpen(status);
      });
      this.transport.on('error', function (err) {
        self._onSCError(err);
      });
      this.transport.on('close', function (code, data) {
        self.state = self.CLOSED;

        self._onSCClose(code, data);
      });
      this.transport.on('openAbort', function (code, data) {
        self.state = self.CLOSED;

        self._onSCClose(code, data, true);
      });
      this.transport.on('event', function (event, data, res) {
        self._onSCEvent(event, data, res);
      });
    }
  };

  SCSocket.prototype.reconnect = function () {
    this.disconnect();
    this.connect();
  };

  SCSocket.prototype.disconnect = function (code, data) {
    code = code || 1000;

    if (typeof code != 'number') {
      throw new InvalidArgumentsError('If specified, the code argument must be a number');
    }

    if (this.state == this.OPEN || this.state == this.CONNECTING) {
      this.transport.close(code, data);
    } else {
      this.pendingReconnect = false;
      this.pendingReconnectTimeout = null;
      clearTimeout(this._reconnectTimeoutRef);
    }
  };

  SCSocket.prototype._changeToPendingAuthState = function () {
    if (this.authState != this.PENDING) {
      var oldState = this.authState;
      this.authState = this.PENDING;
      var stateChangeData = {
        oldState: oldState,
        newState: this.authState
      };
      SCEmitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
    }
  };

  SCSocket.prototype._changeToUnauthenticatedState = function () {
    if (this.authState != this.UNAUTHENTICATED) {
      var oldState = this.authState;
      this.authState = this.UNAUTHENTICATED;
      this.signedAuthToken = null;
      this.authToken = null;
      var stateChangeData = {
        oldState: oldState,
        newState: this.authState
      };
      SCEmitter.prototype.emit.call(this, 'authStateChange', stateChangeData);

      if (oldState == this.AUTHENTICATED) {
        SCEmitter.prototype.emit.call(this, 'deauthenticate');
      }

      SCEmitter.prototype.emit.call(this, 'authTokenChange', this.signedAuthToken);
    }
  };

  SCSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {
    this.signedAuthToken = signedAuthToken;
    this.authToken = this._extractAuthTokenData(signedAuthToken);

    if (this.authState != this.AUTHENTICATED) {
      var oldState = this.authState;
      this.authState = this.AUTHENTICATED;
      var stateChangeData = {
        oldState: oldState,
        newState: this.authState,
        signedAuthToken: signedAuthToken,
        authToken: this.authToken
      };
      this.processPendingSubscriptions();
      SCEmitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
      SCEmitter.prototype.emit.call(this, 'authenticate', signedAuthToken);
    }

    SCEmitter.prototype.emit.call(this, 'authTokenChange', signedAuthToken);
  };

  SCSocket.prototype.decodeBase64 = function (encodedString) {
    var decodedString;

    if (typeof Buffer == 'undefined') {
      if (global.atob) {
        decodedString = global.atob(encodedString);
      } else {
        decodedString = base64.decode(encodedString);
      }
    } else {
      var buffer = new Buffer(encodedString, 'base64');
      decodedString = buffer.toString('utf8');
    }

    return decodedString;
  };

  SCSocket.prototype.encodeBase64 = function (decodedString) {
    var encodedString;

    if (typeof Buffer == 'undefined') {
      if (global.btoa) {
        encodedString = global.btoa(decodedString);
      } else {
        encodedString = base64.encode(decodedString);
      }
    } else {
      var buffer = new Buffer(decodedString, 'utf8');
      encodedString = buffer.toString('base64');
    }

    return encodedString;
  };

  SCSocket.prototype._extractAuthTokenData = function (signedAuthToken) {
    var tokenParts = (signedAuthToken || '').split('.');
    var encodedTokenData = tokenParts[1];

    if (encodedTokenData != null) {
      var tokenData = encodedTokenData;

      try {
        tokenData = this.decodeBase64(tokenData);
        return JSON.parse(tokenData);
      } catch (e) {
        return tokenData;
      }
    }

    return null;
  };

  SCSocket.prototype.getAuthToken = function () {
    return this.authToken;
  };

  SCSocket.prototype.getSignedAuthToken = function () {
    return this.signedAuthToken;
  };

  SCSocket.prototype.authenticate = function (signedAuthToken, callback) {
    var self = this;

    this._changeToPendingAuthState();

    this.emit('#authenticate', signedAuthToken, function (err, authStatus) {
      if (authStatus && authStatus.authError) {
        authStatus.authError = scErrors.hydrateError(authStatus.authError);
      }

      if (err) {
        self._changeToUnauthenticatedState();

        callback && callback(err, authStatus);
      } else {
        self.auth.saveToken(self.options.authTokenName, signedAuthToken, {}, function (err) {
          callback && callback(err, authStatus);

          if (err) {
            self._changeToUnauthenticatedState();

            self._onSCError(err);
          } else {
            if (authStatus.isAuthenticated) {
              self._changeToAuthenticatedState(signedAuthToken);
            } else {
              self._changeToUnauthenticatedState();
            }
          }
        });
      }
    });
  };

  SCSocket.prototype._tryReconnect = function (initialDelay) {
    var self = this;
    var exponent = this.connectAttempts++;
    var reconnectOptions = this.options.autoReconnectOptions;
    var timeout;

    if (initialDelay == null || exponent > 0) {
      var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());
      timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));
    } else {
      timeout = initialDelay;
    }

    if (timeout > reconnectOptions.maxDelay) {
      timeout = reconnectOptions.maxDelay;
    }

    clearTimeout(this._reconnectTimeoutRef);
    this.pendingReconnect = true;
    this.pendingReconnectTimeout = timeout;
    this._reconnectTimeoutRef = setTimeout(function () {
      self.connect();
    }, timeout);
  };

  SCSocket.prototype._onSCOpen = function (status) {
    var self = this;

    if (status) {
      this.id = status.id;
      this.pingTimeout = status.pingTimeout;
      this.transport.pingTimeout = this.pingTimeout;

      if (status.isAuthenticated) {
        this._changeToAuthenticatedState(status.authToken);
      } else {
        this._changeToUnauthenticatedState();
      }
    } else {
      this._changeToUnauthenticatedState();
    }

    this.connectAttempts = 0;

    if (this.options.autoProcessSubscriptions) {
      this.processPendingSubscriptions();
    } else {
      this.pendingConnectCallback = true;
    }

    SCEmitter.prototype.emit.call(this, 'connect', status, function () {
      self.processPendingSubscriptions();
    });

    this._flushEmitBuffer();
  };

  SCSocket.prototype._onSCError = function (err) {
    var self = this;
    setTimeout(function () {
      if (self.listeners('error').length < 1) {
        throw err;
      } else {
        SCEmitter.prototype.emit.call(self, 'error', err);
      }
    }, 0);
  };

  SCSocket.prototype._suspendSubscriptions = function () {
    var channel, newState;

    for (var channelName in this._channels) {
      if (this._channels.hasOwnProperty(channelName)) {
        channel = this._channels[channelName];

        if (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING) {
          newState = channel.PENDING;
        } else {
          newState = channel.UNSUBSCRIBED;
        }

        this._triggerChannelUnsubscribe(channel, newState);
      }
    }
  };

  SCSocket.prototype._onSCClose = function (code, data, openAbort) {
    var self = this;
    this.id = null;

    if (this.transport) {
      this.transport.off();
    }

    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);

    this._changeToPendingAuthState();

    this._suspendSubscriptions();

    if (this.options.autoReconnect) {
      if (code == 4000 || code == 4001 || code == 1005) {
        this._tryReconnect(0);
      } else if (code != 1000 && code < 4500) {
        this._tryReconnect();
      }
    }

    if (openAbort) {
      SCEmitter.prototype.emit.call(self, 'connectAbort', code, data);
    } else {
      SCEmitter.prototype.emit.call(self, 'disconnect', code, data);
    }

    if (!SCSocket.ignoreStatuses[code]) {
      var failureMessage;

      if (data) {
        failureMessage = 'Socket connection failed: ' + data;
      } else {
        failureMessage = 'Socket connection failed for unknown reasons';
      }

      var err = new SocketProtocolError(SCSocket.errorStatuses[code] || failureMessage, code);

      this._onSCError(err);
    }
  };

  SCSocket.prototype._onSCEvent = function (event, data, res) {
    var handler = this._privateEventHandlerMap[event];

    if (handler) {
      handler.call(this, data, res);
    } else {
      SCEmitter.prototype.emit.call(this, event, data, function () {
        res && res.callback.apply(res, arguments);
      });
    }
  };

  SCSocket.prototype.decode = function (message) {
    return this.transport.decode(message);
  };

  SCSocket.prototype.encode = function (object) {
    return this.transport.encode(object);
  };

  SCSocket.prototype._flushEmitBuffer = function () {
    var currentNode = this._emitBuffer.head;
    var nextNode;

    while (currentNode) {
      nextNode = currentNode.next;
      var eventObject = currentNode.data;
      currentNode.detach();
      this.transport.emitObject(eventObject);
      currentNode = nextNode;
    }
  };

  SCSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {
    if (eventNode) {
      eventNode.detach();
    }

    var callback = eventObject.callback;

    if (callback) {
      delete eventObject.callback;
      var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
      callback.call(eventObject, error, eventObject);
    }
  };

  SCSocket.prototype._emit = function (event, data, callback) {
    var self = this;

    if (this.state == this.CLOSED) {
      this.connect();
    }

    var eventObject = {
      event: event,
      data: data,
      callback: callback
    };
    var eventNode = new LinkedList.Item();

    if (this.options.cloneData) {
      eventNode.data = clone(eventObject);
    } else {
      eventNode.data = eventObject;
    }

    eventObject.timeout = setTimeout(function () {
      self._handleEventAckTimeout(eventObject, eventNode);
    }, this.ackTimeout);

    this._emitBuffer.append(eventNode);

    if (this.state == this.OPEN) {
      this._flushEmitBuffer();
    }
  };

  SCSocket.prototype.send = function (data) {
    this.transport.send(data);
  };

  SCSocket.prototype.emit = function (event, data, callback) {
    if (this._localEvents[event] == null) {
      this._emit(event, data, callback);
    } else {
      SCEmitter.prototype.emit.call(this, event, data);
    }
  };

  SCSocket.prototype.publish = function (channelName, data, callback) {
    var pubData = {
      channel: this._decorateChannelName(channelName),
      data: data
    };
    this.emit('#publish', pubData, callback);
  };

  SCSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {
    var channelName = channel.name;

    if (channel.state != channel.SUBSCRIBED) {
      var oldState = channel.state;
      channel.state = channel.SUBSCRIBED;
      var stateChangeData = {
        channel: channelName,
        oldState: oldState,
        newState: channel.state,
        subscriptionOptions: subscriptionOptions
      };
      channel.emit('subscribeStateChange', stateChangeData);
      channel.emit('subscribe', channelName, subscriptionOptions);
      SCEmitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
      SCEmitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);
    }
  };

  SCSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {
    var channelName = channel.name;
    var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;

    if (channel.state != channel.UNSUBSCRIBED && meetsAuthRequirements) {
      channel.state = channel.UNSUBSCRIBED;
      channel.emit('subscribeFail', err, channelName, subscriptionOptions);
      SCEmitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);
    }
  };

  SCSocket.prototype._cancelPendingSubscribeCallback = function (channel) {
    if (channel._pendingSubscriptionCid != null) {
      this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);
      delete channel._pendingSubscriptionCid;
    }
  };

  SCSocket.prototype._decorateChannelName = function (channelName) {
    if (this.channelPrefix) {
      channelName = this.channelPrefix + channelName;
    }

    return channelName;
  };

  SCSocket.prototype._undecorateChannelName = function (decoratedChannelName) {
    if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) == 0) {
      return decoratedChannelName.replace(this.channelPrefix, '');
    }

    return decoratedChannelName;
  };

  SCSocket.prototype._trySubscribe = function (channel) {
    var self = this;
    var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;

    if (this.state == this.OPEN && !this.pendingConnectCallback && channel._pendingSubscriptionCid == null && meetsAuthRequirements) {
      var options = {
        noTimeout: true
      };
      var subscriptionOptions = {
        channel: this._decorateChannelName(channel.name)
      };

      if (channel.waitForAuth) {
        options.waitForAuth = true;
        subscriptionOptions.waitForAuth = options.waitForAuth;
      }

      if (channel.data) {
        subscriptionOptions.data = channel.data;
      }

      channel._pendingSubscriptionCid = this.transport.emit('#subscribe', subscriptionOptions, options, function (err) {
        delete channel._pendingSubscriptionCid;

        if (err) {
          self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);
        } else {
          self._triggerChannelSubscribe(channel, subscriptionOptions);
        }
      });
      SCEmitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);
    }
  };

  SCSocket.prototype.subscribe = function (channelName, options) {
    var channel = this._channels[channelName];

    if (!channel) {
      channel = new SCChannel(channelName, this, options);
      this._channels[channelName] = channel;
    } else if (options) {
      channel.setOptions(options);
    }

    if (channel.state == channel.UNSUBSCRIBED) {
      channel.state = channel.PENDING;

      this._trySubscribe(channel);
    }

    return channel;
  };

  SCSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {
    var channelName = channel.name;
    var oldState = channel.state;

    if (newState) {
      channel.state = newState;
    } else {
      channel.state = channel.UNSUBSCRIBED;
    }

    this._cancelPendingSubscribeCallback(channel);

    if (oldState == channel.SUBSCRIBED) {
      var stateChangeData = {
        channel: channelName,
        oldState: oldState,
        newState: channel.state
      };
      channel.emit('subscribeStateChange', stateChangeData);
      channel.emit('unsubscribe', channelName);
      SCEmitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
      SCEmitter.prototype.emit.call(this, 'unsubscribe', channelName);
    }
  };

  SCSocket.prototype._tryUnsubscribe = function (channel) {
    var self = this;

    if (this.state == this.OPEN) {
      var options = {
        noTimeout: true
      };

      this._cancelPendingSubscribeCallback(channel);

      var decoratedChannelName = this._decorateChannelName(channel.name);

      this.transport.emit('#unsubscribe', decoratedChannelName, options);
    }
  };

  SCSocket.prototype.unsubscribe = function (channelName) {
    var channel = this._channels[channelName];

    if (channel) {
      if (channel.state != channel.UNSUBSCRIBED) {
        this._triggerChannelUnsubscribe(channel);

        this._tryUnsubscribe(channel);
      }
    }
  };

  SCSocket.prototype.channel = function (channelName, options) {
    var currentChannel = this._channels[channelName];

    if (!currentChannel) {
      currentChannel = new SCChannel(channelName, this, options);
      this._channels[channelName] = currentChannel;
    }

    return currentChannel;
  };

  SCSocket.prototype.destroyChannel = function (channelName) {
    var channel = this._channels[channelName];
    channel.unwatch();
    channel.unsubscribe();
    delete this._channels[channelName];
  };

  SCSocket.prototype.subscriptions = function (includePending) {
    var subs = [];
    var channel, includeChannel;

    for (var channelName in this._channels) {
      if (this._channels.hasOwnProperty(channelName)) {
        channel = this._channels[channelName];

        if (includePending) {
          includeChannel = channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
        } else {
          includeChannel = channel && channel.state == channel.SUBSCRIBED;
        }

        if (includeChannel) {
          subs.push(channelName);
        }
      }
    }

    return subs;
  };

  SCSocket.prototype.isSubscribed = function (channelName, includePending) {
    var channel = this._channels[channelName];

    if (includePending) {
      return !!channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);
    }

    return !!channel && channel.state == channel.SUBSCRIBED;
  };

  SCSocket.prototype.processPendingSubscriptions = function () {
    var self = this;
    this.pendingConnectCallback = false;

    for (var i in this._channels) {
      if (this._channels.hasOwnProperty(i)) {
        (function (channel) {
          if (channel.state == channel.PENDING) {
            self._trySubscribe(channel);
          }
        })(this._channels[i]);
      }
    }
  };

  SCSocket.prototype.watch = function (channelName, handler) {
    if (typeof handler != 'function') {
      throw new InvalidArgumentsError('No handler function was provided');
    }

    this._channelEmitter.on(channelName, handler);
  };

  SCSocket.prototype.unwatch = function (channelName, handler) {
    if (handler) {
      this._channelEmitter.removeListener(channelName, handler);
    } else {
      this._channelEmitter.removeAllListeners(channelName);
    }
  };

  SCSocket.prototype.watchers = function (channelName) {
    return this._channelEmitter.listeners(channelName);
  };

  module.exports = SCSocket;
},363,[364,367,368,371,372,373,374,378,380,381,369],"socketcluster-client/lib/scsocket.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Emitter = require(_dependencyMap[0], 'component-emitter');

  if (!Object.create) {
    Object.create = require(_dependencyMap[1], './objectcreate');
  }

  var SCEmitter = function SCEmitter() {
    Emitter.call(this);
  };

  SCEmitter.prototype = Object.create(Emitter.prototype);

  SCEmitter.prototype.emit = function (event) {
    if (event == 'error') {
      var domainErrorArgs = ['__domainError'];

      if (arguments[1] !== undefined) {
        domainErrorArgs.push(arguments[1]);
      }

      Emitter.prototype.emit.apply(this, domainErrorArgs);

      if (this.domain) {
        var err = arguments[1];

        if (!err) {
          err = new Error('Uncaught, unspecified "error" event.');
        }

        err.domainEmitter = this;
        err.domain = this.domain;
        err.domainThrown = false;
        this.domain.emit('error', err);
      }
    }

    Emitter.prototype.emit.apply(this, arguments);
  };

  module.exports.SCEmitter = SCEmitter;
},364,[365,366],"sc-emitter/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = Emitter;

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }

  ;

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }

    return obj;
  }

  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
    return this;
  };

  Emitter.prototype.once = function (event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};

    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    var cb;

    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];

      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    return this;
  };

  Emitter.prototype.emit = function (event) {
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1),
        callbacks = this._callbacks['$' + event];

    if (callbacks) {
      callbacks = callbacks.slice(0);

      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  Emitter.prototype.listeners = function (event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  Emitter.prototype.hasListeners = function (event) {
    return !!this.listeners(event).length;
  };
},365,[],"component-emitter/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports.create = function () {
    function F() {}

    ;
    return function (o) {
      if (arguments.length != 1) {
        throw new Error('Object.create implementation only accepts one parameter.');
      }

      F.prototype = o;
      return new F();
    };
  }();
},366,[],"sc-emitter/objectcreate.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SCEmitter = require(_dependencyMap[0], 'sc-emitter').SCEmitter;

  var SCChannel = function SCChannel(name, client, options) {
    var self = this;
    SCEmitter.call(this);
    this.PENDING = 'pending';
    this.SUBSCRIBED = 'subscribed';
    this.UNSUBSCRIBED = 'unsubscribed';
    this.name = name;
    this.state = this.UNSUBSCRIBED;
    this.client = client;
    this.options = options || {};
    this.setOptions(this.options);
  };

  SCChannel.prototype = Object.create(SCEmitter.prototype);

  SCChannel.prototype.setOptions = function (options) {
    if (!options) {
      options = {};
    }

    this.waitForAuth = options.waitForAuth || false;

    if (options.data !== undefined) {
      this.data = options.data;
    }
  };

  SCChannel.prototype.getState = function () {
    return this.state;
  };

  SCChannel.prototype.subscribe = function (options) {
    this.client.subscribe(this.name, options);
  };

  SCChannel.prototype.unsubscribe = function () {
    this.client.unsubscribe(this.name);
  };

  SCChannel.prototype.isSubscribed = function (includePending) {
    return this.client.isSubscribed(this.name, includePending);
  };

  SCChannel.prototype.publish = function (data, callback) {
    this.client.publish(this.name, data, callback);
  };

  SCChannel.prototype.watch = function (handler) {
    this.client.watch(this.name, handler);
  };

  SCChannel.prototype.unwatch = function (handler) {
    this.client.unwatch(this.name, handler);
  };

  SCChannel.prototype.watchers = function () {
    return this.client.watchers(this.name);
  };

  SCChannel.prototype.destroy = function () {
    this.client.destroyChannel(this.name);
  };

  module.exports.SCChannel = SCChannel;
},367,[364],"sc-channel/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var scErrors = require(_dependencyMap[0], 'sc-errors');

  var InvalidActionError = scErrors.InvalidActionError;

  var Response = function Response(socket, id) {
    this.socket = socket;
    this.id = id;
    this.sent = false;
  };

  Response.prototype._respond = function (responseData) {
    if (this.sent) {
      throw new InvalidActionError('Response ' + this.id + ' has already been sent');
    } else {
      this.sent = true;
      this.socket.send(this.socket.encode(responseData));
    }
  };

  Response.prototype.end = function (data) {
    if (this.id) {
      var responseData = {
        rid: this.id
      };

      if (data !== undefined) {
        responseData.data = data;
      }

      this._respond(responseData);
    }
  };

  Response.prototype.error = function (error, data) {
    if (this.id) {
      var err = scErrors.dehydrateError(error);
      var responseData = {
        rid: this.id,
        error: err
      };

      if (data !== undefined) {
        responseData.data = data;
      }

      this._respond(responseData);
    }
  };

  Response.prototype.callback = function (error, data) {
    if (error) {
      this.error(error, data);
    } else {
      this.end(data);
    }
  };

  module.exports.Response = Response;
},368,[369],"socketcluster-client/lib/response.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var decycle = require(_dependencyMap[0], './decycle');

  var isStrict = function () {
    return !this;
  }();

  function AuthTokenExpiredError(message, expiry) {
    this.name = 'AuthTokenExpiredError';
    this.message = message;
    this.expiry = expiry;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  AuthTokenExpiredError.prototype = Object.create(Error.prototype);

  function AuthTokenInvalidError(message) {
    this.name = 'AuthTokenInvalidError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  AuthTokenInvalidError.prototype = Object.create(Error.prototype);

  function AuthTokenNotBeforeError(message, date) {
    this.name = 'AuthTokenNotBeforeError';
    this.message = message;
    this.date = date;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  AuthTokenNotBeforeError.prototype = Object.create(Error.prototype);

  function AuthTokenError(message) {
    this.name = 'AuthTokenError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  AuthTokenError.prototype = Object.create(Error.prototype);

  function SilentMiddlewareBlockedError(message, type) {
    this.name = 'SilentMiddlewareBlockedError';
    this.message = message;
    this.type = type;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  SilentMiddlewareBlockedError.prototype = Object.create(Error.prototype);

  function InvalidActionError(message) {
    this.name = 'InvalidActionError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  InvalidActionError.prototype = Object.create(Error.prototype);

  function InvalidArgumentsError(message) {
    this.name = 'InvalidArgumentsError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  InvalidArgumentsError.prototype = Object.create(Error.prototype);

  function InvalidOptionsError(message) {
    this.name = 'InvalidOptionsError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  InvalidOptionsError.prototype = Object.create(Error.prototype);

  function InvalidMessageError(message) {
    this.name = 'InvalidMessageError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  InvalidMessageError.prototype = Object.create(Error.prototype);

  function SocketProtocolError(message, code) {
    this.name = 'SocketProtocolError';
    this.message = message;
    this.code = code;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  SocketProtocolError.prototype = Object.create(Error.prototype);

  function ServerProtocolError(message) {
    this.name = 'ServerProtocolError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  ServerProtocolError.prototype = Object.create(Error.prototype);

  function HTTPServerError(message) {
    this.name = 'HTTPServerError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  HTTPServerError.prototype = Object.create(Error.prototype);

  function ResourceLimitError(message) {
    this.name = 'ResourceLimitError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  ResourceLimitError.prototype = Object.create(Error.prototype);

  function TimeoutError(message) {
    this.name = 'TimeoutError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  TimeoutError.prototype = Object.create(Error.prototype);

  function BadConnectionError(message, type) {
    this.name = 'BadConnectionError';
    this.message = message;
    this.type = type;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  BadConnectionError.prototype = Object.create(Error.prototype);

  function BrokerError(message) {
    this.name = 'BrokerError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  BrokerError.prototype = Object.create(Error.prototype);

  function ProcessExitError(message, code) {
    this.name = 'ProcessExitError';
    this.message = message;
    this.code = code;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  ProcessExitError.prototype = Object.create(Error.prototype);

  function UnknownError(message) {
    this.name = 'UnknownError';
    this.message = message;

    if (Error.captureStackTrace && !isStrict) {
      Error.captureStackTrace(this, arguments.callee);
    } else {
      this.stack = new Error().stack;
    }
  }

  UnknownError.prototype = Object.create(Error.prototype);
  module.exports = {
    AuthTokenExpiredError: AuthTokenExpiredError,
    AuthTokenInvalidError: AuthTokenInvalidError,
    AuthTokenNotBeforeError: AuthTokenNotBeforeError,
    AuthTokenError: AuthTokenError,
    SilentMiddlewareBlockedError: SilentMiddlewareBlockedError,
    InvalidActionError: InvalidActionError,
    InvalidArgumentsError: InvalidArgumentsError,
    InvalidOptionsError: InvalidOptionsError,
    InvalidMessageError: InvalidMessageError,
    SocketProtocolError: SocketProtocolError,
    ServerProtocolError: ServerProtocolError,
    HTTPServerError: HTTPServerError,
    ResourceLimitError: ResourceLimitError,
    TimeoutError: TimeoutError,
    BadConnectionError: BadConnectionError,
    BrokerError: BrokerError,
    ProcessExitError: ProcessExitError,
    UnknownError: UnknownError
  };
  module.exports.socketProtocolErrorStatuses = {
    1001: 'Socket was disconnected',
    1002: 'A WebSocket protocol error was encountered',
    1003: 'Server terminated socket because it received invalid data',
    1005: 'Socket closed without status code',
    1006: 'Socket hung up',
    1007: 'Message format was incorrect',
    1008: 'Encountered a policy violation',
    1009: 'Message was too big to process',
    1010: 'Client ended the connection because the server did not comply with extension requirements',
    1011: 'Server encountered an unexpected fatal condition',
    4000: 'Server ping timed out',
    4001: 'Client pong timed out',
    4002: 'Server failed to sign auth token',
    4003: 'Failed to complete handshake',
    4004: 'Client failed to save auth token',
    4005: 'Did not receive #handshake from client before timeout',
    4006: 'Failed to bind socket to message broker',
    4007: 'Client connection establishment timed out'
  };
  module.exports.socketProtocolIgnoreStatuses = {
    1000: 'Socket closed normally',
    1001: 'Socket hung up'
  };
  var unserializableErrorProperties = {
    domain: 1,
    domainEmitter: 1,
    domainThrown: 1
  };

  module.exports.dehydrateError = function (error, includeStackTrace) {
    var dehydratedError;

    if (error && typeof error == 'object') {
      dehydratedError = {
        message: error.message
      };

      if (includeStackTrace) {
        dehydratedError.stack = error.stack;
      }

      for (var i in error) {
        if (!unserializableErrorProperties[i]) {
          dehydratedError[i] = error[i];
        }
      }
    } else if (typeof error == 'function') {
      dehydratedError = '[function ' + (error.name || 'anonymous') + ']';
    } else {
      dehydratedError = error;
    }

    return decycle(dehydratedError);
  };

  module.exports.hydrateError = function (error) {
    var hydratedError = null;

    if (error != null) {
      if (typeof error == 'object') {
        hydratedError = new Error(error.message);

        for (var i in error) {
          if (error.hasOwnProperty(i)) {
            hydratedError[i] = error[i];
          }
        }
      } else {
        hydratedError = error;
      }
    }

    return hydratedError;
  };

  module.exports.decycle = decycle;
},369,[370],"sc-errors/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    module.exports = function decycle(object) {
        var objects = [],
            paths = [];
        return function derez(value, path) {
            var i, name, nu;

            if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {
                for (i = 0; i < objects.length; i += 1) {
                    if (objects[i] === value) {
                        return {
                            $ref: paths[i]
                        };
                    }
                }

                objects.push(value);
                paths.push(path);

                if (Object.prototype.toString.apply(value) === '[object Array]') {
                    nu = [];

                    for (i = 0; i < value.length; i += 1) {
                        nu[i] = derez(value[i], path + '[' + i + ']');
                    }
                } else {
                    nu = {};

                    for (name in value) {
                        if (Object.prototype.hasOwnProperty.call(value, name)) {
                            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');
                        }
                    }
                }

                return nu;
            }

            return value;
        }(object, '$');
    };
},370,[],"sc-errors/decycle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var AuthEngine = function AuthEngine() {
    this._internalStorage = {};
  };

  AuthEngine.prototype._isLocalStorageEnabled = function () {
    var err;

    try {
      global.localStorage;
      global.localStorage.setItem('__scLocalStorageTest', 1);
      global.localStorage.removeItem('__scLocalStorageTest');
    } catch (e) {
      err = e;
    }

    return !err;
  };

  AuthEngine.prototype.saveToken = function (name, token, options, callback) {
    if (this._isLocalStorageEnabled() && global.localStorage) {
      global.localStorage.setItem(name, token);
    } else {
      this._internalStorage[name] = token;
    }

    callback && callback(null, token);
  };

  AuthEngine.prototype.removeToken = function (name, callback) {
    var token;
    this.loadToken(name, function (err, authToken) {
      token = authToken;
    });

    if (this._isLocalStorageEnabled() && global.localStorage) {
      global.localStorage.removeItem(name);
    }

    delete this._internalStorage[name];
    callback && callback(null, token);
  };

  AuthEngine.prototype.loadToken = function (name, callback) {
    var token;

    if (this._isLocalStorageEnabled() && global.localStorage) {
      token = global.localStorage.getItem(name);
    } else {
      token = this._internalStorage[name] || null;
    }

    callback(null, token);
  };

  module.exports.AuthEngine = AuthEngine;
},371,[],"socketcluster-client/lib/auth.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var validJSONStartRegex = /^[ \n\r\t]*[{\[]/;

  var arrayBufferToBase64 = function arrayBufferToBase64(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer);
    var len = bytes.length;
    var base64 = '';

    for (var i = 0; i < len; i += 3) {
      base64 += base64Chars[bytes[i] >> 2];
      base64 += base64Chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += base64Chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += base64Chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + '=';
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + '==';
    }

    return base64;
  };

  var binaryToBase64Replacer = function binaryToBase64Replacer(key, value) {
    if (global.ArrayBuffer && value instanceof global.ArrayBuffer) {
      return {
        base64: true,
        data: arrayBufferToBase64(value)
      };
    } else if (global.Buffer) {
      if (value instanceof global.Buffer) {
        return {
          base64: true,
          data: value.toString('base64')
        };
      }

      if (value && value.type === 'Buffer' && Array.isArray(value.data)) {
        var rehydratedBuffer;

        if (global.Buffer.from) {
          rehydratedBuffer = global.Buffer.from(value.data);
        } else {
          rehydratedBuffer = new global.Buffer(value.data);
        }

        return {
          base64: true,
          data: rehydratedBuffer.toString('base64')
        };
      }
    }

    return value;
  };

  module.exports.decode = function (input) {
    if (input == null) {
      return null;
    }

    if (input === '#1' || input === '#2') {
      return input;
    }

    var message = input.toString();

    if (!validJSONStartRegex.test(message)) {
      return message;
    }

    try {
      return JSON.parse(message);
    } catch (err) {}

    return message;
  };

  module.exports.encode = function (object) {
    if (object === '#1' || object === '#2') {
      return object;
    }

    return JSON.stringify(object, binaryToBase64Replacer);
  };
},372,[],"sc-formatter/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SCEmitter = require(_dependencyMap[0], 'sc-emitter').SCEmitter;

  var Response = require(_dependencyMap[1], './response').Response;

  var querystring = require(_dependencyMap[2], 'querystring');

  var WebSocket;
  var createWebSocket;

  if (global.WebSocket) {
    WebSocket = global.WebSocket;

    createWebSocket = function createWebSocket(uri, options) {
      return new WebSocket(uri);
    };
  } else {
    WebSocket = require(_dependencyMap[3], 'ws');

    createWebSocket = function createWebSocket(uri, options) {
      return new WebSocket(uri, null, options);
    };
  }

  var scErrors = require(_dependencyMap[4], 'sc-errors');

  var TimeoutError = scErrors.TimeoutError;

  var SCTransport = function SCTransport(authEngine, codecEngine, options) {
    this.state = this.CLOSED;
    this.auth = authEngine;
    this.codec = codecEngine;
    this.options = options;
    this.connectTimeout = options.connectTimeout;
    this.pingTimeout = options.ackTimeout;
    this.callIdGenerator = options.callIdGenerator;
    this._pingTimeoutTicker = null;
    this._callbackMap = {};
    this.open();
  };

  SCTransport.prototype = Object.create(SCEmitter.prototype);
  SCTransport.CONNECTING = SCTransport.prototype.CONNECTING = 'connecting';
  SCTransport.OPEN = SCTransport.prototype.OPEN = 'open';
  SCTransport.CLOSED = SCTransport.prototype.CLOSED = 'closed';

  SCTransport.prototype.uri = function () {
    var query = this.options.query || {};
    var schema = this.options.secure ? 'wss' : 'ws';

    if (this.options.timestampRequests) {
      query[this.options.timestampParam] = new Date().getTime();
    }

    query = querystring.encode(query);

    if (query.length) {
      query = '?' + query;
    }

    var host;

    if (this.options.host) {
      host = this.options.host;
    } else {
      var port = '';

      if (this.options.port && (schema == 'wss' && this.options.port != 443 || schema == 'ws' && this.options.port != 80)) {
        port = ':' + this.options.port;
      }

      host = this.options.hostname + port;
    }

    return schema + '://' + host + this.options.path + query;
  };

  SCTransport.prototype.open = function () {
    var self = this;
    this.state = this.CONNECTING;
    var uri = this.uri();
    var wsSocket = createWebSocket(uri, this.options);
    wsSocket.binaryType = this.options.binaryType;
    this.socket = wsSocket;

    wsSocket.onopen = function () {
      self._onOpen();
    };

    wsSocket.onclose = function (event) {
      var code;

      if (event.code == null) {
        code = 1005;
      } else {
        code = event.code;
      }

      self._onClose(code, event.reason);
    };

    wsSocket.onmessage = function (message, flags) {
      self._onMessage(message.data);
    };

    wsSocket.onerror = function (error) {
      if (self.state === self.CONNECTING) {
        self._onClose(1006);
      }
    };

    this._connectTimeoutRef = setTimeout(function () {
      self._onClose(4007);

      self.socket.close(4007);
    }, this.connectTimeout);
  };

  SCTransport.prototype._onOpen = function () {
    var self = this;
    clearTimeout(this._connectTimeoutRef);

    this._resetPingTimeout();

    this._handshake(function (err, status) {
      if (err) {
        self._onError(err);

        self._onClose(4003);

        self.socket.close(4003);
      } else {
        self.state = self.OPEN;
        SCEmitter.prototype.emit.call(self, 'open', status);

        self._resetPingTimeout();
      }
    });
  };

  SCTransport.prototype._handshake = function (callback) {
    var self = this;
    this.auth.loadToken(this.options.authTokenName, function (err, token) {
      if (err) {
        callback(err);
      } else {
        var options = {
          force: true
        };
        self.emit('#handshake', {
          authToken: token
        }, options, function (err, status) {
          if (status) {
            status.authToken = token;

            if (status.authError) {
              status.authError = scErrors.hydrateError(status.authError);
            }
          }

          callback(err, status);
        });
      }
    });
  };

  SCTransport.prototype._onClose = function (code, data) {
    delete this.socket.onopen;
    delete this.socket.onclose;
    delete this.socket.onmessage;
    delete this.socket.onerror;
    clearTimeout(this._connectTimeoutRef);

    if (this.state == this.OPEN) {
      this.state = this.CLOSED;
      SCEmitter.prototype.emit.call(this, 'close', code, data);
    } else if (this.state == this.CONNECTING) {
      this.state = this.CLOSED;
      SCEmitter.prototype.emit.call(this, 'openAbort', code, data);
    }
  };

  SCTransport.prototype._onMessage = function (message) {
    SCEmitter.prototype.emit.call(this, 'event', 'message', message);
    var obj = this.decode(message);

    if (obj == '#1') {
      this._resetPingTimeout();

      if (this.socket.readyState == this.socket.OPEN) {
        this.sendObject('#2');
      }
    } else {
      var event = obj.event;

      if (event) {
        var response = new Response(this, obj.cid);
        SCEmitter.prototype.emit.call(this, 'event', event, obj.data, response);
      } else if (obj.rid != null) {
        var eventObject = this._callbackMap[obj.rid];

        if (eventObject) {
          clearTimeout(eventObject.timeout);
          delete this._callbackMap[obj.rid];

          if (eventObject.callback) {
            var rehydratedError = scErrors.hydrateError(obj.error);
            eventObject.callback(rehydratedError, obj.data);
          }
        }
      } else {
        SCEmitter.prototype.emit.call(this, 'event', 'raw', obj);
      }
    }
  };

  SCTransport.prototype._onError = function (err) {
    SCEmitter.prototype.emit.call(this, 'error', err);
  };

  SCTransport.prototype._resetPingTimeout = function () {
    var self = this;
    var now = new Date().getTime();
    clearTimeout(this._pingTimeoutTicker);
    this._pingTimeoutTicker = setTimeout(function () {
      self._onClose(4000);

      self.socket.close(4000);
    }, this.pingTimeout);
  };

  SCTransport.prototype.getBytesReceived = function () {
    return this.socket.bytesReceived;
  };

  SCTransport.prototype.close = function (code, data) {
    code = code || 1000;

    if (this.state == this.OPEN) {
      var packet = {
        code: code,
        data: data
      };
      this.emit('#disconnect', packet);

      this._onClose(code, data);

      this.socket.close(code);
    } else if (this.state == this.CONNECTING) {
      this._onClose(code, data);

      this.socket.close(code);
    }
  };

  SCTransport.prototype.emitObject = function (eventObject) {
    var simpleEventObject = {
      event: eventObject.event,
      data: eventObject.data
    };

    if (eventObject.callback) {
      simpleEventObject.cid = eventObject.cid = this.callIdGenerator();
      this._callbackMap[eventObject.cid] = eventObject;
    }

    this.sendObject(simpleEventObject);
    return eventObject.cid || null;
  };

  SCTransport.prototype._handleEventAckTimeout = function (eventObject) {
    var errorMessage = "Event response for '" + eventObject.event + "' timed out";
    var error = new TimeoutError(errorMessage);

    if (eventObject.cid) {
      delete this._callbackMap[eventObject.cid];
    }

    var callback = eventObject.callback;
    delete eventObject.callback;
    callback.call(eventObject, error, eventObject);
  };

  SCTransport.prototype.emit = function (event, data, a, b) {
    var self = this;
    var callback, options;

    if (b) {
      options = a;
      callback = b;
    } else {
      if (a instanceof Function) {
        options = {};
        callback = a;
      } else {
        options = a;
      }
    }

    var eventObject = {
      event: event,
      data: data,
      callback: callback
    };

    if (callback && !options.noTimeout) {
      eventObject.timeout = setTimeout(function () {
        self._handleEventAckTimeout(eventObject);
      }, this.options.ackTimeout);
    }

    var cid = null;

    if (this.state == this.OPEN || options.force) {
      cid = this.emitObject(eventObject);
    }

    return cid;
  };

  SCTransport.prototype.cancelPendingResponse = function (cid) {
    delete this._callbackMap[cid];
  };

  SCTransport.prototype.decode = function (message) {
    return this.codec.decode(message);
  };

  SCTransport.prototype.encode = function (object) {
    return this.codec.encode(object);
  };

  SCTransport.prototype.send = function (data) {
    if (this.socket.readyState != this.socket.OPEN) {
      this._onClose(1005);
    } else {
      this.socket.send(data);
    }
  };

  SCTransport.prototype.serializeObject = function (object) {
    var str, formatError;

    try {
      str = this.encode(object);
    } catch (err) {
      formatError = err;

      this._onError(formatError);
    }

    if (!formatError) {
      return str;
    }

    return null;
  };

  SCTransport.prototype.sendObject = function (object) {
    var str = this.serializeObject(object);

    if (str != null) {
      this.send(str);
    }
  };

  module.exports.SCTransport = SCTransport;
},373,[364,368,374,377,369],"socketcluster-client/lib/sctransport.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.decode = exports.parse = require(_dependencyMap[0], './decode');
  exports.encode = exports.stringify = require(_dependencyMap[1], './encode');
},374,[375,376],"querystring/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  module.exports = function (qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;

    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;

    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr,
          vstr,
          k,
          v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (Array.isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  };
},375,[],"querystring/decode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var stringifyPrimitive = function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  };

  module.exports = function (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';

    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return Object.keys(obj).map(function (k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

        if (Array.isArray(obj[k])) {
          return obj[k].map(function (v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);
    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
  };
},376,[],"querystring/encode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var global;

  if (typeof WorkerGlobalScope !== 'undefined') {
    global = self;
  } else {
    global = typeof window != 'undefined' && window || function () {
      return this;
    }();
  }

  var WebSocket = global.WebSocket || global.MozWebSocket;

  function ws(uri, protocols, opts) {
    var instance;

    if (protocols) {
      instance = new WebSocket(uri, protocols);
    } else {
      instance = new WebSocket(uri);
    }

    return instance;
  }

  if (WebSocket) ws.prototype = WebSocket.prototype;
  module.exports = WebSocket ? ws : null;
},377,[],"socketcluster-client/lib/ws-browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], './_source/linked-list.js');
},378,[379],"linked-list/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var errorMessage;
    errorMessage = 'An argument without append, prepend, ' + 'or detach methods was given to `List';

    function List() {
        if (arguments.length) {
            return List.from(arguments);
        }
    }

    var ListPrototype;
    ListPrototype = List.prototype;

    List.of = function () {
        return List.from.call(this, arguments);
    };

    List.from = function (items) {
        var list = new this(),
            length,
            iterator,
            item;

        if (items && (length = items.length)) {
            iterator = -1;

            while (++iterator < length) {
                item = items[iterator];

                if (item !== null && item !== undefined) {
                    list.append(item);
                }
            }
        }

        return list;
    };

    ListPrototype.head = null;
    ListPrototype.tail = null;

    ListPrototype.toArray = function () {
        var item = this.head,
            result = [];

        while (item) {
            result.push(item);
            item = item.next;
        }

        return result;
    };

    ListPrototype.prepend = function (item) {
        if (!item) {
            return false;
        }

        if (!item.append || !item.prepend || !item.detach) {
            throw new Error(errorMessage + '#prepend`.');
        }

        var self, head;
        self = this;
        head = self.head;

        if (head) {
            return head.prepend(item);
        }

        item.detach();
        item.list = self;
        self.head = item;
        return item;
    };

    ListPrototype.append = function (item) {
        if (!item) {
            return false;
        }

        if (!item.append || !item.prepend || !item.detach) {
            throw new Error(errorMessage + '#append`.');
        }

        var self, head, tail;
        self = this;
        tail = self.tail;

        if (tail) {
            return tail.append(item);
        }

        head = self.head;

        if (head) {
            return head.append(item);
        }

        item.detach();
        item.list = self;
        self.head = item;
        return item;
    };

    function ListItem() {}

    List.Item = ListItem;
    var ListItemPrototype = ListItem.prototype;
    ListItemPrototype.next = null;
    ListItemPrototype.prev = null;
    ListItemPrototype.list = null;

    ListItemPrototype.detach = function () {
        var self = this,
            list = self.list,
            prev = self.prev,
            next = self.next;

        if (!list) {
            return self;
        }

        if (list.tail === self) {
            list.tail = prev;
        }

        if (list.head === self) {
            list.head = next;
        }

        if (list.tail === list.head) {
            list.tail = null;
        }

        if (prev) {
            prev.next = next;
        }

        if (next) {
            next.prev = prev;
        }

        self.prev = self.next = self.list = null;
        return self;
    };

    ListItemPrototype.prepend = function (item) {
        if (!item || !item.append || !item.prepend || !item.detach) {
            throw new Error(errorMessage + 'Item#prepend`.');
        }

        var self = this,
            list = self.list,
            prev = self.prev;

        if (!list) {
            return false;
        }

        item.detach();

        if (prev) {
            item.prev = prev;
            prev.next = item;
        }

        item.next = self;
        item.list = list;
        self.prev = item;

        if (self === list.head) {
            list.head = item;
        }

        if (!list.tail) {
            list.tail = self;
        }

        return item;
    };

    ListItemPrototype.append = function (item) {
        if (!item || !item.append || !item.prepend || !item.detach) {
            throw new Error(errorMessage + 'Item#append`.');
        }

        var self = this,
            list = self.list,
            next = self.next;

        if (!list) {
            return false;
        }

        item.detach();

        if (next) {
            item.next = next;
            next.prev = item;
        }

        item.prev = self;
        item.list = list;
        self.next = item;

        if (self === list.tail || !list.tail) {
            list.tail = item;
        }

        return item;
    };

    module.exports = List;
},379,[],"linked-list/_source/linked-list.js");
__d(function (global, require, module, exports, _dependencyMap) {
	;

	(function (root) {
		var freeExports = typeof exports == 'object' && exports;
		var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
		var freeGlobal = typeof global == 'object' && global;

		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		var InvalidCharacterError = function InvalidCharacterError(message) {
			this.message = message;
		};

		InvalidCharacterError.prototype = new Error();
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';

		var error = function error(message) {
			throw new InvalidCharacterError(message);
		};

		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

		var decode = function decode(input) {
			input = String(input).replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;

			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}

			if (length % 4 == 1 || /[^+a-zA-Z0-9/]/.test(input)) {
				error('Invalid character: the string to be decoded is not correctly encoded.');
			}

			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;

			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;

				if (bitCounter++ % 4) {
					output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));
				}
			}

			return output;
		};

		var encode = function encode(input) {
			input = String(input);

			if (/[^\0-\xFF]/.test(input)) {
				error('The string to be encoded contains characters outside of the ' + 'Latin1 range.');
			}

			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			var length = input.length - padding;

			while (++position < length) {
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);
			}

			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';
			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';
			}

			return output;
		};

		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '0.1.0'
		};

		if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
			define(function () {
				return base64;
			});
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) {
				freeModule.exports = base64;
			} else {
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else {
			root.base64 = base64;
		}
	})(this);
},380,[],"base-64/base64.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var clone = function () {
    'use strict';

    function _instanceof(obj, type) {
      return type != null && obj instanceof type;
    }

    var nativeMap;

    try {
      nativeMap = Map;
    } catch (_) {
      nativeMap = function nativeMap() {};
    }

    var nativeSet;

    try {
      nativeSet = Set;
    } catch (_) {
      nativeSet = function nativeSet() {};
    }

    var nativePromise;

    try {
      nativePromise = Promise;
    } catch (_) {
      nativePromise = function nativePromise() {};
    }

    function clone(parent, circular, depth, prototype, includeNonEnumerable) {
      if (typeof circular === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }

      var allParents = [];
      var allChildren = [];
      var useBuffer = typeof Buffer != 'undefined';
      if (typeof circular == 'undefined') circular = true;
      if (typeof depth == 'undefined') depth = Infinity;

      function _clone(parent, depth) {
        if (parent === null) return null;
        if (depth === 0) return parent;
        var child;
        var proto;

        if (typeof parent != 'object') {
          return parent;
        }

        if (_instanceof(parent, nativeMap)) {
          child = new nativeMap();
        } else if (_instanceof(parent, nativeSet)) {
          child = new nativeSet();
        } else if (_instanceof(parent, nativePromise)) {
          child = new nativePromise(function (resolve, reject) {
            parent.then(function (value) {
              resolve(_clone(value, depth - 1));
            }, function (err) {
              reject(_clone(err, depth - 1));
            });
          });
        } else if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent)) {
          child = new Buffer(parent.length);
          parent.copy(child);
          return child;
        } else if (_instanceof(parent, Error)) {
          child = Object.create(parent);
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          } else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }

          allParents.push(parent);
          allChildren.push(child);
        }

        if (_instanceof(parent, nativeMap)) {
          parent.forEach(function (value, key) {
            var keyChild = _clone(key, depth - 1);

            var valueChild = _clone(value, depth - 1);

            child.set(keyChild, valueChild);
          });
        }

        if (_instanceof(parent, nativeSet)) {
          parent.forEach(function (value) {
            var entryChild = _clone(value, depth - 1);

            child.add(entryChild);
          });
        }

        for (var i in parent) {
          var attrs;

          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }

          child[i] = _clone(parent[i], depth - 1);
        }

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(parent);

          for (var i = 0; i < symbols.length; i++) {
            var symbol = symbols[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }

            child[symbol] = _clone(parent[symbol], depth - 1);

            if (!descriptor.enumerable) {
              Object.defineProperty(child, symbol, {
                enumerable: false
              });
            }
          }
        }

        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent);

          for (var i = 0; i < allPropertyNames.length; i++) {
            var propertyName = allPropertyNames[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

            if (descriptor && descriptor.enumerable) {
              continue;
            }

            child[propertyName] = _clone(parent[propertyName], depth - 1);
            Object.defineProperty(child, propertyName, {
              enumerable: false
            });
          }
        }

        return child;
      }

      return _clone(parent, depth);
    }

    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null) return null;

      var c = function c() {};

      c.prototype = parent;
      return new c();
    };

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }

    clone.__objToStr = __objToStr;

    function __isDate(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }

    clone.__isDate = __isDate;

    function __isArray(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }

    clone.__isArray = __isArray;

    function __isRegExp(o) {
      return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }

    clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }

    clone.__getRegExpFlags = __getRegExpFlags;
    return clone;
  }();

  if (typeof module === 'object' && module.exports) {
    module.exports = clone;
  }
},381,[],"clone/clone.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SCSocket = require(_dependencyMap[0], './scsocket');

  var scErrors = require(_dependencyMap[1], 'sc-errors');

  var InvalidArgumentsError = scErrors.InvalidArgumentsError;
  var _connections = {};

  function getMultiplexId(options) {
    var protocolPrefix = options.secure ? 'https://' : 'http://';
    var queryString = '';

    if (options.query) {
      if (typeof options.query == 'string') {
        queryString = options.query;
      } else {
        var queryArray = [];
        var queryMap = options.query;

        for (var key in queryMap) {
          if (queryMap.hasOwnProperty(key)) {
            queryArray.push(key + '=' + queryMap[key]);
          }
        }

        if (queryArray.length) {
          queryString = '?' + queryArray.join('&');
        }
      }
    }

    var host;

    if (options.host) {
      host = options.host;
    } else {
      host = options.hostname + ':' + options.port;
    }

    return protocolPrefix + host + options.path + queryString;
  }

  function isUrlSecure() {
    return global.location && location.protocol == 'https:';
  }

  function getPort(options, isSecureDefault) {
    var isSecure = options.secure == null ? isSecureDefault : options.secure;
    return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);
  }

  function connect(options) {
    var self = this;
    options = options || {};

    if (options.host && options.port) {
      throw new InvalidArgumentsError('The host option should already include the' + ' port number in the format hostname:port - Because of this, the host and port options' + ' cannot be specified together; use the hostname option instead');
    }

    var isSecureDefault = isUrlSecure();
    var opts = {
      port: getPort(options, isSecureDefault),
      hostname: global.location && location.hostname,
      path: '/socketcluster/',
      secure: isSecureDefault,
      autoConnect: true,
      autoReconnect: true,
      autoProcessSubscriptions: true,
      connectTimeout: 20000,
      ackTimeout: 10000,
      timestampRequests: false,
      timestampParam: 't',
      authEngine: null,
      authTokenName: 'socketCluster.authToken',
      binaryType: 'arraybuffer',
      multiplex: true,
      cloneData: false
    };

    for (var i in options) {
      if (options.hasOwnProperty(i)) {
        opts[i] = options[i];
      }
    }

    var multiplexId = getMultiplexId(opts);

    if (opts.multiplex === false) {
      return new SCSocket(opts);
    }

    if (_connections[multiplexId]) {
      _connections[multiplexId].connect();
    } else {
      _connections[multiplexId] = new SCSocket(opts);
    }

    return _connections[multiplexId];
  }

  function destroy(options) {
    var self = this;
    options = options || {};
    var isSecureDefault = isUrlSecure();
    var opts = {
      port: getPort(options, isSecureDefault),
      hostname: global.location && location.hostname,
      path: '/socketcluster/',
      secure: isSecureDefault
    };

    for (var i in options) {
      if (options.hasOwnProperty(i)) {
        opts[i] = options[i];
      }
    }

    var multiplexId = getMultiplexId(opts);
    var socket = _connections[multiplexId];

    if (socket) {
      socket.disconnect();
    }

    delete _connections[multiplexId];
  }

  module.exports = {
    connect: connect,
    destroy: destroy,
    connections: _connections
  };
},382,[363,369],"socketcluster-client/lib/scsocketcreator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = configureStore;

  var _reduxDevtoolsInstrument = require(_dependencyMap[0], 'redux-devtools-instrument');

  var _reduxDevtoolsInstrument2 = _interopRequireDefault(_reduxDevtoolsInstrument);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function configureStore(next, subscriber, options) {
    return (0, _reduxDevtoolsInstrument2.default)(subscriber, options)(next);
  }
},383,[384],"remote-redux-devtools/lib/configureStore.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.INIT_ACTION = exports.ActionCreators = exports.ActionTypes = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  exports.liftAction = liftAction;
  exports.liftReducerWith = liftReducerWith;
  exports.unliftState = unliftState;
  exports.unliftStore = unliftStore;
  exports.default = instrument;

  var _difference = require(_dependencyMap[0], 'lodash/difference');

  var _difference2 = _interopRequireDefault(_difference);

  var _union = require(_dependencyMap[1], 'lodash/union');

  var _union2 = _interopRequireDefault(_union);

  var _isPlainObject = require(_dependencyMap[2], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _symbolObservable = require(_dependencyMap[3], 'symbol-observable');

  var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ActionTypes = exports.ActionTypes = {
    PERFORM_ACTION: 'PERFORM_ACTION',
    RESET: 'RESET',
    ROLLBACK: 'ROLLBACK',
    COMMIT: 'COMMIT',
    SWEEP: 'SWEEP',
    TOGGLE_ACTION: 'TOGGLE_ACTION',
    SET_ACTIONS_ACTIVE: 'SET_ACTIONS_ACTIVE',
    JUMP_TO_STATE: 'JUMP_TO_STATE',
    JUMP_TO_ACTION: 'JUMP_TO_ACTION',
    REORDER_ACTION: 'REORDER_ACTION',
    IMPORT_STATE: 'IMPORT_STATE',
    LOCK_CHANGES: 'LOCK_CHANGES',
    PAUSE_RECORDING: 'PAUSE_RECORDING'
  };
  var ActionCreators = exports.ActionCreators = {
    performAction: function performAction(action) {
      if (!(0, _isPlainObject2.default)(action)) {
        throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
      }

      if (typeof action.type === 'undefined') {
        throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
      }

      return {
        type: ActionTypes.PERFORM_ACTION,
        action: action,
        timestamp: Date.now()
      };
    },
    reset: function reset() {
      return {
        type: ActionTypes.RESET,
        timestamp: Date.now()
      };
    },
    rollback: function rollback() {
      return {
        type: ActionTypes.ROLLBACK,
        timestamp: Date.now()
      };
    },
    commit: function commit() {
      return {
        type: ActionTypes.COMMIT,
        timestamp: Date.now()
      };
    },
    sweep: function sweep() {
      return {
        type: ActionTypes.SWEEP
      };
    },
    toggleAction: function toggleAction(id) {
      return {
        type: ActionTypes.TOGGLE_ACTION,
        id: id
      };
    },
    setActionsActive: function setActionsActive(start, end) {
      var active = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
      return {
        type: ActionTypes.SET_ACTIONS_ACTIVE,
        start: start,
        end: end,
        active: active
      };
    },
    reorderAction: function reorderAction(actionId, beforeActionId) {
      return {
        type: ActionTypes.REORDER_ACTION,
        actionId: actionId,
        beforeActionId: beforeActionId
      };
    },
    jumpToState: function jumpToState(index) {
      return {
        type: ActionTypes.JUMP_TO_STATE,
        index: index
      };
    },
    jumpToAction: function jumpToAction(actionId) {
      return {
        type: ActionTypes.JUMP_TO_ACTION,
        actionId: actionId
      };
    },
    importState: function importState(nextLiftedState, noRecompute) {
      return {
        type: ActionTypes.IMPORT_STATE,
        nextLiftedState: nextLiftedState,
        noRecompute: noRecompute
      };
    },
    lockChanges: function lockChanges(status) {
      return {
        type: ActionTypes.LOCK_CHANGES,
        status: status
      };
    },
    pauseRecording: function pauseRecording(status) {
      return {
        type: ActionTypes.PAUSE_RECORDING,
        status: status
      };
    }
  };
  var INIT_ACTION = exports.INIT_ACTION = {
    type: '@@INIT'
  };

  function computeWithTryCatch(reducer, action, state) {
    var nextState = state;
    var nextError = void 0;

    try {
      nextState = reducer(state, action);
    } catch (err) {
      nextError = err.toString();

      if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof window.chrome !== 'undefined' || typeof window.process !== 'undefined' && window.process.type === 'renderer')) {
        setTimeout(function () {
          throw err;
        });
      } else {
        console.error(err);
      }
    }

    return {
      state: nextState,
      error: nextError
    };
  }

  function computeNextEntry(reducer, action, state, shouldCatchErrors) {
    if (!shouldCatchErrors) {
      return {
        state: reducer(state, action)
      };
    }

    return computeWithTryCatch(reducer, action, state);
  }

  function recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, shouldCatchErrors) {
    if (!computedStates || minInvalidatedStateIndex === -1 || minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {
      return computedStates;
    }

    var nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);

    for (var i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {
      var actionId = stagedActionIds[i];
      var action = actionsById[actionId].action;
      var previousEntry = nextComputedStates[i - 1];
      var previousState = previousEntry ? previousEntry.state : committedState;
      var shouldSkip = skippedActionIds.indexOf(actionId) > -1;
      var entry = void 0;

      if (shouldSkip) {
        entry = previousEntry;
      } else {
        if (shouldCatchErrors && previousEntry && previousEntry.error) {
          entry = {
            state: previousState,
            error: 'Interrupted by an error up the chain'
          };
        } else {
          entry = computeNextEntry(reducer, action, previousState, shouldCatchErrors);
        }
      }

      nextComputedStates.push(entry);
    }

    return nextComputedStates;
  }

  function liftAction(action) {
    return ActionCreators.performAction(action);
  }

  function liftReducerWith(reducer, initialCommittedState, monitorReducer, options) {
    var initialLiftedState = {
      monitorState: monitorReducer(undefined, {}),
      nextActionId: 1,
      actionsById: {
        0: liftAction(INIT_ACTION)
      },
      stagedActionIds: [0],
      skippedActionIds: [],
      committedState: initialCommittedState,
      currentStateIndex: 0,
      computedStates: [],
      isLocked: options.shouldStartLocked === true,
      isPaused: options.shouldRecordChanges === false
    };
    return function (liftedState, liftedAction) {
      var _ref = liftedState || initialLiftedState;

      var monitorState = _ref.monitorState;
      var actionsById = _ref.actionsById;
      var nextActionId = _ref.nextActionId;
      var stagedActionIds = _ref.stagedActionIds;
      var skippedActionIds = _ref.skippedActionIds;
      var committedState = _ref.committedState;
      var currentStateIndex = _ref.currentStateIndex;
      var computedStates = _ref.computedStates;
      var isLocked = _ref.isLocked;
      var isPaused = _ref.isPaused;

      if (!liftedState) {
        actionsById = _extends({}, actionsById);
      }

      function commitExcessActions(n) {
        var excess = n;
        var idsToDelete = stagedActionIds.slice(1, excess + 1);

        for (var i = 0; i < idsToDelete.length; i++) {
          if (computedStates[i + 1].error) {
            excess = i;
            idsToDelete = stagedActionIds.slice(1, excess + 1);
            break;
          } else {
            delete actionsById[idsToDelete[i]];
          }
        }

        skippedActionIds = skippedActionIds.filter(function (id) {
          return idsToDelete.indexOf(id) === -1;
        });
        stagedActionIds = [0].concat(stagedActionIds.slice(excess + 1));
        committedState = computedStates[excess].state;
        computedStates = computedStates.slice(excess);
        currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;
      }

      function computePausedAction(shouldInit) {
        var _extends2;

        var computedState = void 0;

        if (shouldInit) {
          computedState = computedStates[currentStateIndex];
          monitorState = monitorReducer(monitorState, liftedAction);
        } else {
          computedState = computeNextEntry(reducer, liftedAction.action, computedStates[currentStateIndex].state, false);
        }

        if (!options.pauseActionType || nextActionId === 1) {
          return {
            monitorState: monitorState,
            actionsById: {
              0: liftAction(INIT_ACTION)
            },
            nextActionId: 1,
            stagedActionIds: [0],
            skippedActionIds: [],
            committedState: computedState.state,
            currentStateIndex: 0,
            computedStates: [computedState],
            isLocked: isLocked,
            isPaused: true
          };
        }

        if (shouldInit) {
          if (currentStateIndex === stagedActionIds.length - 1) {
            currentStateIndex++;
          }

          stagedActionIds = [].concat(stagedActionIds, [nextActionId]);
          nextActionId++;
        }

        return {
          monitorState: monitorState,
          actionsById: _extends({}, actionsById, (_extends2 = {}, _extends2[nextActionId - 1] = liftAction({
            type: options.pauseActionType
          }), _extends2)),
          nextActionId: nextActionId,
          stagedActionIds: stagedActionIds,
          skippedActionIds: skippedActionIds,
          committedState: committedState,
          currentStateIndex: currentStateIndex,
          computedStates: [].concat(computedStates.slice(0, stagedActionIds.length - 1), [computedState]),
          isLocked: isLocked,
          isPaused: true
        };
      }

      var minInvalidatedStateIndex = 0;

      if (liftedAction.type.indexOf('@@redux/INIT') === 0) {
        if (options.shouldHotReload === false) {
          actionsById = {
            0: liftAction(INIT_ACTION)
          };
          nextActionId = 1;
          stagedActionIds = [0];
          skippedActionIds = [];
          committedState = computedStates.length === 0 ? initialCommittedState : computedStates[currentStateIndex].state;
          currentStateIndex = 0;
          computedStates = [];
        }

        minInvalidatedStateIndex = 0;

        if (options.maxAge && stagedActionIds.length > options.maxAge) {
          computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);
          commitExcessActions(stagedActionIds.length - options.maxAge);
          minInvalidatedStateIndex = Infinity;
        }
      } else {
        switch (liftedAction.type) {
          case ActionTypes.PERFORM_ACTION:
            {
              if (isLocked) return liftedState || initialLiftedState;
              if (isPaused) return computePausedAction();

              if (options.maxAge && stagedActionIds.length === options.maxAge) {
                commitExcessActions(1);
              }

              if (currentStateIndex === stagedActionIds.length - 1) {
                currentStateIndex++;
              }

              var actionId = nextActionId++;
              actionsById[actionId] = liftedAction;
              stagedActionIds = [].concat(stagedActionIds, [actionId]);
              minInvalidatedStateIndex = stagedActionIds.length - 1;
              break;
            }

          case ActionTypes.RESET:
            {
              actionsById = {
                0: liftAction(INIT_ACTION)
              };
              nextActionId = 1;
              stagedActionIds = [0];
              skippedActionIds = [];
              committedState = initialCommittedState;
              currentStateIndex = 0;
              computedStates = [];
              break;
            }

          case ActionTypes.COMMIT:
            {
              actionsById = {
                0: liftAction(INIT_ACTION)
              };
              nextActionId = 1;
              stagedActionIds = [0];
              skippedActionIds = [];
              committedState = computedStates[currentStateIndex].state;
              currentStateIndex = 0;
              computedStates = [];
              break;
            }

          case ActionTypes.ROLLBACK:
            {
              actionsById = {
                0: liftAction(INIT_ACTION)
              };
              nextActionId = 1;
              stagedActionIds = [0];
              skippedActionIds = [];
              currentStateIndex = 0;
              computedStates = [];
              break;
            }

          case ActionTypes.TOGGLE_ACTION:
            {
              var _ret = function () {
                var actionId = liftedAction.id;
                var index = skippedActionIds.indexOf(actionId);

                if (index === -1) {
                  skippedActionIds = [actionId].concat(skippedActionIds);
                } else {
                  skippedActionIds = skippedActionIds.filter(function (id) {
                    return id !== actionId;
                  });
                }

                minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);
                return 'break';
              }();

              if (_ret === 'break') break;
            }

          case ActionTypes.SET_ACTIONS_ACTIVE:
            {
              var start = liftedAction.start;
              var end = liftedAction.end;
              var active = liftedAction.active;
              var actionIds = [];

              for (var i = start; i < end; i++) {
                actionIds.push(i);
              }

              if (active) {
                skippedActionIds = (0, _difference2.default)(skippedActionIds, actionIds);
              } else {
                skippedActionIds = (0, _union2.default)(skippedActionIds, actionIds);
              }

              minInvalidatedStateIndex = stagedActionIds.indexOf(start);
              break;
            }

          case ActionTypes.JUMP_TO_STATE:
            {
              currentStateIndex = liftedAction.index;
              minInvalidatedStateIndex = Infinity;
              break;
            }

          case ActionTypes.JUMP_TO_ACTION:
            {
              var _index = stagedActionIds.indexOf(liftedAction.actionId);

              if (_index !== -1) currentStateIndex = _index;
              minInvalidatedStateIndex = Infinity;
              break;
            }

          case ActionTypes.SWEEP:
            {
              stagedActionIds = (0, _difference2.default)(stagedActionIds, skippedActionIds);
              skippedActionIds = [];
              currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);
              break;
            }

          case ActionTypes.REORDER_ACTION:
            {
              var _actionId = liftedAction.actionId;
              var idx = stagedActionIds.indexOf(_actionId);
              if (idx < 1) break;
              var beforeActionId = liftedAction.beforeActionId;
              var newIdx = stagedActionIds.indexOf(beforeActionId);

              if (newIdx < 1) {
                var count = stagedActionIds.length;
                newIdx = beforeActionId > stagedActionIds[count - 1] ? count : 1;
              }

              var diff = idx - newIdx;

              if (diff > 0) {
                stagedActionIds = [].concat(stagedActionIds.slice(0, newIdx), [_actionId], stagedActionIds.slice(newIdx, idx), stagedActionIds.slice(idx + 1));
                minInvalidatedStateIndex = newIdx;
              } else if (diff < 0) {
                stagedActionIds = [].concat(stagedActionIds.slice(0, idx), stagedActionIds.slice(idx + 1, newIdx), [_actionId], stagedActionIds.slice(newIdx));
                minInvalidatedStateIndex = idx;
              }

              break;
            }

          case ActionTypes.IMPORT_STATE:
            {
              if (Array.isArray(liftedAction.nextLiftedState)) {
                actionsById = {
                  0: liftAction(INIT_ACTION)
                };
                nextActionId = 1;
                stagedActionIds = [0];
                skippedActionIds = [];
                currentStateIndex = liftedAction.nextLiftedState.length;
                computedStates = [];
                committedState = liftedAction.preloadedState;
                minInvalidatedStateIndex = 0;
                liftedAction.nextLiftedState.forEach(function (action) {
                  actionsById[nextActionId] = liftAction(action);
                  stagedActionIds.push(nextActionId);
                  nextActionId++;
                });
              } else {
                var _liftedAction$nextLif = liftedAction.nextLiftedState;
                monitorState = _liftedAction$nextLif.monitorState;
                actionsById = _liftedAction$nextLif.actionsById;
                nextActionId = _liftedAction$nextLif.nextActionId;
                stagedActionIds = _liftedAction$nextLif.stagedActionIds;
                skippedActionIds = _liftedAction$nextLif.skippedActionIds;
                committedState = _liftedAction$nextLif.committedState;
                currentStateIndex = _liftedAction$nextLif.currentStateIndex;
                computedStates = _liftedAction$nextLif.computedStates;

                if (liftedAction.noRecompute) {
                  minInvalidatedStateIndex = Infinity;
                }
              }

              break;
            }

          case ActionTypes.LOCK_CHANGES:
            {
              isLocked = liftedAction.status;
              minInvalidatedStateIndex = Infinity;
              break;
            }

          case ActionTypes.PAUSE_RECORDING:
            {
              isPaused = liftedAction.status;

              if (isPaused) {
                return computePausedAction(true);
              }

              actionsById = {
                0: liftAction(INIT_ACTION)
              };
              nextActionId = 1;
              stagedActionIds = [0];
              skippedActionIds = [];
              committedState = computedStates[currentStateIndex].state;
              currentStateIndex = 0;
              computedStates = [];
              break;
            }

          default:
            {
              minInvalidatedStateIndex = Infinity;
              break;
            }
        }
      }

      computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);
      monitorState = monitorReducer(monitorState, liftedAction);
      return {
        monitorState: monitorState,
        actionsById: actionsById,
        nextActionId: nextActionId,
        stagedActionIds: stagedActionIds,
        skippedActionIds: skippedActionIds,
        committedState: committedState,
        currentStateIndex: currentStateIndex,
        computedStates: computedStates,
        isLocked: isLocked,
        isPaused: isPaused
      };
    };
  }

  function unliftState(liftedState) {
    var computedStates = liftedState.computedStates;
    var currentStateIndex = liftedState.currentStateIndex;
    var state = computedStates[currentStateIndex].state;
    return state;
  }

  function unliftStore(liftedStore, liftReducer) {
    var _extends3;

    var lastDefinedState = void 0;

    function getState() {
      var state = unliftState(liftedStore.getState());

      if (state !== undefined) {
        lastDefinedState = state;
      }

      return lastDefinedState;
    }

    return _extends({}, liftedStore, (_extends3 = {
      liftedStore: liftedStore,
      dispatch: function dispatch(action) {
        liftedStore.dispatch(liftAction(action));
        return action;
      },
      getState: getState,
      replaceReducer: function replaceReducer(nextReducer) {
        liftedStore.replaceReducer(liftReducer(nextReducer));
      }
    }, _extends3[_symbolObservable2.default] = function () {
      return _extends({}, liftedStore[_symbolObservable2.default](), {
        subscribe: function subscribe(observer) {
          if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object') {
            throw new TypeError('Expected the observer to be an object.');
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = liftedStore.subscribe(observeState);
          return {
            unsubscribe: unsubscribe
          };
        }
      });
    }, _extends3));
  }

  function instrument() {
    var monitorReducer = arguments.length <= 0 || arguments[0] === undefined ? function () {
      return null;
    } : arguments[0];
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (options.maxAge != null && options.maxAge < 2) {
      throw new Error('DevTools.instrument({ maxAge }) option, if specified, ' + 'may not be less than 2.');
    }

    return function (createStore) {
      return function (reducer, initialState, enhancer) {
        function liftReducer(r) {
          if (typeof r !== 'function') {
            if (r && typeof r.default === 'function') {
              throw new Error('Expected the reducer to be a function. ' + 'Instead got an object with a "default" field. ' + 'Did you pass a module instead of the default export? ' + 'Try passing require(...).default instead.');
            }

            throw new Error('Expected the reducer to be a function.');
          }

          return liftReducerWith(r, initialState, monitorReducer, options);
        }

        var liftedStore = createStore(liftReducer(reducer), enhancer);

        if (liftedStore.liftedStore) {
          throw new Error('DevTools instrumentation should not be applied more than once. ' + 'Check your store configuration.');
        }

        return unliftStore(liftedStore, liftReducer);
      };
    };
  }
},384,[385,449,338,348],"redux-devtools-instrument/lib/instrument.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseDifference = require(_dependencyMap[0], './_baseDifference'),
        baseFlatten = require(_dependencyMap[1], './_baseFlatten'),
        baseRest = require(_dependencyMap[2], './_baseRest'),
        isArrayLikeObject = require(_dependencyMap[3], './isArrayLikeObject');

    var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
},385,[386,431,437,446],"lodash/difference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SetCache = require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = require(_dependencyMap[2], './_arrayIncludesWith'),
      arrayMap = require(_dependencyMap[3], './_arrayMap'),
      baseUnary = require(_dependencyMap[4], './_baseUnary'),
      cacheHas = require(_dependencyMap[5], './_cacheHas');

  var LARGE_ARRAY_SIZE = 200;

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseDifference;
},386,[387,422,427,428,429,430],"lodash/_baseDifference.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var MapCache = require(_dependencyMap[0], './_MapCache'),
        setCacheAdd = require(_dependencyMap[1], './_setCacheAdd'),
        setCacheHas = require(_dependencyMap[2], './_setCacheHas');

    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
            this.add(values[index]);
        }
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
},387,[388,420,421],"lodash/_SetCache.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var mapCacheClear = require(_dependencyMap[0], './_mapCacheClear'),
        mapCacheDelete = require(_dependencyMap[1], './_mapCacheDelete'),
        mapCacheGet = require(_dependencyMap[2], './_mapCacheGet'),
        mapCacheHas = require(_dependencyMap[3], './_mapCacheHas'),
        mapCacheSet = require(_dependencyMap[4], './_mapCacheSet');

    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
},388,[389,414,417,418,419],"lodash/_MapCache.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Hash = require(_dependencyMap[0], './_Hash'),
      ListCache = require(_dependencyMap[1], './_ListCache'),
      Map = require(_dependencyMap[2], './_Map');

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},389,[390,405,413],"lodash/_mapCacheClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var hashClear = require(_dependencyMap[0], './_hashClear'),
        hashDelete = require(_dependencyMap[1], './_hashDelete'),
        hashGet = require(_dependencyMap[2], './_hashGet'),
        hashHas = require(_dependencyMap[3], './_hashHas'),
        hashSet = require(_dependencyMap[4], './_hashSet');

    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
},390,[391,401,402,403,404],"lodash/_Hash.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},391,[392],"lodash/_hashClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getNative = require(_dependencyMap[0], './_getNative');

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},392,[393],"lodash/_nativeCreate.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsNative = require(_dependencyMap[0], './_baseIsNative'),
      getValue = require(_dependencyMap[1], './_getValue');

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},393,[394,400],"lodash/_getNative.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isFunction = require(_dependencyMap[0], './isFunction'),
      isMasked = require(_dependencyMap[1], './_isMasked'),
      isObject = require(_dependencyMap[2], './isObject'),
      toSource = require(_dependencyMap[3], './_toSource');

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},394,[395,397,396,399],"lodash/_baseIsNative.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
        isObject = require(_dependencyMap[1], './isObject');

    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    module.exports = isFunction;
},395,[339,396],"lodash/isFunction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},396,[],"lodash/isObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var coreJsData = require(_dependencyMap[0], './_coreJsData');

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},397,[398],"lodash/_isMasked.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},398,[341],"lodash/_coreJsData.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},399,[],"lodash/_toSource.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},400,[],"lodash/_getValue.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},401,[],"lodash/_hashDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},402,[392],"lodash/_hashGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},403,[392],"lodash/_hashHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var nativeCreate = require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},404,[392],"lodash/_hashSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var listCacheClear = require(_dependencyMap[0], './_listCacheClear'),
        listCacheDelete = require(_dependencyMap[1], './_listCacheDelete'),
        listCacheGet = require(_dependencyMap[2], './_listCacheGet'),
        listCacheHas = require(_dependencyMap[3], './_listCacheHas'),
        listCacheSet = require(_dependencyMap[4], './_listCacheSet');

    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
},405,[406,407,410,411,412],"lodash/_ListCache.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},406,[],"lodash/_listCacheClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},407,[408],"lodash/_listCacheDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var eq = require(_dependencyMap[0], './eq');

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},408,[409],"lodash/_assocIndexOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},409,[],"lodash/eq.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},410,[408],"lodash/_listCacheGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},411,[408],"lodash/_listCacheHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assocIndexOf = require(_dependencyMap[0], './_assocIndexOf');

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},412,[408],"lodash/_listCacheSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Map = getNative(root, 'Map');
    module.exports = Map;
},413,[393,341],"lodash/_Map.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getMapData = require(_dependencyMap[0], './_getMapData');

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},414,[415],"lodash/_mapCacheDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isKeyable = require(_dependencyMap[0], './_isKeyable');

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},415,[416],"lodash/_getMapData.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},416,[],"lodash/_isKeyable.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getMapData = require(_dependencyMap[0], './_getMapData');

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},417,[415],"lodash/_mapCacheGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getMapData = require(_dependencyMap[0], './_getMapData');

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},418,[415],"lodash/_mapCacheHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getMapData = require(_dependencyMap[0], './_getMapData');

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},419,[415],"lodash/_mapCacheSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},420,[],"lodash/_setCacheAdd.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},421,[],"lodash/_setCacheHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIndexOf = require(_dependencyMap[0], './_baseIndexOf');

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  module.exports = arrayIncludes;
},422,[423],"lodash/_arrayIncludes.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseFindIndex = require(_dependencyMap[0], './_baseFindIndex'),
        baseIsNaN = require(_dependencyMap[1], './_baseIsNaN'),
        strictIndexOf = require(_dependencyMap[2], './_strictIndexOf');

    function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    module.exports = baseIndexOf;
},423,[424,425,426],"lodash/_baseIndexOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  module.exports = baseFindIndex;
},424,[],"lodash/_baseFindIndex.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseIsNaN(value) {
    return value !== value;
  }

  module.exports = baseIsNaN;
},425,[],"lodash/_baseIsNaN.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  module.exports = strictIndexOf;
},426,[],"lodash/_strictIndexOf.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  module.exports = arrayIncludesWith;
},427,[],"lodash/_arrayIncludesWith.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},428,[],"lodash/_arrayMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},429,[],"lodash/_baseUnary.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},430,[],"lodash/_cacheHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayPush = require(_dependencyMap[0], './_arrayPush'),
      isFlattenable = require(_dependencyMap[1], './_isFlattenable');

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},431,[432,433],"lodash/_baseFlatten.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},432,[],"lodash/_arrayPush.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var Symbol = require(_dependencyMap[0], './_Symbol'),
        isArguments = require(_dependencyMap[1], './isArguments'),
        isArray = require(_dependencyMap[2], './isArray');

    var spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;

    function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    module.exports = isFlattenable;
},433,[340,434,436],"lodash/_isFlattenable.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseIsArguments = require(_dependencyMap[0], './_baseIsArguments'),
        isObjectLike = require(_dependencyMap[1], './isObjectLike');

    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    module.exports = isArguments;
},434,[435,347],"lodash/isArguments.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},435,[339,347],"lodash/_baseIsArguments.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},436,[],"lodash/isArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var identity = require(_dependencyMap[0], './identity'),
      overRest = require(_dependencyMap[1], './_overRest'),
      setToString = require(_dependencyMap[2], './_setToString');

  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  module.exports = baseRest;
},437,[438,439,441],"lodash/_baseRest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},438,[],"lodash/identity.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var apply = require(_dependencyMap[0], './_apply');

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},439,[440],"lodash/_overRest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},440,[],"lodash/_apply.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseSetToString = require(_dependencyMap[0], './_baseSetToString'),
      shortOut = require(_dependencyMap[1], './_shortOut');

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},441,[442,445],"lodash/_setToString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var constant = require(_dependencyMap[0], './constant'),
      defineProperty = require(_dependencyMap[1], './_defineProperty'),
      identity = require(_dependencyMap[2], './identity');

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},442,[443,444,438],"lodash/_baseSetToString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},443,[],"lodash/constant.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getNative = require(_dependencyMap[0], './_getNative');

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},444,[393],"lodash/_defineProperty.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},445,[],"lodash/_shortOut.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArrayLike = require(_dependencyMap[0], './isArrayLike'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
},446,[447,347],"lodash/isArrayLikeObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isFunction = require(_dependencyMap[0], './isFunction'),
      isLength = require(_dependencyMap[1], './isLength');

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},447,[395,448],"lodash/isArrayLike.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},448,[],"lodash/isLength.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseFlatten = require(_dependencyMap[0], './_baseFlatten'),
      baseRest = require(_dependencyMap[1], './_baseRest'),
      baseUniq = require(_dependencyMap[2], './_baseUniq'),
      isArrayLikeObject = require(_dependencyMap[3], './isArrayLikeObject');

  var union = baseRest(function (arrays) {
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });
  module.exports = union;
},449,[431,437,450,446],"lodash/union.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SetCache = require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = require(_dependencyMap[2], './_arrayIncludesWith'),
      cacheHas = require(_dependencyMap[3], './_cacheHas'),
      createSet = require(_dependencyMap[4], './_createSet'),
      setToArray = require(_dependencyMap[5], './_setToArray');

  var LARGE_ARRAY_SIZE = 200;

  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);

      if (set) {
        return setToArray(set);
      }

      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var seenIndex = seen.length;

        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }

        if (iteratee) {
          seen.push(computed);
        }

        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseUniq;
},450,[387,422,427,430,451,454],"lodash/_baseUniq.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Set = require(_dependencyMap[0], './_Set'),
      noop = require(_dependencyMap[1], './noop'),
      setToArray = require(_dependencyMap[2], './_setToArray');

  var INFINITY = 1 / 0;
  var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
    return new Set(values);
  };
  module.exports = createSet;
},451,[452,453,454],"lodash/_createSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Set = getNative(root, 'Set');
    module.exports = Set;
},452,[393,341],"lodash/_Set.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function noop() {}

  module.exports = noop;
},453,[],"lodash/noop.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},454,[],"lodash/_setToArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  var defaultSocketOptions = exports.defaultSocketOptions = {
    secure: true,
    hostname: 'remotedev.io',
    port: 443,
    autoReconnect: true,
    autoReconnectOptions: {
      randomness: 30000
    }
  };
},455,[],"remote-redux-devtools/lib/constants.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function getByRemoteConfig(hostname) {
    var remoteModuleConfig = typeof window !== 'undefined' && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;
    if (!Array.isArray(remoteModuleConfig) || hostname !== 'localhost' && hostname !== '127.0.0.1') return hostname;
    var constants = (remoteModuleConfig.find(getConstants) || [])[1];

    if (constants) {
      var serverHost = constants.ServerHost || hostname;
      return serverHost.split(':')[0];
    }

    return hostname;
  }

  function getConstants(config) {
    return config && (config[0] === 'AndroidConstants' || config[0] === 'PlatformConstants');
  }

  module.exports = function (hostname) {
    if (typeof __fbBatchedBridge !== 'object' || hostname !== 'localhost' && hostname !== '127.0.0.1') {
      return hostname;
    }

    hostname = getByRemoteConfig(hostname);
    var originalWarn = console.warn;

    console.warn = function () {
      if (arguments[0] && arguments[0].indexOf('Requiring module \'NativeModules\' by name') > -1) return;
      return originalWarn.apply(console, arguments);
    };

    var NativeModules;
    var PlatformConstants;
    var AndroidConstants;

    if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function') {
      return hostname;
    }

    NativeModules = window.require('NativeModules');
    console.warn = originalWarn;

    if (!NativeModules || !NativeModules.PlatformConstants && !NativeModules.AndroidConstants) {
      return hostname;
    }

    PlatformConstants = NativeModules.PlatformConstants;
    AndroidConstants = NativeModules.AndroidConstants;
    var serverHost = (PlatformConstants ? PlatformConstants.ServerHost : AndroidConstants.ServerHost) || hostname;
    return serverHost.split(':')[0];
  };
},456,[],"rn-host-detect/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  exports.generateId = generateId;
  exports.getMethods = getMethods;
  exports.getActionsArray = getActionsArray;
  exports.evalAction = evalAction;
  exports.evalMethod = evalMethod;
  exports.stringify = stringify;
  exports.getSeralizeParameter = getSeralizeParameter;

  var _getParams = require(_dependencyMap[0], 'get-params');

  var _getParams2 = _interopRequireDefault(_getParams);

  var _jsan = require(_dependencyMap[1], 'jsan');

  var _jsan2 = _interopRequireDefault(_jsan);

  var _shortid = require(_dependencyMap[2], 'shortid');

  var _shortid2 = _interopRequireDefault(_shortid);

  var _serialize = require(_dependencyMap[3], 'remotedev-serialize/immutable/serialize');

  var _serialize2 = _interopRequireDefault(_serialize);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function generateId(id) {
    return id || _shortid2.default.generate();
  }

  function flatTree(obj) {
    var namespace = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var functions = [];
    Object.keys(obj).forEach(function (key) {
      var prop = obj[key];

      if (typeof prop === 'function') {
        functions.push({
          name: namespace + (key || prop.name || 'anonymous'),
          func: prop,
          args: (0, _getParams2.default)(prop)
        });
      } else if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
        functions = functions.concat(flatTree(prop, namespace + key + '.'));
      }
    });
    return functions;
  }

  function getMethods(obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return undefined;
    var functions = void 0;
    var m = void 0;
    if (obj.__proto__) m = obj.__proto__.__proto__;
    if (!m) m = obj;
    Object.getOwnPropertyNames(m).forEach(function (key) {
      var propDescriptor = Object.getOwnPropertyDescriptor(m, key);
      if (!propDescriptor || 'get' in propDescriptor || 'set' in propDescriptor) return;
      var prop = m[key];

      if (typeof prop === 'function' && key !== 'constructor') {
        if (!functions) functions = [];
        functions.push({
          name: key || prop.name || 'anonymous',
          args: (0, _getParams2.default)(prop)
        });
      }
    });
    return functions;
  }

  function getActionsArray(actionCreators) {
    if (Array.isArray(actionCreators)) return actionCreators;
    return flatTree(actionCreators);
  }

  var interpretArg = function interpretArg(arg) {
    return new Function('return ' + arg)();
  };

  function evalArgs(inArgs, restArgs) {
    var args = inArgs.map(interpretArg);
    if (!restArgs) return args;
    var rest = interpretArg(restArgs);
    if (Array.isArray(rest)) return args.concat.apply(args, rest);
    throw new Error('rest must be an array');
  }

  function evalAction(action, actionCreators) {
    if (typeof action === 'string') {
      return new Function('return ' + action)();
    }

    var actionCreator = actionCreators[action.selected].func;
    var args = evalArgs(action.args, action.rest);
    return actionCreator.apply(undefined, args);
  }

  function evalMethod(action, obj) {
    if (typeof action === 'string') {
      return new Function('return ' + action).call(obj);
    }

    var args = evalArgs(action.args, action.rest);
    return new Function('args', 'return this.' + action.name + '(args)').apply(obj, args);
  }

  function tryCatchStringify(obj) {
    try {
      return JSON.stringify(obj);
    } catch (err) {
      if (process.env.NODE_ENV !== 'production') console.log('Failed to stringify', err);
      return _jsan2.default.stringify(obj, null, null, {
        circular: '[CIRCULAR]'
      });
    }
  }

  function stringify(obj, serialize) {
    if (typeof serialize === 'undefined') {
      return tryCatchStringify(obj);
    }

    if (serialize === true) {
      return _jsan2.default.stringify(obj, function (key, value) {
        if (value && typeof value.toJS === 'function') return value.toJS();
        return value;
      }, null, true);
    }

    return _jsan2.default.stringify(obj, serialize.replacer, null, serialize.options);
  }

  function getSeralizeParameter(config, param) {
    var serialize = config.serialize;

    if (serialize) {
      if (serialize === true) return {
        options: true
      };

      if (serialize.immutable) {
        return {
          replacer: (0, _serialize2.default)(serialize.immutable, serialize.refs).replacer,
          options: serialize.options || true
        };
      }

      if (!serialize.replacer) return {
        options: serialize.options
      };
      return {
        replacer: serialize.replacer,
        options: serialize.options || true
      };
    }

    var value = config[param];
    if (typeof value === 'undefined') return undefined;
    console.warn('`' + param + '` parameter for Redux DevTools Extension is deprecated. Use `serialize` parameter instead: https://github.com/zalmoxisus/redux-devtools-extension/releases/tag/v2.12.1');
    if (typeof serializeState === 'boolean') return {
      options: value
    };
    if (typeof serializeState === 'function') return {
      replacer: value
    };
    return value;
  }
},457,[458,357,459,469],"remotedev-utils/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
	var GetParams = function GetParams(func) {
		'use strict';

		if (typeof func !== 'function') {
			return [];
		}

		var patternComments = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
		var patternArguments = /([^\s,]+)/g;
		var funcString = func.toString().replace(patternComments, '');
		var result = funcString.slice(funcString.indexOf('(') + 1, funcString.indexOf(')')).match(patternArguments);

		if (result === null) {
			return [];
		}

		return result;
	};

	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = GetParams;
	}

	if (typeof window !== 'undefined') {
		window.GetParams = GetParams;
	}
},458,[],"get-params/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0], './lib/index');
},459,[460],"shortid/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var alphabet = require(_dependencyMap[0], './alphabet');

  var encode = require(_dependencyMap[1], './encode');

  var decode = require(_dependencyMap[2], './decode');

  var build = require(_dependencyMap[3], './build');

  var isValid = require(_dependencyMap[4], './is-valid');

  var clusterWorkerId = require(_dependencyMap[5], './util/cluster-worker-id') || 0;

  function seed(seedValue) {
    alphabet.seed(seedValue);
    return module.exports;
  }

  function worker(workerId) {
    clusterWorkerId = workerId;
    return module.exports;
  }

  function characters(newCharacters) {
    if (newCharacters !== undefined) {
      alphabet.characters(newCharacters);
    }

    return alphabet.shuffled();
  }

  function generate() {
    return build(clusterWorkerId);
  }

  module.exports = generate;
  module.exports.generate = generate;
  module.exports.seed = seed;
  module.exports.worker = worker;
  module.exports.characters = characters;
  module.exports.decode = decode;
  module.exports.isValid = isValid;
},460,[461,463,465,466,467,468],"shortid/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var randomFromSeed = require(_dependencyMap[0], './random/random-from-seed');

    var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet;
    var previousSeed;
    var shuffled;

    function reset() {
        shuffled = false;
    }

    function setCharacters(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet !== ORIGINAL) {
                alphabet = ORIGINAL;
                reset();
            }

            return;
        }

        if (_alphabet_ === alphabet) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function (item, ind, arr) {
            return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet = _alphabet_;
        reset();
    }

    function characters(_alphabet_) {
        setCharacters(_alphabet_);
        return alphabet;
    }

    function setSeed(seed) {
        randomFromSeed.seed(seed);

        if (previousSeed !== seed) {
            reset();
            previousSeed = seed;
        }
    }

    function shuffle() {
        if (!alphabet) {
            setCharacters(ORIGINAL);
        }

        var sourceArray = alphabet.split('');
        var targetArray = [];
        var r = randomFromSeed.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }

        return targetArray.join('');
    }

    function getShuffled() {
        if (shuffled) {
            return shuffled;
        }

        shuffled = shuffle();
        return shuffled;
    }

    function lookup(index) {
        var alphabetShuffled = getShuffled();
        return alphabetShuffled[index];
    }

    module.exports = {
        characters: characters,
        seed: setSeed,
        lookup: lookup,
        shuffled: getShuffled
    };
},461,[462],"shortid/lib/alphabet.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var seed = 1;

    function getNextValue() {
        seed = (seed * 9301 + 49297) % 233280;
        return seed / 233280.0;
    }

    function setSeed(_seed_) {
        seed = _seed_;
    }

    module.exports = {
        nextValue: getNextValue,
        seed: setSeed
    };
},462,[],"shortid/lib/random/random-from-seed.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var randomByte = require(_dependencyMap[0], './random/random-byte');

    function encode(lookup, number) {
        var loopCounter = 0;
        var done;
        var str = '';

        while (!done) {
            str = str + lookup(number >> 4 * loopCounter & 0x0f | randomByte());
            done = number < Math.pow(16, loopCounter + 1);
            loopCounter++;
        }

        return str;
    }

    module.exports = encode;
},463,[464],"shortid/lib/encode.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var crypto = typeof window === 'object' && (window.crypto || window.msCrypto);

    function randomByte() {
        if (!crypto || !crypto.getRandomValues) {
            return Math.floor(Math.random() * 256) & 0x30;
        }

        var dest = new Uint8Array(1);
        crypto.getRandomValues(dest);
        return dest[0] & 0x30;
    }

    module.exports = randomByte;
},464,[],"shortid/lib/random/random-byte-browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var alphabet = require(_dependencyMap[0], './alphabet');

    function decode(id) {
        var characters = alphabet.shuffled();
        return {
            version: characters.indexOf(id.substr(0, 1)) & 0x0f,
            worker: characters.indexOf(id.substr(1, 1)) & 0x0f
        };
    }

    module.exports = decode;
},465,[461],"shortid/lib/decode.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var encode = require(_dependencyMap[0], './encode');

    var alphabet = require(_dependencyMap[1], './alphabet');

    var REDUCE_TIME = 1459707606518;
    var version = 6;
    var counter;
    var previousSeconds;

    function build(clusterWorkerId) {
        var str = '';
        var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

        if (seconds === previousSeconds) {
            counter++;
        } else {
            counter = 0;
            previousSeconds = seconds;
        }

        str = str + encode(alphabet.lookup, version);
        str = str + encode(alphabet.lookup, clusterWorkerId);

        if (counter > 0) {
            str = str + encode(alphabet.lookup, counter);
        }

        str = str + encode(alphabet.lookup, seconds);
        return str;
    }

    module.exports = build;
},466,[463,461],"shortid/lib/build.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    var alphabet = require(_dependencyMap[0], './alphabet');

    function isShortId(id) {
        if (!id || typeof id !== 'string' || id.length < 6) {
            return false;
        }

        var characters = alphabet.characters();
        var len = id.length;

        for (var i = 0; i < len; i++) {
            if (characters.indexOf(id[i]) === -1) {
                return false;
            }
        }

        return true;
    }

    module.exports = isShortId;
},467,[461],"shortid/lib/is-valid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = 0;
},468,[],"shortid/lib/util/cluster-worker-id-browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var helpers = require(_dependencyMap[0], '../helpers');

  var mark = helpers.mark;
  var extract = helpers.extract;
  var refer = helpers.refer;

  module.exports = function serialize(Immutable, refs) {
    return {
      replacer: function replacer(key, value) {
        if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);
        if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');
        if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');
        if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');
        if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');
        if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');
        if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');
        if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');
        if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');
        if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');
        return value;
      },
      reviver: function reviver(key, value) {
        if (typeof value === 'object' && value !== null && '__serializedType__' in value) {
          var data = value.data;

          switch (value.__serializedType__) {
            case 'ImmutableMap':
              return Immutable.Map(data);

            case 'ImmutableOrderedMap':
              return Immutable.OrderedMap(data);

            case 'ImmutableList':
              return Immutable.List(data);

            case 'ImmutableRange':
              return Immutable.Range(data._start, data._end, data._step);

            case 'ImmutableRepeat':
              return Immutable.Repeat(data._value, data.size);

            case 'ImmutableSet':
              return Immutable.Set(data);

            case 'ImmutableOrderedSet':
              return Immutable.OrderedSet(data);

            case 'ImmutableSeq':
              return Immutable.Seq(data);

            case 'ImmutableStack':
              return Immutable.Stack(data);

            case 'ImmutableRecord':
              return refs && refs[value.__serializedRef__] ? new refs[value.__serializedRef__](data) : Immutable.Map(data);

            default:
              return data;
          }
        }

        return value;
      }
    };
  };
},469,[470],"remotedev-serialize/immutable/serialize.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function mark(data, type, transformMethod) {
    return {
      data: transformMethod ? data[transformMethod]() : data,
      __serializedType__: type
    };
  }

  function extract(data, type) {
    return {
      data: babelHelpers.extends({}, data),
      __serializedType__: type
    };
  }

  function refer(data, type, isArray, refs) {
    var r = mark(data, type, isArray);
    if (!refs) return r;

    for (var i = 0; i < refs.length; i++) {
      var ref = refs[i];

      if (typeof ref === 'function' && data instanceof ref) {
        r.__serializedRef__ = i;
        return r;
      }
    }

    return r;
  }

  module.exports = {
    mark: mark,
    extract: extract,
    refer: refer
  };
},470,[],"remotedev-serialize/helpers/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  exports.default = catchErrors;
  var ERROR = '@@remotedev/ERROR';

  function catchErrors(sendError) {
    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && _typeof(window.onerror) === 'object') {
      window.onerror = function (message, url, lineNo, columnNo, error) {
        var errorAction = {
          type: ERROR,
          message: message,
          url: url,
          lineNo: lineNo,
          columnNo: columnNo
        };
        if (error && error.stack) errorAction.stack = error.stack;
        sendError(errorAction);
        return false;
      };
    } else if (typeof global !== 'undefined' && global.ErrorUtils) {
      global.ErrorUtils.setGlobalHandler(function (error, isFatal) {
        sendError({
          type: ERROR,
          error: error,
          isFatal: isFatal
        });
      });
    }

    if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && typeof console.error === 'function' && !console.beforeRemotedev) {
      console.beforeRemotedev = console.error.bind(console);

      console.error = function () {
        var errorAction = {
          type: ERROR
        };
        var error = arguments[0];
        errorAction.message = error.message ? error.message : error;

        if (error.sourceURL) {
          errorAction = _extends({}, errorAction, {
            sourceURL: error.sourceURL,
            line: error.line,
            column: error.column
          });
        }

        if (error.stack) errorAction.stack = error.stack;
        sendError(errorAction);
        console.beforeRemotedev.apply(null, arguments);
      };
    }
  }
},471,[],"remotedev-utils/lib/catchErrors.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.FilterState = undefined;

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.arrToRegex = arrToRegex;
  exports.getLocalFilter = getLocalFilter;
  exports.isFiltered = isFiltered;
  exports.filterStagedActions = filterStagedActions;
  exports.filterState = filterState;

  var _mapValues = require(_dependencyMap[0], 'lodash/mapValues');

  var _mapValues2 = _interopRequireDefault(_mapValues);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var FilterState = exports.FilterState = {
    DO_NOT_FILTER: 'DO_NOT_FILTER',
    BLACKLIST_SPECIFIC: 'BLACKLIST_SPECIFIC',
    WHITELIST_SPECIFIC: 'WHITELIST_SPECIFIC'
  };

  function arrToRegex(v) {
    return typeof v === 'string' ? v : v.join('|');
  }

  function filterActions(actionsById, actionsFilter) {
    if (!actionsFilter) return actionsById;
    return (0, _mapValues2.default)(actionsById, function (action, id) {
      return _extends({}, action, {
        action: actionsFilter(action.action, id)
      });
    });
  }

  function filterStates(computedStates, statesFilter) {
    if (!statesFilter) return computedStates;
    return computedStates.map(function (state, idx) {
      return _extends({}, state, {
        state: statesFilter(state.state, idx)
      });
    });
  }

  function getLocalFilter(config) {
    if (config.actionsBlacklist || config.actionsWhitelist) {
      return {
        whitelist: config.actionsWhitelist && config.actionsWhitelist.join('|'),
        blacklist: config.actionsBlacklist && config.actionsBlacklist.join('|')
      };
    }

    return undefined;
  }

  function getDevToolsOptions() {
    return typeof window !== 'undefined' && window.devToolsOptions || {};
  }

  function isFiltered(action, localFilter) {
    var _ref = action.action || action;

    var type = _ref.type;
    var opts = getDevToolsOptions();
    if (!localFilter && opts.filter && opts.filter === FilterState.DO_NOT_FILTER || type && typeof type.match !== 'function') return false;

    var _ref2 = localFilter || opts;

    var whitelist = _ref2.whitelist;
    var blacklist = _ref2.blacklist;
    return whitelist && !type.match(whitelist) || blacklist && type.match(blacklist);
  }

  function filterStagedActions(state, filters) {
    if (!filters) return state;
    var filteredStagedActionIds = [];
    var filteredComputedStates = [];
    state.stagedActionIds.forEach(function (id, idx) {
      if (!isFiltered(state.actionsById[id], filters)) {
        filteredStagedActionIds.push(id);
        filteredComputedStates.push(state.computedStates[idx]);
      }
    });
    return _extends({}, state, {
      stagedActionIds: filteredStagedActionIds,
      computedStates: filteredComputedStates
    });
  }

  function filterState(state, type, localFilter, stateSanitizer, actionSanitizer, nextActionId, predicate) {
    if (type === 'ACTION') return !stateSanitizer ? state : stateSanitizer(state, nextActionId - 1);else if (type !== 'STATE') return state;

    var _getDevToolsOptions = getDevToolsOptions();

    var filter = _getDevToolsOptions.filter;

    if (predicate || localFilter || filter && filter !== FilterState.DO_NOT_FILTER) {
      var _ret = function () {
        var filteredStagedActionIds = [];
        var filteredComputedStates = [];
        var sanitizedActionsById = actionSanitizer && {};
        var actionsById = state.actionsById;
        var computedStates = state.computedStates;
        state.stagedActionIds.forEach(function (id, idx) {
          var liftedAction = actionsById[id];
          var currAction = liftedAction.action;
          var liftedState = computedStates[idx];
          var currState = liftedState.state;

          if (idx) {
            if (predicate && !predicate(currState, currAction)) return;
            if (isFiltered(currAction, localFilter)) return;
          }

          filteredStagedActionIds.push(id);
          filteredComputedStates.push(stateSanitizer ? _extends({}, liftedState, {
            state: stateSanitizer(currState, idx)
          }) : liftedState);

          if (actionSanitizer) {
            sanitizedActionsById[id] = _extends({}, liftedAction, {
              action: actionSanitizer(currAction, id)
            });
          }
        });
        return {
          v: _extends({}, state, {
            actionsById: sanitizedActionsById || actionsById,
            stagedActionIds: filteredStagedActionIds,
            computedStates: filteredComputedStates
          })
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    if (!stateSanitizer && !actionSanitizer) return state;
    return _extends({}, state, {
      actionsById: filterActions(state.actionsById, actionSanitizer),
      computedStates: filterStates(state.computedStates, stateSanitizer)
    });
  }
},472,[473],"remotedev-utils/lib/filters.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseAssignValue = require(_dependencyMap[0], './_baseAssignValue'),
      baseForOwn = require(_dependencyMap[1], './_baseForOwn'),
      baseIteratee = require(_dependencyMap[2], './_baseIteratee');

  function mapValues(object, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object, function (value, key, object) {
      baseAssignValue(result, key, iteratee(value, key, object));
    });
    return result;
  }

  module.exports = mapValues;
},473,[474,475,490],"lodash/mapValues.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var defineProperty = require(_dependencyMap[0], './_defineProperty');

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},474,[444],"lodash/_baseAssignValue.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseFor = require(_dependencyMap[0], './_baseFor'),
      keys = require(_dependencyMap[1], './keys');

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  module.exports = baseForOwn;
},475,[476,478],"lodash/_baseForOwn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var createBaseFor = require(_dependencyMap[0], './_createBaseFor');

  var baseFor = createBaseFor();
  module.exports = baseFor;
},476,[477],"lodash/_baseFor.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  module.exports = createBaseFor;
},477,[],"lodash/_createBaseFor.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayLikeKeys = require(_dependencyMap[0], './_arrayLikeKeys'),
      baseKeys = require(_dependencyMap[1], './_baseKeys'),
      isArrayLike = require(_dependencyMap[2], './isArrayLike');

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},478,[479,487,447],"lodash/keys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseTimes = require(_dependencyMap[0], './_baseTimes'),
      isArguments = require(_dependencyMap[1], './isArguments'),
      isArray = require(_dependencyMap[2], './isArray'),
      isBuffer = require(_dependencyMap[3], './isBuffer'),
      isIndex = require(_dependencyMap[4], './_isIndex'),
      isTypedArray = require(_dependencyMap[5], './isTypedArray');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},479,[480,434,436,481,483,484],"lodash/_arrayLikeKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},480,[],"lodash/_baseTimes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root'),
      stubFalse = require(_dependencyMap[1], './stubFalse');

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},481,[341,482],"lodash/isBuffer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},482,[],"lodash/stubFalse.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},483,[],"lodash/_isIndex.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsTypedArray = require(_dependencyMap[0], './_baseIsTypedArray'),
      baseUnary = require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = require(_dependencyMap[2], './_nodeUtil');

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},484,[485,429,486],"lodash/isTypedArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
        isLength = require(_dependencyMap[1], './isLength'),
        isObjectLike = require(_dependencyMap[2], './isObjectLike');

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    module.exports = baseIsTypedArray;
},485,[339,448,347],"lodash/_baseIsTypedArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var freeGlobal = require(_dependencyMap[0], './_freeGlobal');

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},486,[342],"lodash/_nodeUtil.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isPrototype = require(_dependencyMap[0], './_isPrototype'),
      nativeKeys = require(_dependencyMap[1], './_nativeKeys');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},487,[488,489],"lodash/_baseKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},488,[],"lodash/_isPrototype.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var overArg = require(_dependencyMap[0], './_overArg');

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},489,[346],"lodash/_nativeKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseMatches = require(_dependencyMap[0], './_baseMatches'),
      baseMatchesProperty = require(_dependencyMap[1], './_baseMatchesProperty'),
      identity = require(_dependencyMap[2], './identity'),
      isArray = require(_dependencyMap[3], './isArray'),
      property = require(_dependencyMap[4], './property');

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  module.exports = baseIteratee;
},490,[491,519,438,436,534],"lodash/_baseIteratee.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsMatch = require(_dependencyMap[0], './_baseIsMatch'),
      getMatchData = require(_dependencyMap[1], './_getMatchData'),
      matchesStrictComparable = require(_dependencyMap[2], './_matchesStrictComparable');

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;
},491,[492,516,518],"lodash/_baseMatches.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Stack = require(_dependencyMap[0], './_Stack'),
      baseIsEqual = require(_dependencyMap[1], './_baseIsEqual');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  module.exports = baseIsMatch;
},492,[493,499],"lodash/_baseIsMatch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var ListCache = require(_dependencyMap[0], './_ListCache'),
      stackClear = require(_dependencyMap[1], './_stackClear'),
      stackDelete = require(_dependencyMap[2], './_stackDelete'),
      stackGet = require(_dependencyMap[3], './_stackGet'),
      stackHas = require(_dependencyMap[4], './_stackHas'),
      stackSet = require(_dependencyMap[5], './_stackSet');

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},493,[405,494,495,496,497,498],"lodash/_Stack.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var ListCache = require(_dependencyMap[0], './_ListCache');

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},494,[405],"lodash/_stackClear.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},495,[],"lodash/_stackDelete.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},496,[],"lodash/_stackGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},497,[],"lodash/_stackHas.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var ListCache = require(_dependencyMap[0], './_ListCache'),
      Map = require(_dependencyMap[1], './_Map'),
      MapCache = require(_dependencyMap[2], './_MapCache');

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},498,[405,413,388],"lodash/_stackSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsEqualDeep = require(_dependencyMap[0], './_baseIsEqualDeep'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},499,[500,347],"lodash/_baseIsEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Stack = require(_dependencyMap[0], './_Stack'),
      equalArrays = require(_dependencyMap[1], './_equalArrays'),
      equalByTag = require(_dependencyMap[2], './_equalByTag'),
      equalObjects = require(_dependencyMap[3], './_equalObjects'),
      getTag = require(_dependencyMap[4], './_getTag'),
      isArray = require(_dependencyMap[5], './isArray'),
      isBuffer = require(_dependencyMap[6], './isBuffer'),
      isTypedArray = require(_dependencyMap[7], './isTypedArray');

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},500,[493,501,503,506,512,436,481,484],"lodash/_baseIsEqualDeep.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var SetCache = require(_dependencyMap[0], './_SetCache'),
      arraySome = require(_dependencyMap[1], './_arraySome'),
      cacheHas = require(_dependencyMap[2], './_cacheHas');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},501,[387,502,430],"lodash/_equalArrays.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},502,[],"lodash/_arraySome.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol'),
      Uint8Array = require(_dependencyMap[1], './_Uint8Array'),
      eq = require(_dependencyMap[2], './eq'),
      equalArrays = require(_dependencyMap[3], './_equalArrays'),
      mapToArray = require(_dependencyMap[4], './_mapToArray'),
      setToArray = require(_dependencyMap[5], './_setToArray');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},503,[340,504,409,501,505,454],"lodash/_equalByTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},504,[341],"lodash/_Uint8Array.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},505,[],"lodash/_mapToArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getAllKeys = require(_dependencyMap[0], './_getAllKeys');

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},506,[507],"lodash/_equalObjects.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGetAllKeys = require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbols = require(_dependencyMap[1], './_getSymbols'),
      keys = require(_dependencyMap[2], './keys');

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},507,[508,509,478],"lodash/_getAllKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayPush = require(_dependencyMap[0], './_arrayPush'),
      isArray = require(_dependencyMap[1], './isArray');

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},508,[432,436],"lodash/_baseGetAllKeys.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayFilter = require(_dependencyMap[0], './_arrayFilter'),
      stubArray = require(_dependencyMap[1], './stubArray');

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},509,[510,511],"lodash/_getSymbols.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},510,[],"lodash/_arrayFilter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},511,[],"lodash/stubArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var DataView = require(_dependencyMap[0], './_DataView'),
        Map = require(_dependencyMap[1], './_Map'),
        Promise = require(_dependencyMap[2], './_Promise'),
        Set = require(_dependencyMap[3], './_Set'),
        WeakMap = require(_dependencyMap[4], './_WeakMap'),
        baseGetTag = require(_dependencyMap[5], './_baseGetTag'),
        toSource = require(_dependencyMap[6], './_toSource');

    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';
    var dataViewTag = '[object DataView]';
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;

                    case mapCtorString:
                        return mapTag;

                    case promiseCtorString:
                        return promiseTag;

                    case setCtorString:
                        return setTag;

                    case weakMapCtorString:
                        return weakMapTag;
                }
            }

            return result;
        };
    }

    module.exports = getTag;
},512,[513,413,514,452,515,339,399],"lodash/_getTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var DataView = getNative(root, 'DataView');
    module.exports = DataView;
},513,[393,341],"lodash/_DataView.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var Promise = getNative(root, 'Promise');
    module.exports = Promise;
},514,[393,341],"lodash/_Promise.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var getNative = require(_dependencyMap[0], './_getNative'),
        root = require(_dependencyMap[1], './_root');

    var WeakMap = getNative(root, 'WeakMap');
    module.exports = WeakMap;
},515,[393,341],"lodash/_WeakMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var isStrictComparable = require(_dependencyMap[0], './_isStrictComparable'),
        keys = require(_dependencyMap[1], './keys');

    function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
            var key = result[length],
                value = object[key];
            result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
    }

    module.exports = getMatchData;
},516,[517,478],"lodash/_getMatchData.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isObject = require(_dependencyMap[0], './isObject');

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;
},517,[396],"lodash/_isStrictComparable.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  module.exports = matchesStrictComparable;
},518,[],"lodash/_matchesStrictComparable.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsEqual = require(_dependencyMap[0], './_baseIsEqual'),
      get = require(_dependencyMap[1], './get'),
      hasIn = require(_dependencyMap[2], './hasIn'),
      isKey = require(_dependencyMap[3], './_isKey'),
      isStrictComparable = require(_dependencyMap[4], './_isStrictComparable'),
      matchesStrictComparable = require(_dependencyMap[5], './_matchesStrictComparable'),
      toKey = require(_dependencyMap[6], './_toKey');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  module.exports = baseMatchesProperty;
},519,[499,520,531,523,517,518,530],"lodash/_baseMatchesProperty.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGet = require(_dependencyMap[0], './_baseGet');

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
},520,[521],"lodash/get.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var castPath = require(_dependencyMap[0], './_castPath'),
      toKey = require(_dependencyMap[1], './_toKey');

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},521,[522,530],"lodash/_baseGet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArray = require(_dependencyMap[0], './isArray'),
      isKey = require(_dependencyMap[1], './_isKey'),
      stringToPath = require(_dependencyMap[2], './_stringToPath'),
      toString = require(_dependencyMap[3], './toString');

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},522,[436,523,525,528],"lodash/_castPath.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArray = require(_dependencyMap[0], './isArray'),
      isSymbol = require(_dependencyMap[1], './isSymbol');

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},523,[436,524],"lodash/_isKey.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
        isObjectLike = require(_dependencyMap[1], './isObjectLike');

    var symbolTag = '[object Symbol]';

    function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    module.exports = isSymbol;
},524,[339,347],"lodash/isSymbol.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var memoizeCapped = require(_dependencyMap[0], './_memoizeCapped');

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},525,[526],"lodash/_stringToPath.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var memoize = require(_dependencyMap[0], './memoize');

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},526,[527],"lodash/_memoizeCapped.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MapCache = require(_dependencyMap[0], './_MapCache');

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},527,[388],"lodash/memoize.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseToString = require(_dependencyMap[0], './_baseToString');

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},528,[529],"lodash/toString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol'),
      arrayMap = require(_dependencyMap[1], './_arrayMap'),
      isArray = require(_dependencyMap[2], './isArray'),
      isSymbol = require(_dependencyMap[3], './isSymbol');

  var INFINITY = 1 / 0;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
},529,[340,428,436,524],"lodash/_baseToString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isSymbol = require(_dependencyMap[0], './isSymbol');

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
},530,[524],"lodash/_toKey.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseHasIn = require(_dependencyMap[0], './_baseHasIn'),
      hasPath = require(_dependencyMap[1], './_hasPath');

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},531,[532,533],"lodash/hasIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},532,[],"lodash/_baseHasIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var castPath = require(_dependencyMap[0], './_castPath'),
      isArguments = require(_dependencyMap[1], './isArguments'),
      isArray = require(_dependencyMap[2], './isArray'),
      isIndex = require(_dependencyMap[3], './_isIndex'),
      isLength = require(_dependencyMap[4], './isLength'),
      toKey = require(_dependencyMap[5], './_toKey');

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},533,[522,434,436,483,448,530],"lodash/_hasPath.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseProperty = require(_dependencyMap[0], './_baseProperty'),
      basePropertyDeep = require(_dependencyMap[1], './_basePropertyDeep'),
      isKey = require(_dependencyMap[2], './_isKey'),
      toKey = require(_dependencyMap[3], './_toKey');

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;
},534,[535,536,523,530],"lodash/property.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
},535,[],"lodash/_baseProperty.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGet = require(_dependencyMap[0], './_baseGet');

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;
},536,[521],"lodash/_basePropertyDeep.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports['default'] = promiseMiddleware;

  var _fluxStandardAction = require(_dependencyMap[0], 'flux-standard-action');

  function isPromise(val) {
    return val && typeof val.then === 'function';
  }

  function promiseMiddleware(_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function (action) {
        if (!_fluxStandardAction.isFSA(action)) {
          return isPromise(action) ? action.then(dispatch) : next(action);
        }

        return isPromise(action.payload) ? action.payload.then(function (result) {
          return dispatch(_extends({}, action, {
            payload: result
          }));
        }, function (error) {
          return dispatch(_extends({}, action, {
            payload: error,
            error: true
          }));
        }) : next(action);
      };
    };
  }

  module.exports = exports['default'];
},537,[538],"redux-promise/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.isFSA = isFSA;
  exports.isError = isError;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var _lodashIsplainobject = require(_dependencyMap[0], 'lodash.isplainobject');

  var _lodashIsplainobject2 = _interopRequireDefault(_lodashIsplainobject);

  var validKeys = ['type', 'payload', 'error', 'meta'];

  function isValidKey(key) {
    return validKeys.indexOf(key) > -1;
  }

  function isFSA(action) {
    return _lodashIsplainobject2['default'](action) && typeof action.type !== 'undefined' && Object.keys(action).every(isValidKey);
  }

  function isError(action) {
    return action.error === true;
  }
},538,[539],"flux-standard-action/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseFor = require(_dependencyMap[0], 'lodash._basefor'),
      isArguments = require(_dependencyMap[1], 'lodash.isarguments'),
      keysIn = require(_dependencyMap[2], 'lodash.keysin');

  var objectTag = '[object Object]';

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;

  function baseForIn(object, iteratee) {
    return baseFor(object, iteratee, keysIn);
  }

  function isPlainObject(value) {
    var Ctor;

    if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) || !hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor))) {
      return false;
    }

    var result;
    baseForIn(value, function (subValue, key) {
      result = key;
    });
    return result === undefined || hasOwnProperty.call(value, result);
  }

  module.exports = isPlainObject;
},539,[540,541,542],"lodash.isplainobject/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseFor = createBaseFor();

  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  module.exports = baseFor;
},540,[],"lodash._basefor/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isArguments;
},541,[],"lodash.isarguments/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isArguments = require(_dependencyMap[0], 'lodash.isarguments'),
      isArray = require(_dependencyMap[1], 'lodash.isarray');

  var reIsUint = /^\d+$/;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isIndex(value, length) {
    value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function keysIn(object) {
    if (object == null) {
      return [];
    }

    if (!isObject(object)) {
      object = Object(object);
    }

    var length = object.length;
    length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;

    while (++index < length) {
      result[index] = index + '';
    }

    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = keysIn;
},542,[541,543],"lodash.keysin/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayTag = '[object Array]',
      funcTag = '[object Function]';
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  var objectProto = Object.prototype;
  var fnToString = Function.prototype.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;
  var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var nativeIsArray = getNative(Array, 'isArray');
  var MAX_SAFE_INTEGER = 9007199254740991;

  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  var isArray = nativeIsArray || function (value) {
    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
  };

  function isFunction(value) {
    return isObject(value) && objToString.call(value) == funcTag;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isNative(value) {
    if (value == null) {
      return false;
    }

    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }

    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  module.exports = isArray;
},543,[],"lodash.isarray/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  function createThunkMiddleware(extraArgument) {
    return function (_ref) {
      var dispatch = _ref.dispatch,
          getState = _ref.getState;
      return function (next) {
        return function (action) {
          if (typeof action === 'function') {
            return action(dispatch, getState, extraArgument);
          }

          return next(action);
        };
      };
    };
  }

  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  exports['default'] = thunk;
},544,[],"redux-thunk/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  !function (e, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t(e.reduxLogger = e.reduxLogger || {});
  }(this, function (e) {
    "use strict";

    function t(e, t) {
      e.super_ = t, e.prototype = Object.create(t.prototype, {
        constructor: {
          value: e,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      });
    }

    function r(e, t) {
      Object.defineProperty(this, "kind", {
        value: e,
        enumerable: !0
      }), t && t.length && Object.defineProperty(this, "path", {
        value: t,
        enumerable: !0
      });
    }

    function n(e, t, r) {
      n.super_.call(this, "E", e), Object.defineProperty(this, "lhs", {
        value: t,
        enumerable: !0
      }), Object.defineProperty(this, "rhs", {
        value: r,
        enumerable: !0
      });
    }

    function o(e, t) {
      o.super_.call(this, "N", e), Object.defineProperty(this, "rhs", {
        value: t,
        enumerable: !0
      });
    }

    function i(e, t) {
      i.super_.call(this, "D", e), Object.defineProperty(this, "lhs", {
        value: t,
        enumerable: !0
      });
    }

    function a(e, t, r) {
      a.super_.call(this, "A", e), Object.defineProperty(this, "index", {
        value: t,
        enumerable: !0
      }), Object.defineProperty(this, "item", {
        value: r,
        enumerable: !0
      });
    }

    function f(e, t, r) {
      var n = e.slice((r || t) + 1 || e.length);
      return e.length = t < 0 ? e.length + t : t, e.push.apply(e, n), e;
    }

    function u(e) {
      var t = "undefined" == typeof e ? "undefined" : N(e);
      return "object" !== t ? t : e === Math ? "math" : null === e ? "null" : Array.isArray(e) ? "array" : "[object Date]" === Object.prototype.toString.call(e) ? "date" : "function" == typeof e.toString && /^\/.*\//.test(e.toString()) ? "regexp" : "object";
    }

    function l(e, t, r, c, s, d, p) {
      s = s || [], p = p || [];
      var g = s.slice(0);

      if ("undefined" != typeof d) {
        if (c) {
          if ("function" == typeof c && c(g, d)) return;

          if ("object" === ("undefined" == typeof c ? "undefined" : N(c))) {
            if (c.prefilter && c.prefilter(g, d)) return;

            if (c.normalize) {
              var h = c.normalize(g, d, e, t);
              h && (e = h[0], t = h[1]);
            }
          }
        }

        g.push(d);
      }

      "regexp" === u(e) && "regexp" === u(t) && (e = e.toString(), t = t.toString());
      var y = "undefined" == typeof e ? "undefined" : N(e),
          v = "undefined" == typeof t ? "undefined" : N(t),
          b = "undefined" !== y || p && p[p.length - 1].lhs && p[p.length - 1].lhs.hasOwnProperty(d),
          m = "undefined" !== v || p && p[p.length - 1].rhs && p[p.length - 1].rhs.hasOwnProperty(d);
      if (!b && m) r(new o(g, t));else if (!m && b) r(new i(g, e));else if (u(e) !== u(t)) r(new n(g, e, t));else if ("date" === u(e) && e - t !== 0) r(new n(g, e, t));else if ("object" === y && null !== e && null !== t) {
        if (p.filter(function (t) {
          return t.lhs === e;
        }).length) e !== t && r(new n(g, e, t));else {
          if (p.push({
            lhs: e,
            rhs: t
          }), Array.isArray(e)) {
            var w;
            e.length;

            for (w = 0; w < e.length; w++) {
              w >= t.length ? r(new a(g, w, new i(void 0, e[w]))) : l(e[w], t[w], r, c, g, w, p);
            }

            for (; w < t.length;) {
              r(new a(g, w, new o(void 0, t[w++])));
            }
          } else {
            var x = Object.keys(e),
                S = Object.keys(t);
            x.forEach(function (n, o) {
              var i = S.indexOf(n);
              i >= 0 ? (l(e[n], t[n], r, c, g, n, p), S = f(S, i)) : l(e[n], void 0, r, c, g, n, p);
            }), S.forEach(function (e) {
              l(void 0, t[e], r, c, g, e, p);
            });
          }

          p.length = p.length - 1;
        }
      } else e !== t && ("number" === y && isNaN(e) && isNaN(t) || r(new n(g, e, t)));
    }

    function c(e, t, r, n) {
      return n = n || [], l(e, t, function (e) {
        e && n.push(e);
      }, r), n.length ? n : void 0;
    }

    function s(e, t, r) {
      if (r.path && r.path.length) {
        var n,
            o = e[t],
            i = r.path.length - 1;

        for (n = 0; n < i; n++) {
          o = o[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            s(o[r.path[n]], r.index, r.item);
            break;

          case "D":
            delete o[r.path[n]];
            break;

          case "E":
          case "N":
            o[r.path[n]] = r.rhs;
        }
      } else switch (r.kind) {
        case "A":
          s(e[t], r.index, r.item);
          break;

        case "D":
          e = f(e, t);
          break;

        case "E":
        case "N":
          e[t] = r.rhs;
      }

      return e;
    }

    function d(e, t, r) {
      if (e && t && r && r.kind) {
        for (var n = e, o = -1, i = r.path ? r.path.length - 1 : 0; ++o < i;) {
          "undefined" == typeof n[r.path[o]] && (n[r.path[o]] = "number" == typeof r.path[o] ? [] : {}), n = n[r.path[o]];
        }

        switch (r.kind) {
          case "A":
            s(r.path ? n[r.path[o]] : n, r.index, r.item);
            break;

          case "D":
            delete n[r.path[o]];
            break;

          case "E":
          case "N":
            n[r.path[o]] = r.rhs;
        }
      }
    }

    function p(e, t, r) {
      if (r.path && r.path.length) {
        var n,
            o = e[t],
            i = r.path.length - 1;

        for (n = 0; n < i; n++) {
          o = o[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            p(o[r.path[n]], r.index, r.item);
            break;

          case "D":
            o[r.path[n]] = r.lhs;
            break;

          case "E":
            o[r.path[n]] = r.lhs;
            break;

          case "N":
            delete o[r.path[n]];
        }
      } else switch (r.kind) {
        case "A":
          p(e[t], r.index, r.item);
          break;

        case "D":
          e[t] = r.lhs;
          break;

        case "E":
          e[t] = r.lhs;
          break;

        case "N":
          e = f(e, t);
      }

      return e;
    }

    function g(e, t, r) {
      if (e && t && r && r.kind) {
        var n,
            o,
            i = e;

        for (o = r.path.length - 1, n = 0; n < o; n++) {
          "undefined" == typeof i[r.path[n]] && (i[r.path[n]] = {}), i = i[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            p(i[r.path[n]], r.index, r.item);
            break;

          case "D":
            i[r.path[n]] = r.lhs;
            break;

          case "E":
            i[r.path[n]] = r.lhs;
            break;

          case "N":
            delete i[r.path[n]];
        }
      }
    }

    function h(e, t, r) {
      if (e && t) {
        var n = function n(_n) {
          r && !r(e, t, _n) || d(e, t, _n);
        };

        l(e, t, n);
      }
    }

    function y(e) {
      return "color: " + F[e].color + "; font-weight: bold";
    }

    function v(e) {
      var t = e.kind,
          r = e.path,
          n = e.lhs,
          o = e.rhs,
          i = e.index,
          a = e.item;

      switch (t) {
        case "E":
          return [r.join("."), n, "→", o];

        case "N":
          return [r.join("."), o];

        case "D":
          return [r.join(".")];

        case "A":
          return [r.join(".") + "[" + i + "]", a];

        default:
          return [];
      }
    }

    function b(e, t, r, n) {
      var o = c(e, t);

      try {
        n ? r.groupCollapsed("diff") : r.group("diff");
      } catch (e) {
        r.log("diff");
      }

      o ? o.forEach(function (e) {
        var t = e.kind,
            n = v(e);
        r.log.apply(r, ["%c " + F[t].text, y(t)].concat(P(n)));
      }) : r.log("—— no diff ——");

      try {
        r.groupEnd();
      } catch (e) {
        r.log("—— diff end —— ");
      }
    }

    function m(e, t, r, n) {
      switch ("undefined" == typeof e ? "undefined" : N(e)) {
        case "object":
          return "function" == typeof e[n] ? e[n].apply(e, P(r)) : e[n];

        case "function":
          return e(t);

        default:
          return e;
      }
    }

    function w(e) {
      var t = e.timestamp,
          r = e.duration;
      return function (e, n, o) {
        var i = ["action"];
        return i.push("%c" + String(e.type)), t && i.push("%c@ " + n), r && i.push("%c(in " + o.toFixed(2) + " ms)"), i.join(" ");
      };
    }

    function x(e, t) {
      var r = t.logger,
          n = t.actionTransformer,
          o = t.titleFormatter,
          i = void 0 === o ? w(t) : o,
          a = t.collapsed,
          f = t.colors,
          u = t.level,
          l = t.diff,
          c = "undefined" == typeof t.titleFormatter;
      e.forEach(function (o, s) {
        var d = o.started,
            p = o.startedTime,
            g = o.action,
            h = o.prevState,
            y = o.error,
            v = o.took,
            w = o.nextState,
            x = e[s + 1];
        x && (w = x.prevState, v = x.started - d);
        var S = n(g),
            k = "function" == typeof a ? a(function () {
          return w;
        }, g, o) : a,
            j = D(p),
            E = f.title ? "color: " + f.title(S) + ";" : "",
            A = ["color: gray; font-weight: lighter;"];
        A.push(E), t.timestamp && A.push("color: gray; font-weight: lighter;"), t.duration && A.push("color: gray; font-weight: lighter;");
        var O = i(S, j, v);

        try {
          k ? f.title && c ? r.groupCollapsed.apply(r, ["%c " + O].concat(A)) : r.groupCollapsed(O) : f.title && c ? r.group.apply(r, ["%c " + O].concat(A)) : r.group(O);
        } catch (e) {
          r.log(O);
        }

        var N = m(u, S, [h], "prevState"),
            P = m(u, S, [S], "action"),
            C = m(u, S, [y, h], "error"),
            F = m(u, S, [w], "nextState");
        if (N) if (f.prevState) {
          var L = "color: " + f.prevState(h) + "; font-weight: bold";
          r[N]("%c prev state", L, h);
        } else r[N]("prev state", h);
        if (P) if (f.action) {
          var T = "color: " + f.action(S) + "; font-weight: bold";
          r[P]("%c action    ", T, S);
        } else r[P]("action    ", S);
        if (y && C) if (f.error) {
          var M = "color: " + f.error(y, h) + "; font-weight: bold;";
          r[C]("%c error     ", M, y);
        } else r[C]("error     ", y);
        if (F) if (f.nextState) {
          var _ = "color: " + f.nextState(w) + "; font-weight: bold";

          r[F]("%c next state", _, w);
        } else r[F]("next state", w);
        l && b(h, w, r, k);

        try {
          r.groupEnd();
        } catch (e) {
          r.log("—— log end ——");
        }
      });
    }

    function S() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = babelHelpers.extends({}, L, e),
          r = t.logger,
          n = t.stateTransformer,
          o = t.errorTransformer,
          i = t.predicate,
          a = t.logErrors,
          f = t.diffPredicate;
      if ("undefined" == typeof r) return function () {
        return function (e) {
          return function (t) {
            return e(t);
          };
        };
      };
      if (e.getState && e.dispatch) return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"), function () {
        return function (e) {
          return function (t) {
            return e(t);
          };
        };
      };
      var u = [];
      return function (e) {
        var r = e.getState;
        return function (e) {
          return function (l) {
            if ("function" == typeof i && !i(r, l)) return e(l);
            var c = {};
            u.push(c), c.started = O.now(), c.startedTime = new Date(), c.prevState = n(r()), c.action = l;
            var s = void 0;
            if (a) try {
              s = e(l);
            } catch (e) {
              c.error = o(e);
            } else s = e(l);
            c.took = O.now() - c.started, c.nextState = n(r());
            var d = t.diff && "function" == typeof f ? f(r, l) : t.diff;
            if (x(u, babelHelpers.extends({}, t, {
              diff: d
            })), u.length = 0, c.error) throw c.error;
            return s;
          };
        };
      };
    }

    var k,
        j,
        E = function E(e, t) {
      return new Array(t + 1).join(e);
    },
        A = function A(e, t) {
      return E("0", t - e.toString().length) + e;
    },
        D = function D(e) {
      return A(e.getHours(), 2) + ":" + A(e.getMinutes(), 2) + ":" + A(e.getSeconds(), 2) + "." + A(e.getMilliseconds(), 3);
    },
        O = "undefined" != typeof performance && null !== performance && "function" == typeof performance.now ? performance : Date,
        N = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (e) {
      return typeof e;
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof e;
    },
        P = function P(e) {
      if (Array.isArray(e)) {
        for (var t = 0, r = Array(e.length); t < e.length; t++) {
          r[t] = e[t];
        }

        return r;
      }

      return Array.from(e);
    },
        C = [];

    k = "object" === ("undefined" == typeof global ? "undefined" : N(global)) && global ? global : "undefined" != typeof window ? window : {}, j = k.DeepDiff, j && C.push(function () {
      "undefined" != typeof j && k.DeepDiff === c && (k.DeepDiff = j, j = void 0);
    }), t(n, r), t(o, r), t(i, r), t(a, r), Object.defineProperties(c, {
      diff: {
        value: c,
        enumerable: !0
      },
      observableDiff: {
        value: l,
        enumerable: !0
      },
      applyDiff: {
        value: h,
        enumerable: !0
      },
      applyChange: {
        value: d,
        enumerable: !0
      },
      revertChange: {
        value: g,
        enumerable: !0
      },
      isConflict: {
        value: function value() {
          return "undefined" != typeof j;
        },
        enumerable: !0
      },
      noConflict: {
        value: function value() {
          return C && (C.forEach(function (e) {
            e();
          }), C = null), c;
        },
        enumerable: !0
      }
    });

    var F = {
      E: {
        color: "#2196F3",
        text: "CHANGED:"
      },
      N: {
        color: "#4CAF50",
        text: "ADDED:"
      },
      D: {
        color: "#F44336",
        text: "DELETED:"
      },
      A: {
        color: "#2196F3",
        text: "ARRAY:"
      }
    },
        L = {
      level: "log",
      logger: console,
      logErrors: !0,
      collapsed: void 0,
      predicate: void 0,
      duration: !1,
      timestamp: !0,
      stateTransformer: function stateTransformer(e) {
        return e;
      },
      actionTransformer: function actionTransformer(e) {
        return e;
      },
      errorTransformer: function errorTransformer(e) {
        return e;
      },
      colors: {
        title: function title() {
          return "inherit";
        },
        prevState: function prevState() {
          return "#9E9E9E";
        },
        action: function action() {
          return "#03A9F4";
        },
        nextState: function nextState() {
          return "#4CAF50";
        },
        error: function error() {
          return "#F20404";
        }
      },
      diff: !1,
      diffPredicate: void 0,
      transformer: void 0
    },
        T = function T() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = e.dispatch,
          r = e.getState;
      return "function" == typeof t || "function" == typeof r ? S()({
        dispatch: t,
        getState: r
      }) : void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n");
    };

    e.defaults = L, e.createLogger = S, e.logger = T, e.default = T, Object.defineProperty(e, "__esModule", {
      value: !0
    });
  });
},545,[],"redux-logger/dist/redux-logger.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _redux = require(_dependencyMap[0], "redux");

    var _CoinListReducer = require(_dependencyMap[1], "./CoinListReducer");

    var _CoinListReducer2 = babelHelpers.interopRequireDefault(_CoinListReducer);

    var _PriceDataReducer = require(_dependencyMap[2], "./PriceDataReducer");

    var _PriceDataReducer2 = babelHelpers.interopRequireDefault(_PriceDataReducer);

    var _NewsListReducer = require(_dependencyMap[3], "./NewsListReducer");

    var _NewsListReducer2 = babelHelpers.interopRequireDefault(_NewsListReducer);

    var _WeeklyVideoReducer = require(_dependencyMap[4], "./WeeklyVideoReducer");

    var _WeeklyVideoReducer2 = babelHelpers.interopRequireDefault(_WeeklyVideoReducer);

    var _ChatReducer = require(_dependencyMap[5], "./ChatReducer");

    var _ChatReducer2 = babelHelpers.interopRequireDefault(_ChatReducer);

    var _ChartReducer = require(_dependencyMap[6], "./ChartReducer");

    var _ChartReducer2 = babelHelpers.interopRequireDefault(_ChartReducer);

    exports.default = (0, _redux.combineReducers)({
        priceData: _PriceDataReducer2.default,
        coinList: _CoinListReducer2.default,
        newsList: _NewsListReducer2.default,
        weeklyVideo: _WeeklyVideoReducer2.default,
        chatState: _ChatReducer2.default,
        chartState: _ChartReducer2.default
    });
},546,[336,547,549,550,551,552,553],"NNCoins/src/Reducers/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _ActionTypes.FETCHING_COIN_LIST:
                return babelHelpers.extends({}, state, {
                    isFetching: true,
                    data: [],
                    hasError: false,
                    errorMessage: null
                });

            case _ActionTypes.GET_CACHED_COIN_LIST_SUCCESS:
            case _ActionTypes.FETCHING_COIN_LIST_SUCCESS:
                return babelHelpers.extends({}, state, {
                    isFetching: false,
                    data: action.payload,
                    hasError: false,
                    errorMessage: null
                });

            case _ActionTypes.FETCHING_COIN_LIST_FAIL:
                return babelHelpers.extends({}, state, {
                    isFetching: false,
                    data: [],
                    hasError: true,
                    errorMessage: action.err
                });

            default:
                return state;
        }
    };

    var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

    var initialState = {
        isFetching: false,
        data: [],
        hasError: false,
        errorMessage: null
    };
},547,[548],"NNCoins/src/Reducers/CoinListReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var FETCHING_PRICE_DATA = exports.FETCHING_PRICE_DATA = 'FETCHING_PRICE_DATA';
  var FETCHING_PRICE_DATA_SUCCESS = exports.FETCHING_PRICE_DATA_SUCCESS = 'FETCHING_PRICE_DATA_SUCCESS';
  var FETCHING_PRICE_DATA_FAIL = exports.FETCHING_PRICE_DATA_FAIL = 'FETCHING_PRICE_DATA_FAIL';
  var FETCHING_COIN_LIST = exports.FETCHING_COIN_LIST = 'FETCHING_COIN_LIST';
  var FETCHING_COIN_LIST_SUCCESS = exports.FETCHING_COIN_LIST_SUCCESS = 'FETCHING_COIN_LIST_SUCCESS';
  var FETCHING_COIN_LIST_FAIL = exports.FETCHING_COIN_LIST_FAIL = 'FETCHING_COIN_LIST_FAIL';
  var FETCHING_COIN_BY_ID = exports.FETCHING_COIN_BY_ID = 'FETCHING_COIN_BY_ID';
  var FETCHING_COIN_BY_ID_SUCCESS = exports.FETCHING_COIN_BY_ID_SUCCESS = 'FETCHING_COIN_BY_ID_SUCCESS';
  var FETCHING_COIN_BY_ID_FAIL = exports.FETCHING_COIN_BY_ID_FAIL = 'FETCHING_COIN_BY_ID_FAIL';
  var CACHE_COIN_LIST = exports.CACHE_COIN_LIST = 'CACHE_COIN_LIST';
  var CACHE_COIN_LIST_SUCCESS = exports.CACHE_COIN_LIST_SUCCESS = 'CACHE_COIN_LIST_SUCCESS';
  var GET_CACHED_COIN_LIST = exports.GET_CACHED_COIN_LIST = 'GET_CACHED_COIN_LIST';
  var GET_CACHED_COIN_LIST_SUCCESS = exports.GET_CACHED_COIN_LIST_SUCCESS = 'GET_CACHED_COIN_LIST_SUCCESS';
  var FETCHING_NEWS_LIST = exports.FETCHING_NEWS_LIST = 'FETCHING_NEWS_LIST';
  var FETCHING_NEWS_LIST_SUCCESS = exports.FETCHING_NEWS_LIST_SUCCESS = 'FETCHING_NEWS_LIST_SUCCESS';
  var FETCHING_NEWS_LIST_FAIL = exports.FETCHING_NEWS_LIST_FAIL = 'FETCHING_NEW_LIST_FAIL';
  var VIEWABLE_NEWS_ITEMS_CHANGED = exports.VIEWABLE_NEWS_ITEMS_CHANGED = 'VIEWABLE_NEWS_ITEMS_CHANGED';
  var CHECK_IF_VIEWABLE = exports.CHECK_IF_VIEWABLE = 'CHECK_IF_VIEWABLE';
  var FETCHING_WEEKLY_UPDATE_VIDEO = exports.FETCHING_WEEKLY_UPDATE_VIDEO = 'FETCHING_WEEKLY_UPDATE_VIDEO';
  var FETCHING_WEEKLY_UPDATE_VIDEO_SUCCESS = exports.FETCHING_WEEKLY_UPDATE_VIDEO_SUCCESS = 'FETCHING_WEEKLY_UPDATE_VIDEO_SUCCESS';
  var FETCHING_WEEKLY_UPDATE_VIDEO_FAIL = exports.FETCHING_WEEKLY_UPDATE_VIDEO_FAIL = 'FETCHING_WEEKLY_UPDATE_VIDEO_FAIL';
  var CHAT_BUTTON_TAPPED = exports.CHAT_BUTTON_TAPPED = 'CHAT_BUTTON_TAPPED';
  var OPEN_CHAT_WINDOW = exports.OPEN_CHAT_WINDOW = 'OPEN_CHAT_WINDOW';
  var OPEN_CHAT_FORM = exports.OPEN_CHAT_FORM = 'OPEN_CHAT_FORM';
  var CLOSE_CHAT_FORM = exports.CLOSE_CHAT_FORM = 'CLOSE_CHAT_FORM';
  var GET_UNREAD_COUNT = exports.GET_UNREAD_COUNT = 'GET_UNREAD_COUNT';
  var GET_UNREAD_COUNT_SUCCESS = exports.GET_UNREAD_COUNT_SUCCESS = 'GET_UNREAD_COUNT_SUCCESS';
  var SET_NICK_NAME = exports.SET_NICK_NAME = 'SET_NICK_NAME';
  var SAVE_NICNAME_SET = exports.SAVE_NICNAME_SET = 'SAVE_NICNAME_SET';
  var SAVE_NICNAME_SET_SUCCESS = exports.SAVE_NICNAME_SET_SUCCESS = 'SAVE_NICNAME_SET_SUCCESS';
  var CHECK_IF_NAME_SET = exports.CHECK_IF_NAME_SET = 'CHECK_IF_NAME_SET';
  var CHECK_IF_NAME_SET_SUCCESS = exports.CHECK_IF_NAME_SET_SUCCESS = 'CHECK_IF_NAME_SET_SUCCESS';
  var LOADING_CHART_PRICES = exports.LOADING_CHART_PRICES = 'LOADING_CHART_PRICES';
  var LOADING_CHART_PRICES_SUCCESS = exports.LOADING_CHART_PRICES_SUCCESS = 'LOADING_CHART_PRICES_SUCCESS';
  var LOADING_CHART_PRICES_FAIL = exports.LOADING_CHART_PRICES_FAIL = 'LOADING_CHART_PRICES_FAIL';
  var SELECTED_CHART_RANGE = exports.SELECTED_CHART_RANGE = 'SELECTED_CHART_RANGE';
  var SELECTED_CURRENT_COIN = exports.SELECTED_CURRENT_COIN = 'SELECTED_CURRENT_COIN';
},548,[],"NNCoins/src/Utils/ActionTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _ActionTypes.FETCHING_PRICE_DATA:
                return babelHelpers.extends({}, state, {
                    isFetching: true,
                    data: state.data,
                    hasError: false,
                    errorMessage: null
                });

            case _ActionTypes.FETCHING_PRICE_DATA_SUCCESS:
                if (state.data !== action.payload) {
                    return babelHelpers.extends({}, state, {
                        isFetching: false,
                        data: action.payload,
                        hasError: false,
                        errorMessage: null
                    });
                }

                return state;

            case _ActionTypes.FETCHING_PRICE_DATA_FAIL:
                return babelHelpers.extends({}, state, {
                    isFetching: false,
                    data: [],
                    hasError: true,
                    errorMessage: action.err
                });

            default:
                return state;
        }
    };

    var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

    var initialState = {
        isFetching: false,
        data: [],
        hasError: false,
        errorMessage: null
    };
},549,[548],"NNCoins/src/Reducers/PriceDataReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _ActionTypes.FETCHING_NEWS_LIST:
                return babelHelpers.extends({}, state, {
                    isFetching: true,
                    hasError: false,
                    errorMessage: null
                });

            case _ActionTypes.FETCHING_NEWS_LIST_SUCCESS:
                if (state.data !== action.payload) {
                    var items = action.payload;
                    items[0].imageurl = 'https://ik.imagekit.io/bkjbek18z/content/wp-content/uploads/2018/04/Corporate-governance-underpins-DasCoin%E2%80%99s-rise.jpg';
                    return babelHelpers.extends({}, state, {
                        isFetching: false,
                        data: action.payload
                    });
                }

                return state;

            case _ActionTypes.FETCHING_NEWS_LIST_FAIL:
                return babelHelpers.extends({}, state, {
                    isFetching: false,
                    data: [],
                    hasError: true,
                    errorMessage: action.err
                });

            case _ActionTypes.VIEWABLE_NEWS_ITEMS_CHANGED:
                return babelHelpers.extends({}, state, {
                    viewableItems: action.payload
                });

            default:
                return state;
        }
    };

    var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

    var initialState = {
        isFetching: false,
        data: [],
        hasError: false,
        errorMessage: null,
        viewableItems: []
    };
},550,[548],"NNCoins/src/Reducers/NewsListReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO:
                return babelHelpers.extends({}, state, {
                    isFetching: true,
                    thumbnailUrl: state.thumbnailUrl,
                    videoUrl: state.videoUrl,
                    video: state.video,
                    hasError: false,
                    errorMessage: null
                });

            case _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO_SUCCESS:
                if (state.data !== action.payload) {
                    return babelHelpers.extends({}, state, {
                        isFetching: false,
                        thumbnailUrl: action.payload[0],
                        videoUrl: action.payload[1].url,
                        video: action.payload[1],
                        hasError: false,
                        errorMessage: null
                    });
                }

                return state;

            case _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO_FAIL:
                return babelHelpers.extends({}, state, {
                    isFetching: false,
                    thumbnailUrl: null,
                    videoUrl: null,
                    video: null,
                    hasError: true,
                    errorMessage: action.err
                });

            default:
                return state;
        }
    };

    var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

    var initialState = {
        isFetching: false,
        thumbnailUrl: null,
        videoUrl: null,
        video: null,
        hasError: false,
        errorMessage: null,
        id: 'weeklyVideo'
    };
},551,[548],"NNCoins/src/Reducers/WeeklyVideoReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _ActionTypes.CHAT_BUTTON_TAPPED:
                console.log('CHAT BUTTON TAPPED');
                return state;

            case _ActionTypes.SAVE_NICNAME_SET:
                console.log('SAVE_NICNAME_SET');
                return state;

            case _ActionTypes.SAVE_NICNAME_SET_SUCCESS:
                console.log('SAVE_NICNAME_SET_SUCCESS');
                return babelHelpers.extends({}, state, {
                    shouldShowModal: false,
                    modalVisible: false
                });

            case _ActionTypes.OPEN_CHAT_WINDOW:
                console.log('OPEN_CHAT_WINDOW');
                return babelHelpers.extends({}, state, {
                    badgeCount: 0
                });

            case _ActionTypes.OPEN_CHAT_FORM:
                console.log('OPEN_CHAT_FORM');
                return babelHelpers.extends({}, state, {
                    modalVisible: true
                });

            case _ActionTypes.CLOSE_CHAT_FORM:
                console.log('CLOSE_CHAT_FORM');
                return babelHelpers.extends({}, state, {
                    modalVisible: false
                });

            case _ActionTypes.SET_NICK_NAME:
                console.log('SET_NICK_NAME');
                return babelHelpers.extends({}, state, {
                    userNickName: action.payload
                });

            case _ActionTypes.CHECK_IF_NAME_SET_SUCCESS:
                console.log('CHECK_IF_NAME_SET_SUCCESS');
                return babelHelpers.extends({}, state, {
                    shouldShowModal: action.payload !== 'true'
                });

            case _ActionTypes.GET_UNREAD_COUNT:
                return state;

            case _ActionTypes.GET_UNREAD_COUNT_SUCCESS:
                return babelHelpers.extends({}, state, {
                    badgeCount: action.payload
                });

            default:
                return state;
        }
    };

    var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

    var initialState = {
        badgeCount: 0,
        modalVisible: false,
        userNickName: '',
        shouldShowModal: true
    };
},552,[548],"NNCoins/src/Reducers/ChatReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    switch (action.type) {
      case _ActionTypes.LOADING_CHART_PRICES:
        {
          return babelHelpers.extends({}, state, {
            loading: true
          });
        }

      case _ActionTypes.LOADING_CHART_PRICES_SUCCESS:
        {
          var priceData = action.payload.Data;
          return babelHelpers.extends({}, state, {
            loading: false,
            prices: priceData ? priceData.map(function (item) {
              return item.close;
            }) : []
          });
        }

      case _ActionTypes.SELECTED_CHART_RANGE:
        {
          var range = action.range;
          return babelHelpers.extends({}, state, {
            range: range
          });
        }

      case _ActionTypes.SELECTED_CURRENT_COIN:
        {
          var current = action.current;
          return babelHelpers.extends({}, state, {
            current: current
          });
        }

      default:
        {
          return state;
        }
    }
  };

  var _ActionTypes = require(_dependencyMap[0], "./../Utils/ActionTypes");

  var _Constants = require(_dependencyMap[1], "./../Utils/Constants");

  var initialState = {
    loading: true,
    current: 'BTC',
    range: '1D',
    prices: []
  };
},553,[548,554],"NNCoins/src/Reducers/ChartReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var COIN_MARKET_CAP_BASE_URL = exports.COIN_MARKET_CAP_BASE_URL = 'https://api.coinmarketcap.com';
  var CRYPTO_COMPARE_BASE_URL = exports.CRYPTO_COMPARE_BASE_URL = 'https://min-api.cryptocompare.com';
  var NNBITCOINS_BASE_URL = exports.NNBITCOINS_BASE_URL = 'https://99bitcoins.com/wp-json/99btc/v1';
  var NNBITCOINS_PRICE_BASE_URL = exports.NNBITCOINS_PRICE_BASE_URL = 'https://price.99bitcoins.com';
  var RANGE_1D = exports.RANGE_1D = '1D';
  var RANGE_1W = exports.RANGE_1W = '1W';
  var RANGE_1M = exports.RANGE_1M = '1M';
  var RANGE_3M = exports.RANGE_3M = '3M';
  var RANGE_6M = exports.RANGE_6M = '6M';
  var RANGE_1Y = exports.RANGE_1Y = '1Y';
  var RANGE_MAX = exports.RANGE_MAX = 'MAX';
  var RANGES = exports.RANGES = [RANGE_1D, RANGE_1W, RANGE_1M, RANGE_3M, RANGE_6M, RANGE_1Y, RANGE_MAX];
},554,[],"NNCoins/src/Utils/Constants.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.connect = exports.connectAdvanced = exports.createProvider = exports.Provider = undefined;

  var _Provider = require(_dependencyMap[0], './components/Provider');

  var _Provider2 = _interopRequireDefault(_Provider);

  var _connectAdvanced = require(_dependencyMap[1], './components/connectAdvanced');

  var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

  var _connect = require(_dependencyMap[2], './connect/connect');

  var _connect2 = _interopRequireDefault(_connect);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.Provider = _Provider2.default;
  exports.createProvider = _Provider.createProvider;
  exports.connectAdvanced = _connectAdvanced2.default;
  exports.connect = _connect2.default;
},555,[556,559,563],"react-redux/lib/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.createProvider = createProvider;

  var _react = require(_dependencyMap[0], 'react');

  var _propTypes = require(_dependencyMap[1], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _PropTypes = require(_dependencyMap[2], '../utils/PropTypes');

  var _warning = require(_dependencyMap[3], '../utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var didWarnAboutReceivingStore = false;

  function warnAboutReceivingStore() {
    if (didWarnAboutReceivingStore) {
      return;
    }

    didWarnAboutReceivingStore = true;
    (0, _warning2.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
  }

  function createProvider() {
    var _Provider$childContex;

    var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
    var subKey = arguments[1];
    var subscriptionKey = subKey || storeKey + 'Subscription';

    var Provider = function (_Component) {
      _inherits(Provider, _Component);

      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
      };

      function Provider(props, context) {
        _classCallCheck(this, Provider);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this[storeKey] = props.store;
        return _this;
      }

      Provider.prototype.render = function render() {
        return _react.Children.only(this.props.children);
      };

      return Provider;
    }(_react.Component);

    if (process.env.NODE_ENV !== 'production') {
      Provider.prototype.componentWillReceiveProps = function (nextProps) {
        if (this[storeKey] !== nextProps.store) {
          warnAboutReceivingStore();
        }
      };
    }

    Provider.propTypes = {
      store: _PropTypes.storeShape.isRequired,
      children: _propTypes2.default.element.isRequired
    };
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _PropTypes.storeShape.isRequired, _Provider$childContex[subscriptionKey] = _PropTypes.subscriptionShape, _Provider$childContex);
    return Provider;
  }

  exports.default = createProvider();
},556,[109,128,557,558],"react-redux/lib/components/Provider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.storeShape = exports.subscriptionShape = undefined;

  var _propTypes = require(_dependencyMap[0], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var subscriptionShape = exports.subscriptionShape = _propTypes2.default.shape({
    trySubscribe: _propTypes2.default.func.isRequired,
    tryUnsubscribe: _propTypes2.default.func.isRequired,
    notifyNestedSubs: _propTypes2.default.func.isRequired,
    isSubscribed: _propTypes2.default.func.isRequired
  });

  var storeShape = exports.storeShape = _propTypes2.default.shape({
    subscribe: _propTypes2.default.func.isRequired,
    dispatch: _propTypes2.default.func.isRequired,
    getState: _propTypes2.default.func.isRequired
  });
},557,[128],"react-redux/lib/utils/PropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = warning;

  function warning(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (e) {}
  }
},558,[],"react-redux/lib/utils/warning.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.default = connectAdvanced;

  var _hoistNonReactStatics = require(_dependencyMap[0], 'hoist-non-react-statics');

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _invariant = require(_dependencyMap[1], 'invariant');

  var _invariant2 = _interopRequireDefault(_invariant);

  var _react = require(_dependencyMap[2], 'react');

  var _Subscription = require(_dependencyMap[3], '../utils/Subscription');

  var _Subscription2 = _interopRequireDefault(_Subscription);

  var _PropTypes = require(_dependencyMap[4], '../utils/PropTypes');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  var hotReloadingVersion = 0;
  var dummyState = {};

  function noop() {}

  function makeSelectorStateful(sourceSelector, store) {
    var selector = {
      run: function runComponentSelector(props) {
        try {
          var nextProps = sourceSelector(store.getState(), props);

          if (nextProps !== selector.props || selector.error) {
            selector.shouldComponentUpdate = true;
            selector.props = nextProps;
            selector.error = null;
          }
        } catch (error) {
          selector.shouldComponentUpdate = true;
          selector.error = error;
        }
      }
    };
    return selector;
  }

  function connectAdvanced(selectorFactory) {
    var _contextTypes, _childContextTypes;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$getDisplayName = _ref.getDisplayName,
        getDisplayName = _ref$getDisplayName === undefined ? function (name) {
      return 'ConnectAdvanced(' + name + ')';
    } : _ref$getDisplayName,
        _ref$methodName = _ref.methodName,
        methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
        _ref$renderCountProp = _ref.renderCountProp,
        renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
        _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
        shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
        _ref$storeKey = _ref.storeKey,
        storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
        _ref$withRef = _ref.withRef,
        withRef = _ref$withRef === undefined ? false : _ref$withRef,
        connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

    var subscriptionKey = storeKey + 'Subscription';
    var version = hotReloadingVersion++;
    var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
    var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);
    return function wrapWithConnect(WrappedComponent) {
      (0, _invariant2.default)(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + (methodName + '. Instead received ' + JSON.stringify(WrappedComponent)));
      var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
      var displayName = getDisplayName(wrappedComponentName);

      var selectorFactoryOptions = _extends({}, connectOptions, {
        getDisplayName: getDisplayName,
        methodName: methodName,
        renderCountProp: renderCountProp,
        shouldHandleStateChanges: shouldHandleStateChanges,
        storeKey: storeKey,
        withRef: withRef,
        displayName: displayName,
        wrappedComponentName: wrappedComponentName,
        WrappedComponent: WrappedComponent
      });

      var Connect = function (_Component) {
        _inherits(Connect, _Component);

        function Connect(props, context) {
          _classCallCheck(this, Connect);

          var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

          _this.version = version;
          _this.state = {};
          _this.renderCount = 0;
          _this.store = props[storeKey] || context[storeKey];
          _this.propsMode = Boolean(props[storeKey]);
          _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
          (0, _invariant2.default)(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

          _this.initSelector();

          _this.initSubscription();

          return _this;
        }

        Connect.prototype.getChildContext = function getChildContext() {
          var _ref2;

          var subscription = this.propsMode ? null : this.subscription;
          return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
        };

        Connect.prototype.componentDidMount = function componentDidMount() {
          if (!shouldHandleStateChanges) return;
          this.subscription.trySubscribe();
          this.selector.run(this.props);
          if (this.selector.shouldComponentUpdate) this.forceUpdate();
        };

        Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          this.selector.run(nextProps);
        };

        Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
          return this.selector.shouldComponentUpdate;
        };

        Connect.prototype.componentWillUnmount = function componentWillUnmount() {
          if (this.subscription) this.subscription.tryUnsubscribe();
          this.subscription = null;
          this.notifyNestedSubs = noop;
          this.store = null;
          this.selector.run = noop;
          this.selector.shouldComponentUpdate = false;
        };

        Connect.prototype.getWrappedInstance = function getWrappedInstance() {
          (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
          return this.wrappedInstance;
        };

        Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
          this.wrappedInstance = ref;
        };

        Connect.prototype.initSelector = function initSelector() {
          var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
          this.selector = makeSelectorStateful(sourceSelector, this.store);
          this.selector.run(this.props);
        };

        Connect.prototype.initSubscription = function initSubscription() {
          if (!shouldHandleStateChanges) return;
          var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
          this.subscription = new _Subscription2.default(this.store, parentSub, this.onStateChange.bind(this));
          this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
        };

        Connect.prototype.onStateChange = function onStateChange() {
          this.selector.run(this.props);

          if (!this.selector.shouldComponentUpdate) {
            this.notifyNestedSubs();
          } else {
            this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
            this.setState(dummyState);
          }
        };

        Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
          this.componentDidUpdate = undefined;
          this.notifyNestedSubs();
        };

        Connect.prototype.isSubscribed = function isSubscribed() {
          return Boolean(this.subscription) && this.subscription.isSubscribed();
        };

        Connect.prototype.addExtraProps = function addExtraProps(props) {
          if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;

          var withExtras = _extends({}, props);

          if (withRef) withExtras.ref = this.setWrappedInstance;
          if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
          if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
          return withExtras;
        };

        Connect.prototype.render = function render() {
          var selector = this.selector;
          selector.shouldComponentUpdate = false;

          if (selector.error) {
            throw selector.error;
          } else {
            return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));
          }
        };

        return Connect;
      }(_react.Component);

      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = displayName;
      Connect.childContextTypes = childContextTypes;
      Connect.contextTypes = contextTypes;
      Connect.propTypes = contextTypes;

      if (process.env.NODE_ENV !== 'production') {
        Connect.prototype.componentWillUpdate = function componentWillUpdate() {
          var _this2 = this;

          if (this.version !== version) {
            this.version = version;
            this.initSelector();
            var oldListeners = [];

            if (this.subscription) {
              oldListeners = this.subscription.listeners.get();
              this.subscription.tryUnsubscribe();
            }

            this.initSubscription();

            if (shouldHandleStateChanges) {
              this.subscription.trySubscribe();
              oldListeners.forEach(function (listener) {
                return _this2.subscription.listeners.subscribe(listener);
              });
            }
          }
        };
      }

      return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);
    };
  }
},559,[560,561,109,562,557],"react-redux/lib/components/connectAdvanced.js");
__d(function (global, require, module, exports, _dependencyMap) {
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.hoistNonReactStatics = factory();
    })(this, function () {
        'use strict';

        var REACT_STATICS = {
            childContextTypes: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true
        };
        var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true
        };
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
        return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
            if (typeof sourceComponent !== 'string') {
                if (objectPrototype) {
                    var inheritedComponent = getPrototypeOf(sourceComponent);

                    if (inheritedComponent && inheritedComponent !== objectPrototype) {
                        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                    }
                }

                var keys = getOwnPropertyNames(sourceComponent);

                if (getOwnPropertySymbols) {
                    keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }

                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];

                    if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                        try {
                            defineProperty(targetComponent, key, descriptor);
                        } catch (e) {}
                    }
                }

                return targetComponent;
            }

            return targetComponent;
        };
    });
},560,[],"hoist-non-react-statics/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},561,[],"invariant/browser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var CLEARED = null;
  var nullListeners = {
    notify: function notify() {}
  };

  function createListenerCollection() {
    var current = [];
    var next = [];
    return {
      clear: function clear() {
        next = CLEARED;
        current = CLEARED;
      },
      notify: function notify() {
        var listeners = current = next;

        for (var i = 0; i < listeners.length; i++) {
          listeners[i]();
        }
      },
      get: function get() {
        return next;
      },
      subscribe: function subscribe(listener) {
        var isSubscribed = true;
        if (next === current) next = current.slice();
        next.push(listener);
        return function unsubscribe() {
          if (!isSubscribed || current === CLEARED) return;
          isSubscribed = false;
          if (next === current) next = current.slice();
          next.splice(next.indexOf(listener), 1);
        };
      }
    };
  }

  var Subscription = function () {
    function Subscription(store, parentSub, onStateChange) {
      _classCallCheck(this, Subscription);

      this.store = store;
      this.parentSub = parentSub;
      this.onStateChange = onStateChange;
      this.unsubscribe = null;
      this.listeners = nullListeners;
    }

    Subscription.prototype.addNestedSub = function addNestedSub(listener) {
      this.trySubscribe();
      return this.listeners.subscribe(listener);
    };

    Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
      this.listeners.notify();
    };

    Subscription.prototype.isSubscribed = function isSubscribed() {
      return Boolean(this.unsubscribe);
    };

    Subscription.prototype.trySubscribe = function trySubscribe() {
      if (!this.unsubscribe) {
        this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
        this.listeners = createListenerCollection();
      }
    };

    Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
      if (this.unsubscribe) {
        this.unsubscribe();
        this.unsubscribe = null;
        this.listeners.clear();
        this.listeners = nullListeners;
      }
    };

    return Subscription;
  }();

  exports.default = Subscription;
},562,[],"react-redux/lib/utils/Subscription.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.createConnect = createConnect;

  var _connectAdvanced = require(_dependencyMap[0], '../components/connectAdvanced');

  var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

  var _shallowEqual = require(_dependencyMap[1], '../utils/shallowEqual');

  var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

  var _mapDispatchToProps = require(_dependencyMap[2], './mapDispatchToProps');

  var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);

  var _mapStateToProps = require(_dependencyMap[3], './mapStateToProps');

  var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);

  var _mergeProps = require(_dependencyMap[4], './mergeProps');

  var _mergeProps2 = _interopRequireDefault(_mergeProps);

  var _selectorFactory = require(_dependencyMap[5], './selectorFactory');

  var _selectorFactory2 = _interopRequireDefault(_selectorFactory);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function match(arg, factories, name) {
    for (var i = factories.length - 1; i >= 0; i--) {
      var result = factories[i](arg);
      if (result) return result;
    }

    return function (dispatch, options) {
      throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
    };
  }

  function strictEqual(a, b) {
    return a === b;
  }

  function createConnect() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$connectHOC = _ref.connectHOC,
        connectHOC = _ref$connectHOC === undefined ? _connectAdvanced2.default : _ref$connectHOC,
        _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
        mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps2.default : _ref$mapStateToPropsF,
        _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
        mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps2.default : _ref$mapDispatchToPro,
        _ref$mergePropsFactor = _ref.mergePropsFactories,
        mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps2.default : _ref$mergePropsFactor,
        _ref$selectorFactory = _ref.selectorFactory,
        selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory2.default : _ref$selectorFactory;

    return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          _ref2$pure = _ref2.pure,
          pure = _ref2$pure === undefined ? true : _ref2$pure,
          _ref2$areStatesEqual = _ref2.areStatesEqual,
          areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
          _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
          areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? _shallowEqual2.default : _ref2$areOwnPropsEqua,
          _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
          areStatePropsEqual = _ref2$areStatePropsEq === undefined ? _shallowEqual2.default : _ref2$areStatePropsEq,
          _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
          areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? _shallowEqual2.default : _ref2$areMergedPropsE,
          extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

      var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
      var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
      var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
      return connectHOC(selectorFactory, _extends({
        methodName: 'connect',
        getDisplayName: function getDisplayName(name) {
          return 'Connect(' + name + ')';
        },
        shouldHandleStateChanges: Boolean(mapStateToProps),
        initMapStateToProps: initMapStateToProps,
        initMapDispatchToProps: initMapDispatchToProps,
        initMergeProps: initMergeProps,
        pure: pure,
        areStatesEqual: areStatesEqual,
        areOwnPropsEqual: areOwnPropsEqual,
        areStatePropsEqual: areStatePropsEqual,
        areMergedPropsEqual: areMergedPropsEqual
      }, extraOptions));
    };
  }

  exports.default = createConnect();
},563,[559,564,565,568,569,570],"react-redux/lib/connect/connect.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = shallowEqual;
  var hasOwn = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }
},564,[],"react-redux/lib/utils/shallowEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
  exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
  exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;

  var _redux = require(_dependencyMap[0], 'redux');

  var _wrapMapToProps = require(_dependencyMap[1], './wrapMapToProps');

  function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
    return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
  }

  function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
    return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return {
        dispatch: dispatch
      };
    }) : undefined;
  }

  function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
    return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
    }) : undefined;
  }

  exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
},565,[336,566],"react-redux/lib/connect/mapDispatchToProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
  exports.getDependsOnOwnProps = getDependsOnOwnProps;
  exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

  var _verifyPlainObject = require(_dependencyMap[0], '../utils/verifyPlainObject');

  var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch, options) {
      var constant = getConstant(dispatch, options);

      function constantSelector() {
        return constant;
      }

      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }

  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }

  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, _ref) {
      var displayName = _ref.displayName;

      var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
      };

      proxy.dependsOnOwnProps = true;

      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        var props = proxy(stateOrDispatch, ownProps);

        if (typeof props === 'function') {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }

        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(props, displayName, methodName);
        return props;
      };

      return proxy;
    };
  }
},566,[567],"react-redux/lib/connect/wrapMapToProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = verifyPlainObject;

  var _isPlainObject = require(_dependencyMap[0], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _warning = require(_dependencyMap[1], './warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function verifyPlainObject(value, displayName, methodName) {
    if (!(0, _isPlainObject2.default)(value)) {
      (0, _warning2.default)(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
    }
  }
},567,[338,558],"react-redux/lib/utils/verifyPlainObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
  exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;

  var _wrapMapToProps = require(_dependencyMap[0], './wrapMapToProps');

  function whenMapStateToPropsIsFunction(mapStateToProps) {
    return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
  }

  function whenMapStateToPropsIsMissing(mapStateToProps) {
    return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
      return {};
    }) : undefined;
  }

  exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
},568,[566],"react-redux/lib/connect/mapStateToProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.defaultMergeProps = defaultMergeProps;
  exports.wrapMergePropsFunc = wrapMergePropsFunc;
  exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
  exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;

  var _verifyPlainObject = require(_dependencyMap[0], '../utils/verifyPlainObject');

  var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return _extends({}, ownProps, stateProps, dispatchProps);
  }

  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, _ref) {
      var displayName = _ref.displayName,
          pure = _ref.pure,
          areMergedPropsEqual = _ref.areMergedPropsEqual;
      var hasRunOnce = false;
      var mergedProps = void 0;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

        if (hasRunOnce) {
          if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
          if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
        }

        return mergedProps;
      };
    };
  }

  function whenMergePropsIsFunction(mergeProps) {
    return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
  }

  function whenMergePropsIsOmitted(mergeProps) {
    return !mergeProps ? function () {
      return defaultMergeProps;
    } : undefined;
  }

  exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
},569,[567],"react-redux/lib/connect/mergeProps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
  exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
  exports.default = finalPropsSelectorFactory;

  var _verifySubselectors = require(_dependencyMap[0], './verifySubselectors');

  var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
    return function impureFinalPropsSelector(state, ownProps) {
      return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
    };
  }

  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
    var areStatesEqual = _ref.areStatesEqual,
        areOwnPropsEqual = _ref.areOwnPropsEqual,
        areStatePropsEqual = _ref.areStatePropsEqual;
    var hasRunAtLeastOnce = false;
    var state = void 0;
    var ownProps = void 0;
    var stateProps = void 0;
    var dispatchProps = void 0;
    var mergedProps = void 0;

    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }

    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewState() {
      var nextStateProps = mapStateToProps(state, ownProps);
      var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleSubsequentCalls(nextState, nextOwnProps) {
      var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      var stateChanged = !areStatesEqual(nextState, state);
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged) return handleNewPropsAndNewState();
      if (propsChanged) return handleNewProps();
      if (stateChanged) return handleNewState();
      return mergedProps;
    }

    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }

  function finalPropsSelectorFactory(dispatch, _ref2) {
    var initMapStateToProps = _ref2.initMapStateToProps,
        initMapDispatchToProps = _ref2.initMapDispatchToProps,
        initMergeProps = _ref2.initMergeProps,
        options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

    var mapStateToProps = initMapStateToProps(dispatch, options);
    var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
    var mergeProps = initMergeProps(dispatch, options);

    if (process.env.NODE_ENV !== 'production') {
      (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
    }

    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
    return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
  }
},570,[571],"react-redux/lib/connect/selectorFactory.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = verifySubselectors;

  var _warning = require(_dependencyMap[0], '../utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function verify(selector, methodName, displayName) {
    if (!selector) {
      throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
    } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
      if (!selector.hasOwnProperty('dependsOnOwnProps')) {
        (0, _warning2.default)('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
      }
    }
  }

  function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
    verify(mapStateToProps, 'mapStateToProps', displayName);
    verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
    verify(mergeProps, 'mergeProps', displayName);
  }
},571,[558],"react-redux/lib/connect/verifySubselectors.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/RouterComponent.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNativeRouterFlux = require(_dependencyMap[1], "react-native-router-flux");

  var _images = require(_dependencyMap[2], "@assets/images.js");

  var _images2 = babelHelpers.interopRequireDefault(_images);

  var _colors = require(_dependencyMap[3], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Price = require(_dependencyMap[4], "./Screens/Price/Price");

  var _Price2 = babelHelpers.interopRequireDefault(_Price);

  var _CoinPage = require(_dependencyMap[5], "./Screens/Coin/CoinPage");

  var _CoinPage2 = babelHelpers.interopRequireDefault(_CoinPage);

  var _NewsFeed = require(_dependencyMap[6], "./Screens/NewsFeed/NewsFeed");

  var _NewsFeed2 = babelHelpers.interopRequireDefault(_NewsFeed);

  var _NewsWebView = require(_dependencyMap[7], "./Screens/WebView/NewsWebView");

  var _NewsWebView2 = babelHelpers.interopRequireDefault(_NewsWebView);

  var _ChatForm = require(_dependencyMap[8], "./Screens/AMA/ChatForm");

  var _ChatForm2 = babelHelpers.interopRequireDefault(_ChatForm);

  var _ChatButton = require(_dependencyMap[9], "./Screens/AMA/ChatButton");

  var _ChatButton2 = babelHelpers.interopRequireDefault(_ChatButton);

  var _UnreadBadge = require(_dependencyMap[10], "./Screens/AMA/UnreadBadge");

  var _UnreadBadge2 = babelHelpers.interopRequireDefault(_UnreadBadge);

  var _EventHandler = require(_dependencyMap[11], "./EventHandler");

  var _EventHandler2 = babelHelpers.interopRequireDefault(_EventHandler);

  var _reactRedux = require(_dependencyMap[12], "react-redux");

  var _FetchNewsList = require(_dependencyMap[13], "../Actions/FetchNewsList");

  var _FetchNewsList2 = babelHelpers.interopRequireDefault(_FetchNewsList);

  var _FetchPriceData = require(_dependencyMap[14], "../Actions/FetchPriceData");

  var _FetchPriceData2 = babelHelpers.interopRequireDefault(_FetchPriceData);

  var _ChatActions = require(_dependencyMap[15], "../Actions/ChatActions");

  var _reactNativeFirebase = require(_dependencyMap[16], "react-native-firebase");

  var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

  var RouterComponent = function (_Component) {
    babelHelpers.inherits(RouterComponent, _Component);

    function RouterComponent() {
      babelHelpers.classCallCheck(this, RouterComponent);

      var _this = babelHelpers.possibleConstructorReturn(this, (RouterComponent.__proto__ || Object.getPrototypeOf(RouterComponent)).call(this));

      _this.onBackPress = function () {
        console.log('back press');

        if (_reactNativeRouterFlux.Actions.currentScene === 'article') {
          _reactNativeRouterFlux.Actions.pop();

          return true;
        }

        return false;
      };

      _reactNativeFirebase2.default.analytics().setAnalyticsCollectionEnabled(true);

      return _this;
    }

    babelHelpers.createClass(RouterComponent, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(
          _reactNativeRouterFlux.Router,
          {
            backAndroidHandler: this.onBackPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          },
          _react2.default.createElement(
            _reactNativeRouterFlux.Overlay,
            {
              key: "overlay",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 40
              }
            },
            _react2.default.createElement(
              _reactNativeRouterFlux.Scene,
              {
                key: "root",
                navigationBarTitleImage: _images2.default.logo,
                navigationBarTitleImageStyle: {
                  resizeMode: 'contain',
                  width: 180,
                  marginTop: 8
                },
                navigationBarStyle: {
                  backgroundColor: 'white',
                  paddingLeft: 8,
                  shadowOpacity: 0,
                  justifyContent: 'center',
                  elevation: 0,
                  borderBottomColor: 'transparent'
                },
                backButtonTintColor: _colors2.default.themeRed,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 41
                }
              },
              _react2.default.createElement(
                _reactNativeRouterFlux.Scene,
                {
                  key: "tabbar",
                  tabs: true,
                  tabBarStyle: {
                    backgroundColor: 'white'
                  },
                  tabBarPosition: 'top',
                  swipeEnabled: true,
                  wrap: false,
                  activeTintColor: _colors2.default.themeRed,
                  inactiveTintColor: _colors2.default.gray700,
                  labelStyle: {
                    fontWeight: 'bold'
                  },
                  focused: true,
                  indicatorStyle: {
                    backgroundColor: _colors2.default.themeRed
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                  }
                },
                _react2.default.createElement(_reactNativeRouterFlux.Scene, {
                  key: "News",
                  component: _NewsFeed2.default,
                  onEnter: function onEnter() {
                    console.log('on enter news');

                    _this2.props.fetchNewsList();

                    _this2.props.getUnreadCount();

                    _reactNativeFirebase2.default.analytics().logEvent("page_" + _reactNativeRouterFlux.Actions.currentScene.toLowerCase(), {});
                  },
                  lazy: true,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                  }
                }),
                _react2.default.createElement(_reactNativeRouterFlux.Scene, {
                  key: "Price",
                  component: _Price2.default,
                  onEnter: function onEnter() {
                    console.log('on enter prices');

                    _this2.props.fetchPriceData();

                    _this2.props.getUnreadCount();

                    _reactNativeFirebase2.default.analytics().logEvent("page_" + _reactNativeRouterFlux.Actions.currentScene.toLowerCase(), {});
                  },
                  lazy: true,
                  initial: true,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                  }
                })
              ),
              _react2.default.createElement(_reactNativeRouterFlux.Scene, {
                key: "article",
                component: _NewsWebView2.default,
                rightButtonImage: _images2.default.shareIcon,
                onRight: function onRight(scene) {
                  console.log(scene);
                  scene.component.prototype.onShare(scene.url);
                },
                onEnter: function onEnter(scene) {
                  _reactNativeFirebase2.default.analytics().logEvent("page_" + _reactNativeRouterFlux.Actions.currentScene, {
                    url: scene.url
                  });
                },
                back: true,
                navigationBarTitleImage: null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 103
                }
              }),
              _react2.default.createElement(_reactNativeRouterFlux.Scene, {
                key: "coin",
                component: _CoinPage2.default,
                onEnter: function onEnter(coin) {
                  _reactNativeFirebase2.default.analytics().logEvent("page_" + _reactNativeRouterFlux.Actions.currentScene, {
                    coin: coin.symbol
                  });
                },
                back: true,
                navigationBarTitleImage: null,
                nav: true,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 117
                }
              })
            ),
            _react2.default.createElement(_reactNativeRouterFlux.Scene, {
              component: _ChatButton2.default,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            }),
            _react2.default.createElement(_reactNativeRouterFlux.Scene, {
              component: _UnreadBadge2.default,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 129
              }
            }),
            _react2.default.createElement(_reactNativeRouterFlux.Scene, {
              component: _ChatForm2.default,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 130
              }
            }),
            _react2.default.createElement(_reactNativeRouterFlux.Scene, {
              component: _EventHandler2.default,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 131
              }
            })
          )
        );
      }
    }]);
    return RouterComponent;
  }(_react.Component);

  exports.default = (0, _reactRedux.connect)(null, {
    fetchNewsList: _FetchNewsList2.default,
    fetchPriceData: _FetchPriceData2.default,
    getUnreadCount: _ChatActions.getUnreadCount
  })(RouterComponent);
},572,[109,573,659,671,672,813,824,890,892,895,901,902,555,835,714,893,741],"NNCoins/src/components/RouterComponent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pathParser = exports.Overlay = exports.Tabs = exports.Drawer = exports.Stack = exports.Lightbox = exports.Modal = exports.Actions = exports.Scene = exports.Router = exports.Reducer = exports.ActionConst = undefined;

  var _ActionConst = require(_dependencyMap[0], './ActionConst');

  var ActionConst = _interopRequireWildcard(_ActionConst);

  var _Reducer = require(_dependencyMap[1], './Reducer');

  var _Reducer2 = _interopRequireDefault(_Reducer);

  var _Router = require(_dependencyMap[2], './Router');

  var _Router2 = _interopRequireDefault(_Router);

  var _Scene = require(_dependencyMap[3], './Scene');

  var _Scene2 = _interopRequireDefault(_Scene);

  var _navigationStore = require(_dependencyMap[4], './navigationStore');

  var _navigationStore2 = _interopRequireDefault(_navigationStore);

  var _Modal = require(_dependencyMap[5], './Modal');

  var _Modal2 = _interopRequireDefault(_Modal);

  var _Lightbox = require(_dependencyMap[6], './Lightbox');

  var _Lightbox2 = _interopRequireDefault(_Lightbox);

  var _Stack = require(_dependencyMap[7], './Stack');

  var _Stack2 = _interopRequireDefault(_Stack);

  var _Drawer = require(_dependencyMap[8], './Drawer');

  var _Drawer2 = _interopRequireDefault(_Drawer);

  var _Tabs = require(_dependencyMap[9], './Tabs');

  var _Tabs2 = _interopRequireDefault(_Tabs);

  var _Overlay = require(_dependencyMap[10], './Overlay');

  var _Overlay2 = _interopRequireDefault(_Overlay);

  var _pathParser = require(_dependencyMap[11], './pathParser');

  var _pathParser2 = _interopRequireDefault(_pathParser);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  exports.ActionConst = ActionConst;
  exports.Reducer = _Reducer2.default;
  exports.Router = _Router2.default;
  exports.Scene = _Scene2.default;
  exports.Actions = _navigationStore2.default;
  exports.Modal = _Modal2.default;
  exports.Lightbox = _Lightbox2.default;
  exports.Stack = _Stack2.default;
  exports.Drawer = _Drawer2.default;
  exports.Tabs = _Tabs2.default;
  exports.Overlay = _Overlay2.default;
  exports.pathParser = _pathParser2.default;
},573,[574,575,654,645,576,648,649,658,650,651,652,656],"react-native-router-flux/dist/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var JUMP = exports.JUMP = 'REACT_NATIVE_ROUTER_FLUX_JUMP';
  var PUSH = exports.PUSH = 'REACT_NATIVE_ROUTER_FLUX_PUSH';
  var PUSH_OR_POP = exports.PUSH_OR_POP = 'REACT_NATIVE_ROUTER_FLUX_PUSH_OR_POP';
  var REPLACE = exports.REPLACE = 'REACT_NATIVE_ROUTER_FLUX_REPLACE';
  var BACK = exports.BACK = 'REACT_NATIVE_ROUTER_FLUX_BACK';
  var BACK_ACTION = exports.BACK_ACTION = 'REACT_NATIVE_ROUTER_FLUX_BACK_ACTION';
  var POP_TO = exports.POP_TO = 'REACT_NATIVE_ROUTER_FLUX_POP_TO';
  var REFRESH = exports.REFRESH = 'REACT_NATIVE_ROUTER_FLUX_REFRESH';
  var RESET = exports.RESET = 'REACT_NATIVE_ROUTER_FLUX_RESET';
  var FOCUS = exports.FOCUS = 'REACT_NATIVE_ROUTER_FLUX_FOCUS';
  var BLUR = exports.BLUR = 'REACT_NATIVE_ROUTER_FLUX_BLUR';
  var ANDROID_BACK = exports.ANDROID_BACK = 'REACT_NATIVE_ROUTER_FLUX_ANDROID_BACK';
},574,[],"react-native-router-flux/dist/ActionConst.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportedActions = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _supportedActions;

  exports.reducer = reducer;
  exports.default = createReducer;

  var _navigationStore = require(_dependencyMap[0], './navigationStore');

  var _navigationStore2 = _interopRequireDefault(_navigationStore);

  var _ActionConst = require(_dependencyMap[1], './ActionConst');

  var ActionConst = _interopRequireWildcard(_ActionConst);

  var _reactNavigation = require(_dependencyMap[2], 'react-navigation');

  var _State = require(_dependencyMap[3], './State');

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var supportedActions = exports.supportedActions = (_supportedActions = {}, _defineProperty(_supportedActions, ActionConst.PUSH, _reactNavigation.NavigationActions.NAVIGATE), _defineProperty(_supportedActions, ActionConst.BACK, _reactNavigation.NavigationActions.BACK), _defineProperty(_supportedActions, ActionConst.REFRESH, _reactNavigation.NavigationActions.BACK), _defineProperty(_supportedActions, ActionConst.RESET, _reactNavigation.NavigationActions.RESET), _defineProperty(_supportedActions, ActionConst.REPLACE, _reactNavigation.NavigationActions.RESET), _supportedActions);

  var createAction = function createAction(type) {
    return function () {
      var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _extends({
        type: type
      }, payload);
    };
  };

  function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _navigationStore2.default.state;
    var action = arguments[1];
    var type = action.type;
    var routeName = action.routeName;

    if (supportedActions[type]) {
      var newState = _navigationStore2.default.router.getStateForAction(createAction(supportedActions[type])({
        routeName: routeName,
        params: action.params
      }), state);

      return newState || state;
    }

    if (type === ActionConst.JUMP) {
      var _newState = _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.navigate({
        routeName: routeName,
        params: action.params
      }), state);

      var activeState = (0, _State.getActiveState)(state);

      if (activeState.routeName === 'DrawerOpen') {
        activeState = (0, _State.getActiveStateExceptDrawer)(state);

        if ((0, _State.isActiveRoute)(state, routeName)) {
          return _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.navigate({
            routeName: 'DrawerClose'
          }), state);
        }
      }

      if ((0, _State.isActiveRoute)(state, routeName)) {
        return state;
      }

      var key = (0, _State.getActiveState)(_newState).key;
      return _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.setParams({
        key: key,
        params: action.params
      }), _newState);
    } else if (type === ActionConst.POP_TO) {
      var nextScene = '';
      var _newState2 = state;
      var currentState = state;

      while (_newState2 && nextScene !== routeName) {
        _newState2 = _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.back(), currentState);

        if (_newState2) {
          nextScene = (0, _State.getActiveState)(_newState2).routeName;

          if (nextScene !== routeName) {
            currentState = _newState2;
          }
        }
      }

      return nextScene === routeName ? _newState2 : state;
    } else if (type === ActionConst.POP_AND_PUSH) {
      var _newState3 = _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.back(), state);

      return _navigationStore2.default.router.getStateForAction(_reactNavigation.NavigationActions.navigate({
        routeName: routeName,
        params: action.params
      }), _newState3);
    }

    return _navigationStore2.default.router.getStateForAction(action, state) || state;
  }

  function createReducer() {
    return reducer;
  }
},575,[576,574,579,646],"react-native-router-flux/dist/Reducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.actionMap = undefined;

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _actionMap,
      _jsxFileName = 'src/navigationStore.js',
      _desc,
      _value,
      _class2,
      _descriptor,
      _descriptor2,
      _descriptor3,
      _descriptor4;

  var _react = require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _mobx = require(_dependencyMap[1], 'mobx');

  var _ActionConst = require(_dependencyMap[2], './ActionConst');

  var ActionConst = _interopRequireWildcard(_ActionConst);

  var _Util = require(_dependencyMap[3], './Util');

  var _reactNative = require(_dependencyMap[4], 'react-native');

  var _reactNavigation = require(_dependencyMap[5], 'react-navigation');

  var _NavBar = require(_dependencyMap[6], './NavBar');

  var _LightboxNavigator = require(_dependencyMap[7], './LightboxNavigator');

  var _LightboxNavigator2 = _interopRequireDefault(_LightboxNavigator);

  var _menu_burger = require(_dependencyMap[8], '../images/menu_burger.png');

  var _menu_burger2 = _interopRequireDefault(_menu_burger);

  var _Scene = require(_dependencyMap[9], './Scene');

  var _Scene2 = _interopRequireDefault(_Scene);

  var _propTypes = require(_dependencyMap[10], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _State = require(_dependencyMap[11], './State');

  var _Reducer = require(_dependencyMap[12], './Reducer');

  var _lodash = require(_dependencyMap[13], 'lodash.isequal');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _Modal = require(_dependencyMap[14], './Modal');

  var _Modal2 = _interopRequireDefault(_Modal);

  var _Lightbox = require(_dependencyMap[15], './Lightbox');

  var _Lightbox2 = _interopRequireDefault(_Lightbox);

  var _Drawer = require(_dependencyMap[16], './Drawer');

  var _Drawer2 = _interopRequireDefault(_Drawer);

  var _Tabs = require(_dependencyMap[17], './Tabs');

  var _Tabs2 = _interopRequireDefault(_Tabs);

  var _Overlay = require(_dependencyMap[18], './Overlay');

  var _Overlay2 = _interopRequireDefault(_Overlay);

  var _OverlayNavigator = require(_dependencyMap[19], './OverlayNavigator');

  var _OverlayNavigator2 = _interopRequireDefault(_OverlayNavigator);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var RightNavBarButton = void 0;
  var LeftNavBarButton = void 0;
  var BackNavBarButton = void 0;
  var counter = 0;
  var actionMap = exports.actionMap = (_actionMap = {}, _defineProperty(_actionMap, ActionConst.JUMP, 'jump'), _defineProperty(_actionMap, ActionConst.PUSH, 'push'), _defineProperty(_actionMap, ActionConst.REPLACE, 'replace'), _defineProperty(_actionMap, ActionConst.BACK, 'pop'), _defineProperty(_actionMap, ActionConst.BACK_ACTION, 'pop'), _defineProperty(_actionMap, ActionConst.POP_TO, 'popTo'), _defineProperty(_actionMap, ActionConst.REFRESH, 'refresh'), _defineProperty(_actionMap, ActionConst.RESET, 'reset'), _defineProperty(_actionMap, ActionConst.PUSH_OR_POP, 'push'), _actionMap);
  var reservedKeys = ['children', 'refs', 'addRef', 'removeRef', 'create', 'execute', 'popTo', 'navigate', 'replace', 'refresh', 'dispatch', 'push', 'setParams', 'run', 'onEnter', 'onRight', 'onLeft', 'left', 'back', 'right', 'rightButton', 'leftButton', 'on', 'onExit', 'pop', 'renderLeftButton', 'renderRightButton', 'renderTitle', 'navBar', 'title', 'drawerOpen', 'drawerClose'];
  var dontInheritKeys = ['component', 'contentComponent', 'tabBarComponent', 'modal', 'drawer', 'lightbox', 'overlay', 'tabs', 'navigator', 'children', 'key', 'ref', 'style', 'title', 'navTransparent', 'type', 'hideNavBar', 'hideTabBar', 'backToInitial'];

  function getValue(value, params) {
    return value instanceof Function ? value(params) : value;
  }

  function getProperties() {
    var component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var res = {};

    for (var _iterator = reservedKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator']();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var key = _ref;

      if (component[key]) {
        res[key] = component[key];
      }
    }

    delete res.children;
    return res;
  }

  function createTabBarOptions(_ref2) {
    var tabBarStyle = _ref2.tabBarStyle,
        activeTintColor = _ref2.activeTintColor,
        inactiveTintColor = _ref2.inactiveTintColor,
        activeBackgroundColor = _ref2.activeBackgroundColor,
        inactiveBackgroundColor = _ref2.inactiveBackgroundColor,
        showLabel = _ref2.showLabel,
        labelStyle = _ref2.labelStyle,
        tabStyle = _ref2.tabStyle,
        props = _objectWithoutProperties(_ref2, ['tabBarStyle', 'activeTintColor', 'inactiveTintColor', 'activeBackgroundColor', 'inactiveBackgroundColor', 'showLabel', 'labelStyle', 'tabStyle']);

    return _extends({}, props, {
      style: tabBarStyle,
      activeTintColor: activeTintColor,
      inactiveTintColor: inactiveTintColor,
      activeBackgroundColor: activeBackgroundColor,
      inactiveBackgroundColor: inactiveBackgroundColor,
      showLabel: showLabel,
      labelStyle: labelStyle,
      tabStyle: tabStyle
    });
  }

  function createNavigationOptions(params) {
    var title = params.title,
        backButtonImage = params.backButtonImage,
        navTransparent = params.navTransparent,
        backToInitial = params.backToInitial,
        hideNavBar = params.hideNavBar,
        hideTabBar = params.hideTabBar,
        backTitle = params.backTitle,
        right = params.right,
        rightButton = params.rightButton,
        left = params.left,
        leftButton = params.leftButton,
        navigationBarStyle = params.navigationBarStyle,
        headerStyle = params.headerStyle,
        navBarButtonColor = params.navBarButtonColor,
        tabBarLabel = params.tabBarLabel,
        tabBarIcon = params.tabBarIcon,
        icon = params.icon,
        getTitle = params.getTitle,
        renderTitle = params.renderTitle,
        panHandlers = params.panHandlers,
        navigationBarTitleImage = params.navigationBarTitleImage,
        navigationBarTitleImageStyle = params.navigationBarTitleImageStyle,
        component = params.component,
        rightTitle = params.rightTitle,
        leftTitle = params.leftTitle,
        leftButtonTextStyle = params.leftButtonTextStyle,
        rightButtonTextStyle = params.rightButtonTextStyle,
        backButtonTextStyle = params.backButtonTextStyle,
        headerTitleStyle = params.headerTitleStyle,
        titleStyle = params.titleStyle,
        navBar = params.navBar,
        onRight = params.onRight,
        onLeft = params.onLeft,
        rightButtonImage = params.rightButtonImage,
        leftButtonImage = params.leftButtonImage,
        init = params.init,
        back = params.back,
        renderBackButton = params.renderBackButton,
        renderNavigationBar = params.renderNavigationBar,
        hideDrawerButton = params.hideDrawerButton,
        drawerIcon = params.drawerIcon,
        drawerImage = params.drawerImage,
        drawerPosition = params.drawerPosition,
        props = _objectWithoutProperties(params, ['title', 'backButtonImage', 'navTransparent', 'backToInitial', 'hideNavBar', 'hideTabBar', 'backTitle', 'right', 'rightButton', 'left', 'leftButton', 'navigationBarStyle', 'headerStyle', 'navBarButtonColor', 'tabBarLabel', 'tabBarIcon', 'icon', 'getTitle', 'renderTitle', 'panHandlers', 'navigationBarTitleImage', 'navigationBarTitleImageStyle', 'component', 'rightTitle', 'leftTitle', 'leftButtonTextStyle', 'rightButtonTextStyle', 'backButtonTextStyle', 'headerTitleStyle', 'titleStyle', 'navBar', 'onRight', 'onLeft', 'rightButtonImage', 'leftButtonImage', 'init', 'back', 'renderBackButton', 'renderNavigationBar', 'hideDrawerButton', 'drawerIcon', 'drawerImage', 'drawerPosition']);

    var NavBar = renderNavigationBar || navBar;

    if (component && component.navigationOptions) {
      return component.navigationOptions;
    }

    return function (_ref3) {
      var navigation = _ref3.navigation,
          screenProps = _ref3.screenProps;
      var navigationParams = navigation.state.params || {};

      var state = _extends({
        navigation: navigation
      }, params, navigationParams, screenProps);

      var res = _extends({}, props, {
        headerTintColor: navBarButtonColor || props.tintColor || navigationParams.tintColor || navigationParams.headerTintColor,
        headerTitleStyle: headerTitleStyle || titleStyle,
        title: getValue(navigationParams.title || title || getTitle, state),
        headerBackTitle: getValue(navigationParams.backTitle || backTitle, state),
        headerRight: getValue(navigationParams.right || right || rightButton || params.renderRightButton, state),
        headerLeft: getValue(navigationParams.left || left || leftButton || params.renderLeftButton, state),
        headerTitle: getValue(navigationParams.renderTitle || renderTitle || params.renderTitle, state),
        headerStyle: getValue(navigationParams.headerStyle || headerStyle || navigationBarStyle, state),
        headerBackImage: navigationParams.backButtonImage || backButtonImage
      });

      var NavBarFromParams = navigationParams.renderNavigationBar || navigationParams.navBar;

      if (NavBarFromParams != null) {
        if (NavBarFromParams) {
          res.header = function (data) {
            return _react2.default.createElement(NavBarFromParams, _extends({
              navigation: navigation
            }, state, data, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 142
              }
            }));
          };
        }
      } else if (NavBar) {
        res.header = function (data) {
          return _react2.default.createElement(NavBar, _extends({
            navigation: navigation
          }, state, data, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 145
            }
          }));
        };
      }

      if (typeof navigationParams.panHandlers !== 'undefined') {
        if (navigationParams.panHandlers === null) {
          res.gesturesEnabled = false;
        }
      } else if (panHandlers === null) {
        res.gesturesEnabled = false;
      }

      if (navigationBarTitleImage) {
        res.headerTitle = _react2.default.createElement(_reactNative.Image, {
          source: navigationBarTitleImage,
          style: navigationBarTitleImageStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 157
          }
        });
      }

      if (tabBarLabel) {
        res.tabBarLabel = tabBarLabel;
      }

      if (tabBarIcon || icon) {
        var Icon = tabBarIcon || icon;

        res.tabBarIcon = function (data) {
          return _react2.default.createElement(Icon, _extends({}, state, data, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 166
            }
          }));
        };
      }

      var componentData = {};

      if (component) {
        var _arr = ['onRight', 'onLeft', 'rightButton', 'leftButton', 'leftTitle', 'rightTitle', 'rightButtonImage', 'leftButtonImage', 'rightButtonTextStyle', 'leftButtonTextStyle', 'rightButtonIconStyle', 'leftButtonIconStyle', 'leftButtonTintColor', 'rightButtonTintColor'];

        for (var _i2 = 0; _i2 < _arr.length; _i2++) {
          var key = _arr[_i2];

          if (component[key]) {
            componentData[key] = component[key];
          }
        }
      }

      if (rightButtonImage || rightTitle || params.renderRightButton || onRight || navigationParams.onRight || navigationParams.rightTitle || navigationParams.rightButtonImage || rightButtonTextStyle || (drawerImage || drawerIcon) && !hideDrawerButton && drawerPosition === 'right') {
        res.headerRight = getValue(navigationParams.right || navigationParams.rightButton || params.renderRightButton, _extends({}, navigationParams, screenProps)) || _react2.default.createElement(RightNavBarButton, _extends({}, params, navigationParams, componentData, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 184
          }
        }));
      }

      if (leftButtonImage || backButtonImage || backTitle || leftTitle || params.renderLeftButton || leftButtonTextStyle || renderBackButton || backButtonTextStyle || onLeft || navigationParams.leftTitle || navigationParams.onLeft || navigationParams.leftButtonImage || navigationParams.backButtonImage || navigationParams.backTitle || (drawerImage || drawerIcon) && !hideDrawerButton && drawerPosition !== 'right') {
        res.headerLeft = getValue(navigationParams.left || navigationParams.leftButton || params.renderLeftButton, _extends({}, params, navigationParams, screenProps)) || (onLeft && (leftTitle || navigationParams.leftTitle || leftButtonImage || navigationParams.leftButtonImage) || drawerImage || drawerIcon) && _react2.default.createElement(LeftNavBarButton, _extends({}, params, navigationParams, componentData, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 192
          }
        })) || res.headerLeft || (init ? null : renderBackButton && renderBackButton(state) || _react2.default.createElement(BackNavBarButton, _extends({}, state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        })));
      }

      if (back) {
        res.headerLeft = renderBackButton && renderBackButton(state) || _react2.default.createElement(BackNavBarButton, _extends({}, state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 197
          }
        }));
      }

      if (typeof navigationParams.left !== 'undefined' || typeof navigationParams.leftButton !== 'undefined' || typeof navigationParams.renderLeftButton !== 'undefined') {
        if (navigationParams.left === null || navigationParams.leftButton === null || navigationParams.renderLeftButton === null) {
          res.headerLeft = null;
        }
      }

      if (navigationParams.hideTabBar != null) {
        if (navigationParams.hideTabBar) {
          res.tabBarVisible = false;
        }
      } else if (hideTabBar) {
        res.tabBarVisible = false;
      }

      if (navigationParams.hideNavBar != null) {
        if (navigationParams.hideNavBar) {
          res.header = null;
        }
      } else if (hideNavBar) {
        res.header = null;
      }

      if (navTransparent) {
        res.headerStyle = {
          position: 'absolute',
          backgroundColor: 'transparent',
          zIndex: 100,
          top: 0,
          left: 0,
          right: 0,
          borderBottomWidth: 0,
          elevation: 1
        };
      }

      if (backToInitial) {
        res.tabBarOnPress = function (_ref4) {
          var scene = _ref4.scene,
              jumpToIndex = _ref4.jumpToIndex;

          if (scene.focused) {
            if (scene.route.index !== 0) {
              for (var i = 1; i < scene.route.routes.length; i++) {
                navigation.dispatch(_reactNavigation.NavigationActions.back());
              }
            }
          } else {
            jumpToIndex(scene.index);
          }
        };
      }

      return res;
    };
  }

  function originalRouteName(routeName) {
    if (routeName.startsWith('_')) {
      return routeName.substring(1);
    }

    return routeName;
  }

  function extendProps(props, store) {
    if (!props) {
      return {};
    }

    var res = _extends({}, props);

    var _loop = function _loop(transition) {
      if (reservedKeys.indexOf(transition) === -1 && transition.startsWith('on') && transition.charAt(2) >= 'A' && transition.charAt(2) <= 'Z' && typeof props[transition] === 'string') {
        if (store[props[transition]]) {
          res[transition] = function (params) {
            return store[props[transition]](params);
          };
        }
      }
    };

    for (var _iterator2 = Object.keys(props), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator']();;) {
      var _ref5;

      if (_isArray2) {
        if (_i3 >= _iterator2.length) break;
        _ref5 = _iterator2[_i3++];
      } else {
        _i3 = _iterator2.next();
        if (_i3.done) break;
        _ref5 = _i3.value;
      }

      var transition = _ref5;

      _loop(transition);
    }

    return res;
  }

  function createWrapper(Component, wrapBy, store) {
    if (!Component) {
      return null;
    }

    var wrapper = wrapBy || function (props) {
      return props;
    };

    if (!Component.prototype || Component.prototype.render) {
      var _class, _temp;

      var Wrapped = (_temp = _class = function (_React$Component) {
        _inherits(Wrapped, _React$Component);

        function Wrapped() {
          _classCallCheck(this, Wrapped);

          var _this = _possibleConstructorReturn(this, (Wrapped.__proto__ || Object.getPrototypeOf(Wrapped)).call(this));

          _this.onRef = _this.onRef.bind(_this);
          return _this;
        }

        _createClass(Wrapped, [{
          key: 'componentDidMount',
          value: function componentDidMount() {
            var navigation = this.props.navigation;

            if (this.ref && navigation && navigation.state && navigation.state.routeName) {
              store.addRef(originalRouteName(navigation.state.routeName), this.ref);
            }

            if (this.ref && this.ref.onEnter) {
              this.ref.onEnter(navigation && navigation.state);
            }
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            var navigation = this.props.navigation;

            if (this.ref && navigation && navigation.state && navigation.state.routeName) {
              store.deleteRef(originalRouteName(navigation.state.routeName));
            }

            if (this.ref && this.ref.onExit) {
              this.ref.onExit(navigation && navigation.state);
            }

            this.ref = null;
          }
        }, {
          key: 'onRef',
          value: function onRef(ref) {
            this.ref = ref;
          }
        }, {
          key: 'render',
          value: function render() {
            var navigation = this.props.navigation;

            if (!navigation || !navigation.state) {
              return _react2.default.createElement(Component, _extends({
                ref: this.onRef
              }, this.props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 317
                }
              }));
            }

            return _react2.default.createElement(Component, _extends({
              ref: this.onRef
            }, this.props, extendProps(navigation.state.params, store), {
              name: navigation.state.routeName,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 319
              }
            }));
          }
        }]);

        return Wrapped;
      }(_react2.default.Component), _class.propTypes = {
        navigation: _propTypes2.default.object
      }, _temp);
      return wrapper(Wrapped);
    }

    function StatelessWrapped(_ref6) {
      var navigation = _ref6.navigation,
          props = _objectWithoutProperties(_ref6, ['navigation']);

      return _react2.default.createElement(Component, _extends({}, props, {
        navigation: navigation
      }, extendProps(navigation.state.params, store), {
        name: navigation.state.routeName,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 327
        }
      }));
    }

    StatelessWrapped.propTypes = {
      navigation: _propTypes2.default.object
    };
    return wrapper(StatelessWrapped);
  }

  function filterParam() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (data.toString() !== '[object Object]') {
      return {
        data: data
      };
    }

    var proto = (data || {}).constructor.name;

    if (!data || proto !== 'Object') {
      return {};
    }

    return data;
  }

  function uniteParams(routeName, params) {
    var res = {};

    for (var _iterator3 = params, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator']();;) {
      var _ref7;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref7 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref7 = _i4.value;
      }

      var param = _ref7;

      if (param) {
        res = _extends({}, res, filterParam(param));
      }
    }

    res.routeName = routeName;
    return res;
  }

  var defaultSuccess = function defaultSuccess() {};

  var defaultFailure = function defaultFailure() {};

  var NavigationStore = (_class2 = function () {
    function NavigationStore() {
      var _this2 = this;

      _classCallCheck(this, NavigationStore);

      this.refs = {};
      this.states = {};
      this.reducer = null;

      _initDefineProp(this, 'currentScene', _descriptor, this);

      _initDefineProp(this, 'prevScene', _descriptor2, this);

      _initDefineProp(this, 'currentParams', _descriptor3, this);

      this.addRef = function (name, ref) {
        _this2.refs[name] = ref;
      };

      this.deleteRef = function (name) {
        delete _this2.refs[name];
      };

      this.create = function (scene) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var wrapBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (props) {
          return props;
        };
        (0, _Util.assert)(!Array.isArray(scene), 'Router should contain only one scene, please wrap your scenes with root Scene ');
        RightNavBarButton = wrapBy(_NavBar.RightButton);
        LeftNavBarButton = wrapBy(_NavBar.LeftButton);
        BackNavBarButton = wrapBy(_NavBar.BackButton);

        var AppNavigator = _this2.processScene(scene, params, [], wrapBy);

        _this2.router = AppNavigator.router;

        _this2.dispatch(_reactNavigation.NavigationActions.init());

        return AppNavigator;
      };

      this.processScene = function (scene) {
        var inheritProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var clones = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var wrapBy = arguments[3];
        (0, _Util.assert)(scene.props, 'props should be defined');

        if (!scene.props.children) {
          return null;
        }

        var res = {};
        var order = [];

        var _scene$props = scene.props,
            navigator = _scene$props.navigator,
            contentComponent = _scene$props.contentComponent,
            drawerWidth = _scene$props.drawerWidth,
            drawerLockMode = _scene$props.drawerLockMode,
            lazy = _scene$props.lazy,
            duration = _scene$props.duration,
            parentProps = _objectWithoutProperties(_scene$props, ['navigator', 'contentComponent', 'drawerWidth', 'drawerLockMode', 'lazy', 'duration']);

        var tabs = parentProps.tabs,
            modal = parentProps.modal,
            lightbox = parentProps.lightbox,
            overlay = parentProps.overlay,
            tabBarPosition = parentProps.tabBarPosition,
            drawer = parentProps.drawer,
            tabBarComponent = parentProps.tabBarComponent,
            transitionConfig = parentProps.transitionConfig;

        if (scene.type === _Modal2.default) {
          modal = true;
        } else if (scene.type === _Drawer2.default) {
          drawer = true;
        } else if (scene.type === _Lightbox2.default) {
          lightbox = true;
        } else if (scene.type === _Tabs2.default) {
          tabs = true;
        } else if (scene.type === _Overlay2.default) {
          overlay = true;
        }

        if (duration !== undefined && !transitionConfig) {
          transitionConfig = function transitionConfig() {
            return {
              transitionSpec: {
                duration: duration,
                timing: _reactNative.Animated.timing,
                easing: _reactNative.Easing.step0
              }
            };
          };
        }

        var commonProps = _extends({}, inheritProps, parentProps);

        delete commonProps.children;
        delete commonProps.component;

        for (var _iterator4 = Object.keys(commonProps), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator' : '@@iterator' : '@@iterator']();;) {
          var _ref8;

          if (_isArray4) {
            if (_i5 >= _iterator4.length) break;
            _ref8 = _iterator4[_i5++];
          } else {
            _i5 = _iterator4.next();
            if (_i5.done) break;
            _ref8 = _i5.value;
          }

          var pkey = _ref8;

          if (dontInheritKeys.includes(pkey) && (pkey === 'type' || pkey === 'hideNavBar' || !parentProps[pkey])) {
            delete commonProps[pkey];
          }
        }

        if (drawer) {
          commonProps.drawerImage = commonProps.drawerImage || _menu_burger2.default;
        }

        var children = !Array.isArray(parentProps.children) ? [parentProps.children] : [].concat.apply([], parentProps.children);

        if (!drawer && !tabs && !overlay) {
          children.push.apply(children, _toConsumableArray(clones));
        }

        for (var _iterator5 = children, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator' : '@@iterator' : '@@iterator']();;) {
          var _ref9;

          if (_isArray5) {
            if (_i6 >= _iterator5.length) break;
            _ref9 = _iterator5[_i6++];
          } else {
            _i6 = _iterator5.next();
            if (_i6.done) break;
            _ref9 = _i6.value;
          }

          var child = _ref9;

          if (child.props.clone) {
            if (clones.indexOf(child) === -1) {
              clones.push(child);
            }
          }
        }

        var initialRouteName = void 0;
        var initialRouteParams = void 0;

        var _loop2 = function _loop2(_child) {
          var key = _child.key || 'key' + counter++;
          var init = key === children[0].key;
          (0, _Util.assert)(reservedKeys.indexOf(key) === -1, 'Scene name cannot be reserved word: ' + _child.key);

          var _child$props = _child.props,
              component = _child$props.component,
              _child$props$type = _child$props.type,
              type = _child$props$type === undefined ? tabs || drawer ? 'jump' : 'push' : _child$props$type,
              path = _child$props.path,
              onEnter = _child$props.onEnter,
              onExit = _child$props.onExit,
              on = _child$props.on,
              failure = _child$props.failure,
              success = _child$props.success,
              wrap = _child$props.wrap,
              _child$props$initial = _child$props.initial,
              initial = _child$props$initial === undefined ? false : _child$props$initial,
              props = _objectWithoutProperties(_child$props, ['component', 'type', 'path', 'onEnter', 'onExit', 'on', 'failure', 'success', 'wrap', 'initial']);

          if (!_this2.states[key]) {
            _this2.states[key] = {};
          }

          for (var _iterator7 = Object.keys(props), _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator' : '@@iterator' : '@@iterator']();;) {
            var _ref11;

            if (_isArray7) {
              if (_i8 >= _iterator7.length) break;
              _ref11 = _iterator7[_i8++];
            } else {
              _i8 = _iterator7.next();
              if (_i8.done) break;
              _ref11 = _i8.value;
            }

            var transition = _ref11;

            if (reservedKeys.indexOf(transition) === -1 && props[transition] instanceof Function) {
              _this2.states[key][transition] = props[transition];
            }
          }

          delete props.children;

          if (success) {
            _this2.states[key].success = success instanceof Function ? success : function (args) {
              console.log('Transition to state=' + success);

              _this2[success](args);
            };
          }

          if (failure) {
            _this2.states[key].failure = failure instanceof Function ? failure : function (args) {
              console.log('Transition to state=' + failure);

              _this2[failure](args);
            };
          }

          if (path) {
            _this2.states[key].path = path;
          }

          var screen = {
            screen: createWrapper(component, wrapBy, _this2) || _this2.processScene(_child, commonProps, clones) || lightbox && function () {
              return null;
            },
            navigationOptions: createNavigationOptions(_extends({}, commonProps, {
              hideNavBar: parentProps.hideNavBar
            }, getProperties(component), _child.props, {
              init: init,
              component: component
            }))
          };
          var wrapNavBar = drawer || tabs || wrap;

          if (wrap === false || commonProps.wrap === false) {
            wrapNavBar = false;
          }

          if (component && wrapNavBar) {
            res[key] = {
              screen: _this2.processScene({
                key: key,
                props: {
                  children: {
                    key: '_' + key,
                    props: _extends({}, _child.props, {
                      wrap: false
                    })
                  }
                }
              }, commonProps, clones, wrapBy),
              navigationOptions: createNavigationOptions(_extends({}, commonProps, _child.props, {
                hideNavBar: true
              }))
            };
          } else {
            res[key] = screen;
          }

          props.init = true;

          if (!_this2[key]) {
            _this2[key] = new Function('actions', 'props', 'type', 'return function ' + key.replace(/\W/g, '_') + '(params){ actions.execute(type, \'' + key + '\', props, params)}')(_this2, _extends({}, commonProps, props), type);
          }

          if ((onEnter || on || component && component.onEnter) && !_this2[key + _Util.OnEnter]) {
            _this2[key + _Util.OnEnter] = onEnter || on || component.onEnter;
          }

          if ((onExit || component && component.onExit) && !_this2[key + _Util.OnExit]) {
            _this2[key + _Util.OnExit] = onExit || component.onExit;
          }

          order.push(key);

          if (initial || _child.props.initial || !initialRouteName) {
            initialRouteName = key;
            initialRouteParams = _extends({}, commonProps, props);
          }
        };

        for (var _iterator6 = children, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator' : '@@iterator' : '@@iterator']();;) {
          var _ref10;

          if (_isArray6) {
            if (_i7 >= _iterator6.length) break;
            _ref10 = _iterator6[_i7++];
          } else {
            _i7 = _iterator6.next();
            if (_i7.done) break;
            _ref10 = _i7.value;
          }

          var _child = _ref10;

          _loop2(_child);
        }

        var mode = modal ? 'modal' : 'card';

        if (navigator) {
          return navigator(res, _extends({
            lazy: lazy,
            initialRouteName: initialRouteName,
            initialRouteParams: initialRouteParams,
            contentComponent: contentComponent,
            order: order
          }, commonProps, {
            navigationOptions: createNavigationOptions(commonProps)
          }));
        }

        if (lightbox) {
          return (0, _LightboxNavigator2.default)(res, _extends({
            mode: mode,
            initialRouteParams: initialRouteParams,
            initialRouteName: initialRouteName
          }, commonProps, {
            navigationOptions: createNavigationOptions(commonProps)
          }));
        } else if (tabs) {
          if (!tabBarComponent) {
            tabBarComponent = tabBarPosition === 'top' ? function (props) {
              return _react2.default.createElement(_reactNavigation.TabBarTop, _extends({}, props, commonProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 525
                }
              }));
            } : function (props) {
              return _react2.default.createElement(_reactNavigation.TabBarBottom, _extends({}, props, commonProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 526
                }
              }));
            };
          }

          if (!tabBarPosition) {
            tabBarPosition = _reactNative.Platform.OS === 'android' ? 'top' : 'bottom';
          }

          return (0, _reactNavigation.TabNavigator)(res, _extends({
            lazy: lazy,
            tabBarComponent: tabBarComponent,
            tabBarPosition: tabBarPosition,
            initialRouteName: initialRouteName,
            initialRouteParams: initialRouteParams,
            order: order
          }, commonProps, {
            tabBarOptions: createTabBarOptions(commonProps),
            navigationOptions: createNavigationOptions(commonProps)
          }));
        } else if (drawer) {
          var config = _extends({
            initialRouteName: initialRouteName,
            contentComponent: contentComponent,
            order: order,
            drawerOpenRoute: 'DrawerOpen',
            drawerCloseRoute: 'DrawerClose',
            drawerToggleRoute: 'DrawerToggle'
          }, commonProps);

          if (drawerWidth) {
            config.drawerWidth = drawerWidth;
          }

          if (drawerLockMode) {
            config.drawerLockMode = drawerLockMode;
          }

          return (0, _reactNavigation.DrawerNavigator)(res, config);
        } else if (overlay) {
          return (0, _OverlayNavigator2.default)(res, _extends({
            lazy: lazy,
            initialRouteName: initialRouteName,
            contentComponent: contentComponent,
            initialRouteParams: initialRouteParams,
            order: order
          }, commonProps, {
            tabBarOptions: createTabBarOptions(commonProps),
            navigationOptions: createNavigationOptions(commonProps)
          }));
        }

        return (0, _reactNavigation.StackNavigator)(res, _extends({
          mode: mode,
          initialRouteParams: initialRouteParams,
          initialRouteName: initialRouteName
        }, commonProps, {
          transitionConfig: transitionConfig,
          navigationOptions: createNavigationOptions(commonProps)
        }));
      };

      this.nextState = function (state, cmd) {
        return _this2.reducer ? _this2.reducer(state, cmd) : (0, _Reducer.reducer)(state, cmd);
      };

      this.dispatch = function (cmd) {
        _this2.setState(_this2.nextState(_this2.state, cmd));
      };

      _initDefineProp(this, 'setState', _descriptor4, this);

      this.execute = function (actionType, routeName) {
        for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          params[_key - 2] = arguments[_key];
        }

        var res = uniteParams(routeName, params);
        var overridenType = res.type || actionType;
        var type = actionMap[overridenType] || overridenType;

        if (type === 'pop') {
          _this2[type](res);
        } else {
          _this2[type](routeName, res);
        }
      };

      this.push = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.PUSH,
          routeName: routeName,
          params: params
        });
      };

      this.jump = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.JUMP,
          routeName: routeName,
          params: params
        });
      };

      this.drawerOpen = function () {
        _this2.dispatch(_reactNavigation.NavigationActions.navigate({
          routeName: 'DrawerOpen'
        }));
      };

      this.drawerClose = function () {
        _this2.dispatch(_reactNavigation.NavigationActions.navigate({
          routeName: 'DrawerClose'
        }));
      };

      this.refresh = function (data) {
        var key = (0, _State.getActiveState)(_this2._state).key;
        var params = filterParam(data);

        _this2.dispatch(_reactNavigation.NavigationActions.setParams({
          key: key,
          params: params
        }));
      };

      this.pop = function () {
        var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            timeout = _ref12.timeout,
            params = _objectWithoutProperties(_ref12, ['timeout']);

        var previous = (0, _State.getActiveState)(_this2.state);
        var res = filterParam(params);

        if (timeout) {
          setTimeout(function () {
            return _this2.pop(params);
          }, timeout);
        } else {
          _this2.dispatch(_reactNavigation.NavigationActions.back());

          if (res.refresh) {
            _this2.refresh(res.refresh);
          }
        }

        return !(0, _lodash2.default)(previous, (0, _State.getActiveState)(_this2.state));
      };

      this.popTo = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.POP_TO,
          routeName: routeName,
          params: params
        });
      };

      this.popAndPush = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.POP_AND_PUSH,
          routeName: routeName,
          params: params
        });
      };

      this.replace = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.REPLACE,
          routeName: routeName,
          params: params
        });
      };

      this.reset = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch(_reactNavigation.NavigationActions.reset({
          key: null,
          index: 0,
          actions: [_reactNavigation.NavigationActions.navigate({
            routeName: routeName,
            params: params
          })]
        }));
      };
    }

    _createClass(NavigationStore, [{
      key: 'state',
      get: function get() {
        var scene = this.currentScene;
        var params = this.currentParams;
        return this._state;
      }
    }]);

    return NavigationStore;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'currentScene', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'prevScene', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'currentParams', [_mobx.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'setState', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
      var _this3 = this;

      return function _callee(newState) {
        var state, currentScene, exitHandler, res, handler, _success, _failure, params, _res;

        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (newState) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return');

              case 2:
                state = (0, _State.getActiveState)(newState);

                if (!((0, _lodash2.default)(state.params, _this3._currentParams) && state.routeName === _this3.currentScene)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt('return');

              case 5:
                currentScene = _this3.currentScene;
                _this3._state = newState;
                _this3.currentScene = state.routeName;
                _this3.prevScene = currentScene;
                _this3.currentParams = state.params;
                _this3._currentParams = state.params;

                if (!(currentScene !== _this3.currentScene && _this3.currentScene !== 'DrawerOpen' && _this3.currentScene !== 'DrawerClose')) {
                  _context.next = 32;
                  break;
                }

                _this3.dispatch({
                  type: ActionConst.BLUR,
                  routeName: currentScene
                });

                exitHandler = _this3[currentScene + _Util.OnExit];

                if (exitHandler) {
                  try {
                    res = exitHandler();

                    if (res instanceof Promise) {
                      res.then(defaultSuccess, defaultFailure);
                    }
                  } catch (e) {
                    console.error('Error during onExit handler:', e);
                  }
                }

                _this3.dispatch({
                  type: ActionConst.FOCUS,
                  routeName: _this3.currentScene,
                  params: _this3._currentParams
                });

                if (!_this3.states[_this3.currentScene]) {
                  _context.next = 32;
                  break;
                }

                handler = _this3[_this3.currentScene + _Util.OnEnter];
                _success = _this3.states[_this3.currentScene].success || defaultSuccess;
                _failure = _this3.states[_this3.currentScene].failure || defaultFailure;

                if (!handler) {
                  _context.next = 32;
                  break;
                }

                _context.prev = 21;
                params = (0, _State.getActiveState)(_this3._state).params;
                _context.next = 25;
                return regeneratorRuntime.awrap(handler(params));

              case 25:
                _res = _context.sent;

                if (_res) {
                  _success(_res);
                } else {
                  _failure();
                }

                _context.next = 32;
                break;

              case 29:
                _context.prev = 29;
                _context.t0 = _context['catch'](21);

                _failure({
                  error: _context.t0.message
                });

              case 32:
              case 'end':
                return _context.stop();
            }
          }
        }, null, _this3, [[21, 29]]);
      };
    }
  })), _class2);
  exports.default = new NavigationStore();
},576,[109,577,574,578,12,579,641,643,644,645,128,646,575,647,648,649,650,651,652,653],"react-native-router-flux/dist/navigationStore.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var extendStatics = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };

    function __extends(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var BaseAtom = function () {
        function BaseAtom(name) {
            if (name === void 0) {
                name = "Atom@" + getNextId();
            }

            this.name = name;
            this.isPendingUnobservation = true;
            this.observers = [];
            this.observersIndexes = {};
            this.diffValue = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.NOT_TRACKING;
        }

        BaseAtom.prototype.onBecomeUnobserved = function () {};

        BaseAtom.prototype.reportObserved = function () {
            reportObserved(this);
        };

        BaseAtom.prototype.reportChanged = function () {
            startBatch();
            propagateChanged(this);
            endBatch();
        };

        BaseAtom.prototype.toString = function () {
            return this.name;
        };

        return BaseAtom;
    }();

    var Atom = function (_super) {
        __extends(Atom, _super);

        function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
            if (name === void 0) {
                name = "Atom@" + getNextId();
            }

            if (onBecomeObservedHandler === void 0) {
                onBecomeObservedHandler = noop;
            }

            if (onBecomeUnobservedHandler === void 0) {
                onBecomeUnobservedHandler = noop;
            }

            var _this = _super.call(this, name) || this;

            _this.name = name;
            _this.onBecomeObservedHandler = onBecomeObservedHandler;
            _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;
            _this.isPendingUnobservation = false;
            _this.isBeingTracked = false;
            return _this;
        }

        Atom.prototype.reportObserved = function () {
            startBatch();

            _super.prototype.reportObserved.call(this);

            if (!this.isBeingTracked) {
                this.isBeingTracked = true;
                this.onBecomeObservedHandler();
            }

            endBatch();
            return !!globalState.trackingDerivation;
        };

        Atom.prototype.onBecomeUnobserved = function () {
            this.isBeingTracked = false;
            this.onBecomeUnobservedHandler();
        };

        return Atom;
    }(BaseAtom);

    var isAtom = createInstanceofPredicate("Atom", BaseAtom);

    function hasInterceptors(interceptable) {
        return interceptable.interceptors && interceptable.interceptors.length > 0;
    }

    function registerInterceptor(interceptable, handler) {
        var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
        interceptors.push(handler);
        return once(function () {
            var idx = interceptors.indexOf(handler);
            if (idx !== -1) interceptors.splice(idx, 1);
        });
    }

    function interceptChange(interceptable, change) {
        var prevU = untrackedStart();

        try {
            var interceptors = interceptable.interceptors;
            if (interceptors) for (var i = 0, l = interceptors.length; i < l; i++) {
                change = interceptors[i](change);
                invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
                if (!change) break;
            }
            return change;
        } finally {
            untrackedEnd(prevU);
        }
    }

    function hasListeners(listenable) {
        return listenable.changeListeners && listenable.changeListeners.length > 0;
    }

    function registerListener(listenable, handler) {
        var listeners = listenable.changeListeners || (listenable.changeListeners = []);
        listeners.push(handler);
        return once(function () {
            var idx = listeners.indexOf(handler);
            if (idx !== -1) listeners.splice(idx, 1);
        });
    }

    function notifyListeners(listenable, change) {
        var prevU = untrackedStart();
        var listeners = listenable.changeListeners;
        if (!listeners) return;
        listeners = listeners.slice();

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](change);
        }

        untrackedEnd(prevU);
    }

    function isSpyEnabled() {
        return !!globalState.spyListeners.length;
    }

    function spyReport(event) {
        if (!globalState.spyListeners.length) return;
        var listeners = globalState.spyListeners;

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](event);
        }
    }

    function spyReportStart(event) {
        var change = objectAssign({}, event, {
            spyReportStart: true
        });
        spyReport(change);
    }

    var END_EVENT = {
        spyReportEnd: true
    };

    function spyReportEnd(change) {
        if (change) spyReport(objectAssign({}, change, END_EVENT));else spyReport(END_EVENT);
    }

    function spy(listener) {
        globalState.spyListeners.push(listener);
        return once(function () {
            var idx = globalState.spyListeners.indexOf(listener);
            if (idx !== -1) globalState.spyListeners.splice(idx, 1);
        });
    }

    function iteratorSymbol() {
        return typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "@@iterator";
    }

    var IS_ITERATING_MARKER = "__$$iterating";

    function arrayAsIterator(array) {
        invariant(array[IS_ITERATING_MARKER] !== true, "Illegal state: cannot recycle array as iterator");
        addHiddenFinalProp(array, IS_ITERATING_MARKER, true);
        var idx = -1;
        addHiddenFinalProp(array, "next", function next() {
            idx++;
            return {
                done: idx >= this.length,
                value: idx < this.length ? this[idx] : undefined
            };
        });
        return array;
    }

    function declareIterator(prototType, iteratorFactory) {
        addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);
    }

    var MAX_SPLICE_SIZE = 10000;

    var safariPrototypeSetterInheritanceBug = function () {
        var v = false;
        var p = {};
        Object.defineProperty(p, "0", {
            set: function set() {
                v = true;
            }
        });
        Object.create(p)["0"] = 1;
        return v === false;
    }();

    var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;

    var StubArray = function () {
        function StubArray() {}

        return StubArray;
    }();

    function inherit(ctor, proto) {
        if (typeof Object["setPrototypeOf"] !== "undefined") {
            Object["setPrototypeOf"](ctor.prototype, proto);
        } else if (typeof ctor.prototype.__proto__ !== "undefined") {
            ctor.prototype.__proto__ = proto;
        } else {
            ctor["prototype"] = proto;
        }
    }

    inherit(StubArray, Array.prototype);

    if (Object.isFrozen(Array)) {
        ["constructor", "push", "shift", "concat", "pop", "unshift", "replace", "find", "findIndex", "splice", "reverse", "sort"].forEach(function (key) {
            Object.defineProperty(StubArray.prototype, key, {
                configurable: true,
                writable: true,
                value: Array.prototype[key]
            });
        });
    }

    var ObservableArrayAdministration = function () {
        function ObservableArrayAdministration(name, enhancer, array, owned) {
            this.array = array;
            this.owned = owned;
            this.values = [];
            this.lastKnownLength = 0;
            this.interceptors = null;
            this.changeListeners = null;
            this.atom = new BaseAtom(name || "ObservableArray@" + getNextId());

            this.enhancer = function (newV, oldV) {
                return enhancer(newV, oldV, name + "[..]");
            };
        }

        ObservableArrayAdministration.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) return this.dehancer(value);
            return value;
        };

        ObservableArrayAdministration.prototype.dehanceValues = function (values) {
            if (this.dehancer !== undefined) return values.map(this.dehancer);
            return values;
        };

        ObservableArrayAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            if (fireImmediately) {
                listener({
                    object: this.array,
                    type: "splice",
                    index: 0,
                    added: this.values.slice(),
                    addedCount: this.values.length,
                    removed: [],
                    removedCount: 0
                });
            }

            return registerListener(this, listener);
        };

        ObservableArrayAdministration.prototype.getArrayLength = function () {
            this.atom.reportObserved();
            return this.values.length;
        };

        ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
            if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
            var currentLength = this.values.length;
            if (newLength === currentLength) return;else if (newLength > currentLength) {
                var newItems = new Array(newLength - currentLength);

                for (var i = 0; i < newLength - currentLength; i++) {
                    newItems[i] = undefined;
                }

                this.spliceWithArray(currentLength, 0, newItems);
            } else this.spliceWithArray(newLength, currentLength - newLength);
        };

        ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
            if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
            this.lastKnownLength += delta;
            if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE) reserveArrayBuffer(oldLength + delta + 1);
        };

        ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            var _this = this;

            checkIfStateModificationsAreAllowed(this.atom);
            var length = this.values.length;
            if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
            if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
            if (newItems === undefined) newItems = [];

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.array,
                    type: "splice",
                    index: index,
                    removedCount: deleteCount,
                    added: newItems
                });
                if (!change) return EMPTY_ARRAY;
                deleteCount = change.removedCount;
                newItems = change.added;
            }

            newItems = newItems.map(function (v) {
                return _this.enhancer(v, undefined);
            });
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength(length, lengthDelta);
            var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
            if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
            return this.dehanceValues(res);
        };

        ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
            if (newItems.length < MAX_SPLICE_SIZE) {
                return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));
            } else {
                var res = this.values.slice(index, index + deleteCount);
                this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));
                return res;
            }

            var _a;
        };

        ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            } : null;
            if (notifySpy) spyReportStart(change);
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            } : null;
            if (notifySpy) spyReportStart(change);
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        return ObservableArrayAdministration;
    }();

    var ObservableArray = function (_super) {
        __extends(ObservableArray, _super);

        function ObservableArray(initialValues, enhancer, name, owned) {
            if (name === void 0) {
                name = "ObservableArray@" + getNextId();
            }

            if (owned === void 0) {
                owned = false;
            }

            var _this = _super.call(this) || this;

            var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);
            addHiddenFinalProp(_this, "$mobx", adm);

            if (initialValues && initialValues.length) {
                _this.spliceWithArray(0, 0, initialValues);
            }

            if (safariPrototypeSetterInheritanceBug) {
                Object.defineProperty(adm.array, "0", ENTRY_0);
            }

            return _this;
        }

        ObservableArray.prototype.intercept = function (handler) {
            return this.$mobx.intercept(handler);
        };

        ObservableArray.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            return this.$mobx.observe(listener, fireImmediately);
        };

        ObservableArray.prototype.clear = function () {
            return this.splice(0);
        };

        ObservableArray.prototype.concat = function () {
            var arrays = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i] = arguments[_i];
            }

            this.$mobx.atom.reportObserved();
            return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) {
                return isObservableArray(a) ? a.peek() : a;
            }));
        };

        ObservableArray.prototype.replace = function (newItems) {
            return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);
        };

        ObservableArray.prototype.toJS = function () {
            return this.slice();
        };

        ObservableArray.prototype.toJSON = function () {
            return this.toJS();
        };

        ObservableArray.prototype.peek = function () {
            this.$mobx.atom.reportObserved();
            return this.$mobx.dehanceValues(this.$mobx.values);
        };

        ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {
            if (fromIndex === void 0) {
                fromIndex = 0;
            }

            var idx = this.findIndex.apply(this, arguments);
            return idx === -1 ? undefined : this.get(idx);
        };

        ObservableArray.prototype.findIndex = function (predicate, thisArg, fromIndex) {
            if (fromIndex === void 0) {
                fromIndex = 0;
            }

            var items = this.peek(),
                l = items.length;

            for (var i = fromIndex; i < l; i++) {
                if (predicate.call(thisArg, items[i], i, this)) return i;
            }

            return -1;
        };

        ObservableArray.prototype.splice = function (index, deleteCount) {
            var newItems = [];

            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }

            switch (arguments.length) {
                case 0:
                    return [];

                case 1:
                    return this.$mobx.spliceWithArray(index);

                case 2:
                    return this.$mobx.spliceWithArray(index, deleteCount);
            }

            return this.$mobx.spliceWithArray(index, deleteCount, newItems);
        };

        ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            return this.$mobx.spliceWithArray(index, deleteCount, newItems);
        };

        ObservableArray.prototype.push = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(adm.values.length, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.pop = function () {
            return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
        };

        ObservableArray.prototype.shift = function () {
            return this.splice(0, 1)[0];
        };

        ObservableArray.prototype.unshift = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(0, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.reverse = function () {
            var clone = this.slice();
            return clone.reverse.apply(clone, arguments);
        };

        ObservableArray.prototype.sort = function (compareFn) {
            var clone = this.slice();
            return clone.sort.apply(clone, arguments);
        };

        ObservableArray.prototype.remove = function (value) {
            var idx = this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);

            if (idx > -1) {
                this.splice(idx, 1);
                return true;
            }

            return false;
        };

        ObservableArray.prototype.move = function (fromIndex, toIndex) {
            function checkIndex(index) {
                if (index < 0) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
                }

                var length = this.$mobx.values.length;

                if (index >= length) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
                }
            }

            checkIndex.call(this, fromIndex);
            checkIndex.call(this, toIndex);

            if (fromIndex === toIndex) {
                return;
            }

            var oldItems = this.$mobx.values;
            var newItems;

            if (fromIndex < toIndex) {
                newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));
            } else {
                newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
            }

            this.replace(newItems);
        };

        ObservableArray.prototype.get = function (index) {
            var impl = this.$mobx;

            if (impl) {
                if (index < impl.values.length) {
                    impl.atom.reportObserved();
                    return impl.dehanceValue(impl.values[index]);
                }

                console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + impl.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
            }

            return undefined;
        };

        ObservableArray.prototype.set = function (index, newValue) {
            var adm = this.$mobx;
            var values = adm.values;

            if (index < values.length) {
                checkIfStateModificationsAreAllowed(adm.atom);
                var oldValue = values[index];

                if (hasInterceptors(adm)) {
                    var change = interceptChange(adm, {
                        type: "update",
                        object: this,
                        index: index,
                        newValue: newValue
                    });
                    if (!change) return;
                    newValue = change.newValue;
                }

                newValue = adm.enhancer(newValue, oldValue);
                var changed = newValue !== oldValue;

                if (changed) {
                    values[index] = newValue;
                    adm.notifyArrayChildUpdate(index, newValue, oldValue);
                }
            } else if (index === values.length) {
                adm.spliceWithArray(index, 0, [newValue]);
            } else {
                throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
            }
        };

        return ObservableArray;
    }(StubArray);

    declareIterator(ObservableArray.prototype, function () {
        return arrayAsIterator(this.slice());
    });
    Object.defineProperty(ObservableArray.prototype, "length", {
        enumerable: false,
        configurable: true,
        get: function get() {
            return this.$mobx.getArrayLength();
        },
        set: function set(newLength) {
            this.$mobx.setArrayLength(newLength);
        }
    });
    ["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some", "toString", "toLocaleString"].forEach(function (funcName) {
        var baseFunc = Array.prototype[funcName];
        invariant(typeof baseFunc === "function", "Base function not defined on Array prototype: '" + funcName + "'");
        addHiddenProp(ObservableArray.prototype, funcName, function () {
            return baseFunc.apply(this.peek(), arguments);
        });
    });
    makeNonEnumerable(ObservableArray.prototype, ["constructor", "intercept", "observe", "clear", "concat", "get", "replace", "toJS", "toJSON", "peek", "find", "findIndex", "splice", "spliceWithArray", "push", "pop", "set", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
    var ENTRY_0 = createArrayEntryDescriptor(0);

    function createArrayEntryDescriptor(index) {
        return {
            enumerable: false,
            configurable: false,
            get: function get() {
                return this.get(index);
            },
            set: function set(value) {
                this.set(index, value);
            }
        };
    }

    function createArrayBufferItem(index) {
        Object.defineProperty(ObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
    }

    function reserveArrayBuffer(max) {
        for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) {
            createArrayBufferItem(index);
        }

        OBSERVABLE_ARRAY_BUFFER_SIZE = max;
    }

    reserveArrayBuffer(1000);
    var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);

    function isObservableArray(thing) {
        return isObject(thing) && isObservableArrayAdministration(thing.$mobx);
    }

    var UNCHANGED = {};

    var ObservableValue = function (_super) {
        __extends(ObservableValue, _super);

        function ObservableValue(value, enhancer, name, notifySpy) {
            if (name === void 0) {
                name = "ObservableValue@" + getNextId();
            }

            if (notifySpy === void 0) {
                notifySpy = true;
            }

            var _this = _super.call(this, name) || this;

            _this.enhancer = enhancer;
            _this.hasUnreportedChange = false;
            _this.dehancer = undefined;
            _this.value = enhancer(value, undefined, name);

            if (notifySpy && isSpyEnabled()) {
                spyReport({
                    type: "create",
                    object: _this,
                    newValue: _this.value
                });
            }

            return _this;
        }

        ObservableValue.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) return this.dehancer(value);
            return value;
        };

        ObservableValue.prototype.set = function (newValue) {
            var oldValue = this.value;
            newValue = this.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();

                if (notifySpy) {
                    spyReportStart({
                        type: "update",
                        object: this,
                        newValue: newValue,
                        oldValue: oldValue
                    });
                }

                this.setNewValue(newValue);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableValue.prototype.prepareNewValue = function (newValue) {
            checkIfStateModificationsAreAllowed(this);

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this,
                    type: "update",
                    newValue: newValue
                });
                if (!change) return UNCHANGED;
                newValue = change.newValue;
            }

            newValue = this.enhancer(newValue, this.value, this.name);
            return this.value !== newValue ? newValue : UNCHANGED;
        };

        ObservableValue.prototype.setNewValue = function (newValue) {
            var oldValue = this.value;
            this.value = newValue;
            this.reportChanged();

            if (hasListeners(this)) {
                notifyListeners(this, {
                    type: "update",
                    object: this,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
        };

        ObservableValue.prototype.get = function () {
            this.reportObserved();
            return this.dehanceValue(this.value);
        };

        ObservableValue.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableValue.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately) listener({
                object: this,
                type: "update",
                newValue: this.value,
                oldValue: undefined
            });
            return registerListener(this, listener);
        };

        ObservableValue.prototype.toJSON = function () {
            return this.get();
        };

        ObservableValue.prototype.toString = function () {
            return this.name + "[" + this.value + "]";
        };

        ObservableValue.prototype.valueOf = function () {
            return toPrimitive(this.get());
        };

        return ObservableValue;
    }(BaseAtom);

    ObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;
    var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);
    var messages = {
        m001: "It is not allowed to assign new values to @action fields",
        m002: "`runInAction` expects a function",
        m003: "`runInAction` expects a function without arguments",
        m004: "autorun expects a function",
        m005: "Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
        m006: "Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
        m007: "reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object",
        m008: "wrapping reaction expression in `asReference` is no longer supported, use options object instead",
        m009: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.",
        m010: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'",
        m011: "First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments",
        m012: "computed takes one or two arguments if used as function",
        m013: "[mobx.expr] 'expr' should only be used inside other reactive functions.",
        m014: "extendObservable expected 2 or more arguments",
        m015: "extendObservable expects an object as first argument",
        m016: "extendObservable should not be used on maps, use map.merge instead",
        m017: "all arguments of extendObservable should be objects",
        m018: "extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540",
        m019: "[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.",
        m020: "modifiers can only be used for individual object properties",
        m021: "observable expects zero or one arguments",
        m022: "@observable can not be used on getters, use @computed instead",
        m024: "whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.",
        m025: "whyRun can only be used on reactions and computed values",
        m026: "`action` can only be invoked on functions",
        m028: "It is not allowed to set `useStrict` when a derivation is running",
        m029: "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row",
        m030a: "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ",
        m030b: "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ",
        m031: "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ",
        m032: "* This computation is suspended (not in use by any reaction) and won't run automatically.\n	Didn't expect this computation to be suspended at this point?\n	  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n	  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).",
        m033: "`observe` doesn't support the fire immediately property for observable maps.",
        m034: "`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead",
        m035: "Cannot make the designated object observable; it is not extensible",
        m036: "It is not possible to get index atoms from arrays",
        m037: "Hi there! I'm sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle \"(...)\" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\"Oops\")` instead of `throw \"Oops\"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \"Pause on caught exception\".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n",
        m038: "Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n"
    };

    function getMessage(id) {
        return messages[id];
    }

    function createAction(actionName, fn) {
        invariant(typeof fn === "function", getMessage("m026"));
        invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");

        var res = function res() {
            return executeAction(actionName, fn, this, arguments);
        };

        res.originalFn = fn;
        res.isMobxAction = true;
        return res;
    }

    function executeAction(actionName, fn, scope, args) {
        var runInfo = startAction(actionName, fn, scope, args);

        try {
            return fn.apply(scope, args);
        } finally {
            endAction(runInfo);
        }
    }

    function startAction(actionName, fn, scope, args) {
        var notifySpy = isSpyEnabled() && !!actionName;
        var startTime = 0;

        if (notifySpy) {
            startTime = Date.now();
            var l = args && args.length || 0;
            var flattendArgs = new Array(l);
            if (l > 0) for (var i = 0; i < l; i++) {
                flattendArgs[i] = args[i];
            }
            spyReportStart({
                type: "action",
                name: actionName,
                fn: fn,
                object: scope,
                arguments: flattendArgs
            });
        }

        var prevDerivation = untrackedStart();
        startBatch();
        var prevAllowStateChanges = allowStateChangesStart(true);
        return {
            prevDerivation: prevDerivation,
            prevAllowStateChanges: prevAllowStateChanges,
            notifySpy: notifySpy,
            startTime: startTime
        };
    }

    function endAction(runInfo) {
        allowStateChangesEnd(runInfo.prevAllowStateChanges);
        endBatch();
        untrackedEnd(runInfo.prevDerivation);
        if (runInfo.notifySpy) spyReportEnd({
            time: Date.now() - runInfo.startTime
        });
    }

    function useStrict(strict) {
        invariant(globalState.trackingDerivation === null, getMessage("m028"));
        globalState.strictMode = strict;
        globalState.allowStateChanges = !strict;
    }

    function isStrictModeEnabled() {
        return globalState.strictMode;
    }

    function allowStateChanges(allowStateChanges, func) {
        var prev = allowStateChangesStart(allowStateChanges);
        var res;

        try {
            res = func();
        } finally {
            allowStateChangesEnd(prev);
        }

        return res;
    }

    function allowStateChangesStart(allowStateChanges) {
        var prev = globalState.allowStateChanges;
        globalState.allowStateChanges = allowStateChanges;
        return prev;
    }

    function allowStateChangesEnd(prev) {
        globalState.allowStateChanges = prev;
    }

    function createClassPropertyDecorator(onInitialize, _get, _set, enumerable, allowCustomArguments) {
        function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {
            if (argLen === void 0) {
                argLen = 0;
            }

            invariant(allowCustomArguments || quacksLikeADecorator(arguments), "This function is a decorator, but it wasn't invoked like a decorator");

            if (!descriptor) {
                var newDescriptor = {
                    enumerable: enumerable,
                    configurable: true,
                    get: function get() {
                        if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);
                        return _get.call(this, key);
                    },
                    set: function set(v) {
                        if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {
                            typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);
                        } else {
                            _set.call(this, key, v);
                        }
                    }
                };

                if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {
                    Object.defineProperty(target, key, newDescriptor);
                }

                return newDescriptor;
            } else {
                if (!hasOwnProperty(target, "__mobxLazyInitializers")) {
                    addHiddenProp(target, "__mobxLazyInitializers", target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice() || []);
                }

                var value_1 = descriptor.value,
                    initializer_1 = descriptor.initializer;

                target.__mobxLazyInitializers.push(function (instance) {
                    onInitialize(instance, key, initializer_1 ? initializer_1.call(instance) : value_1, customArgs, descriptor);
                });

                return {
                    enumerable: enumerable,
                    configurable: true,
                    get: function get() {
                        if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
                        return _get.call(this, key);
                    },
                    set: function set(v) {
                        if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);

                        _set.call(this, key, v);
                    }
                };
            }
        }

        if (allowCustomArguments) {
            return function () {
                if (quacksLikeADecorator(arguments)) return classPropertyDecorator.apply(null, arguments);
                var outerArgs = arguments;
                var argLen = arguments.length;
                return function (target, key, descriptor) {
                    return classPropertyDecorator(target, key, descriptor, outerArgs, argLen);
                };
            };
        }

        return classPropertyDecorator;
    }

    function typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {
        if (!hasOwnProperty(instance, "__mobxInitializedProps")) addHiddenProp(instance, "__mobxInitializedProps", {});
        instance.__mobxInitializedProps[key] = true;
        onInitialize(instance, key, v, customArgs, baseDescriptor);
    }

    function runLazyInitializers(instance) {
        if (instance.__mobxDidRunLazyInitializers === true) return;

        if (instance.__mobxLazyInitializers) {
            addHiddenProp(instance, "__mobxDidRunLazyInitializers", true);
            instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) {
                return initializer(instance);
            });
        }
    }

    function quacksLikeADecorator(args) {
        return (args.length === 2 || args.length === 3) && typeof args[1] === "string";
    }

    var actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {
        var actionName = args && args.length === 1 ? args[0] : value.name || key || "<unnamed action>";
        var wrappedAction = action(actionName, value);
        addHiddenProp(target, key, wrappedAction);
    }, function (key) {
        return this[key];
    }, function () {
        invariant(false, getMessage("m001"));
    }, false, true);
    var boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {
        defineBoundAction(target, key, value);
    }, function (key) {
        return this[key];
    }, function () {
        invariant(false, getMessage("m001"));
    }, false, false);

    var action = function action(arg1, arg2, arg3, arg4) {
        if (arguments.length === 1 && typeof arg1 === "function") return createAction(arg1.name || "<unnamed action>", arg1);
        if (arguments.length === 2 && typeof arg2 === "function") return createAction(arg1, arg2);
        if (arguments.length === 1 && typeof arg1 === "string") return namedActionDecorator(arg1);
        return namedActionDecorator(arg2).apply(null, arguments);
    };

    action.bound = function boundAction(arg1, arg2, arg3) {
        if (typeof arg1 === "function") {
            var action_1 = createAction("<not yet bound action>", arg1);
            action_1.autoBind = true;
            return action_1;
        }

        return boundActionDecorator.apply(null, arguments);
    };

    function namedActionDecorator(name) {
        return function (target, prop, descriptor) {
            if (descriptor && typeof descriptor.value === "function") {
                descriptor.value = createAction(name, descriptor.value);
                descriptor.enumerable = false;
                descriptor.configurable = true;
                return descriptor;
            }

            if (descriptor !== undefined && descriptor.get !== undefined) {
                throw new Error("[mobx] action is not expected to be used with getters");
            }

            return actionFieldDecorator(name).apply(this, arguments);
        };
    }

    function runInAction(arg1, arg2, arg3) {
        var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
        var fn = typeof arg1 === "function" ? arg1 : arg2;
        var scope = typeof arg1 === "function" ? arg2 : arg3;
        invariant(typeof fn === "function", getMessage("m002"));
        invariant(fn.length === 0, getMessage("m003"));
        invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
        return executeAction(actionName, fn, scope, undefined);
    }

    function isAction(thing) {
        return typeof thing === "function" && thing.isMobxAction === true;
    }

    function defineBoundAction(target, propertyName, fn) {
        var res = function res() {
            return executeAction(propertyName, fn, target, arguments);
        };

        res.isMobxAction = true;
        addHiddenProp(target, propertyName, res);
    }

    var toString = Object.prototype.toString;

    function deepEqual(a, b) {
        return eq(a, b);
    }

    function eq(a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null) return false;
        if (a !== a) return b !== b;
        var type = typeof a;
        if (type !== "function" && type !== "object" && typeof b != "object") return false;
        return deepEq(a, b, aStack, bStack);
    }

    function deepEq(a, b, aStack, bStack) {
        a = unwrap(a);
        b = unwrap(b);
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;

        switch (className) {
            case "[object RegExp]":
            case "[object String]":
                return "" + a === "" + b;

            case "[object Number]":
                if (+a !== +a) return +b !== +b;
                return +a === 0 ? 1 / +a === 1 / b : +a === +b;

            case "[object Date]":
            case "[object Boolean]":
                return +a === +b;

            case "[object Symbol]":
                return typeof Symbol !== "undefined" && (typeof Symbol === "function" ? Symbol.valueOf : "@@valueOf").call(a) === (typeof Symbol === "function" ? Symbol.valueOf : "@@valueOf").call(b);
        }

        var areArrays = className === "[object Array]";

        if (!areArrays) {
            if (typeof a != "object" || typeof b != "object") return false;
            var aCtor = a.constructor,
                bCtor = b.constructor;

            if (aCtor !== bCtor && !(typeof aCtor === "function" && aCtor instanceof aCtor && typeof bCtor === "function" && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
                return false;
            }
        }

        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;

        while (length--) {
            if (aStack[length] === a) return bStack[length] === b;
        }

        aStack.push(a);
        bStack.push(b);

        if (areArrays) {
            length = a.length;
            if (length !== b.length) return false;

            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            var keys = Object.keys(a),
                key;
            length = keys.length;
            if (Object.keys(b).length !== length) return false;

            while (length--) {
                key = keys[length];
                if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }

        aStack.pop();
        bStack.pop();
        return true;
    }

    function unwrap(a) {
        if (isObservableArray(a)) return a.peek();
        if (isObservableMap(a)) return a.entries();
        if (isES6Map(a)) return iteratorToArray(a.entries());
        return a;
    }

    function has(a, key) {
        return Object.prototype.hasOwnProperty.call(a, key);
    }

    function identityComparer(a, b) {
        return a === b;
    }

    function structuralComparer(a, b) {
        return deepEqual(a, b);
    }

    function defaultComparer(a, b) {
        return areBothNaN(a, b) || identityComparer(a, b);
    }

    var comparer = {
        identity: identityComparer,
        structural: structuralComparer,
        default: defaultComparer
    };

    function autorun(arg1, arg2, arg3) {
        var name, view, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            view = arg2;
            scope = arg3;
        } else {
            name = arg1.name || "Autorun@" + getNextId();
            view = arg1;
            scope = arg2;
        }

        invariant(typeof view === "function", getMessage("m004"));
        invariant(isAction(view) === false, getMessage("m005"));
        if (scope) view = view.bind(scope);
        var reaction = new Reaction(name, function () {
            this.track(reactionRunner);
        });

        function reactionRunner() {
            view(reaction);
        }

        reaction.schedule();
        return reaction.getDisposer();
    }

    function when(arg1, arg2, arg3, arg4) {
        var name, predicate, effect, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            predicate = arg2;
            effect = arg3;
            scope = arg4;
        } else {
            name = "When@" + getNextId();
            predicate = arg1;
            effect = arg2;
            scope = arg3;
        }

        var disposer = autorun(name, function (r) {
            if (predicate.call(scope)) {
                r.dispose();
                var prevUntracked = untrackedStart();
                effect.call(scope);
                untrackedEnd(prevUntracked);
            }
        });
        return disposer;
    }

    function autorunAsync(arg1, arg2, arg3, arg4) {
        var name, func, delay, scope;

        if (typeof arg1 === "string") {
            name = arg1;
            func = arg2;
            delay = arg3;
            scope = arg4;
        } else {
            name = arg1.name || "AutorunAsync@" + getNextId();
            func = arg1;
            delay = arg2;
            scope = arg3;
        }

        invariant(isAction(func) === false, getMessage("m006"));
        if (delay === void 0) delay = 1;
        if (scope) func = func.bind(scope);
        var isScheduled = false;
        var r = new Reaction(name, function () {
            if (!isScheduled) {
                isScheduled = true;
                setTimeout(function () {
                    isScheduled = false;
                    if (!r.isDisposed) r.track(reactionRunner);
                }, delay);
            }
        });

        function reactionRunner() {
            func(r);
        }

        r.schedule();
        return r.getDisposer();
    }

    function reaction(expression, effect, arg3) {
        if (arguments.length > 3) {
            fail(getMessage("m007"));
        }

        if (isModifierDescriptor(expression)) {
            fail(getMessage("m008"));
        }

        var opts;

        if (typeof arg3 === "object") {
            opts = arg3;
        } else {
            opts = {};
        }

        opts.name = opts.name || expression.name || effect.name || "Reaction@" + getNextId();
        opts.fireImmediately = arg3 === true || opts.fireImmediately === true;
        opts.delay = opts.delay || 0;
        opts.compareStructural = opts.compareStructural || opts.struct || false;
        effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);

        if (opts.context) {
            expression = expression.bind(opts.context);
        }

        var firstTime = true;
        var isScheduled = false;
        var value;
        var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
        var r = new Reaction(opts.name, function () {
            if (firstTime || opts.delay < 1) {
                reactionRunner();
            } else if (!isScheduled) {
                isScheduled = true;
                setTimeout(function () {
                    isScheduled = false;
                    reactionRunner();
                }, opts.delay);
            }
        });

        function reactionRunner() {
            if (r.isDisposed) return;
            var changed = false;
            r.track(function () {
                var nextValue = expression(r);
                changed = firstTime || !equals(value, nextValue);
                value = nextValue;
            });
            if (firstTime && opts.fireImmediately) effect(value, r);
            if (!firstTime && changed === true) effect(value, r);
            if (firstTime) firstTime = false;
        }

        r.schedule();
        return r.getDisposer();
    }

    var ComputedValue = function () {
        function ComputedValue(derivation, scope, equals, name, setter) {
            this.derivation = derivation;
            this.scope = scope;
            this.equals = equals;
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.observing = [];
            this.newObserving = null;
            this.isPendingUnobservation = false;
            this.observers = [];
            this.observersIndexes = {};
            this.diffValue = 0;
            this.runId = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.UP_TO_DATE;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.value = new CaughtException(null);
            this.isComputing = false;
            this.isRunningSetter = false;
            this.isTracing = TraceMode.NONE;
            this.name = name || "ComputedValue@" + getNextId();
            if (setter) this.setter = createAction(name + "-setter", setter);
        }

        ComputedValue.prototype.onBecomeStale = function () {
            propagateMaybeChanged(this);
        };

        ComputedValue.prototype.onBecomeUnobserved = function () {
            clearObserving(this);
            this.value = undefined;
        };

        ComputedValue.prototype.get = function () {
            invariant(!this.isComputing, "Cycle detected in computation " + this.name, this.derivation);

            if (globalState.inBatch === 0) {
                startBatch();

                if (shouldCompute(this)) {
                    if (this.isTracing !== TraceMode.NONE) {
                        console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context and doing a full recompute");
                    }

                    this.value = this.computeValue(false);
                }

                endBatch();
            } else {
                reportObserved(this);
                if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this);
            }

            var result = this.value;
            if (isCaughtException(result)) throw result.cause;
            return result;
        };

        ComputedValue.prototype.peek = function () {
            var res = this.computeValue(false);
            if (isCaughtException(res)) throw res.cause;
            return res;
        };

        ComputedValue.prototype.set = function (value) {
            if (this.setter) {
                invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
                this.isRunningSetter = true;

                try {
                    this.setter.call(this.scope, value);
                } finally {
                    this.isRunningSetter = false;
                }
            } else invariant(false, "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
        };

        ComputedValue.prototype.trackAndCompute = function () {
            if (isSpyEnabled()) {
                spyReport({
                    object: this.scope,
                    type: "compute",
                    fn: this.derivation
                });
            }

            var oldValue = this.value;
            var wasSuspended = this.dependenciesState === IDerivationState.NOT_TRACKING;
            var newValue = this.value = this.computeValue(true);
            return wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals(oldValue, newValue);
        };

        ComputedValue.prototype.computeValue = function (track) {
            this.isComputing = true;
            globalState.computationDepth++;
            var res;

            if (track) {
                res = trackDerivedFunction(this, this.derivation, this.scope);
            } else {
                try {
                    res = this.derivation.call(this.scope);
                } catch (e) {
                    res = new CaughtException(e);
                }
            }

            globalState.computationDepth--;
            this.isComputing = false;
            return res;
        };

        ComputedValue.prototype.observe = function (listener, fireImmediately) {
            var _this = this;

            var firstTime = true;
            var prevValue = undefined;
            return autorun(function () {
                var newValue = _this.get();

                if (!firstTime || fireImmediately) {
                    var prevU = untrackedStart();
                    listener({
                        type: "update",
                        object: _this,
                        newValue: newValue,
                        oldValue: prevValue
                    });
                    untrackedEnd(prevU);
                }

                firstTime = false;
                prevValue = newValue;
            });
        };

        ComputedValue.prototype.toJSON = function () {
            return this.get();
        };

        ComputedValue.prototype.toString = function () {
            return this.name + "[" + this.derivation.toString() + "]";
        };

        ComputedValue.prototype.valueOf = function () {
            return toPrimitive(this.get());
        };

        ComputedValue.prototype.whyRun = function () {
            var isTracking = Boolean(globalState.trackingDerivation);
            var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) {
                return dep.name;
            });
            var observers = unique(getObservers(this).map(function (dep) {
                return dep.name;
            }));
            return "\nWhyRun? computation '" + this.name + "':\n * Running because: " + (isTracking ? "[active] the value of this computation is needed by a reaction" : this.isComputing ? "[get] The value of this computed was requested outside a reaction" : "[idle] not running at the moment") + "\n" + (this.dependenciesState === IDerivationState.NOT_TRACKING ? getMessage("m032") : " * This computation will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this.isComputing && isTracking ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n    " + getMessage("m038") + "\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    " + joinStrings(observers) + "\n");
        };

        return ComputedValue;
    }();

    ComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;
    var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

    var ObservableObjectAdministration = function () {
        function ObservableObjectAdministration(target, name) {
            this.target = target;
            this.name = name;
            this.values = {};
            this.changeListeners = null;
            this.interceptors = null;
        }

        ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
            return registerListener(this, callback);
        };

        ObservableObjectAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        return ObservableObjectAdministration;
    }();

    function asObservableObject(target, name) {
        if (isObservableObject(target) && target.hasOwnProperty("$mobx")) return target.$mobx;
        invariant(Object.isExtensible(target), getMessage("m035"));
        if (!isPlainObject(target)) name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
        if (!name) name = "ObservableObject@" + getNextId();
        var adm = new ObservableObjectAdministration(target, name);
        addHiddenFinalProp(target, "$mobx", adm);
        return adm;
    }

    function defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {
        if (adm.values[propName] && !isComputedValue(adm.values[propName])) {
            invariant("value" in descriptor, "The property " + propName + " in " + adm.name + " is already observable, cannot redefine it as computed property");
            adm.target[propName] = descriptor.value;
            return;
        }

        if ("value" in descriptor) {
            if (isModifierDescriptor(descriptor.value)) {
                var modifierDescriptor = descriptor.value;
                defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);
            } else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {
                defineBoundAction(adm.target, propName, descriptor.value.originalFn);
            } else if (isComputedValue(descriptor.value)) {
                defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);
            } else {
                defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);
            }
        } else {
            defineComputedProperty(adm, propName, descriptor.get, descriptor.set, comparer.default, true);
        }
    }

    function defineObservableProperty(adm, propName, newValue, enhancer) {
        assertPropertyConfigurable(adm.target, propName);

        if (hasInterceptors(adm)) {
            var change = interceptChange(adm, {
                object: adm.target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }

        var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + "." + propName, false);
        newValue = observable.value;
        Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));
        notifyPropertyAddition(adm, adm.target, propName, newValue);
    }

    function defineComputedProperty(adm, propName, getter, setter, equals, asInstanceProperty) {
        if (asInstanceProperty) assertPropertyConfigurable(adm.target, propName);
        adm.values[propName] = new ComputedValue(getter, adm.target, equals, adm.name + "." + propName, setter);

        if (asInstanceProperty) {
            Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
        }
    }

    function defineComputedPropertyFromComputedValue(adm, propName, computedValue) {
        var name = adm.name + "." + propName;
        computedValue.name = name;
        if (!computedValue.scope) computedValue.scope = adm.target;
        adm.values[propName] = computedValue;
        Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
    }

    var observablePropertyConfigs = {};
    var computedPropertyConfigs = {};

    function generateObservablePropConfig(propName) {
        return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function get() {
                return this.$mobx.values[propName].get();
            },
            set: function set(v) {
                setPropertyValue(this, propName, v);
            }
        });
    }

    function generateComputedPropConfig(propName) {
        return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {
            configurable: true,
            enumerable: false,
            get: function get() {
                return this.$mobx.values[propName].get();
            },
            set: function set(v) {
                return this.$mobx.values[propName].set(v);
            }
        });
    }

    function setPropertyValue(instance, name, newValue) {
        var adm = instance.$mobx;
        var observable = adm.values[name];

        if (hasInterceptors(adm)) {
            var change = interceptChange(adm, {
                type: "update",
                object: instance,
                name: name,
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }

        newValue = observable.prepareNewValue(newValue);

        if (newValue !== UNCHANGED) {
            var notify = hasListeners(adm);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy ? {
                type: "update",
                object: instance,
                oldValue: observable.value,
                name: name,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(change);
            observable.setNewValue(newValue);
            if (notify) notifyListeners(adm, change);
            if (notifySpy) spyReportEnd();
        }
    }

    function notifyPropertyAddition(adm, object, name, newValue) {
        var notify = hasListeners(adm);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy ? {
            type: "add",
            object: object,
            name: name,
            newValue: newValue
        } : null;
        if (notifySpy) spyReportStart(change);
        if (notify) notifyListeners(adm, change);
        if (notifySpy) spyReportEnd();
    }

    var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

    function isObservableObject(thing) {
        if (isObject(thing)) {
            runLazyInitializers(thing);
            return isObservableObjectAdministration(thing.$mobx);
        }

        return false;
    }

    function isObservable(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (isObservableArray(value) || isObservableMap(value)) throw new Error(getMessage("m019"));else if (isObservableObject(value)) {
                var o = value.$mobx;
                return o.values && !!o.values[property];
            }
            return false;
        }

        return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);
    }

    function createDecoratorForEnhancer(enhancer) {
        invariant(!!enhancer, ":(");
        return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {
            assertPropertyConfigurable(target, name);
            invariant(!baseDescriptor || !baseDescriptor.get, getMessage("m022"));
            var adm = asObservableObject(target, undefined);
            defineObservableProperty(adm, name, baseValue, enhancer);
        }, function (name) {
            var observable = this.$mobx.values[name];
            if (observable === undefined) return undefined;
            return observable.get();
        }, function (name, value) {
            setPropertyValue(this, name, value);
        }, true, false);
    }

    function extendObservable(target) {
        var properties = [];

        for (var _i = 1; _i < arguments.length; _i++) {
            properties[_i - 1] = arguments[_i];
        }

        return extendObservableHelper(target, deepEnhancer, properties);
    }

    function extendShallowObservable(target) {
        var properties = [];

        for (var _i = 1; _i < arguments.length; _i++) {
            properties[_i - 1] = arguments[_i];
        }

        return extendObservableHelper(target, referenceEnhancer, properties);
    }

    function extendObservableHelper(target, defaultEnhancer, properties) {
        invariant(arguments.length >= 2, getMessage("m014"));
        invariant(typeof target === "object", getMessage("m015"));
        invariant(!isObservableMap(target), getMessage("m016"));
        properties.forEach(function (propSet) {
            invariant(typeof propSet === "object", getMessage("m017"));
            invariant(!isObservable(propSet), getMessage("m018"));
        });
        var adm = asObservableObject(target);
        var definedProps = {};

        for (var i = properties.length - 1; i >= 0; i--) {
            var propSet = properties[i];

            for (var key in propSet) {
                if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {
                    definedProps[key] = true;
                    if (target === propSet && !isPropertyConfigurable(target, key)) continue;
                    var descriptor = Object.getOwnPropertyDescriptor(propSet, key);
                    defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);
                }
            }
        }

        return target;
    }

    var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
    var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
    var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
    var deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);
    var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);

    function createObservable(v) {
        if (v === void 0) {
            v = undefined;
        }

        if (typeof arguments[1] === "string") return deepDecorator.apply(null, arguments);
        invariant(arguments.length <= 1, getMessage("m021"));
        invariant(!isModifierDescriptor(v), getMessage("m020"));
        if (isObservable(v)) return v;
        var res = deepEnhancer(v, undefined, undefined);
        if (res !== v) return res;
        return observable.box(v);
    }

    var observableFactories = {
        box: function box(value, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("box");
            return new ObservableValue(value, deepEnhancer, name);
        },
        shallowBox: function shallowBox(value, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowBox");
            return new ObservableValue(value, referenceEnhancer, name);
        },
        array: function array(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("array");
            return new ObservableArray(initialValues, deepEnhancer, name);
        },
        shallowArray: function shallowArray(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowArray");
            return new ObservableArray(initialValues, referenceEnhancer, name);
        },
        map: function map(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("map");
            return new ObservableMap(initialValues, deepEnhancer, name);
        },
        shallowMap: function shallowMap(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowMap");
            return new ObservableMap(initialValues, referenceEnhancer, name);
        },
        object: function object(props, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("object");
            var res = {};
            asObservableObject(res, name);
            extendObservable(res, props);
            return res;
        },
        shallowObject: function shallowObject(props, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowObject");
            var res = {};
            asObservableObject(res, name);
            extendShallowObservable(res, props);
            return res;
        },
        ref: function ref() {
            if (arguments.length < 2) {
                return createModifierDescriptor(referenceEnhancer, arguments[0]);
            } else {
                return refDecorator.apply(null, arguments);
            }
        },
        shallow: function shallow() {
            if (arguments.length < 2) {
                return createModifierDescriptor(shallowEnhancer, arguments[0]);
            } else {
                return shallowDecorator.apply(null, arguments);
            }
        },
        deep: function deep() {
            if (arguments.length < 2) {
                return createModifierDescriptor(deepEnhancer, arguments[0]);
            } else {
                return deepDecorator.apply(null, arguments);
            }
        },
        struct: function struct() {
            if (arguments.length < 2) {
                return createModifierDescriptor(deepStructEnhancer, arguments[0]);
            } else {
                return deepStructDecorator.apply(null, arguments);
            }
        }
    };
    var observable = createObservable;
    Object.keys(observableFactories).forEach(function (name) {
        return observable[name] = observableFactories[name];
    });
    observable.deep.struct = observable.struct;

    observable.ref.struct = function () {
        if (arguments.length < 2) {
            return createModifierDescriptor(refStructEnhancer, arguments[0]);
        } else {
            return refStructDecorator.apply(null, arguments);
        }
    };

    function incorrectlyUsedAsDecorator(methodName) {
        fail("Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
    }

    function isModifierDescriptor(thing) {
        return typeof thing === "object" && thing !== null && thing.isMobxModifierDescriptor === true;
    }

    function createModifierDescriptor(enhancer, initialValue) {
        invariant(!isModifierDescriptor(initialValue), "Modifiers cannot be nested");
        return {
            isMobxModifierDescriptor: true,
            initialValue: initialValue,
            enhancer: enhancer
        };
    }

    function deepEnhancer(v, _, name) {
        if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
        if (isObservable(v)) return v;
        if (Array.isArray(v)) return observable.array(v, name);
        if (isPlainObject(v)) return observable.object(v, name);
        if (isES6Map(v)) return observable.map(v, name);
        return v;
    }

    function shallowEnhancer(v, _, name) {
        if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
        if (v === undefined || v === null) return v;
        if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v)) return v;
        if (Array.isArray(v)) return observable.shallowArray(v, name);
        if (isPlainObject(v)) return observable.shallowObject(v, name);
        if (isES6Map(v)) return observable.shallowMap(v, name);
        return fail("The shallow modifier / decorator can only used in combination with arrays, objects and maps");
    }

    function referenceEnhancer(newValue) {
        return newValue;
    }

    function deepStructEnhancer(v, oldValue, name) {
        if (deepEqual(v, oldValue)) return oldValue;
        if (isObservable(v)) return v;
        if (Array.isArray(v)) return new ObservableArray(v, deepStructEnhancer, name);
        if (isES6Map(v)) return new ObservableMap(v, deepStructEnhancer, name);

        if (isPlainObject(v)) {
            var res = {};
            asObservableObject(res, name);
            extendObservableHelper(res, deepStructEnhancer, [v]);
            return res;
        }

        return v;
    }

    function refStructEnhancer(v, oldValue, name) {
        if (deepEqual(v, oldValue)) return oldValue;
        return v;
    }

    function transaction(action, thisArg) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }

        startBatch();

        try {
            return action.apply(thisArg);
        } finally {
            endBatch();
        }
    }

    var ObservableMapMarker = {};

    var ObservableMap = function () {
        function ObservableMap(initialData, enhancer, name) {
            if (enhancer === void 0) {
                enhancer = deepEnhancer;
            }

            if (name === void 0) {
                name = "ObservableMap@" + getNextId();
            }

            this.enhancer = enhancer;
            this.name = name;
            this.$mobx = ObservableMapMarker;
            this._data = Object.create(null);
            this._hasMap = Object.create(null);
            this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + ".keys()", true);
            this.interceptors = null;
            this.changeListeners = null;
            this.dehancer = undefined;
            this.merge(initialData);
        }

        ObservableMap.prototype._has = function (key) {
            return typeof this._data[key] !== "undefined";
        };

        ObservableMap.prototype.has = function (key) {
            if (!this.isValidKey(key)) return false;
            key = "" + key;
            if (this._hasMap[key]) return this._hasMap[key].get();
            return this._updateHasMapEntry(key, false).get();
        };

        ObservableMap.prototype.set = function (key, value) {
            this.assertValidKey(key);
            key = "" + key;

            var hasKey = this._has(key);

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: hasKey ? "update" : "add",
                    object: this,
                    newValue: value,
                    name: key
                });
                if (!change) return this;
                value = change.newValue;
            }

            if (hasKey) {
                this._updateValue(key, value);
            } else {
                this._addValue(key, value);
            }

            return this;
        };

        ObservableMap.prototype.delete = function (key) {
            var _this = this;

            this.assertValidKey(key);
            key = "" + key;

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "delete",
                    object: this,
                    name: key
                });
                if (!change) return false;
            }

            if (this._has(key)) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data[key].value,
                    name: key
                } : null;
                if (notifySpy) spyReportStart(change);
                transaction(function () {
                    _this._keys.remove(key);

                    _this._updateHasMapEntry(key, false);

                    var observable$$1 = _this._data[key];
                    observable$$1.setNewValue(undefined);
                    _this._data[key] = undefined;
                });
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
                return true;
            }

            return false;
        };

        ObservableMap.prototype._updateHasMapEntry = function (key, value) {
            var entry = this._hasMap[key];

            if (entry) {
                entry.setNewValue(value);
            } else {
                entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + "." + key + "?", false);
            }

            return entry;
        };

        ObservableMap.prototype._updateValue = function (name, newValue) {
            var observable$$1 = this._data[name];
            newValue = observable$$1.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "update",
                    object: this,
                    oldValue: observable$$1.value,
                    name: name,
                    newValue: newValue
                } : null;
                if (notifySpy) spyReportStart(change);
                observable$$1.setNewValue(newValue);
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableMap.prototype._addValue = function (name, newValue) {
            var _this = this;

            transaction(function () {
                var observable$$1 = _this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + "." + name, false);
                newValue = observable$$1.value;

                _this._updateHasMapEntry(name, true);

                _this._keys.push(name);
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                type: "add",
                object: this,
                name: name,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(change);
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableMap.prototype.get = function (key) {
            key = "" + key;
            if (this.has(key)) return this.dehanceValue(this._data[key].get());
            return this.dehanceValue(undefined);
        };

        ObservableMap.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) {
                return this.dehancer(value);
            }

            return value;
        };

        ObservableMap.prototype.keys = function () {
            return arrayAsIterator(this._keys.slice());
        };

        ObservableMap.prototype.values = function () {
            return arrayAsIterator(this._keys.map(this.get, this));
        };

        ObservableMap.prototype.entries = function () {
            var _this = this;

            return arrayAsIterator(this._keys.map(function (key) {
                return [key, _this.get(key)];
            }));
        };

        ObservableMap.prototype.forEach = function (callback, thisArg) {
            var _this = this;

            this.keys().forEach(function (key) {
                return callback.call(thisArg, _this.get(key), key, _this);
            });
        };

        ObservableMap.prototype.merge = function (other) {
            var _this = this;

            if (isObservableMap(other)) {
                other = other.toJS();
            }

            transaction(function () {
                if (isPlainObject(other)) Object.keys(other).forEach(function (key) {
                    return _this.set(key, other[key]);
                });else if (Array.isArray(other)) other.forEach(function (_a) {
                    var key = _a[0],
                        value = _a[1];
                    return _this.set(key, value);
                });else if (isES6Map(other)) other.forEach(function (value, key) {
                    return _this.set(key, value);
                });else if (other !== null && other !== undefined) fail("Cannot initialize map from " + other);
            });
            return this;
        };

        ObservableMap.prototype.clear = function () {
            var _this = this;

            transaction(function () {
                untracked(function () {
                    _this.keys().forEach(_this.delete, _this);
                });
            });
        };

        ObservableMap.prototype.replace = function (values) {
            var _this = this;

            transaction(function () {
                var newKeys = getMapLikeKeys(values);

                var oldKeys = _this.keys();

                var missingKeys = oldKeys.filter(function (k) {
                    return newKeys.indexOf(k) === -1;
                });
                missingKeys.forEach(function (k) {
                    return _this.delete(k);
                });

                _this.merge(values);
            });
            return this;
        };

        Object.defineProperty(ObservableMap.prototype, "size", {
            get: function get() {
                return this._keys.length;
            },
            enumerable: true,
            configurable: true
        });

        ObservableMap.prototype.toJS = function () {
            var _this = this;

            var res = {};
            this.keys().forEach(function (key) {
                return res[key] = _this.get(key);
            });
            return res;
        };

        ObservableMap.prototype.toJSON = function () {
            return this.toJS();
        };

        ObservableMap.prototype.isValidKey = function (key) {
            if (key === null || key === undefined) return false;
            if (typeof key === "string" || typeof key === "number" || typeof key === "boolean") return true;
            return false;
        };

        ObservableMap.prototype.assertValidKey = function (key) {
            if (!this.isValidKey(key)) throw new Error("[mobx.map] Invalid key: '" + key + "', only strings, numbers and booleans are accepted as key in observable maps.");
        };

        ObservableMap.prototype.toString = function () {
            var _this = this;

            return this.name + "[{ " + this.keys().map(function (key) {
                return key + ": " + ("" + _this.get(key));
            }).join(", ") + " }]";
        };

        ObservableMap.prototype.observe = function (listener, fireImmediately) {
            invariant(fireImmediately !== true, getMessage("m033"));
            return registerListener(this, listener);
        };

        ObservableMap.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        return ObservableMap;
    }();

    declareIterator(ObservableMap.prototype, function () {
        return this.entries();
    });

    function map(initialValues) {
        deprecated("`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead");
        return observable.map(initialValues);
    }

    var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);
    var EMPTY_ARRAY = [];
    Object.freeze(EMPTY_ARRAY);

    function getGlobal() {
        return typeof window !== "undefined" ? window : global;
    }

    function getNextId() {
        return ++globalState.mobxGuid;
    }

    function fail(message, thing) {
        invariant(false, message, thing);
        throw "X";
    }

    function invariant(check, message, thing) {
        if (!check) throw new Error("[mobx] Invariant failed: " + message + (thing ? " in '" + thing + "'" : ""));
    }

    var deprecatedMessages = [];

    function deprecated(msg) {
        if (deprecatedMessages.indexOf(msg) !== -1) return false;
        deprecatedMessages.push(msg);
        console.error("[mobx] Deprecated: " + msg);
        return true;
    }

    function once(func) {
        var invoked = false;
        return function () {
            if (invoked) return;
            invoked = true;
            return func.apply(this, arguments);
        };
    }

    var noop = function noop() {};

    function unique(list) {
        var res = [];
        list.forEach(function (item) {
            if (res.indexOf(item) === -1) res.push(item);
        });
        return res;
    }

    function joinStrings(things, limit, separator) {
        if (limit === void 0) {
            limit = 100;
        }

        if (separator === void 0) {
            separator = " - ";
        }

        if (!things) return "";
        var sliced = things.slice(0, limit);
        return "" + sliced.join(separator) + (things.length > limit ? " (... and " + (things.length - limit) + "more)" : "");
    }

    function isObject(value) {
        return value !== null && typeof value === "object";
    }

    function isPlainObject(value) {
        if (value === null || typeof value !== "object") return false;
        var proto = Object.getPrototypeOf(value);
        return proto === Object.prototype || proto === null;
    }

    function objectAssign() {
        var res = arguments[0];

        for (var i = 1, l = arguments.length; i < l; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty(source, key)) {
                    res[key] = source[key];
                }
            }
        }

        return res;
    }

    var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;

    function hasOwnProperty(object, propName) {
        return prototypeHasOwnProperty.call(object, propName);
    }

    function makeNonEnumerable(object, propNames) {
        for (var i = 0; i < propNames.length; i++) {
            addHiddenProp(object, propNames[i], object[propNames[i]]);
        }
    }

    function addHiddenProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: value
        });
    }

    function addHiddenFinalProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: false,
            configurable: true,
            value: value
        });
    }

    function isPropertyConfigurable(object, prop) {
        var descriptor = Object.getOwnPropertyDescriptor(object, prop);
        return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
    }

    function assertPropertyConfigurable(object, prop) {
        invariant(isPropertyConfigurable(object, prop), "Cannot make property '" + prop + "' observable, it is not configurable and writable in the target object");
    }

    function createInstanceofPredicate(name, clazz) {
        var propName = "isMobX" + name;
        clazz.prototype[propName] = true;
        return function (x) {
            return isObject(x) && x[propName] === true;
        };
    }

    function areBothNaN(a, b) {
        return typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
    }

    function isArrayLike(x) {
        return Array.isArray(x) || isObservableArray(x);
    }

    function isES6Map(thing) {
        if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map) return true;
        return false;
    }

    function getMapLikeKeys(map$$1) {
        if (isPlainObject(map$$1)) return Object.keys(map$$1);
        if (Array.isArray(map$$1)) return map$$1.map(function (_a) {
            var key = _a[0];
            return key;
        });
        if (isES6Map(map$$1)) return Array.from(map$$1.keys());
        if (isObservableMap(map$$1)) return map$$1.keys();
        return fail("Cannot get keys from " + map$$1);
    }

    function iteratorToArray(it) {
        var res = [];

        while (true) {
            var r = it.next();
            if (r.done) break;
            res.push(r.value);
        }

        return res;
    }

    function primitiveSymbol() {
        return typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") || "@@toPrimitive";
    }

    function toPrimitive(value) {
        return value === null ? null : typeof value === "object" ? "" + value : value;
    }

    var persistentKeys = ["mobxGuid", "resetId", "spyListeners", "strictMode", "runId"];

    var MobXGlobals = function () {
        function MobXGlobals() {
            this.version = 5;
            this.trackingDerivation = null;
            this.computationDepth = 0;
            this.runId = 0;
            this.mobxGuid = 0;
            this.inBatch = 0;
            this.pendingUnobservations = [];
            this.pendingReactions = [];
            this.isRunningReactions = false;
            this.allowStateChanges = true;
            this.strictMode = false;
            this.resetId = 0;
            this.spyListeners = [];
            this.globalReactionErrorHandlers = [];
        }

        return MobXGlobals;
    }();

    var globalState = new MobXGlobals();
    var shareGlobalStateCalled = false;
    var runInIsolationCalled = false;
    var warnedAboutMultipleInstances = false;
    {
        var global_1 = getGlobal();

        if (!global_1.__mobxInstanceCount) {
            global_1.__mobxInstanceCount = 1;
        } else {
            global_1.__mobxInstanceCount++;
            setTimeout(function () {
                if (!shareGlobalStateCalled && !runInIsolationCalled && !warnedAboutMultipleInstances) {
                    warnedAboutMultipleInstances = true;
                    console.warn("[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.");
                }
            }, 1);
        }
    }

    function isolateGlobalState() {
        runInIsolationCalled = true;
        getGlobal().__mobxInstanceCount--;
    }

    function shareGlobalState() {
        deprecated("Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details.");
        shareGlobalStateCalled = true;
        var global = getGlobal();
        var ownState = globalState;
        if (global.__mobservableTrackingStack || global.__mobservableViewStack) throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
        if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version) throw new Error("[mobx] An incompatible version of mobx is already loaded.");
        if (global.__mobxGlobal) globalState = global.__mobxGlobal;else global.__mobxGlobal = ownState;
    }

    function getGlobalState() {
        return globalState;
    }

    function resetGlobalState() {
        globalState.resetId++;
        var defaultGlobals = new MobXGlobals();

        for (var key in defaultGlobals) {
            if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
        }

        globalState.allowStateChanges = !globalState.strictMode;
    }

    function getAtom(thing, property) {
        if (typeof thing === "object" && thing !== null) {
            if (isObservableArray(thing)) {
                invariant(property === undefined, getMessage("m036"));
                return thing.$mobx.atom;
            }

            if (isObservableMap(thing)) {
                var anyThing = thing;
                if (property === undefined) return getAtom(anyThing._keys);
                var observable = anyThing._data[property] || anyThing._hasMap[property];
                invariant(!!observable, "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
                return observable;
            }

            runLazyInitializers(thing);
            if (property && !thing.$mobx) thing[property];

            if (isObservableObject(thing)) {
                if (!property) return fail("please specify a property");
                var observable = thing.$mobx.values[property];
                invariant(!!observable, "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
                return observable;
            }

            if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                return thing;
            }
        } else if (typeof thing === "function") {
            if (isReaction(thing.$mobx)) {
                return thing.$mobx;
            }
        }

        return fail("Cannot obtain atom from " + thing);
    }

    function getAdministration(thing, property) {
        invariant(thing, "Expecting some object");
        if (property !== undefined) return getAdministration(getAtom(thing, property));
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
        if (isObservableMap(thing)) return thing;
        runLazyInitializers(thing);
        if (thing.$mobx) return thing.$mobx;
        invariant(false, "Cannot obtain administration from " + thing);
    }

    function getDebugName(thing, property) {
        var named;
        if (property !== undefined) named = getAtom(thing, property);else if (isObservableObject(thing) || isObservableMap(thing)) named = getAdministration(thing);else named = getAtom(thing);
        return named.name;
    }

    function getDependencyTree(thing, property) {
        return nodeToDependencyTree(getAtom(thing, property));
    }

    function nodeToDependencyTree(node) {
        var result = {
            name: node.name
        };
        if (node.observing && node.observing.length > 0) result.dependencies = unique(node.observing).map(nodeToDependencyTree);
        return result;
    }

    function getObserverTree(thing, property) {
        return nodeToObserverTree(getAtom(thing, property));
    }

    function nodeToObserverTree(node) {
        var result = {
            name: node.name
        };
        if (hasObservers(node)) result.observers = getObservers(node).map(nodeToObserverTree);
        return result;
    }

    function hasObservers(observable) {
        return observable.observers && observable.observers.length > 0;
    }

    function getObservers(observable) {
        return observable.observers;
    }

    function addObserver(observable, node) {
        var l = observable.observers.length;

        if (l) {
            observable.observersIndexes[node.__mapid] = l;
        }

        observable.observers[l] = node;
        if (observable.lowestObserverState > node.dependenciesState) observable.lowestObserverState = node.dependenciesState;
    }

    function removeObserver(observable, node) {
        if (observable.observers.length === 1) {
            observable.observers.length = 0;
            queueForUnobservation(observable);
        } else {
            var list = observable.observers;
            var map = observable.observersIndexes;
            var filler = list.pop();

            if (filler !== node) {
                var index = map[node.__mapid] || 0;

                if (index) {
                    map[filler.__mapid] = index;
                } else {
                    delete map[filler.__mapid];
                }

                list[index] = filler;
            }

            delete map[node.__mapid];
        }
    }

    function queueForUnobservation(observable) {
        if (!observable.isPendingUnobservation) {
            observable.isPendingUnobservation = true;
            globalState.pendingUnobservations.push(observable);
        }
    }

    function startBatch() {
        globalState.inBatch++;
    }

    function endBatch() {
        if (--globalState.inBatch === 0) {
            runReactions();
            var list = globalState.pendingUnobservations;

            for (var i = 0; i < list.length; i++) {
                var observable = list[i];
                observable.isPendingUnobservation = false;

                if (observable.observers.length === 0) {
                    observable.onBecomeUnobserved();
                }
            }

            globalState.pendingUnobservations = [];
        }
    }

    function reportObserved(observable) {
        var derivation = globalState.trackingDerivation;

        if (derivation !== null) {
            if (derivation.runId !== observable.lastAccessedBy) {
                observable.lastAccessedBy = derivation.runId;
                derivation.newObserving[derivation.unboundDepsCount++] = observable;
            }
        } else if (observable.observers.length === 0) {
            queueForUnobservation(observable);
        }
    }

    function propagateChanged(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];

            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }

                d.onBecomeStale();
            }

            d.dependenciesState = IDerivationState.STALE;
        }
    }

    function propagateChangeConfirmed(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];
            if (d.dependenciesState === IDerivationState.POSSIBLY_STALE) d.dependenciesState = IDerivationState.STALE;else if (d.dependenciesState === IDerivationState.UP_TO_DATE) observable.lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    function propagateMaybeChanged(observable) {
        if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) return;
        observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];

            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                d.dependenciesState = IDerivationState.POSSIBLY_STALE;

                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }

                d.onBecomeStale();
            }
        }
    }

    function logTraceInfo(derivation, observable) {
        console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");

        if (derivation.isTracing === TraceMode.BREAK) {
            var lines = [];
            printDepTree(getDependencyTree(derivation), lines, 1);
            new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString() : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
        }
    }

    function printDepTree(tree, lines, depth) {
        if (lines.length >= 1000) {
            lines.push("(and many more)");
            return;
        }

        lines.push("" + new Array(depth).join("\t") + tree.name);
        if (tree.dependencies) tree.dependencies.forEach(function (child) {
            return printDepTree(child, lines, depth + 1);
        });
    }

    var IDerivationState;

    (function (IDerivationState) {
        IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
        IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
        IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
        IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
    })(IDerivationState || (exports.IDerivationState = IDerivationState = {}));

    var TraceMode;

    (function (TraceMode) {
        TraceMode[TraceMode["NONE"] = 0] = "NONE";
        TraceMode[TraceMode["LOG"] = 1] = "LOG";
        TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
    })(TraceMode || (TraceMode = {}));

    var CaughtException = function () {
        function CaughtException(cause) {
            this.cause = cause;
        }

        return CaughtException;
    }();

    function isCaughtException(e) {
        return e instanceof CaughtException;
    }

    function shouldCompute(derivation) {
        switch (derivation.dependenciesState) {
            case IDerivationState.UP_TO_DATE:
                return false;

            case IDerivationState.NOT_TRACKING:
            case IDerivationState.STALE:
                return true;

            case IDerivationState.POSSIBLY_STALE:
                {
                    var prevUntracked = untrackedStart();
                    var obs = derivation.observing,
                        l = obs.length;

                    for (var i = 0; i < l; i++) {
                        var obj = obs[i];

                        if (isComputedValue(obj)) {
                            try {
                                obj.get();
                            } catch (e) {
                                untrackedEnd(prevUntracked);
                                return true;
                            }

                            if (derivation.dependenciesState === IDerivationState.STALE) {
                                untrackedEnd(prevUntracked);
                                return true;
                            }
                        }
                    }

                    changeDependenciesStateTo0(derivation);
                    untrackedEnd(prevUntracked);
                    return false;
                }
        }
    }

    function isComputingDerivation() {
        return globalState.trackingDerivation !== null;
    }

    function checkIfStateModificationsAreAllowed(atom) {
        var hasObservers$$1 = atom.observers.length > 0;
        if (globalState.computationDepth > 0 && hasObservers$$1) fail(getMessage("m031") + atom.name);
        if (!globalState.allowStateChanges && hasObservers$$1) fail(getMessage(globalState.strictMode ? "m030a" : "m030b") + atom.name);
    }

    function trackDerivedFunction(derivation, f, context) {
        changeDependenciesStateTo0(derivation);
        derivation.newObserving = new Array(derivation.observing.length + 100);
        derivation.unboundDepsCount = 0;
        derivation.runId = ++globalState.runId;
        var prevTracking = globalState.trackingDerivation;
        globalState.trackingDerivation = derivation;
        var result;

        try {
            result = f.call(context);
        } catch (e) {
            result = new CaughtException(e);
        }

        globalState.trackingDerivation = prevTracking;
        bindDependencies(derivation);
        return result;
    }

    function bindDependencies(derivation) {
        var prevObserving = derivation.observing;
        var observing = derivation.observing = derivation.newObserving;
        var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
        var i0 = 0,
            l = derivation.unboundDepsCount;

        for (var i = 0; i < l; i++) {
            var dep = observing[i];

            if (dep.diffValue === 0) {
                dep.diffValue = 1;
                if (i0 !== i) observing[i0] = dep;
                i0++;
            }

            if (dep.dependenciesState > lowestNewObservingDerivationState) {
                lowestNewObservingDerivationState = dep.dependenciesState;
            }
        }

        observing.length = i0;
        derivation.newObserving = null;
        l = prevObserving.length;

        while (l--) {
            var dep = prevObserving[l];

            if (dep.diffValue === 0) {
                removeObserver(dep, derivation);
            }

            dep.diffValue = 0;
        }

        while (i0--) {
            var dep = observing[i0];

            if (dep.diffValue === 1) {
                dep.diffValue = 0;
                addObserver(dep, derivation);
            }
        }

        if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
            derivation.dependenciesState = lowestNewObservingDerivationState;
            derivation.onBecomeStale();
        }
    }

    function clearObserving(derivation) {
        var obs = derivation.observing;
        derivation.observing = [];
        var i = obs.length;

        while (i--) {
            removeObserver(obs[i], derivation);
        }

        derivation.dependenciesState = IDerivationState.NOT_TRACKING;
    }

    function untracked(action) {
        var prev = untrackedStart();
        var res = action();
        untrackedEnd(prev);
        return res;
    }

    function untrackedStart() {
        var prev = globalState.trackingDerivation;
        globalState.trackingDerivation = null;
        return prev;
    }

    function untrackedEnd(prev) {
        globalState.trackingDerivation = prev;
    }

    function changeDependenciesStateTo0(derivation) {
        if (derivation.dependenciesState === IDerivationState.UP_TO_DATE) return;
        derivation.dependenciesState = IDerivationState.UP_TO_DATE;
        var obs = derivation.observing;
        var i = obs.length;

        while (i--) {
            obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    function log(msg) {
        console.log(msg);
        return msg;
    }

    function whyRun(thing, prop) {
        deprecated("`whyRun` is deprecated in favor of `trace`");
        thing = getAtomFromArgs(arguments);
        if (!thing) return log(getMessage("m024"));
        if (isComputedValue(thing) || isReaction(thing)) return log(thing.whyRun());
        return fail(getMessage("m025"));
    }

    function trace() {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }

        var enterBreakPoint = false;
        if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
        var derivation = getAtomFromArgs(args);

        if (!derivation) {
            return fail("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
        }

        if (derivation.isTracing === TraceMode.NONE) {
            console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
        }

        derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
    }

    function getAtomFromArgs(args) {
        switch (args.length) {
            case 0:
                return globalState.trackingDerivation;

            case 1:
                return getAtom(args[0]);

            case 2:
                return getAtom(args[0], args[1]);
        }
    }

    var Reaction = function () {
        function Reaction(name, onInvalidate) {
            if (name === void 0) {
                name = "Reaction@" + getNextId();
            }

            this.name = name;
            this.onInvalidate = onInvalidate;
            this.observing = [];
            this.newObserving = [];
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.diffValue = 0;
            this.runId = 0;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.isDisposed = false;
            this._isScheduled = false;
            this._isTrackPending = false;
            this._isRunning = false;
            this.isTracing = TraceMode.NONE;
        }

        Reaction.prototype.onBecomeStale = function () {
            this.schedule();
        };

        Reaction.prototype.schedule = function () {
            if (!this._isScheduled) {
                this._isScheduled = true;
                globalState.pendingReactions.push(this);
                runReactions();
            }
        };

        Reaction.prototype.isScheduled = function () {
            return this._isScheduled;
        };

        Reaction.prototype.runReaction = function () {
            if (!this.isDisposed) {
                startBatch();
                this._isScheduled = false;

                if (shouldCompute(this)) {
                    this._isTrackPending = true;
                    this.onInvalidate();

                    if (this._isTrackPending && isSpyEnabled()) {
                        spyReport({
                            object: this,
                            type: "scheduled-reaction"
                        });
                    }
                }

                endBatch();
            }
        };

        Reaction.prototype.track = function (fn) {
            startBatch();
            var notify = isSpyEnabled();
            var startTime;

            if (notify) {
                startTime = Date.now();
                spyReportStart({
                    object: this,
                    type: "reaction",
                    fn: fn
                });
            }

            this._isRunning = true;
            var result = trackDerivedFunction(this, fn, undefined);
            this._isRunning = false;
            this._isTrackPending = false;

            if (this.isDisposed) {
                clearObserving(this);
            }

            if (isCaughtException(result)) this.reportExceptionInDerivation(result.cause);

            if (notify) {
                spyReportEnd({
                    time: Date.now() - startTime
                });
            }

            endBatch();
        };

        Reaction.prototype.reportExceptionInDerivation = function (error) {
            var _this = this;

            if (this.errorHandler) {
                this.errorHandler(error, this);
                return;
            }

            var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this;
            var messageToUser = getMessage("m037");
            console.error(message || messageToUser, error);

            if (isSpyEnabled()) {
                spyReport({
                    type: "error",
                    message: message,
                    error: error,
                    object: this
                });
            }

            globalState.globalReactionErrorHandlers.forEach(function (f) {
                return f(error, _this);
            });
        };

        Reaction.prototype.dispose = function () {
            if (!this.isDisposed) {
                this.isDisposed = true;

                if (!this._isRunning) {
                    startBatch();
                    clearObserving(this);
                    endBatch();
                }
            }
        };

        Reaction.prototype.getDisposer = function () {
            var r = this.dispose.bind(this);
            r.$mobx = this;
            r.onError = registerErrorHandler;
            return r;
        };

        Reaction.prototype.toString = function () {
            return "Reaction[" + this.name + "]";
        };

        Reaction.prototype.whyRun = function () {
            var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) {
                return dep.name;
            });
            return "\nWhyRun? reaction '" + this.name + "':\n * Status: [" + (this.isDisposed ? "stopped" : this._isRunning ? "running" : this.isScheduled() ? "scheduled" : "idle") + "]\n * This reaction will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this._isRunning ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\t" + getMessage("m038") + "\n";
        };

        Reaction.prototype.trace = function (enterBreakPoint) {
            if (enterBreakPoint === void 0) {
                enterBreakPoint = false;
            }

            trace(this, enterBreakPoint);
        };

        return Reaction;
    }();

    function registerErrorHandler(handler) {
        invariant(this && this.$mobx && isReaction(this.$mobx), "Invalid `this`");
        invariant(!this.$mobx.errorHandler, "Only one onErrorHandler can be registered");
        this.$mobx.errorHandler = handler;
    }

    function onReactionError(handler) {
        globalState.globalReactionErrorHandlers.push(handler);
        return function () {
            var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
            if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
        };
    }

    var MAX_REACTION_ITERATIONS = 100;

    var reactionScheduler = function reactionScheduler(f) {
        return f();
    };

    function runReactions() {
        if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
        reactionScheduler(runReactionsHelper);
    }

    function runReactionsHelper() {
        globalState.isRunningReactions = true;
        var allReactions = globalState.pendingReactions;
        var iterations = 0;

        while (allReactions.length > 0) {
            if (++iterations === MAX_REACTION_ITERATIONS) {
                console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
                allReactions.splice(0);
            }

            var remainingReactions = allReactions.splice(0);

            for (var i = 0, l = remainingReactions.length; i < l; i++) {
                remainingReactions[i].runReaction();
            }
        }

        globalState.isRunningReactions = false;
    }

    var isReaction = createInstanceofPredicate("Reaction", Reaction);

    function setReactionScheduler(fn) {
        var baseScheduler = reactionScheduler;

        reactionScheduler = function reactionScheduler(f) {
            return fn(function () {
                return baseScheduler(f);
            });
        };
    }

    function asReference(value) {
        deprecated("asReference is deprecated, use observable.ref instead");
        return observable.ref(value);
    }

    function asStructure(value) {
        deprecated("asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.");
        return observable.struct(value);
    }

    function asFlat(value) {
        deprecated("asFlat is deprecated, use observable.shallow instead");
        return observable.shallow(value);
    }

    function asMap(data) {
        deprecated("asMap is deprecated, use observable.map or observable.shallowMap instead");
        return observable.map(data || {});
    }

    function createComputedDecorator(equals) {
        return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {
            invariant(typeof originalDescriptor !== "undefined", getMessage("m009"));
            invariant(typeof originalDescriptor.get === "function", getMessage("m010"));
            var adm = asObservableObject(target, "");
            defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, equals, false);
        }, function (name) {
            var observable = this.$mobx.values[name];
            if (observable === undefined) return undefined;
            return observable.get();
        }, function (name, value) {
            this.$mobx.values[name].set(value);
        }, false, false);
    }

    var computedDecorator = createComputedDecorator(comparer.default);
    var computedStructDecorator = createComputedDecorator(comparer.structural);

    var computed = function computed(arg1, arg2, arg3) {
        if (typeof arg2 === "string") {
            return computedDecorator.apply(null, arguments);
        }

        invariant(typeof arg1 === "function", getMessage("m011"));
        invariant(arguments.length < 3, getMessage("m012"));
        var opts = typeof arg2 === "object" ? arg2 : {};
        opts.setter = typeof arg2 === "function" ? arg2 : opts.setter;
        var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
        return new ComputedValue(arg1, opts.context, equals, opts.name || arg1.name || "", opts.setter);
    };

    computed.struct = computedStructDecorator;
    computed.equals = createComputedDecorator;

    function isComputed(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (isObservableObject(value) === false) return false;
            if (!value.$mobx.values[property]) return false;
            var atom = getAtom(value, property);
            return isComputedValue(atom);
        }

        return isComputedValue(value);
    }

    function observe(thing, propOrCb, cbOrFire, fireImmediately) {
        if (typeof cbOrFire === "function") return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
    }

    function observeObservable(thing, listener, fireImmediately) {
        return getAdministration(thing).observe(listener, fireImmediately);
    }

    function observeObservableProperty(thing, property, listener, fireImmediately) {
        return getAdministration(thing, property).observe(listener, fireImmediately);
    }

    function intercept(thing, propOrHandler, handler) {
        if (typeof handler === "function") return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
    }

    function interceptInterceptable(thing, handler) {
        return getAdministration(thing).intercept(handler);
    }

    function interceptProperty(thing, property, handler) {
        return getAdministration(thing, property).intercept(handler);
    }

    function expr(expr, scope) {
        if (!isComputingDerivation()) console.warn(getMessage("m013"));
        return computed(expr, {
            context: scope
        }).get();
    }

    function toJS(source, detectCycles, __alreadySeen) {
        if (detectCycles === void 0) {
            detectCycles = true;
        }

        if (__alreadySeen === void 0) {
            __alreadySeen = [];
        }

        function cache(value) {
            if (detectCycles) __alreadySeen.push([source, value]);
            return value;
        }

        if (isObservable(source)) {
            if (detectCycles && __alreadySeen === null) __alreadySeen = [];

            if (detectCycles && source !== null && typeof source === "object") {
                for (var i = 0, l = __alreadySeen.length; i < l; i++) {
                    if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
                }
            }

            if (isObservableArray(source)) {
                var res = cache([]);
                var toAdd = source.map(function (value) {
                    return toJS(value, detectCycles, __alreadySeen);
                });
                res.length = toAdd.length;

                for (var i = 0, l = toAdd.length; i < l; i++) {
                    res[i] = toAdd[i];
                }

                return res;
            }

            if (isObservableObject(source)) {
                var res = cache({});

                for (var key in source) {
                    res[key] = toJS(source[key], detectCycles, __alreadySeen);
                }

                return res;
            }

            if (isObservableMap(source)) {
                var res_1 = cache({});
                source.forEach(function (value, key) {
                    return res_1[key] = toJS(value, detectCycles, __alreadySeen);
                });
                return res_1;
            }

            if (isObservableValue(source)) return toJS(source.get(), detectCycles, __alreadySeen);
        }

        return source;
    }

    function createTransformer(transformer, onCleanup) {
        invariant(typeof transformer === "function" && transformer.length < 2, "createTransformer expects a function that accepts one argument");
        var objectCache = {};
        var resetId = globalState.resetId;

        var Transformer = function (_super) {
            __extends(Transformer, _super);

            function Transformer(sourceIdentifier, sourceObject) {
                var _this = _super.call(this, function () {
                    return transformer(sourceObject);
                }, undefined, comparer.default, "Transformer-" + transformer.name + "-" + sourceIdentifier, undefined) || this;

                _this.sourceIdentifier = sourceIdentifier;
                _this.sourceObject = sourceObject;
                return _this;
            }

            Transformer.prototype.onBecomeUnobserved = function () {
                var lastValue = this.value;

                _super.prototype.onBecomeUnobserved.call(this);

                delete objectCache[this.sourceIdentifier];
                if (onCleanup) onCleanup(lastValue, this.sourceObject);
            };

            return Transformer;
        }(ComputedValue);

        return function (object) {
            if (resetId !== globalState.resetId) {
                objectCache = {};
                resetId = globalState.resetId;
            }

            var identifier = getMemoizationId(object);
            var reactiveTransformer = objectCache[identifier];
            if (reactiveTransformer) return reactiveTransformer.get();
            reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);
            return reactiveTransformer.get();
        };
    }

    function getMemoizationId(object) {
        if (typeof object === "string" || typeof object === "number") return object;
        if (object === null || typeof object !== "object") throw new Error("[mobx] transform expected some kind of object or primitive value, got: " + object);
        var tid = object.$transformId;

        if (tid === undefined) {
            tid = getNextId();
            addHiddenProp(object, "$transformId", tid);
        }

        return tid;
    }

    function interceptReads(thing, propOrHandler, handler) {
        var target;

        if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
            target = getAdministration(thing);
        } else if (isObservableObject(thing)) {
            if (typeof propOrHandler !== "string") return fail("InterceptReads can only be used with a specific property, not with an object in general");
            target = getAdministration(thing, propOrHandler);
        } else {
            return fail("Expected observable map, object or array as first array");
        }

        if (target.dehancer !== undefined) return fail("An intercept reader was already established");
        target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
        return function () {
            target.dehancer = undefined;
        };
    }

    var extras = {
        allowStateChanges: allowStateChanges,
        deepEqual: deepEqual,
        getAtom: getAtom,
        getDebugName: getDebugName,
        getDependencyTree: getDependencyTree,
        getAdministration: getAdministration,
        getGlobalState: getGlobalState,
        getObserverTree: getObserverTree,
        interceptReads: interceptReads,
        isComputingDerivation: isComputingDerivation,
        isSpyEnabled: isSpyEnabled,
        onReactionError: onReactionError,
        reserveArrayBuffer: reserveArrayBuffer,
        resetGlobalState: resetGlobalState,
        isolateGlobalState: isolateGlobalState,
        shareGlobalState: shareGlobalState,
        spyReport: spyReport,
        spyReportEnd: spyReportEnd,
        spyReportStart: spyReportStart,
        setReactionScheduler: setReactionScheduler
    };
    var everything = {
        Reaction: Reaction,
        untracked: untracked,
        Atom: Atom,
        BaseAtom: BaseAtom,
        useStrict: useStrict,
        isStrictModeEnabled: isStrictModeEnabled,
        spy: spy,
        comparer: comparer,
        asReference: asReference,
        asFlat: asFlat,
        asStructure: asStructure,
        asMap: asMap,
        isModifierDescriptor: isModifierDescriptor,
        isObservableObject: isObservableObject,
        isBoxedObservable: isObservableValue,
        isObservableArray: isObservableArray,
        ObservableMap: ObservableMap,
        isObservableMap: isObservableMap,
        map: map,
        transaction: transaction,
        observable: observable,
        computed: computed,
        isObservable: isObservable,
        isComputed: isComputed,
        extendObservable: extendObservable,
        extendShallowObservable: extendShallowObservable,
        observe: observe,
        intercept: intercept,
        autorun: autorun,
        autorunAsync: autorunAsync,
        when: when,
        reaction: reaction,
        action: action,
        isAction: isAction,
        runInAction: runInAction,
        expr: expr,
        toJS: toJS,
        createTransformer: createTransformer,
        whyRun: whyRun,
        isArrayLike: isArrayLike,
        extras: extras
    };
    var warnedAboutDefaultExport = false;

    var _loop_1 = function _loop_1(p) {
        var val = everything[p];
        Object.defineProperty(everything, p, {
            get: function get() {
                if (!warnedAboutDefaultExport) {
                    warnedAboutDefaultExport = true;
                    console.warn("Using default export (`import mobx from 'mobx'`) is deprecated " + "and won’t work in mobx@4.0.0\n" + "Use `import * as mobx from 'mobx'` instead");
                }

                return val;
            }
        });
    };

    for (var p in everything) {
        _loop_1(p);
    }

    if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
            spy: spy,
            extras: extras
        });
    }

    exports.extras = extras;
    exports.Reaction = Reaction;
    exports.untracked = untracked;
    exports.IDerivationState = IDerivationState;
    exports.Atom = Atom;
    exports.BaseAtom = BaseAtom;
    exports.useStrict = useStrict;
    exports.isStrictModeEnabled = isStrictModeEnabled;
    exports.spy = spy;
    exports.comparer = comparer;
    exports.asReference = asReference;
    exports.asFlat = asFlat;
    exports.asStructure = asStructure;
    exports.asMap = asMap;
    exports.isModifierDescriptor = isModifierDescriptor;
    exports.isObservableObject = isObservableObject;
    exports.isBoxedObservable = isObservableValue;
    exports.isObservableArray = isObservableArray;
    exports.ObservableMap = ObservableMap;
    exports.isObservableMap = isObservableMap;
    exports.map = map;
    exports.transaction = transaction;
    exports.observable = observable;
    exports.computed = computed;
    exports.isObservable = isObservable;
    exports.isComputed = isComputed;
    exports.extendObservable = extendObservable;
    exports.extendShallowObservable = extendShallowObservable;
    exports.observe = observe;
    exports.intercept = intercept;
    exports.autorun = autorun;
    exports.autorunAsync = autorunAsync;
    exports.when = when;
    exports.reaction = reaction;
    exports.action = action;
    exports.isAction = isAction;
    exports.runInAction = runInAction;
    exports.expr = expr;
    exports.toJS = toJS;
    exports.createTransformer = createTransformer;
    exports.whyRun = whyRun;
    exports.trace = trace;
    exports.isArrayLike = isArrayLike;
    exports.default = everything;
},577,[],"mobx/lib/mobx.module.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deepestExplicitValueForKey = deepestExplicitValueForKey;
  exports.assert = assert;

  function deepestExplicitValueForKey(navigationState, key) {
    var current = void 0;
    var selected = navigationState;

    while ({}.hasOwnProperty.call(selected, 'children')) {
      if (!selected.tabs) {
        for (var i = 0; i < selected.index; i += 1) {
          if (typeof selected.children[i][key] !== 'undefined') {
            current = selected.children[i][key];
          }
        }
      }

      selected = selected.children[selected.index];

      if (typeof selected[key] !== 'undefined') {
        current = selected[key];
      }
    }

    if (typeof current === 'undefined') {
      current = navigationState[key];
    }

    return current;
  }

  function assert(expr, failDescription) {
    if (!expr) {
      throw new Error('[react-native-router-flux] ' + failDescription);
    }
  }

  var OnEnter = exports.OnEnter = 'onEnter';
  var OnExit = exports.OnExit = 'onExit';
},578,[],"react-native-router-flux/dist/Util.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    get createNavigationContainer() {
      return require(_dependencyMap[0], './createNavigationContainer').default;
    },

    get StateUtils() {
      return require(_dependencyMap[1], './StateUtils').default;
    },

    get addNavigationHelpers() {
      return require(_dependencyMap[2], './addNavigationHelpers').default;
    },

    get NavigationActions() {
      return require(_dependencyMap[3], './NavigationActions').default;
    },

    get createNavigator() {
      return require(_dependencyMap[4], './navigators/createNavigator').default;
    },

    get StackNavigator() {
      return require(_dependencyMap[5], './navigators/StackNavigator').default;
    },

    get TabNavigator() {
      return require(_dependencyMap[6], './navigators/TabNavigator').default;
    },

    get DrawerNavigator() {
      return require(_dependencyMap[7], './navigators/DrawerNavigator').default;
    },

    get StackRouter() {
      return require(_dependencyMap[8], './routers/StackRouter').default;
    },

    get TabRouter() {
      return require(_dependencyMap[9], './routers/TabRouter').default;
    },

    get Transitioner() {
      return require(_dependencyMap[10], './views/Transitioner').default;
    },

    get CardStackTransitioner() {
      return require(_dependencyMap[11], './views/CardStack/CardStackTransitioner').default;
    },

    get CardStack() {
      return require(_dependencyMap[12], './views/CardStack/CardStack').default;
    },

    get Card() {
      return require(_dependencyMap[13], './views/CardStack/Card').default;
    },

    get SafeAreaView() {
      return require(_dependencyMap[14], './views/SafeAreaView').default;
    },

    get Header() {
      return require(_dependencyMap[15], './views/Header/Header').default;
    },

    get HeaderTitle() {
      return require(_dependencyMap[16], './views/Header/HeaderTitle').default;
    },

    get HeaderBackButton() {
      return require(_dependencyMap[17], './views/Header/HeaderBackButton').default;
    },

    get DrawerView() {
      return require(_dependencyMap[18], './views/Drawer/DrawerView').default;
    },

    get DrawerItems() {
      return require(_dependencyMap[19], './views/Drawer/DrawerNavigatorItems').default;
    },

    get TabView() {
      return require(_dependencyMap[20], './views/TabView/TabView').default;
    },

    get TabBarTop() {
      return require(_dependencyMap[21], './views/TabView/TabBarTop').default;
    },

    get TabBarBottom() {
      return require(_dependencyMap[22], './views/TabView/TabBarBottom').default;
    },

    get withNavigation() {
      return require(_dependencyMap[23], './views/withNavigation').default;
    }

  };
},579,[580,585,583,582,586,587,618,634,609,619,606,588,589,591,601,594,595,596,636,639,620,631,633,640],"react-navigation/src/react-navigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/createNavigationContainer.js";
  exports.default = createNavigationContainer;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _PlatformHelpers = require(_dependencyMap[1], "./PlatformHelpers");

  var _NavigationActions = require(_dependencyMap[2], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = require(_dependencyMap[3], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _invariant = require(_dependencyMap[4], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function createNavigationContainer(Component) {
    var _class, _temp;

    var NavigationContainer = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(NavigationContainer, _React$Component);

      function NavigationContainer(props) {
        babelHelpers.classCallCheck(this, NavigationContainer);

        var _this = babelHelpers.possibleConstructorReturn(this, (NavigationContainer.__proto__ || Object.getPrototypeOf(NavigationContainer)).call(this, props));

        _this.subs = null;

        _this._handleOpenURL = function (_ref) {
          var url = _ref.url;

          var parsedUrl = _this._urlToPathAndParams(url);

          if (parsedUrl) {
            var path = parsedUrl.path,
                params = parsedUrl.params;
            var action = Component.router.getActionForPathAndParams(path, params);

            if (action) {
              _this.dispatch(action);
            }
          }
        };

        _this.dispatch = function (inputAction) {
          var action = _NavigationActions2.default.mapDeprecatedActionAndWarn(inputAction);

          if (!_this._isStateful()) {
            return false;
          }

          _this._nav = _this._nav || _this.state.nav;
          var oldNav = _this._nav;
          (0, _invariant2.default)(oldNav, 'should be set in constructor if stateful');
          var nav = Component.router.getStateForAction(action, oldNav);

          if (nav && nav !== oldNav) {
            _this._nav = nav;

            _this.setState({
              nav: nav
            }, function () {
              return _this._onNavigationStateChange(oldNav, nav, action);
            });

            return true;
          }

          return false;
        };

        _this._validateProps(props);

        _this.state = {
          nav: _this._isStateful() ? Component.router.getStateForAction(_NavigationActions2.default.init()) : null
        };
        return _this;
      }

      babelHelpers.createClass(NavigationContainer, [{
        key: "_isStateful",
        value: function _isStateful() {
          return !this.props.navigation;
        }
      }, {
        key: "_validateProps",
        value: function _validateProps(props) {
          if (this._isStateful()) {
            return;
          }

          var navigation = props.navigation,
              screenProps = props.screenProps,
              containerProps = babelHelpers.objectWithoutProperties(props, ["navigation", "screenProps"]);
          var keys = Object.keys(containerProps);

          if (keys.length !== 0) {
            throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
          }
        }
      }, {
        key: "_urlToPathAndParams",
        value: function _urlToPathAndParams(url) {
          var params = {};
          var delimiter = this.props.uriPrefix || '://';
          var path = url.split(delimiter)[1];

          if (typeof path === 'undefined') {
            path = url;
          }

          return {
            path: path,
            params: params
          };
        }
      }, {
        key: "_onNavigationStateChange",
        value: function _onNavigationStateChange(prevNav, nav, action) {
          if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {
            if (console.group) {
              console.group('Navigation Dispatch: ');
              console.log('Action: ', action);
              console.log('New State: ', nav);
              console.log('Last State: ', prevNav);
              console.groupEnd();
            } else {
              console.log('Navigation Dispatch: ', {
                action: action,
                newState: nav,
                lastState: prevNav
              });
            }

            return;
          }

          if (typeof this.props.onNavigationStateChange === 'function') {
            this.props.onNavigationStateChange(prevNav, nav, action);
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._validateProps(nextProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this._nav === this.state.nav) {
            this._nav = null;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          if (!this._isStateful()) {
            return;
          }

          this.subs = _PlatformHelpers.BackHandler.addEventListener('hardwareBackPress', function () {
            return _this2.dispatch(_NavigationActions2.default.back());
          });

          _PlatformHelpers.Linking.addEventListener('url', this._handleOpenURL);

          _PlatformHelpers.Linking.getInitialURL().then(function (url) {
            return url && _this2._handleOpenURL({
              url: url
            });
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _PlatformHelpers.Linking.removeEventListener('url', this._handleOpenURL);

          this.subs && this.subs.remove();
        }
      }, {
        key: "render",
        value: function render() {
          var navigation = this.props.navigation;

          if (this._isStateful()) {
            var _nav = this.state.nav;
            (0, _invariant2.default)(_nav, 'should be set in constructor if stateful');

            if (!this._navigation || this._navigation.state !== _nav) {
              this._navigation = (0, _addNavigationHelpers2.default)({
                dispatch: this.dispatch,
                state: _nav
              });
            }

            navigation = this._navigation;
          }

          (0, _invariant2.default)(navigation, 'failed to get navigation');
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            navigation: navigation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 210
            }
          }));
        }
      }]);
      return NavigationContainer;
    }(_react2.default.Component), _class.router = Component.router, _class.navigationOptions = null, _temp);
    return NavigationContainer;
  }
},580,[109,581,582,583,584],"react-navigation/src/createNavigationContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Linking = exports.BackHandler = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var BackHandler = _reactNative.BackHandler || _reactNative.BackAndroid;
  exports.BackHandler = BackHandler;
  exports.Linking = _reactNative.Linking;
},581,[12],"react-navigation/src/PlatformHelpers.native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var BACK = 'Navigation/BACK';
  var INIT = 'Navigation/INIT';
  var NAVIGATE = 'Navigation/NAVIGATE';
  var RESET = 'Navigation/RESET';
  var SET_PARAMS = 'Navigation/SET_PARAMS';
  var URI = 'Navigation/URI';

  var createAction = function createAction(type, fn) {
    fn.toString = function () {
      return type;
    };

    return fn;
  };

  var back = createAction(BACK, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: BACK,
      key: payload.key
    };
  });
  var init = createAction(INIT, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = {
      type: INIT
    };

    if (payload.params) {
      action.params = payload.params;
    }

    return action;
  });
  var navigate = createAction(NAVIGATE, function (payload) {
    var action = {
      type: NAVIGATE,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    return action;
  });
  var reset = createAction(RESET, function (payload) {
    return {
      type: RESET,
      index: payload.index,
      key: payload.key,
      actions: payload.actions
    };
  });
  var setParams = createAction(SET_PARAMS, function (payload) {
    return {
      type: SET_PARAMS,
      key: payload.key,
      params: payload.params
    };
  });
  var uri = createAction(URI, function (payload) {
    return {
      type: URI,
      uri: payload.uri
    };
  });

  var mapDeprecatedNavigateAction = function mapDeprecatedNavigateAction(action) {
    if (action.type === 'Navigate') {
      var payload = {
        routeName: action.routeName,
        params: action.params
      };

      if (action.action) {
        payload.action = mapDeprecatedNavigateAction(action.action);
      }

      return navigate(payload);
    }

    return action;
  };

  var mapDeprecatedAction = function mapDeprecatedAction(action) {
    if (action.type === 'Back') {
      return back(action);
    } else if (action.type === 'Init') {
      return init(action);
    } else if (action.type === 'Navigate') {
      return mapDeprecatedNavigateAction(action);
    } else if (action.type === 'Reset') {
      return reset({
        index: action.index,
        key: action.key,
        actions: action.actions.map(mapDeprecatedNavigateAction)
      });
    } else if (action.type === 'SetParams') {
      return setParams(action);
    }

    return action;
  };

  var mapDeprecatedActionAndWarn = function mapDeprecatedActionAndWarn(action) {
    var newAction = mapDeprecatedAction(action);

    if (newAction !== action) {
      var oldType = action.type;
      var newType = newAction.type;
      console.warn(["The action type '" + oldType + "' has been renamed to '" + newType + "'.", "'" + oldType + "' will continue to work while in beta but will be removed", 'in the first major release. Moving forward, you should use the', 'action constants and action creators exported by this library in', "the 'actions' object.", 'See https://github.com/react-community/react-navigation/pull/120 for', 'more details.'].join(' '));
    }

    return newAction;
  };

  exports.default = {
    BACK: BACK,
    INIT: INIT,
    NAVIGATE: NAVIGATE,
    RESET: RESET,
    SET_PARAMS: SET_PARAMS,
    URI: URI,
    back: back,
    init: init,
    navigate: navigate,
    reset: reset,
    setParams: setParams,
    uri: uri,
    mapDeprecatedActionAndWarn: mapDeprecatedActionAndWarn
  };
},582,[],"react-navigation/src/NavigationActions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (navigation) {
    return babelHelpers.extends({}, navigation, {
      goBack: function goBack(key) {
        var actualizedKey = key;

        if (key === undefined && navigation.state.key) {
          (0, _invariant2.default)(typeof navigation.state.key === 'string', 'key should be a string');
          actualizedKey = navigation.state.key;
        }

        return navigation.dispatch(_NavigationActions2.default.back({
          key: actualizedKey
        }));
      },
      navigate: function navigate(routeName, params, action) {
        return navigation.dispatch(_NavigationActions2.default.navigate({
          routeName: routeName,
          params: params,
          action: action
        }));
      },
      setParams: function setParams(params) {
        (0, _invariant2.default)(navigation.state.key && typeof navigation.state.key === 'string', 'setParams cannot be called by root navigator');
        var key = navigation.state.key;
        return navigation.dispatch(_NavigationActions2.default.setParams({
          params: params,
          key: key
        }));
      }
    });
  };

  var _NavigationActions = require(_dependencyMap[0], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = require(_dependencyMap[1], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);
},583,[582,584],"react-navigation/src/addNavigationHelpers.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (__DEV__) {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},584,[],"react-navigation/src/utils/invariant.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var StateUtils = {
    get: function get(state, key) {
      return state.routes.find(function (route) {
        return route.key === key;
      }) || null;
    },
    indexOf: function indexOf(state, key) {
      return state.routes.map(function (route) {
        return route.key;
      }).indexOf(key);
    },
    has: function has(state, key) {
      return !!state.routes.some(function (route) {
        return route.key === key;
      });
    },
    push: function push(state, route) {
      (0, _invariant2.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);
      var routes = state.routes.slice();
      routes.push(route);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    pop: function pop(state) {
      if (state.index <= 0) {
        return state;
      }

      var routes = state.routes.slice(0, -1);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    jumpToIndex: function jumpToIndex(state, index) {
      if (index === state.index) {
        return state;
      }

      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s to jump to', index);
      return babelHelpers.extends({}, state, {
        index: index
      });
    },
    jumpTo: function jumpTo(state, key) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.jumpToIndex(state, index);
    },
    back: function back(state) {
      var index = state.index - 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    forward: function forward(state) {
      var index = state.index + 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    replaceAt: function replaceAt(state, key, route) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.replaceAtIndex(state, index, route);
    },
    replaceAtIndex: function replaceAtIndex(state, index, route) {
      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

      if (state.routes[index] === route) {
        return state;
      }

      var routes = state.routes.slice();
      routes[index] = route;
      return babelHelpers.extends({}, state, {
        index: index,
        routes: routes
      });
    },
    reset: function reset(state, routes, index) {
      (0, _invariant2.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');
      var nextIndex = index === undefined ? routes.length - 1 : index;

      if (state.routes.length === routes.length && state.index === nextIndex) {
        var compare = function compare(route, ii) {
          return routes[ii] === route;
        };

        if (state.routes.every(compare)) {
          return state;
        }
      }

      (0, _invariant2.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);
      return babelHelpers.extends({}, state, {
        index: nextIndex,
        routes: routes
      });
    }
  };
  exports.default = StateUtils;
},585,[584],"react-navigation/src/StateUtils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/navigators/createNavigator.js";
  exports.default = createNavigator;

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  function createNavigator(router, routeConfigs, navigatorConfig, navigatorType) {
    return function (NavigationView) {
      var _class, _temp;

      var Navigator = (_temp = _class = function (_React$Component) {
        babelHelpers.inherits(Navigator, _React$Component);

        function Navigator() {
          babelHelpers.classCallCheck(this, Navigator);
          return babelHelpers.possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).apply(this, arguments));
        }

        babelHelpers.createClass(Navigator, [{
          key: "render",
          value: function render() {
            return React.createElement(NavigationView, babelHelpers.extends({}, this.props, {
              router: router,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 52
              }
            }));
          }
        }]);
        return Navigator;
      }(React.Component), _class.router = router, _class.routeConfigs = routeConfigs, _class.navigatorConfig = navigatorConfig, _class.navigatorType = navigatorType, _class.navigationOptions = null, _temp);
      return Navigator;
    };
  }
},586,[109],"react-navigation/src/navigators/createNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/navigators/StackNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _createNavigationContainer = require(_dependencyMap[1], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _CardStackTransitioner = require(_dependencyMap[3], "../views/CardStack/CardStackTransitioner");

  var _CardStackTransitioner2 = babelHelpers.interopRequireDefault(_CardStackTransitioner);

  var _StackRouter = require(_dependencyMap[4], "../routers/StackRouter");

  var _StackRouter2 = babelHelpers.interopRequireDefault(_StackRouter);

  var _NavigatorTypes = require(_dependencyMap[5], "./NavigatorTypes");

  var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

  exports.default = function (routeConfigMap) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var initialRouteName = stackConfig.initialRouteName,
        initialRouteParams = stackConfig.initialRouteParams,
        paths = stackConfig.paths,
        headerMode = stackConfig.headerMode,
        mode = stackConfig.mode,
        cardStyle = stackConfig.cardStyle,
        transitionConfig = stackConfig.transitionConfig,
        onTransitionStart = stackConfig.onTransitionStart,
        onTransitionEnd = stackConfig.onTransitionEnd,
        navigationOptions = stackConfig.navigationOptions;
    var stackRouterConfig = {
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      paths: paths,
      navigationOptions: navigationOptions
    };
    var router = (0, _StackRouter2.default)(routeConfigMap, stackRouterConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigMap, stackConfig, _NavigatorTypes2.default.STACK)(function (props) {
      return React.createElement(_CardStackTransitioner2.default, babelHelpers.extends({}, props, {
        headerMode: headerMode,
        mode: mode,
        cardStyle: cardStyle,
        transitionConfig: transitionConfig,
        onTransitionStart: onTransitionStart,
        onTransitionEnd: onTransitionEnd,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };
},587,[109,580,586,588,609,617],"react-navigation/src/navigators/StackNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _CardStack = require(_dependencyMap[2], "./CardStack");

  var _CardStack2 = babelHelpers.interopRequireDefault(_CardStack);

  var _CardStackStyleInterpolator = require(_dependencyMap[3], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var _Transitioner = require(_dependencyMap[4], "../Transitioner");

  var _Transitioner2 = babelHelpers.interopRequireDefault(_Transitioner);

  var _TransitionConfigs = require(_dependencyMap[5], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;
  var CardStackTransitioner = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(CardStackTransitioner, _React$Component);

    function CardStackTransitioner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStackTransitioner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStackTransitioner.__proto__ || Object.getPrototypeOf(CardStackTransitioner)).call.apply(_ref, [this].concat(args))), _this), _this._configureTransition = function (transitionProps, prevTransitionProps) {
        var isModal = _this.props.mode === 'modal';
        var transitionSpec = babelHelpers.extends({}, _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec);

        if (!!NativeAnimatedModule && _CardStackStyleInterpolator2.default.canUseNativeDriver()) {
          transitionSpec.useNativeDriver = true;
        }

        return transitionSpec;
      }, _this._render = function (props) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            headerMode = _this$props.headerMode,
            mode = _this$props.mode,
            router = _this$props.router,
            cardStyle = _this$props.cardStyle,
            transitionConfig = _this$props.transitionConfig;
        return React.createElement(_CardStack2.default, babelHelpers.extends({
          screenProps: screenProps,
          headerMode: headerMode,
          mode: mode,
          router: router,
          cardStyle: cardStyle,
          transitionConfig: transitionConfig
        }, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 97
          }
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStackTransitioner, [{
      key: "render",
      value: function render() {
        return React.createElement(_Transitioner2.default, {
          configureTransition: this._configureTransition,
          navigation: this.props.navigation,
          render: this._render,
          onTransitionStart: this.props.onTransitionStart,
          onTransitionEnd: this.props.onTransitionEnd,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        });
      }
    }]);
    return CardStackTransitioner;
  }(React.Component), _class.defaultProps = {
    mode: 'card'
  }, _temp2);
  exports.default = CardStackTransitioner;
},588,[109,12,589,605,606,604],"react-navigation/src/views/CardStack/CardStackTransitioner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/CardStack/CardStack.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _clamp = require(_dependencyMap[1], "clamp");

  var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Card = require(_dependencyMap[3], "./Card");

  var _Card2 = babelHelpers.interopRequireDefault(_Card);

  var _Header = require(_dependencyMap[4], "../Header/Header");

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _NavigationActions = require(_dependencyMap[5], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = require(_dependencyMap[6], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _SceneView = require(_dependencyMap[7], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _TransitionConfigs = require(_dependencyMap[8], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var emptyFunction = function emptyFunction() {};

  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 1 / 2;
  var RESPOND_THRESHOLD = 20;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
    if (!animatedValue.__isNative) {
      return;
    }

    if (Object.keys(animatedValue._listeners).length === 0) {
      animatedValue.addListener(emptyFunction);
    }
  };

  var CardStack = function (_React$Component) {
    babelHelpers.inherits(CardStack, _React$Component);

    function CardStack() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStack);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStack.__proto__ || Object.getPrototypeOf(CardStack)).call.apply(_ref, [this].concat(args))), _this), _this._gestureStartValue = 0, _this._isResponding = false, _this._immediateIndex = null, _this._screenDetails = {}, _this._getScreenDetails = function (scene) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigation = _this$props.navigation,
            router = _this$props.router;
        var screenDetails = _this._screenDetails[scene.key];

        if (!screenDetails || screenDetails.state !== scene.route) {
          var screenNavigation = (0, _addNavigationHelpers2.default)({
            dispatch: navigation.dispatch,
            state: scene.route
          });
          screenDetails = {
            state: scene.route,
            navigation: screenNavigation,
            options: router.getScreenOptions(screenNavigation, screenProps)
          };
          _this._screenDetails[scene.key] = screenDetails;
        }

        return screenDetails;
      }, _this._getTransitionConfig = function () {
        var isModal = _this.props.mode === 'modal';
        return _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, {}, {}, isModal);
      }, _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props, {
          scene: scene
        }));

        var SceneComponent = _this.props.router.getComponentForRouteName(scene.route.routeName);

        return React.createElement(
          _Card2.default,
          babelHelpers.extends({}, _this.props, {
            key: "card_" + scene.key,
            style: [style, _this.props.cardStyle],
            scene: scene,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 454
            }
          }),
          _this._renderInnerScene(SceneComponent, scene)
        );
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStack, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this2 = this;

        if (props.screenProps !== this.props.screenProps) {
          this._screenDetails = {};
        }

        props.scenes.forEach(function (newScene) {
          if (_this2._screenDetails[newScene.key] && _this2._screenDetails[newScene.key].state !== newScene.route) {
            _this2._screenDetails[newScene.key] = null;
          }
        });
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var header = this._getScreenDetails(scene).options.header;

        if (typeof header !== 'undefined' && typeof header !== 'function') {
          return header;
        }

        var renderHeader = header || function (props) {
          return React.createElement(_Header2.default, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 165
            }
          }));
        };

        var _getTransitionConfig = this._getTransitionConfig(),
            headerLeftInterpolator = _getTransitionConfig.headerLeftInterpolator,
            headerTitleInterpolator = _getTransitionConfig.headerTitleInterpolator,
            headerRightInterpolator = _getTransitionConfig.headerRightInterpolator;

        var _props = this.props,
            mode = _props.mode,
            passProps = babelHelpers.objectWithoutProperties(_props, ["mode"]);
        return renderHeader(babelHelpers.extends({}, passProps, {
          scene: scene,
          mode: headerMode,
          getScreenDetails: this._getScreenDetails,
          leftInterpolator: headerLeftInterpolator,
          titleInterpolator: headerTitleInterpolator,
          rightInterpolator: headerRightInterpolator
        }));
      }
    }, {
      key: "_animatedSubscribe",
      value: function _animatedSubscribe(props) {
        animatedSubscribeValue(props.layout.width);
        animatedSubscribeValue(props.layout.height);
        animatedSubscribeValue(props.position);
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        _reactNative.Animated.timing(this.props.position, {
          toValue: resetToIndex,
          duration: duration,
          easing: _reactNative.Easing.linear(),
          useNativeDriver: this.props.position.__isNative
        }).start();
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this3 = this;

        var _props2 = this.props,
            navigation = _props2.navigation,
            position = _props2.position,
            scenes = _props2.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        _reactNative.Animated.timing(position, {
          toValue: toValue,
          duration: duration,
          easing: _reactNative.Easing.linear(),
          useNativeDriver: position.__isNative
        }).start(function () {
          _this3._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (!_this3._isResponding && backFromScene) {
            navigation.dispatch(_NavigationActions2.default.back({
              key: backFromScene.route.key
            }));
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          floatingHeader = this._renderHeader(this.props.scene, headerMode);
        }

        var _props3 = this.props,
            navigation = _props3.navigation,
            position = _props3.position,
            layout = _props3.layout,
            scene = _props3.scene,
            scenes = _props3.scenes,
            mode = _props3.mode;
        var index = navigation.state.index;
        var isVertical = mode === 'modal';

        var _getScreenDetails = this._getScreenDetails(scene),
            options = _getScreenDetails.options;

        var gestureDirectionInverted = options.gestureDirection === 'inverted';

        var responder = _reactNative.PanResponder.create({
          onPanResponderTerminate: function onPanResponderTerminate() {
            _this4._isResponding = false;

            _this4._reset(index, 0);
          },
          onPanResponderGrant: function onPanResponderGrant() {
            position.stopAnimation(function (value) {
              _this4._isResponding = true;
              _this4._gestureStartValue = value;
            });
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
            if (index !== scene.index) {
              return false;
            }

            var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
            var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
            var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
            var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var axisHasBeenMeasured = !!axisLength;
            var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;

            var _getScreenDetails$opt = _this4._getScreenDetails(scene).options.gestureResponseDistance,
                userGestureResponseDistance = _getScreenDetails$opt === undefined ? {} : _getScreenDetails$opt;

            var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

            if (screenEdgeDistance > gestureResponseDistance) {
              return false;
            }

            var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
            var isOnFirstCard = immediateIndex === 0;
            var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
            return shouldSetResponder;
          },
          onPanResponderMove: function onPanResponderMove(event, gesture) {
            var startValue = _this4._gestureStartValue;
            var axis = isVertical ? 'dy' : 'dx';
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var currentValue = (_reactNative.I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
            var value = (0, _clamp2.default)(index - 1, currentValue, index);
            position.setValue(value);
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderRelease: function onPanResponderRelease(event, gesture) {
            if (!_this4._isResponding) {
              return;
            }

            _this4._isResponding = false;
            var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var movementDirection = gestureDirectionInverted ? -1 : 1;
            var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
            var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
            var defaultVelocity = axisDistance / ANIMATION_DURATION;
            var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
            var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
            var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
            position.stopAnimation(function (value) {
              if (gestureVelocity < -0.5) {
                _this4._reset(immediateIndex, resetDuration);

                return;
              }

              if (gestureVelocity > 0.5) {
                _this4._goBack(immediateIndex, goBackDuration);

                return;
              }

              if (value <= index - POSITION_THRESHOLD) {
                _this4._goBack(immediateIndex, goBackDuration);
              } else {
                _this4._reset(immediateIndex, resetDuration);
              }
            });
          }
        });

        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';
        var handlers = gesturesEnabled ? responder.panHandlers : {};
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return React.createElement(
          _reactNative.View,
          babelHelpers.extends({}, handlers, {
            style: containerStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 382
            }
          }),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scenes,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 383
              }
            },
            scenes.map(function (s) {
              return _this4._renderCard(s);
            })
          ),
          floatingHeader
        );
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {
          return 'screen';
        }

        return 'float';
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(SceneComponent, scene) {
        var _getScreenDetails2 = this._getScreenDetails(scene),
            navigation = _getScreenDetails2.navigation;

        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return React.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 410
              }
            },
            React.createElement(
              _reactNative.View,
              {
                style: {
                  flex: 1
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 411
                }
              },
              React.createElement(_SceneView2.default, {
                screenProps: screenProps,
                navigation: navigation,
                component: SceneComponent,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 412
                }
              })
            ),
            this._renderHeader(scene, headerMode)
          );
        }

        return React.createElement(_SceneView2.default, {
          screenProps: this.props.screenProps,
          navigation: navigation,
          component: SceneComponent,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 423
          }
        });
      }
    }]);
    return CardStack;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse'
    },
    scenes: {
      flex: 1
    }
  });

  exports.default = CardStack;
},589,[109,590,12,591,594,582,583,603,604],"react-navigation/src/views/CardStack/CardStack.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = clamp;

  function clamp(value, min, max) {
    return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
  }
},590,[],"clamp/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/CardStack/Card.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _PointerEventsContainer = require(_dependencyMap[2], "./PointerEventsContainer");

  var _PointerEventsContainer2 = babelHelpers.interopRequireDefault(_PointerEventsContainer);

  var Card = function (_React$Component) {
    babelHelpers.inherits(Card, _React$Component);

    function Card() {
      babelHelpers.classCallCheck(this, Card);
      return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    babelHelpers.createClass(Card, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            pointerEvents = _props.pointerEvents,
            style = _props.style;
        return React.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            ref: this.props.onComponentRef,
            style: [styles.main, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          },
          children
        );
      }
    }]);
    return Card;
  }(React.Component);

  var styles = _reactNative.StyleSheet.create({
    main: {
      backgroundColor: '#E9E9EF',
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      shadowColor: 'black',
      shadowOffset: {
        width: 0,
        height: 0
      },
      shadowOpacity: 0.2,
      shadowRadius: 5,
      top: 0
    }
  });

  Card = (0, _PointerEventsContainer2.default)(Card);
  exports.default = Card;
},591,[109,12,592],"react-navigation/src/views/CardStack/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js";
  exports.default = create;

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _invariant = require(_dependencyMap[1], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _AnimatedValueSubscription = require(_dependencyMap[2], "../AnimatedValueSubscription");

  var _AnimatedValueSubscription2 = babelHelpers.interopRequireDefault(_AnimatedValueSubscription);

  var MIN_POSITION_OFFSET = 0.01;

  function create(Component) {
    var Container = function (_React$Component) {
      babelHelpers.inherits(Container, _React$Component);

      function Container(props, context) {
        babelHelpers.classCallCheck(this, Container);

        var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

        _this._pointerEvents = _this._computePointerEvents();
        return _this;
      }

      babelHelpers.createClass(Container, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._onPositionChange = this._onPositionChange.bind(this);
          this._onComponentRef = this._onComponentRef.bind(this);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this._bindPosition(this.props);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._positionListener && this._positionListener.remove();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._bindPosition(nextProps);
        }
      }, {
        key: "render",
        value: function render() {
          this._pointerEvents = this._computePointerEvents();
          return React.createElement(Component, babelHelpers.extends({}, this.props, {
            pointerEvents: this._pointerEvents,
            onComponentRef: this._onComponentRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          }));
        }
      }, {
        key: "_onComponentRef",
        value: function _onComponentRef(component) {
          this._component = component;

          if (component) {
            (0, _invariant2.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
          }
        }
      }, {
        key: "_bindPosition",
        value: function _bindPosition(props) {
          this._positionListener && this._positionListener.remove();
          this._positionListener = new _AnimatedValueSubscription2.default(props.position, this._onPositionChange);
        }
      }, {
        key: "_onPositionChange",
        value: function _onPositionChange() {
          if (this._component) {
            var pointerEvents = this._computePointerEvents();

            if (this._pointerEvents !== pointerEvents) {
              this._pointerEvents = pointerEvents;

              this._component.setNativeProps({
                pointerEvents: pointerEvents
              });
            }
          }
        }
      }, {
        key: "_computePointerEvents",
        value: function _computePointerEvents() {
          var _props = this.props,
              navigation = _props.navigation,
              position = _props.position,
              scene = _props.scene;

          if (scene.isStale || navigation.state.index !== scene.index) {
            return scene.index > navigation.state.index ? 'box-only' : 'none';
          }

          var offset = position.__getAnimatedValue() - navigation.state.index;

          if (Math.abs(offset) > MIN_POSITION_OFFSET) {
            return 'box-only';
          }

          return 'auto';
        }
      }]);
      return Container;
    }(React.Component);

    return Container;
  }
},592,[109,584,593],"react-navigation/src/views/CardStack/PointerEventsContainer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var AnimatedValueSubscription = function () {
    function AnimatedValueSubscription(value, callback) {
      babelHelpers.classCallCheck(this, AnimatedValueSubscription);
      this._value = value;
      this._token = value.addListener(callback);
    }

    babelHelpers.createClass(AnimatedValueSubscription, [{
      key: "remove",
      value: function remove() {
        this._value.removeListener(this._token);
      }
    }]);
    return AnimatedValueSubscription;
  }();

  exports.default = AnimatedValueSubscription;
},593,[12],"react-navigation/src/views/AnimatedValueSubscription.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'no babel-plugin-flow-react-proptypes';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Header/Header.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _HeaderTitle = require(_dependencyMap[2], "./HeaderTitle");

  var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

  var _HeaderBackButton = require(_dependencyMap[3], "./HeaderBackButton");

  var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

  var _HeaderStyleInterpolator = require(_dependencyMap[4], "./HeaderStyleInterpolator");

  var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _withOrientation = require(_dependencyMap[6], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
  var TITLE_OFFSET = _reactNative.Platform.OS === 'ios' ? 70 : 56;
  var Header = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(Header, _React$PureComponent);

    function Header() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Header);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        widths: {}
      }, _this._navigateBack = function () {
        _this.props.navigation.goBack(null);
      }, _this._renderTitleComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerTitle = details.options.headerTitle;

        if (React.isValidElement(headerTitle)) {
          return headerTitle;
        }

        var titleString = _this._getHeaderTitleString(props.scene);

        var titleStyle = details.options.headerTitleStyle;
        var color = details.options.headerTintColor;
        var allowFontScaling = details.options.headerTitleAllowFontScaling;
        var onLayoutIOS = _reactNative.Platform.OS === 'ios' ? function (e) {
          _this.setState({
            widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
          });
        } : undefined;
        var RenderedHeaderTitle = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle2.default;
        return React.createElement(
          RenderedHeaderTitle,
          {
            onLayout: onLayoutIOS,
            allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
            style: [color ? {
              color: color
            } : null, titleStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 138
            }
          },
          titleString
        );
      }, _this._renderLeftComponent = function (props) {
        var _this$props$getScreen = _this.props.getScreenDetails(props.scene),
            options = _this$props$getScreen.options;

        if (React.isValidElement(options.headerLeft) || options.headerLeft === null) {
          return options.headerLeft;
        }

        if (props.scene.index === 0) {
          return null;
        }

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        var RenderedLeftComponent = options.headerLeft || _HeaderBackButton2.default;
        return React.createElement(RenderedLeftComponent, {
          onPress: _this._navigateBack,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 169
          }
        });
      }, _this._renderRightComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerRight = details.options.headerRight;
        return headerRight || null;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Header, [{
      key: "_getHeaderTitleString",
      value: function _getHeaderTitleString(scene) {
        var sceneOptions = this.props.getScreenDetails(scene).options;

        if (typeof sceneOptions.headerTitle === 'string') {
          return sceneOptions.headerTitle;
        }

        return sceneOptions.title;
      }
    }, {
      key: "_getLastScene",
      value: function _getLastScene(scene) {
        return this.props.scenes.find(function (s) {
          return s.index === scene.index - 1;
        });
      }
    }, {
      key: "_getBackButtonTitleString",
      value: function _getBackButtonTitleString(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        var headerBackTitle = this.props.getScreenDetails(lastScene).options.headerBackTitle;

        if (headerBackTitle || headerBackTitle === null) {
          return headerBackTitle;
        }

        return this._getHeaderTitleString(lastScene);
      }
    }, {
      key: "_getTruncatedBackButtonTitle",
      value: function _getTruncatedBackButtonTitle(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        return this.props.getScreenDetails(lastScene).options.headerTruncatedBackTitle;
      }
    }, {
      key: "_renderLeft",
      value: function _renderLeft(props) {
        return this._renderSubView(props, 'left', this._renderLeftComponent, this.props.leftInterpolator);
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle(props, options) {
        var style = {};

        if (_reactNative.Platform.OS === 'android') {
          if (!options.hasLeftComponent) {
            style.left = 0;
          }

          if (!options.hasRightComponent) {
            style.right = 0;
          }
        } else if (_reactNative.Platform.OS === 'ios' && !options.hasLeftComponent && !options.hasRightComponent) {
          style.left = 0;
          style.right = 0;
        }

        return this._renderSubView(babelHelpers.extends({}, props, {
          style: style
        }), 'title', this._renderTitleComponent, this.props.titleInterpolator);
      }
    }, {
      key: "_renderRight",
      value: function _renderRight(props) {
        return this._renderSubView(props, 'right', this._renderRightComponent, this.props.rightInterpolator);
      }
    }, {
      key: "_renderSubView",
      value: function _renderSubView(props, name, renderer, styleInterpolator) {
        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var subView = renderer(props);

        if (subView == null) {
          return null;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return React.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            key: name + "_" + key,
            style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 258
            }
          },
          subView
        );
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(props) {
        var left = this._renderLeft(props);

        var right = this._renderRight(props);

        var title = this._renderTitle(props, {
          hasLeftComponent: !!left,
          hasRightComponent: !!right
        });

        return React.createElement(
          _reactNative.View,
          {
            style: [_reactNative.StyleSheet.absoluteFill, styles.header],
            key: "scene_" + props.scene.key,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          title,
          left,
          right
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var appBar = void 0;

        if (this.props.mode === 'float') {
          var scenesProps = this.props.scenes.map(function (scene) {
            return {
              position: _this2.props.position,
              progress: _this2.props.progress,
              scene: scene
            };
          });
          appBar = scenesProps.map(this._renderHeader, this);
        } else {
          appBar = this._renderHeader({
            position: new _reactNative.Animated.Value(this.props.scene.index),
            progress: new _reactNative.Animated.Value(0),
            scene: this.props.scene
          });
        }

        var _props = this.props,
            scenes = _props.scenes,
            scene = _props.scene,
            position = _props.position,
            screenProps = _props.screenProps,
            progress = _props.progress,
            isLandscape = _props.isLandscape,
            rest = babelHelpers.objectWithoutProperties(_props, ["scenes", "scene", "position", "screenProps", "progress", "isLandscape"]);

        var _props$getScreenDetai = this.props.getScreenDetails(scene),
            options = _props$getScreenDetai.options;

        var headerStyle = options.headerStyle;
        var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
        var containerStyles = [styles.container, {
          height: appBarHeight
        }, headerStyle];
        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({}, rest, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 340
            }
          }),
          React.createElement(
            _SafeAreaView2.default,
            {
              style: containerStyles,
              forceInset: {
                top: 'always',
                bottom: 'never'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 341
              }
            },
            React.createElement(
              _reactNative.View,
              {
                style: styles.appBar,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 345
                }
              },
              appBar
            )
          )
        );
      }
    }], [{
      key: "HEIGHT",
      get: function get() {
        console.warn('Header.HEIGHT is deprecated and will be removed before react-navigation comes out of beta.');
        return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
      }
    }]);
    return Header;
  }(React.PureComponent), _class.defaultProps = {
    leftInterpolator: _HeaderStyleInterpolator2.default.forLeft,
    titleInterpolator: _HeaderStyleInterpolator2.default.forCenter,
    rightInterpolator: _HeaderStyleInterpolator2.default.forRight
  }, _temp2);
  var platformContainerStyles = void 0;

  if (_reactNative.Platform.OS === 'ios') {
    platformContainerStyles = {
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: 'rgba(0, 0, 0, .3)'
    };
  } else {
    platformContainerStyles = {
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      elevation: 4
    };
  }

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      backgroundColor: _reactNative.Platform.OS === 'ios' ? '#F7F7F7' : '#FFF'
    }, platformContainerStyles),
    appBar: {
      flex: 1
    },
    header: {
      flexDirection: 'row'
    },
    item: {
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    title: {
      bottom: 0,
      left: TITLE_OFFSET,
      right: TITLE_OFFSET,
      top: 0,
      position: 'absolute',
      alignItems: _reactNative.Platform.OS === 'ios' ? 'center' : 'flex-start'
    },
    left: {
      left: 0,
      bottom: 0,
      top: 0,
      position: 'absolute'
    },
    right: {
      right: 0,
      bottom: 0,
      top: 0,
      position: 'absolute'
    }
  });

  exports.default = (0, _withOrientation2.default)(Header);
},594,[109,12,595,596,599,601,602],"react-navigation/src/views/Header/Header.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Header/HeaderTitle.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var AnimatedText = _reactNative.Animated.Text;

  var HeaderTitle = function HeaderTitle(_ref) {
    var style = _ref.style,
        rest = babelHelpers.objectWithoutProperties(_ref, ["style"]);
    return React.createElement(AnimatedText, babelHelpers.extends({
      numberOfLines: 1
    }, rest, {
      style: [styles.title, style],
      accessibilityTraits: "header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 21
      }
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    title: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20,
      fontWeight: _reactNative.Platform.OS === 'ios' ? '600' : '500',
      color: 'rgba(0, 0, 0, .9)',
      textAlign: _reactNative.Platform.OS === 'ios' ? 'center' : 'left',
      marginHorizontal: 16
    }
  });

  exports.default = HeaderTitle;
},595,[109,12],"react-navigation/src/views/Header/HeaderTitle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Header/HeaderBackButton.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TouchableItem = require(_dependencyMap[2], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var HeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HeaderBackButton, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            onPress = _props.onPress,
            pressColorAndroid = _props.pressColorAndroid,
            width = _props.width,
            title = _props.title,
            titleStyle = _props.titleStyle,
            tintColor = _props.tintColor,
            truncatedTitle = _props.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;

        var asset = require(_dependencyMap[3], '../assets/back-icon.png');

        return React.createElement(
          _TouchableItem2.default,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: backButtonTitle,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            pressColor: pressColorAndroid,
            style: styles.container,
            borderless: true,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 73
            }
          },
          React.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            },
            React.createElement(_reactNative.Image, {
              style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
                tintColor: tintColor
              }],
              source: asset,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 85
              }
            }),
            _reactNative.Platform.OS === 'ios' && typeof backButtonTitle === 'string' && React.createElement(
              _reactNative.Text,
              {
                onLayout: this._onTextLayout,
                style: [styles.title, !!tintColor && {
                  color: tintColor
                }, titleStyle],
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 95
                }
              },
              backButtonTitle
            )
          )
        );
      }
    }]);
    return HeaderBackButton;
  }(React.PureComponent), _class.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: _reactNative.Platform.select({
      ios: '#037aff'
    }),
    truncatedTitle: 'Back'
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: _reactNative.Platform.OS === 'ios' ? {
      height: 21,
      width: 13,
      marginLeft: 10,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    } : {
      height: 24,
      width: 24,
      margin: 16,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: _reactNative.Platform.OS === 'ios' ? {
      marginRight: 5
    } : {}
  });

  exports.default = HeaderBackButton;
},596,[109,12,597,598],"react-navigation/src/views/Header/HeaderBackButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/TouchableItem.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var ANDROID_VERSION_LOLLIPOP = 21;
  var TouchableItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _props = this.props,
              _style = _props.style,
              rest = babelHelpers.objectWithoutProperties(_props, ["style"]);
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              style: null,
              background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor || '', this.props.borderless || false),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 54
              }
            }),
            React.createElement(
              _reactNative.View,
              {
                style: _style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              React.Children.only(this.props.children)
            )
          );
        }

        return React.createElement(
          _reactNative.TouchableOpacity,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          }),
          this.props.children
        );
      }
    }]);
    return TouchableItem;
  }(React.Component), _class.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  }, _temp);
  exports.default = TouchableItem;
},597,[109,12],"react-navigation/src/views/TouchableItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation/src/views/assets",
    "width": 24,
    "height": 24,
    "scales": [1, 1.5, 2, 3, 4],
    "hash": "a364dc7a784101f7c8f6791c7b4514ce",
    "name": "back-icon",
    "type": "png"
  });
},598,[162],"node_modules/react-navigation/src/views/assets/back-icon.png");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
        outputRange: [0, 0, 1, 0, 0]
      })
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last];
    return {
      opacity: position.interpolate({
        inputRange: inputRange,
        outputRange: [0, 1, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: inputRange,
          outputRange: _reactNative.I18nManager.isRTL ? [-200, 0, 200] : [200, 0, -200]
        })
      }]
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, index, last],
        outputRange: [0, 1, 0]
      })
    };
  }

  exports.default = {
    forLeft: forLeft,
    forCenter: forCenter,
    forRight: forRight
  };
},599,[12,600],"react-navigation/src/views/Header/HeaderStyleInterpolator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function getSceneIndicesForInterpolationInputRange(props) {
    var scene = props.scene,
        scenes = props.scenes;
    var index = scene.index;
    var lastSceneIndexInScenes = scenes.length - 1;
    var isBack = !scenes[lastSceneIndexInScenes].isActive;

    if (isBack) {
      var currentSceneIndexInScenes = scenes.findIndex(function (item) {
        return item === scene;
      });
      var targetSceneIndexInScenes = scenes.findIndex(function (item) {
        return item.isActive;
      });
      var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
      var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

      if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
        return {
          first: Math.min(targetSceneIndex, index - 1),
          last: index + 1
        };
      } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
        return {
          first: index - 1,
          last: Math.max(lastSceneIndex, index + 1)
        };
      } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
        return null;
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    } else {
      return {
        first: index - 1,
        last: index + 1
      };
    }
  }

  exports.default = getSceneIndicesForInterpolationInputRange;
},600,[],"react-navigation/src/utils/getSceneIndicesForInterpolationInputRange.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/SafeAreaView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _withOrientation = require(_dependencyMap[2], "./withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    if (_reactNative.Platform.OS === 'web') return false;

    if (minor >= 50) {
      return _reactNative.DeviceInfo.isIPhoneX_deprecated;
    }

    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT);
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = function (_Component) {
    babelHelpers.inherits(SafeView, _Component);

    function SafeView() {
      var _ref2;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SafeView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = SafeView.__proto__ || Object.getPrototypeOf(SafeView)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        touchesTop: true,
        touchesBottom: true,
        touchesLeft: true,
        touchesRight: true,
        orientation: null,
        viewWidth: 0,
        viewHeight: 0
      }, _this._onLayout = function () {
        if (!_this.view) return;
        var isLandscape = _this.props.isLandscape;
        var orientation = _this.state.orientation;
        var newOrientation = isLandscape ? 'landscape' : 'portrait';

        if (orientation && orientation === newOrientation) {
          return;
        }

        var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
        var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

        _this.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
          var realY = winY;
          var realX = winX;

          if (realY >= HEIGHT) {
            realY = realY % HEIGHT;
          } else if (realY < 0) {
            realY = realY % HEIGHT + HEIGHT;
          }

          if (realX >= WIDTH) {
            realX = realX % WIDTH;
          } else if (realX < 0) {
            realX = realX % WIDTH + WIDTH;
          }

          var touchesTop = realY === 0;
          var touchesBottom = realY + winHeight >= HEIGHT;
          var touchesLeft = realX === 0;
          var touchesRight = realX + winWidth >= WIDTH;

          _this.setState({
            touchesTop: touchesTop,
            touchesBottom: touchesBottom,
            touchesLeft: touchesLeft,
            touchesRight: touchesRight,
            orientation: newOrientation,
            viewWidth: winWidth,
            viewHeight: winHeight
          });
        });
      }, _this._getSafeAreaStyle = function () {
        var _this$state = _this.state,
            touchesTop = _this$state.touchesTop,
            touchesBottom = _this$state.touchesBottom,
            touchesLeft = _this$state.touchesLeft,
            touchesRight = _this$state.touchesRight;
        var _this$props = _this.props,
            forceInset = _this$props.forceInset,
            isLandscape = _this$props.isLandscape;

        var _this$_getViewStyles = _this._getViewStyles(),
            paddingTop = _this$_getViewStyles.paddingTop,
            paddingBottom = _this$_getViewStyles.paddingBottom,
            paddingLeft = _this$_getViewStyles.paddingLeft,
            paddingRight = _this$_getViewStyles.paddingRight,
            viewStyle = _this$_getViewStyles.viewStyle;

        var style = babelHelpers.extends({}, viewStyle, {
          paddingTop: touchesTop ? _this._getInset('top') : 0,
          paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
          paddingLeft: touchesLeft ? _this._getInset('left') : 0,
          paddingRight: touchesRight ? _this._getInset('right') : 0
        });

        if (forceInset) {
          Object.keys(forceInset).forEach(function (key) {
            var inset = forceInset[key];

            if (inset === 'always') {
              inset = _this._getInset(key);
            }

            if (inset === 'never') {
              inset = 0;
            }

            switch (key) {
              case 'horizontal':
                {
                  style.paddingLeft = inset;
                  style.paddingRight = inset;
                  break;
                }

              case 'vertical':
                {
                  style.paddingTop = inset;
                  style.paddingBottom = inset;
                  break;
                }

              case 'left':
              case 'right':
              case 'top':
              case 'bottom':
                {
                  var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                  style[padding] = inset;
                  break;
                }
            }
          });
        }

        if (style.height && typeof style.height === 'number') {
          style.height += style.paddingTop + style.paddingBottom;
        }

        if (style.width && typeof style.width === 'number') {
          style.width += style.paddingLeft + style.paddingRight;
        }

        style.paddingTop += paddingTop;
        style.paddingBottom += paddingBottom;
        style.paddingLeft += paddingLeft;
        style.paddingRight += paddingRight;
        return style;
      }, _this._getViewStyles = function () {
        var viewWidth = _this.state.viewWidth;

        var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
            _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
            padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
            _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
            paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
            _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
            paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
            _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
            paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
            _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
            paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
            _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
            paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
            _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
            paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
            viewStyle = babelHelpers.objectWithoutProperties(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

        if (typeof paddingTop !== 'number') {
          paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
        }

        if (typeof paddingBottom !== 'number') {
          paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
        }

        if (typeof paddingLeft !== 'number') {
          paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
        }

        if (typeof paddingRight !== 'number') {
          paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
        }

        return {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          viewStyle: viewStyle
        };
      }, _this._getInset = function (key) {
        var isLandscape = _this.props.isLandscape;

        switch (key) {
          case 'horizontal':
          case 'right':
          case 'left':
            {
              return isLandscape ? isIPhoneX ? 44 : 0 : 0;
            }

          case 'vertical':
          case 'top':
            {
              return statusBarHeight(isLandscape);
            }

          case 'bottom':
            {
              return isIPhoneX ? isLandscape ? 24 : 34 : 0;
            }
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            _props$forceInset = _props.forceInset,
            forceInset = _props$forceInset === undefined ? false : _props$forceInset,
            isLandscape = _props.isLandscape,
            children = _props.children,
            style = _props.style;

        if (_reactNative.Platform.OS !== 'ios') {
          return _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: style,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 104
              }
            },
            this.props.children
          );
        }

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            ref: function ref(c) {
              return _this3.view = c;
            },
            onLayout: this._onLayout,
            style: safeAreaStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          this.props.children
        );
      }
    }]);
    return SafeView;
  }(_react.Component);

  exports.default = (0, _withOrientation2.default)(SafeView);
},601,[109,12,602],"react-navigation/src/views/SafeAreaView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/withOrientation.js";

  exports.default = function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var withOrientation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 50
            }
          }));
        }
      }]);
      return withOrientation;
    }(React.Component), _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _hoistNonReactStatics = require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},602,[109,12,560],"react-navigation/src/views/withOrientation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/SceneView.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var SceneView = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(SceneView, _React$PureComponent);

    function SceneView() {
      babelHelpers.classCallCheck(this, SceneView);
      return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          navigation: this.props.navigation
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            screenProps = _props.screenProps,
            navigation = _props.navigation,
            Component = _props.component;
        return React.createElement(Component, {
          screenProps: screenProps,
          navigation: navigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 31
          }
        });
      }
    }]);
    return SceneView;
  }(React.PureComponent), _class.childContextTypes = {
    navigation: _propTypes2.default.object.isRequired
  }, _temp);
  exports.default = SceneView;
},603,[109,128],"react-navigation/src/views/SceneView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _CardStackStyleInterpolator = require(_dependencyMap[1], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var IOSTransitionSpec = {
    duration: 500,
    easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
    timing: _reactNative.Animated.timing
  };
  var SlideFromRightIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forHorizontal,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var ModalSlideFromBottomIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forVertical,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var FadeInFromBottomAndroid = {
    transitionSpec: {
      duration: 350,
      easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };
  var FadeOutToBottomAndroid = {
    transitionSpec: {
      duration: 230,
      easing: _reactNative.Easing.in(_reactNative.Easing.poly(4)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };

  function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
    if (_reactNative.Platform.OS === 'android') {
      if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
        return FadeOutToBottomAndroid;
      }

      return FadeInFromBottomAndroid;
    }

    if (isModal) {
      return ModalSlideFromBottomIOS;
    }

    return SlideFromRightIOS;
  }

  function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
    var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);

    if (transitionConfigurer) {
      return babelHelpers.extends({}, defaultConfig, transitionConfigurer(transitionProps, prevTransitionProps, isModal));
    }

    return defaultConfig;
  }

  exports.default = {
    defaultTransitionConfig: defaultTransitionConfig,
    getTransitionConfig: getTransitionConfig
  };
},604,[12,605],"react-navigation/src/views/CardStack/TransitionConfigs.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forInitial(props) {
    var navigation = props.navigation,
        scene = props.scene;
    var focused = navigation.state.index === scene.index;
    var opacity = focused ? 1 : 0;
    var translate = focused ? 0 : 1000000;
    return {
      opacity: opacity,
      transform: [{
        translateX: translate
      }, {
        translateY: translate
      }]
    };
  }

  function forHorizontal(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: _reactNative.I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3]
    });
    var translateY = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forVertical(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var height = layout.initHeight;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [height, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFadeFromBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last - 0.01, last];
    var opacity = position.interpolate({
      inputRange: inputRange,
      outputRange: [0, 1, 1, 0]
    });
    var translateY = position.interpolate({
      inputRange: inputRange,
      outputRange: [50, 0, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFade(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 1, 1]
    });
    return {
      opacity: opacity
    };
  }

  function canUseNativeDriver() {
    return true;
  }

  exports.default = {
    forHorizontal: forHorizontal,
    forVertical: forVertical,
    forFadeFromBottomAndroid: forFadeFromBottomAndroid,
    forFade: forFade,
    canUseNativeDriver: canUseNativeDriver
  };
},605,[12,600],"react-navigation/src/views/CardStack/CardStackStyleInterpolator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Transitioner.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _invariant = require(_dependencyMap[2], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _ScenesReducer = require(_dependencyMap[3], "./ScenesReducer");

  var _ScenesReducer2 = babelHelpers.interopRequireDefault(_ScenesReducer);

  var regeneratorRuntime = require(_dependencyMap[4], "regenerator-runtime");

  var DefaultTransitionSpec = {
    duration: 250,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    timing: _reactNative.Animated.timing
  };

  var Transitioner = function (_React$Component) {
    babelHelpers.inherits(Transitioner, _React$Component);

    function Transitioner(props, context) {
      babelHelpers.classCallCheck(this, Transitioner);

      var _this = babelHelpers.possibleConstructorReturn(this, (Transitioner.__proto__ || Object.getPrototypeOf(Transitioner)).call(this, props, context));

      var layout = {
        height: new _reactNative.Animated.Value(0),
        initHeight: 0,
        initWidth: 0,
        isMeasured: false,
        width: new _reactNative.Animated.Value(0)
      };
      _this.state = {
        layout: layout,
        position: new _reactNative.Animated.Value(_this.props.navigation.state.index),
        progress: new _reactNative.Animated.Value(1),
        scenes: (0, _ScenesReducer2.default)([], _this.props.navigation.state)
      };
      _this._prevTransitionProps = null;
      _this._transitionProps = buildTransitionProps(props, _this.state);
      _this._isMounted = false;
      _this._isTransitionRunning = false;
      _this._queuedTransition = null;
      return _this;
    }

    babelHelpers.createClass(Transitioner, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._onLayout = this._onLayout.bind(this);
        this._onTransitionEnd = this._onTransitionEnd.bind(this);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var nextScenes = (0, _ScenesReducer2.default)(this.state.scenes, nextProps.navigation.state, this.props.navigation.state);

        if (nextScenes === this.state.scenes) {
          return;
        }

        var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;

        if (this._isTransitionRunning) {
          this._queuedTransition = {
            nextProps: nextProps,
            nextScenes: nextScenes,
            indexHasChanged: indexHasChanged
          };
          return;
        }

        this._startTransition(nextProps, nextScenes, indexHasChanged);
      }
    }, {
      key: "_startTransition",
      value: function _startTransition(nextProps, nextScenes, indexHasChanged) {
        var _this2 = this;

        var nextState = babelHelpers.extends({}, this.state, {
          scenes: nextScenes
        });
        var position = nextState.position,
            progress = nextState.progress;
        progress.setValue(0);
        this._prevTransitionProps = this._transitionProps;
        this._transitionProps = buildTransitionProps(nextProps, nextState);
        var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;
        var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);
        var timing = transitionSpec.timing;
        delete transitionSpec.timing;
        var toValue = nextProps.navigation.state.index;
        var positionHasChanged = position.__getValue() !== toValue;
        var animations = indexHasChanged && positionHasChanged ? [timing(progress, babelHelpers.extends({}, transitionSpec, {
          toValue: 1
        })), timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigation.state.index
        }))] : [];
        this._isTransitionRunning = true;
        this.setState(nextState, function _callee() {
          var result;
          return regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  _reactNative.Animated.parallel(animations).start(_this2._onTransitionEnd);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, null, _this2);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          _reactNative.View,
          {
            onLayout: this._onLayout,
            style: [styles.main],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 192
            }
          },
          this.props.render(this._transitionProps, this._prevTransitionProps)
        );
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            height = _event$nativeEvent$la.height,
            width = _event$nativeEvent$la.width;

        if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
          return;
        }

        var layout = babelHelpers.extends({}, this.state.layout, {
          initHeight: height,
          initWidth: width,
          isMeasured: true
        });
        layout.height.setValue(height);
        layout.width.setValue(width);
        var nextState = babelHelpers.extends({}, this.state, {
          layout: layout
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState);
      }
    }, {
      key: "_onTransitionEnd",
      value: function _onTransitionEnd() {
        var _this3 = this;

        if (!this._isMounted) {
          return;
        }

        var prevTransitionProps = this._prevTransitionProps;
        this._prevTransitionProps = null;
        var nextState = babelHelpers.extends({}, this.state, {
          scenes: this.state.scenes.filter(isSceneNotStale)
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState, function _callee2() {
          var result;
          return regeneratorRuntime.async(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this3.props.onTransitionEnd) {
                    _context2.next = 5;
                    break;
                  }

                  result = _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context2.next = 5;
                    break;
                  }

                  _context2.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  if (_this3._queuedTransition) {
                    _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);

                    _this3._queuedTransition = null;
                  } else {
                    _this3._isTransitionRunning = false;
                  }

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, _this3);
        });
      }
    }]);
    return Transitioner;
  }(React.Component);

  function buildTransitionProps(props, state) {
    var navigation = props.navigation;
    var layout = state.layout,
        position = state.position,
        progress = state.progress,
        scenes = state.scenes;
    var scene = scenes.find(isSceneActive);
    (0, _invariant2.default)(scene, 'Could not find active scene');
    return {
      layout: layout,
      navigation: navigation,
      position: position,
      progress: progress,
      scenes: scenes,
      scene: scene,
      index: scene.index
    };
  }

  function isSceneNotStale(scene) {
    return !scene.isStale;
  }

  function isSceneActive(scene) {
    return scene.isActive;
  }

  var styles = _reactNative.StyleSheet.create({
    main: {
      flex: 1
    }
  });

  exports.default = Transitioner;
},606,[109,12,584,607,36],"react-navigation/src/views/Transitioner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ScenesReducer;

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _shallowEqual = require(_dependencyMap[1], "../utils/shallowEqual");

  var _shallowEqual2 = babelHelpers.interopRequireDefault(_shallowEqual);

  var SCENE_KEY_PREFIX = 'scene_';

  function compareKey(one, two) {
    var delta = one.length - two.length;

    if (delta > 0) {
      return 1;
    }

    if (delta < 0) {
      return -1;
    }

    return one > two ? 1 : -1;
  }

  function compareScenes(one, two) {
    if (one.index > two.index) {
      return 1;
    }

    if (one.index < two.index) {
      return -1;
    }

    return compareKey(one.key, two.key);
  }

  function areScenesShallowEqual(one, two) {
    return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
  }

  function areRoutesShallowEqual(one, two) {
    if (!one || !two) {
      return one === two;
    }

    if (one.key !== two.key) {
      return false;
    }

    return (0, _shallowEqual2.default)(one, two);
  }

  function ScenesReducer(scenes, nextState, prevState) {
    if (prevState === nextState) {
      return scenes;
    }

    var prevScenes = new Map();
    var freshScenes = new Map();
    var staleScenes = new Map();
    scenes.forEach(function (scene) {
      var key = scene.key;

      if (scene.isStale) {
        staleScenes.set(key, scene);
      }

      prevScenes.set(key, scene);
    });
    var nextKeys = new Set();
    nextState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      var scene = {
        index: index,
        isActive: false,
        isStale: false,
        key: key,
        route: route
      };
      (0, _invariant2.default)(!nextKeys.has(key), "navigation.state.routes[" + index + "].key \"" + key + "\" conflicts with " + 'another route!');
      nextKeys.add(key);

      if (staleScenes.has(key)) {
        staleScenes.delete(key);
      }

      freshScenes.set(key, scene);
    });

    if (prevState) {
      prevState.routes.forEach(function (route, index) {
        var key = SCENE_KEY_PREFIX + route.key;

        if (freshScenes.has(key)) {
          return;
        }

        staleScenes.set(key, {
          index: index,
          isActive: false,
          isStale: true,
          key: key,
          route: route
        });
      });
    }

    var nextScenes = [];

    var mergeScene = function mergeScene(nextScene) {
      var key = nextScene.key;
      var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;

      if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
        nextScenes.push(prevScene);
      } else {
        nextScenes.push(nextScene);
      }
    };

    staleScenes.forEach(mergeScene);
    freshScenes.forEach(mergeScene);
    nextScenes.sort(compareScenes);
    var activeScenesCount = 0;
    nextScenes.forEach(function (scene, ii) {
      var isActive = !scene.isStale && scene.index === nextState.index;

      if (isActive !== scene.isActive) {
        nextScenes[ii] = babelHelpers.extends({}, scene, {
          isActive: isActive
        });
      }

      if (isActive) {
        activeScenesCount++;
      }
    });
    (0, _invariant2.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

    if (nextScenes.length !== scenes.length) {
      return nextScenes;
    }

    if (nextScenes.some(function (scene, index) {
      return !areScenesShallowEqual(scenes[index], scene);
    })) {
      return nextScenes;
    }

    return scenes;
  }
},607,[584,608],"react-navigation/src/views/ScenesReducer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},608,[],"react-navigation/src/utils/shallowEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _pathToRegexp = require(_dependencyMap[0], "path-to-regexp");

  var _pathToRegexp2 = babelHelpers.interopRequireDefault(_pathToRegexp);

  var _NavigationActions = require(_dependencyMap[1], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _createConfigGetter = require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _getScreenForRouteName = require(_dependencyMap[3], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _StateUtils = require(_dependencyMap[4], "../StateUtils");

  var _StateUtils2 = babelHelpers.interopRequireDefault(_StateUtils);

  var _validateRouteConfigMap = require(_dependencyMap[5], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = require(_dependencyMap[6], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  var _invariant = require(_dependencyMap[7], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var uniqueBaseId = "id-" + Date.now();
  var uuidCount = 0;

  function _getUuid() {
    return uniqueBaseId + "-" + uuidCount++;
  }

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  exports.default = function (routeConfigs) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var childRouters = {};
    var routeNames = Object.keys(routeConfigs);
    routeNames.forEach(function (routeName) {
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen && screen.router) {
        childRouters[routeName] = screen.router;
      } else {
        childRouters[routeName] = null;
      }
    });
    var initialRouteParams = stackConfig.initialRouteParams;
    var initialRouteName = stackConfig.initialRouteName || routeNames[0];
    var initialChildRouter = childRouters[initialRouteName];
    var paths = stackConfig.paths || {};
    routeNames.forEach(function (routeName) {
      var pathPattern = paths[routeName] || routeConfigs[routeName].path;
      var matchExact = !!pathPattern && !childRouters[routeName];

      if (typeof pathPattern !== 'string') {
        pathPattern = routeName;
      }

      var keys = [];
      var re = (0, _pathToRegexp2.default)(pathPattern, keys);

      if (!matchExact) {
        var wildcardRe = (0, _pathToRegexp2.default)(pathPattern + "/*", keys);
        re = new RegExp("(?:" + re.source + ")|(?:" + wildcardRe.source + ")");
      }

      paths[routeName] = {
        re: re,
        keys: keys,
        toPath: _pathToRegexp2.default.compile(pathPattern)
      };
    });
    return {
      getComponentForState: function getComponentForState(state) {
        var activeChildRoute = state.routes[state.index];
        var routeName = activeChildRoute.routeName;

        if (childRouters[routeName]) {
          return childRouters[routeName].getComponentForState(activeChildRoute);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          var route = {};

          if (action.type === _NavigationActions2.default.NAVIGATE && childRouters[action.routeName] !== undefined) {
            return {
              index: 0,
              routes: [babelHelpers.extends({}, action, {
                type: undefined,
                key: "Init-" + _getUuid()
              })]
            };
          }

          if (initialChildRouter) {
            route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({
              routeName: initialRouteName,
              params: initialRouteParams
            }));
          }

          var params = (route.params || action.params || initialRouteParams) && babelHelpers.extends({}, route.params || {}, action.params || {}, initialRouteParams || {});
          route = babelHelpers.extends({}, route, {
            routeName: initialRouteName,
            key: "Init-" + _getUuid()
          }, params ? {
            params: params
          } : {});
          state = {
            index: 0,
            routes: [route]
          };
        }

        if (action.type !== _NavigationActions2.default.RESET || action.key !== null) {
          var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;
          var childIndex = keyIndex >= 0 ? keyIndex : state.index;
          var childRoute = state.routes[childIndex];
          (0, _invariant2.default)(childRoute, "StateUtils erroneously thought index " + childIndex + " exists");
          var childRouter = childRouters[childRoute.routeName];

          if (childRouter) {
            var _route = childRouter.getStateForAction(action, childRoute);

            if (_route === null) {
              return state;
            }

            if (_route && _route !== childRoute) {
              return _StateUtils2.default.replaceAt(state, childRoute.key, _route);
            }
          }
        }

        if (action.type === _NavigationActions2.default.NAVIGATE && childRouters[action.routeName] !== undefined) {
          var _childRouter = childRouters[action.routeName];

          var _route2 = void 0;

          if (_childRouter) {
            var childAction = action.action || _NavigationActions2.default.init({
              params: action.params
            });

            _route2 = babelHelpers.extends({
              params: action.params
            }, _childRouter.getStateForAction(childAction), {
              key: _getUuid(),
              routeName: action.routeName
            });
          } else {
            _route2 = {
              params: action.params,
              key: _getUuid(),
              routeName: action.routeName
            };
          }

          return _StateUtils2.default.push(state, _route2);
        }

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          var childRouterNames = Object.keys(childRouters);

          for (var i = 0; i < childRouterNames.length; i++) {
            var childRouterName = childRouterNames[i];
            var _childRouter2 = childRouters[childRouterName];

            if (_childRouter2) {
              var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());

              var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);

              var routeToPush = null;

              if (navigatedChildRoute === null) {
                routeToPush = initChildRoute;
              } else if (navigatedChildRoute !== initChildRoute) {
                routeToPush = navigatedChildRoute;
              }

              if (routeToPush) {
                return _StateUtils2.default.push(state, babelHelpers.extends({}, routeToPush, {
                  key: _getUuid(),
                  routeName: childRouterName
                }));
              }
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var routes = [].concat(babelHelpers.toConsumableArray(state.routes));
            routes[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return babelHelpers.extends({}, state, {
              routes: routes
            });
          }
        }

        if (action.type === _NavigationActions2.default.RESET) {
          var resetAction = action;
          return babelHelpers.extends({}, state, {
            routes: resetAction.actions.map(function (childAction) {
              var router = childRouters[childAction.routeName];

              if (router) {
                return babelHelpers.extends({}, childAction, router.getStateForAction(childAction), {
                  routeName: childAction.routeName,
                  key: _getUuid()
                });
              }

              var route = babelHelpers.extends({}, childAction, {
                key: _getUuid()
              });
              delete route.type;
              return route;
            }),
            index: action.index
          });
        }

        if (action.type === _NavigationActions2.default.BACK) {
          var _key = action.key;
          var backRouteIndex = null;

          if (_key) {
            var backRoute = state.routes.find(function (route) {
              return route.key === _key;
            });
            backRouteIndex = state.routes.indexOf(backRoute);
          }

          if (backRouteIndex == null) {
            return _StateUtils2.default.pop(state);
          }

          if (backRouteIndex > 0) {
            return babelHelpers.extends({}, state, {
              routes: state.routes.slice(0, backRouteIndex),
              index: backRouteIndex - 1
            });
          }
        }

        return state;
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = route.routeName;
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var subPath = paths[routeName].toPath(route.params);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(pathToResolve, inputParams) {
        if (!pathToResolve) {
          return _NavigationActions2.default.navigate({
            routeName: initialRouteName
          });
        }

        var _pathToResolve$split = pathToResolve.split('?'),
            _pathToResolve$split2 = babelHelpers.slicedToArray(_pathToResolve$split, 2),
            pathNameToResolve = _pathToResolve$split2[0],
            queryString = _pathToResolve$split2[1];

        var matchedRouteName = void 0;
        var pathMatch = void 0;
        var pathMatchKeys = void 0;

        for (var _iterator = Object.entries(paths), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var routeName = _ref2[0];
          var path = _ref2[1];
          var re = path.re,
              keys = path.keys;
          pathMatch = re.exec(pathNameToResolve);

          if (pathMatch && pathMatch.length) {
            pathMatchKeys = keys;
            matchedRouteName = routeName;
            break;
          }
        }

        if (!matchedRouteName) {
          return null;
        }

        var nestedAction = void 0;
        var nestedQueryString = queryString ? '?' + queryString : '';

        if (childRouters[matchedRouteName]) {
          nestedAction = childRouters[matchedRouteName].getActionForPathAndParams(pathMatch.slice(pathMatchKeys.length).join('/') + nestedQueryString);
        }

        var queryParams = !isEmpty(inputParams) ? inputParams : (queryString || '').split('&').reduce(function (result, item) {
          if (item !== '') {
            var nextResult = result || {};

            var _item$split = item.split('='),
                _item$split2 = babelHelpers.slicedToArray(_item$split, 2),
                key = _item$split2[0],
                value = _item$split2[1];

            nextResult[key] = value;
            return nextResult;
          }

          return result;
        }, null);
        var params = pathMatch.slice(1).reduce(function (result, matchResult, i) {
          var key = pathMatchKeys[i];

          if (key.asterisk || !key) {
            return result;
          }

          var nextResult = result || {};
          var paramName = key.name;
          nextResult[paramName] = matchResult;
          return nextResult;
        }, queryParams);
        return _NavigationActions2.default.navigate(babelHelpers.extends({
          routeName: matchedRouteName
        }, params ? {
          params: params
        } : {}, nestedAction ? {
          action: nestedAction
        } : {}));
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},609,[610,582,612,613,585,615,616,584],"react-navigation/src/routers/StackRouter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isarray = require(_dependencyMap[0], 'isarray');

  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7];

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (index < str.length) {
      path += str.substr(index);
    }

    if (path) {
      tokens.push(path);
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }

  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }

  function flags(options) {
    return options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }

  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},610,[611],"path-to-regexp/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
},611,[],"isarray/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _addNavigationHelpers = require(_dependencyMap[2], "../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _validateScreenOptions = require(_dependencyMap[3], "./validateScreenOptions");

  var _validateScreenOptions2 = babelHelpers.interopRequireDefault(_validateScreenOptions);

  function applyConfig(configurer, navigationOptions, configProps) {
    if (typeof configurer === 'function') {
      return babelHelpers.extends({}, navigationOptions, configurer(babelHelpers.extends({}, configProps, {
        navigationOptions: navigationOptions
      })));
    }

    if (typeof configurer === 'object') {
      return babelHelpers.extends({}, navigationOptions, configurer);
    }

    return navigationOptions;
  }

  exports.default = function (routeConfigs, navigatorScreenConfig) {
    return function (navigation, screenProps) {
      var state = navigation.state,
          dispatch = navigation.dispatch;
      var route = state;
      (0, _invariant2.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
      var Component = (0, _getScreenForRouteName2.default)(routeConfigs, route.routeName);
      var outputConfig = {};
      var router = Component.router;

      if (router) {
        var _ref = route,
            routes = _ref.routes,
            index = _ref.index;

        if (!route || !routes || index == null) {
          throw new Error("Expect nav state to have routes and index, " + JSON.stringify(route));
        }

        var childRoute = routes[index];
        var childNavigation = (0, _addNavigationHelpers2.default)({
          state: childRoute,
          dispatch: dispatch
        });
        outputConfig = router.getScreenOptions(childNavigation, screenProps);
      }

      var routeConfig = routeConfigs[route.routeName];
      var routeScreenConfig = routeConfig.navigationOptions;
      var componentScreenConfig = Component.navigationOptions;
      var configOptions = {
        navigation: navigation,
        screenProps: screenProps || {}
      };
      outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
      (0, _validateScreenOptions2.default)(outputConfig, route);
      return outputConfig;
    };
  };
},612,[584,613,583,614],"react-navigation/src/routers/createConfigGetter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getScreenForRouteName;

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function getScreenForRouteName(routeConfigs, routeName) {
    var routeConfig = routeConfigs[routeName];

    if (!routeConfig) {
      throw new Error("There is no route defined for key " + routeName + ".\n" + ("Must be one of: " + Object.keys(routeConfigs).map(function (a) {
        return "'" + a + "'";
      }).join(',')));
    }

    if (routeConfig.screen) {
      return routeConfig.screen;
    }

    if (typeof routeConfig.getScreen === 'function') {
      var screen = routeConfig.getScreen();
      (0, _invariant2.default)(typeof screen === 'function', "The getScreen defined for route '" + routeName + " didn't return a valid " + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ": {\n  getScreen: () => require('./MyScreen').default\n}"));
      return screen;
    }

    throw new Error("Route " + routeName + " must define a screen or a getScreen.");
  }
},613,[584],"react-navigation/src/routers/getScreenForRouteName.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var deprecatedKeys = ['tabBar'];

  exports.default = function (screenOptions, route) {
    var keys = Object.keys(screenOptions);
    var deprecatedKey = keys.find(function (key) {
      return deprecatedKeys.includes(key);
    });

    if (typeof screenOptions.title === 'function') {
      throw new Error(["`title` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
      throw new Error(["`" + deprecatedKey + "` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', "    " + deprecatedKey + ": ({ state }) => ({", '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', "    " + deprecatedKey + "Key: navigation.state...", '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
      throw new Error(["Invalid key `" + deprecatedKey + "` defined in navigation options for `" + route.routeName + "` screen.", '\n', 'Try replacing the following navigation options:', '{', "    " + deprecatedKey + ": {"].concat(babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "        " + key + ": ...,";
      })), ['    },', '}', '\n', 'with:', '{'], babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "    " + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ": ...,";
      })), ['}']).join('\n'));
    }
  };
},614,[],"react-navigation/src/routers/validateScreenOptions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function validateRouteConfigMap(routeConfigs) {
    var routeNames = Object.keys(routeConfigs);
    (0, _invariant2.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
    routeNames.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];

      if (!routeConfig.screen && !routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen. " + 'For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyScreen,\n' + '}');
      } else if (routeConfig.screen && routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen or " + 'a getScreen, not both.');
      }

      if (routeConfig.screen && typeof routeConfig.screen !== 'function' && typeof routeConfig.screen !== 'string') {
        throw new Error("The component for route '" + routeName + "' must be a " + 'React component. For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyScreen,\n' + '}\n\n' + 'You can also use a navigator:\n\n' + "import MyNavigator from './MyNavigator';\n" + '...\n' + (routeName + ": {\n") + '  screen: MyNavigator,\n' + '}');
      }
    });
  }

  exports.default = validateRouteConfigMap;
},615,[584],"react-navigation/src/routers/validateRouteConfigMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  exports.default = function () {
    return (0, _invariant2.default)(false, '`getScreenConfig` has been replaced with `getScreenOptions`');
  };
},616,[584],"react-navigation/src/routers/getScreenConfigDeprecated.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var STACK = 'react-navigation/STACK';
  var TABS = 'react-navigation/TABS';
  var DRAWER = 'react-navigation/DRAWER';
  exports.default = {
    STACK: STACK,
    TABS: TABS,
    DRAWER: DRAWER
  };
},617,[],"react-navigation/src/navigators/NavigatorTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/navigators/TabNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter = require(_dependencyMap[4], "../routers/TabRouter");

  var _TabRouter2 = babelHelpers.interopRequireDefault(_TabRouter);

  var _TabView = require(_dependencyMap[5], "../views/TabView/TabView");

  var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

  var _TabBarTop = require(_dependencyMap[6], "../views/TabView/TabBarTop");

  var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

  var _TabBarBottom = require(_dependencyMap[7], "../views/TabView/TabBarBottom");

  var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

  var _NavigatorTypes = require(_dependencyMap[8], "./NavigatorTypes");

  var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

  var TabNavigator = function TabNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, TabNavigator.Presets.Default, config);
    var tabBarComponent = mergedConfig.tabBarComponent,
        tabBarPosition = mergedConfig.tabBarPosition,
        tabBarOptions = mergedConfig.tabBarOptions,
        swipeEnabled = mergedConfig.swipeEnabled,
        animationEnabled = mergedConfig.animationEnabled,
        configureTransition = mergedConfig.configureTransition,
        lazy = mergedConfig.lazy,
        initialLayout = mergedConfig.initialLayout,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["tabBarComponent", "tabBarPosition", "tabBarOptions", "swipeEnabled", "animationEnabled", "configureTransition", "lazy", "initialLayout"]);
    var router = (0, _TabRouter2.default)(routeConfigs, tabsConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigs, config, _NavigatorTypes2.default.TABS)(function (props) {
      return React.createElement(_TabView2.default, babelHelpers.extends({}, props, {
        tabBarComponent: tabBarComponent,
        tabBarPosition: tabBarPosition,
        tabBarOptions: tabBarOptions,
        swipeEnabled: swipeEnabled,
        animationEnabled: animationEnabled,
        configureTransition: configureTransition,
        lazy: lazy,
        initialLayout: initialLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  var Presets = {
    iOSBottomTabs: {
      tabBarComponent: _TabBarBottom2.default,
      tabBarPosition: 'bottom',
      swipeEnabled: false,
      animationEnabled: false,
      lazy: false,
      initialLayout: undefined
    },
    AndroidTopTabs: {
      tabBarComponent: _TabBarTop2.default,
      tabBarPosition: 'top',
      swipeEnabled: true,
      animationEnabled: true,
      lazy: false,
      initialLayout: undefined
    }
  };
  TabNavigator.Presets = {
    iOSBottomTabs: Presets.iOSBottomTabs,
    AndroidTopTabs: Presets.AndroidTopTabs,
    Default: _reactNative.Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs
  };
  exports.default = TabNavigator;
},618,[109,12,586,580,619,620,631,633,617],"react-navigation/src/navigators/TabNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _createConfigGetter = require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _NavigationActions = require(_dependencyMap[3], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _validateRouteConfigMap = require(_dependencyMap[4], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = require(_dependencyMap[5], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var paths = config.paths || {};
    var initialRouteName = config.initialRouteName || order[0];
    var initialRouteIndex = order.indexOf(initialRouteName);
    var backBehavior = config.backBehavior || 'initialRoute';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var tabRouters = {};
    order.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;
      tabRouters[routeName] = null;

      if (routeConfig.screen && routeConfig.screen.router) {
        tabRouters[routeName] = routeConfig.screen.router;
      }
    });

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "' for TabRouter. " + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    return {
      getStateForAction: function getStateForAction(action, inputState) {
        var state = inputState;

        if (!state) {
          var _routes = order.map(function (routeName) {
            var tabRouter = tabRouters[routeName];

            if (tabRouter) {
              var childAction = _NavigationActions2.default.init();

              return babelHelpers.extends({}, tabRouter.getStateForAction(childAction), {
                key: routeName,
                routeName: routeName
              });
            }

            return {
              key: routeName,
              routeName: routeName
            };
          });

          state = {
            routes: _routes,
            index: initialRouteIndex
          };
        }

        if (action.type === _NavigationActions2.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return babelHelpers.extends({}, route, {
                params: babelHelpers.extends({}, route.params, params)
              });
            });
          }
        }

        var activeTabLastState = state.routes[state.index];
        var activeTabRouter = tabRouters[order[state.index]];

        if (activeTabRouter) {
          var activeTabState = activeTabRouter.getStateForAction(action, activeTabLastState);

          if (!activeTabState && inputState) {
            return null;
          }

          if (activeTabState && activeTabState !== activeTabLastState) {
            var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes2[state.index] = activeTabState;
            return babelHelpers.extends({}, state, {
              routes: _routes2
            });
          }
        }

        var activeTabIndex = state.index;
        var isBackEligible = action.key == null || action.key === activeTabLastState.key;

        if (action.type === _NavigationActions2.default.BACK && isBackEligible && shouldBackNavigateToInitialRoute) {
          activeTabIndex = initialRouteIndex;
        }

        var didNavigate = false;

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          var navigateAction = action;
          didNavigate = !!order.find(function (tabId, i) {
            if (tabId === navigateAction.routeName) {
              activeTabIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeTabIndex];
            var newChildState = void 0;
            var tabRouter = tabRouters[action.routeName];

            if (action.action) {
              newChildState = tabRouter ? tabRouter.getStateForAction(action.action, childState) : null;
            } else if (!tabRouter && action.params) {
              newChildState = babelHelpers.extends({}, childState, {
                params: babelHelpers.extends({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));

              _routes3[activeTabIndex] = newChildState;
              return babelHelpers.extends({}, state, {
                routes: _routes3,
                index: activeTabIndex
              });
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes4 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes4[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes4
            });
          }
        }

        if (activeTabIndex !== state.index) {
          return babelHelpers.extends({}, state, {
            index: activeTabIndex
          });
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return null;
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (tabId, i) {
          var tabRouter = tabRouters[tabId];

          if (i === index) {
            return false;
          }

          var tabState = routes[i];

          if (tabRouter) {
            tabState = tabRouter.getStateForAction(action, tabState);
          }

          if (!tabState) {
            index = i;
            return true;
          }

          if (tabState !== routes[i]) {
            routes = [].concat(babelHelpers.toConsumableArray(routes));
            routes[i] = tabState;
            index = i;
            return true;
          }

          return false;
        });
        index = action.type === _NavigationActions2.default.SET_PARAMS ? state.index : index;

        if (index !== state.index || routes !== state.routes) {
          return babelHelpers.extends({}, state, {
            index: index,
            routes: routes
          });
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = order[state.index];
        (0, _invariant2.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = tabRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = order[state.index];
        var subPath = paths[routeName];
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return order.map(function (tabId) {
          var parts = path.split('/');
          var pathToTest = paths[tabId];

          if (parts[0] === pathToTest) {
            var tabRouter = tabRouters[tabId];

            var action = _NavigationActions2.default.navigate({
              routeName: tabId
            });

            if (tabRouter && tabRouter.getActionForPathAndParams) {
              action.action = tabRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);
            } else if (params) {
              action.params = params;
            }

            return action;
          }

          return null;
        }).find(function (action) {
          return !!action;
        }) || order.map(function (tabId) {
          var tabRouter = tabRouters[tabId];
          return tabRouter && tabRouter.getActionForPathAndParams(path, params);
        }).find(function (action) {
          return !!action;
        }) || null;
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},619,[584,613,612,582,615,616],"react-navigation/src/routers/TabRouter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/TabView/TabView.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = require(_dependencyMap[2], "react-native-tab-view");

  var _SceneView = require(_dependencyMap[3], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = require(_dependencyMap[4], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var TabView = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabView, _React$PureComponent);

    function TabView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabView.__proto__ || Object.getPrototypeOf(TabView)).call.apply(_ref, [this].concat(args))), _this), _this._handlePageChanged = function (index) {
        var navigation = _this.props.navigation;
        navigation.navigate(navigation.state.routes[index].routeName);
      }, _this._renderScene = function (_ref2) {
        var route = _ref2.route;
        var screenProps = _this.props.screenProps;
        var childNavigation = _this.props.childNavigationProps[route.key];

        var TabComponent = _this.props.router.getComponentForRouteName(route.routeName);

        return React.createElement(
          _reactNative.View,
          {
            style: styles.page,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          },
          React.createElement(_SceneView2.default, {
            screenProps: screenProps,
            component: TabComponent,
            navigation: childNavigation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 82
            }
          })
        );
      }, _this._getLabel = function (_ref3) {
        var route = _ref3.route,
            tintColor = _ref3.tintColor,
            focused = _ref3.focused;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarLabel) {
          return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      }, _this._getOnPress = function (previousScene, _ref4) {
        var route = _ref4.route;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return options.tabBarOnPress;
      }, _this._getTestIDProps = function (_ref5) {
        var route = _ref5.route;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return options.tabBarTestIDProps;
      }, _this._renderIcon = function (_ref6) {
        var focused = _ref6.focused,
            route = _ref6.route,
            tintColor = _ref6.tintColor;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var _this$props = _this.props,
            tabBarOptions = _this$props.tabBarOptions,
            TabBarComponent = _this$props.tabBarComponent,
            animationEnabled = _this$props.animationEnabled;

        if (typeof TabBarComponent === 'undefined') {
          return null;
        }

        return React.createElement(TabBarComponent, babelHelpers.extends({}, props, tabBarOptions, {
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabel: _this._getLabel,
          getTestIDProps: _this._getTestIDProps,
          getOnPress: _this._getOnPress,
          renderIcon: _this._renderIcon,
          animationEnabled: animationEnabled,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 151
          }
        }));
      }, _this._renderPager = function (props) {
        return React.createElement(_reactNativeTabView.TabViewPagerPan, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 165
          }
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            tabBarComponent = _props.tabBarComponent,
            tabBarPosition = _props.tabBarPosition,
            animationEnabled = _props.animationEnabled,
            configureTransition = _props.configureTransition,
            lazy = _props.lazy,
            initialLayout = _props.initialLayout,
            screenProps = _props.screenProps;
        var renderHeader = void 0;
        var renderFooter = void 0;
        var renderPager = void 0;
        var state = this.props.navigation.state;
        var options = router.getScreenOptions(this.props.childNavigationProps[state.routes[state.index].key], screenProps || {});
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (tabBarComponent !== undefined && tabBarVisible) {
          if (tabBarPosition === 'bottom') {
            renderFooter = this._renderTabBar;
          } else {
            renderHeader = this._renderTabBar;
          }
        }

        if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {
          renderPager = this._renderPager;
        }

        var props = {
          lazy: lazy,
          initialLayout: initialLayout,
          animationEnabled: animationEnabled,
          configureTransition: configureTransition,
          swipeEnabled: swipeEnabled,
          renderPager: renderPager,
          renderHeader: renderHeader,
          renderFooter: renderFooter,
          renderScene: this._renderScene,
          onIndexChange: this._handlePageChanged,
          navigationState: this.props.navigation.state,
          screenProps: this.props.screenProps,
          style: styles.container
        };
        return React.createElement(_reactNativeTabView.TabViewAnimated, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 229
          }
        }));
      }
    }]);
    return TabView;
  }(React.PureComponent), _class.defaultProps = {
    initialLayout: _reactNative.Platform.select({
      android: {
        width: 1,
        height: 0
      }
    })
  }, _temp2);
  exports.default = (0, _withCachedChildNavigation2.default)(TabView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},620,[109,12,621,603,630,601],"react-navigation/src/views/TabView/TabView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    get TabViewAnimated() {
      return require(_dependencyMap[0], './TabViewAnimated').default;
    },

    get TabViewPagerPan() {
      return require(_dependencyMap[1], './TabViewPagerPan').default;
    },

    get TabViewPagerScroll() {
      return require(_dependencyMap[2], './TabViewPagerScroll').default;
    },

    get TabViewPagerAndroid() {
      return require(_dependencyMap[3], './TabViewPagerAndroid').default;
    },

    get TabBar() {
      return require(_dependencyMap[4], './TabBar').default;
    },

    get SceneMap() {
      return require(_dependencyMap[5], './SceneMap').default;
    }

  };
},621,[622,626,625,624,627,629],"react-native-tab-view/src/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TabViewAnimated.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var TabViewPager = void 0;

  switch (_reactNative.Platform.OS) {
    case 'android':
      TabViewPager = require(_dependencyMap[4], './TabViewPagerAndroid').default;
      break;

    case 'ios':
      TabViewPager = require(_dependencyMap[5], './TabViewPagerScroll').default;
      break;

    default:
      TabViewPager = require(_dependencyMap[6], './TabViewPagerPan').default;
      break;
  }

  var TabViewAnimated = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewAnimated, _React$Component);

    function TabViewAnimated(props) {
      babelHelpers.classCallCheck(this, TabViewAnimated);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        loaded: [_this.props.navigationState.index],
        layout: babelHelpers.extends({}, _this.props.initialLayout, {
          measured: false
        }),
        position: new _reactNative.Animated.Value(_this.props.navigationState.index)
      };
      return _this;
    }

    babelHelpers.createClass(TabViewAnimated, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
        this._positionListener = this.state.position.addListener(this._trackPosition);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
        this.state.position.removeListener(this._positionListener);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            onPositionChange = _props.onPositionChange,
            canJumpToTab = _props.canJumpToTab,
            lazy = _props.lazy,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderHeader = _props.renderHeader,
            renderFooter = _props.renderFooter,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigationState", "onIndexChange", "onPositionChange", "canJumpToTab", "lazy", "initialLayout", "renderScene", "renderPager", "renderHeader", "renderFooter"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            onLayout: this._handleLayout,
            loaded: this.state.loaded,
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 252
            }
          },
          renderHeader && renderHeader(props),
          renderPager(babelHelpers.extends({}, props, rest, {
            children: navigationState.routes.map(function (route, index) {
              return _this2._renderScene(babelHelpers.extends({}, props, {
                route: route,
                index: index,
                focused: index === navigationState.index
              }));
            })
          })),
          renderFooter && renderFooter(props)
        );
      }
    }]);
    return TabViewAnimated;
  }(React.Component), _class.propTypes = {
    navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    onPositionChange: _propTypes2.default.func,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderHeader: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func,
    lazy: _propTypes2.default.bool
  }, _class.defaultProps = {
    renderPager: function renderPager(props) {
      return React.createElement(TabViewPager, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }));
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;
    this._subscriptions = {};

    this._renderScene = function (props) {
      var _props2 = _this3.props,
          renderScene = _props2.renderScene,
          lazy = _props2.lazy;
      var navigationState = props.navigationState;
      var loaded = _this3.state.loaded;

      if (lazy) {
        if (loaded.includes(navigationState.routes.indexOf(props.route))) {
          return renderScene(props);
        }

        return null;
      }

      return renderScene(props);
    };

    this._handlePositionChange = function (value) {
      var _props3 = _this3.props,
          onPositionChange = _props3.onPositionChange,
          navigationState = _props3.navigationState,
          lazy = _props3.lazy;

      if (onPositionChange) {
        onPositionChange({
          value: value
        });
      }

      var loaded = _this3.state.loaded;

      if (lazy) {
        var next = Math.ceil(value);

        if (next === navigationState.index) {
          next = Math.floor(value);
        }

        if (loaded.includes(next)) {
          return;
        }

        _this3.setState({
          loaded: [].concat(babelHelpers.toConsumableArray(loaded), [next])
        });
      }
    };

    this._trackPosition = function (e) {
      _this3._handlePositionChange(e.value);

      _this3._triggerEvent('position', e.value);

      _this3._lastPosition = e.value;
    };

    this._getLastPosition = function () {
      if (typeof _this3._lastPosition === 'number') {
        return _this3._lastPosition;
      } else {
        return _this3.props.navigationState.index;
      }
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        position: _this3.state.position,
        jumpToIndex: _this3._jumpToIndex,
        getLastPosition: _this3._getLastPosition,
        subscribe: _this3._addSubscription
      };
    };

    this._jumpToIndex = function (index) {
      if (!_this3._mounted) {
        return;
      }

      var _props4 = _this3.props,
          canJumpToTab = _props4.canJumpToTab,
          navigationState = _props4.navigationState;

      if (canJumpToTab && !canJumpToTab(navigationState.routes[index])) {
        _this3._triggerEvent('reset', navigationState.index);

        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };

    this._addSubscription = function (event, callback) {
      if (!_this3._subscriptions[event]) {
        _this3._subscriptions[event] = [];
      }

      _this3._subscriptions[event].push(callback);

      return {
        remove: function remove() {
          var index = _this3._subscriptions[event].indexOf(callback);

          if (index > -1) {
            _this3._subscriptions[event].splice(index, 1);
          }
        }
      };
    };

    this._triggerEvent = function (event, value) {
      if (_this3._subscriptions[event]) {
        _this3._subscriptions[event].forEach(function (fn) {
          return fn(value);
        });
      }
    };
  }, _temp);
  exports.default = TabViewAnimated;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},622,[109,128,12,623,624,625,626],"react-native-tab-view/src/TabViewAnimated.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    getLastPosition: _propTypes2.default.func.isRequired,
    subscribe: _propTypes2.default.func.isRequired
  };
},623,[128,12],"react-native-tab-view/src/TabViewPropTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var TabViewPagerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerAndroid, _React$Component);

    function TabViewPagerAndroid(props) {
      babelHelpers.classCallCheck(this, TabViewPagerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

      _this._isRequestingAnimationFrame = false;
      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var _viewPager = _this._viewPager;

        if (_viewPager) {
          _this._animationFrameCallback = null;

          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled !== false) {
            _viewPager.setPage(page);
          } else {
            _viewPager.setPageWithoutAnimation(page);
          }
        }
      };

      _this._handlePageChange = function (index) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.position.setValue(_this._getPageIndex(e.nativeEvent.position) + e.nativeEvent.offset * (_reactNative.I18nManager.isRTL ? -1 : 1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';

        _this.props.jumpToIndex(_this._currentIndex);
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._setRef = function (el) {
        return _this._viewPager = el;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(TabViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._resetListener = this.props.subscribe('reset', this._handlePageChange);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        if (this.props.layout !== nextProps.layout || React.Children.count(this.props.children) !== React.Children.count(nextProps.children)) {
          this._animationFrameCallback = function () {
            if (_this2._viewPager) {
              var navigationState = nextProps.navigationState;
              var page = _reactNative.I18nManager.isRTL ? navigationState.routes.length - (navigationState.index + 1) : navigationState.index;

              _this2._viewPager.setPageWithoutAnimation(page);
            }
          };

          if (!this._isRequestingAnimationFrame) {
            this._isRequestingAnimationFrame = true;
            global.requestAnimationFrame(function () {
              _this2._isRequestingAnimationFrame = false;

              if (_this2._animationFrameCallback) {
                _this2._animationFrameCallback();
              }
            });
          }
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._handlePageChange(this.props.navigationState.index);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._resetListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled;
        var content = React.Children.map(children, function (child, i) {
          return React.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: styles.page,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 137
              }
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: "on-drag",
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: this._setRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 153
            }
          },
          content
        );
      }
    }]);
    return TabViewPagerAndroid;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    children: _propTypes2.default.node
  }), _temp);
  exports.default = TabViewPagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},624,[109,128,12,623],"react-native-tab-view/src/TabViewPagerAndroid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TabViewPagerScroll.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var TabViewPagerScroll = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerScroll, _React$Component);

    function TabViewPagerScroll(props) {
      babelHelpers.classCallCheck(this, TabViewPagerScroll);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

      _this._nextOffset = 0;
      _this._isIdle = true;

      _this._scrollTo = function (x) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.animationEnabled !== false;
        _this._nextOffset = x;

        if (_this._isIdle && _this._scrollView) {
          _this._scrollView.scrollTo({
            x: x,
            animated: animated
          });
        }
      };

      _this._handleMomentumScrollEnd = function (e) {
        var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this.props.layout.width);
        _this._isIdle = true;

        _this.props.jumpToIndex(nextIndex);
      };

      _this._handleScroll = function (e) {
        _this._isIdle = Math.abs(e.nativeEvent.contentOffset.x - _this._nextOffset) < 0.1;

        _this.props.position.setValue(e.nativeEvent.contentOffset.x / _this.props.layout.width);
      };

      _this._setRef = function (el) {
        return _this._scrollView = el;
      };

      _this.state = {
        initialOffset: {
          x: _this.props.navigationState.index * _this.props.layout.width,
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(TabViewPagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._scrollTo(this.props.navigationState.index * this.props.layout.width, false);

        this._resetListener = this.props.subscribe('reset', this._scrollTo);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        var amount = this.props.navigationState.index * this.props.layout.width;

        if (prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout) {
          if (_reactNative.Platform.OS === 'android' || prevProps.navigationState !== this.props.navigationState) {
            global.requestAnimationFrame(function () {
              return _this2._scrollTo(amount);
            });
          } else {
            this._scrollTo(amount, false);
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._resetListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 16,
            onScroll: this._handleScroll,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: this._setRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          },
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : i === navigationState.index ? styles.page : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 138
                }
              },
              i === navigationState.index || layout.width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerScroll;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    children: _propTypes2.default.node
  }), _temp);
  exports.default = TabViewPagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},625,[109,128,12,623],"react-native-tab-view/src/TabViewPagerScroll.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TabViewPagerPan.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = require(_dependencyMap[3], "./TabViewPropTypes");

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };
  var TabViewPagerPan = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerPan, _React$Component);

    function TabViewPagerPan() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerPan);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call.apply(_ref, [this].concat(args))), _this), _this._pendingIndex = null, _this._lastValue = null, _this._isMoving = null, _this._startDirection = 0, _this._isIndexInRange = function (index) {
        var routes = _this.props.navigationState.routes;
        return index >= 0 && index <= routes.length - 1;
      }, _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 3) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 3);
      }, _this._isReverseDirection = function (gestureState) {
        if (_this._startDirection > 0) {
          return gestureState.vx < 0;
        } else {
          return gestureState.vx > 0;
        }
      }, _this._getNextIndex = function (evt, gestureState) {
        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this.props.navigationState.index;
        var swipeVelocityThreshold = _this.props.swipeVelocityThreshold;

        if (_reactNative.Platform.OS === 'android') {
          swipeVelocityThreshold /= 1000000;
        }

        if (Math.abs(gestureState.dx) > _this.props.swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold) {
          var nextIndex = currentIndex - gestureState.dx / Math.abs(gestureState.dx) * (_reactNative.I18nManager.isRTL ? -1 : 1);

          if (_this._isIndexInRange(nextIndex)) {
            return nextIndex;
          }
        }

        return currentIndex;
      }, _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;
        var canMove = _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && index >= 0 || gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1);

        if (canMove) {
          _this._startDirection = gestureState.dx;
        }

        return canMove;
      }, _this._startGesture = function (evt, gestureState) {
        if (typeof _this.props.onSwipeStart === 'function') {
          _this.props.onSwipeStart(evt, gestureState);
        }

        _this._lastValue = _this.props.getLastPosition();

        _this.props.position.stopAnimation();
      }, _this._respondToGesture = function (evt, gestureState) {
        var width = _this.props.layout.width;
        var currentPosition = typeof _this._lastValue === 'number' ? _this._lastValue : _this.props.navigationState.index;
        var nextPosition = currentPosition - gestureState.dx / width * (_reactNative.I18nManager.isRTL ? -1 : 1);

        if (_this._isMoving === null) {
          _this._isMoving = _this._isMovingHorizontally(evt, gestureState);
        }

        if (_this._isMoving && _this._isIndexInRange(nextPosition)) {
          _this.props.position.setValue(nextPosition);
        }
      }, _this._finishGesture = function (evt, gestureState) {
        if (typeof _this.props.onSwipeEnd === 'function') {
          _this.props.onSwipeEnd(evt, gestureState);
        }

        var currentIndex = _this.props.navigationState.index;

        var currentValue = _this.props.getLastPosition();

        if (currentValue !== currentIndex) {
          if (_this._isMoving && !_this._isReverseDirection(gestureState)) {
            var nextIndex = _this._getNextIndex(evt, gestureState);

            _this._transitionTo(nextIndex);
          } else {
            _this._transitionTo(currentIndex);
          }
        }

        _this._lastValue = null;
        _this._isMoving = null;
      }, _this._transitionTo = function (toValue) {
        var lastPosition = _this.props.getLastPosition();

        var currentTransitionProps = {
          progress: lastPosition
        };
        var nextTransitionProps = {
          progress: toValue
        };
        _this._pendingIndex = toValue;

        if (_this.props.animationEnabled !== false) {
          var transitionSpec = _this.props.configureTransition(currentTransitionProps, nextTransitionProps);

          var timing = transitionSpec.timing,
              transitionConfig = babelHelpers.objectWithoutProperties(transitionSpec, ["timing"]);
          timing(_this.props.position, babelHelpers.extends({}, transitionConfig, {
            toValue: toValue
          })).start(function (_ref2) {
            var finished = _ref2.finished;

            if (finished) {
              _this.props.jumpToIndex(toValue);

              _this._pendingIndex = null;
            }
          });
        } else {
          _this.props.position.setValue(toValue);

          _this.props.jumpToIndex(toValue);

          _this._pendingIndex = null;
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerPan, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._canMoveScreen,
          onMoveShouldSetPanResponderCapture: this._canMoveScreen,
          onPanResponderGrant: this._startGesture,
          onPanResponderMove: this._respondToGesture,
          onPanResponderTerminate: this._finishGesture,
          onPanResponderRelease: this._finishGesture,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._resetListener = this.props.subscribe('reset', this._transitionTo);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._resetListener && this._resetListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            layout = _props.layout,
            position = _props.position,
            navigationState = _props.navigationState,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (i) {
          return width * i * (_reactNative.I18nManager.isRTL ? 1 : -1);
        });
        var translateX = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 284
            }
          }),
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: width ? {
                  width: width
                } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 294
                }
              },
              i === navigationState.index || width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerPan;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    configureTransition: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    swipeDistanceThreshold: _propTypes2.default.number.isRequired,
    swipeVelocityThreshold: _propTypes2.default.number.isRequired,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func,
    children: _propTypes2.default.node
  }), _class.defaultProps = {
    configureTransition: function configureTransition() {
      return DefaultTransitionSpec;
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    swipeDistanceThreshold: 120,
    swipeVelocityThreshold: 0.25
  }, _temp2);
  exports.default = TabViewPagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},626,[109,128,12,623],"react-native-tab-view/src/TabViewPagerPan.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TabBar.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _TouchableItem = require(_dependencyMap[3], "./TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _TabViewPropTypes = require(_dependencyMap[4], "./TabViewPropTypes");

  var TabBar = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBar, _React$PureComponent);

    function TabBar(props) {
      babelHelpers.classCallCheck(this, TabBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 0;

      if (_this.props.scrollEnabled === true) {
        var tabWidth = _this._getTabWidthFromStyle(_this.props.tabStyle);

        if (_this.props.layout.width || tabWidth) {
          initialVisibility = 1;
        }
      } else {
        initialVisibility = 1;
      }

      _this.state = {
        offset: new _reactNative.Animated.Value(0),
        visibility: new _reactNative.Animated.Value(initialVisibility),
        initialOffset: {
          x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._adjustScroll(this.props.navigationState.index);

        this._positionListener = this.props.subscribe('position', this._adjustScroll);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.navigationState !== nextProps.navigationState) {
          this._resetScrollOffset(nextProps);
        }

        var nextTabWidth = this._getTabWidthFromStyle(nextProps.tabStyle);

        if (this.props.tabStyle !== nextProps.tabStyle && nextTabWidth || this.props.layout.width !== nextProps.layout.width && nextProps.layout.width) {
          this.state.visibility.setValue(1);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        if (this.props.scrollEnabled && (prevProps.layout !== this.props.layout || prevProps.tabStyle !== this.props.tabStyle)) {
          global.requestAnimationFrame(function () {
            return _this2._adjustScroll(_this2.props.navigationState.index);
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._positionListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled;
        var routes = navigationState.routes,
            index = navigationState.index;

        var maxDistance = this._getMaxScrollableDistance(this.props);

        var finalTabWidth = this._getFinalTabWidth(this.props);

        var tabBarWidth = finalTabWidth * routes.length;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var translateOutputRange = inputRange.map(function (i) {
          return _this3._getScrollAmount(_this3.props, i) * -1;
        });

        var translateX = _reactNative.Animated.add(position.interpolate({
          inputRange: inputRange,
          outputRange: translateOutputRange
        }), this.state.offset).interpolate({
          inputRange: [-maxDistance, 0],
          outputRange: [-maxDistance, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 354
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 355
              }
            },
            this._renderIndicator(babelHelpers.extends({}, this.props, {
              width: new _reactNative.Animated.Value(finalTabWidth)
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 369
              }
            },
            React.createElement(
              _reactNative.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "always",
                scrollEnabled: scrollEnabled,
                bounces: false,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 16,
                onScroll: this._handleScroll,
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: this._setRef,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 370
                }
              },
              routes.map(function (route, i) {
                var focused = index === i;
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this3.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var scene = {
                  route: route,
                  focused: focused,
                  index: i
                };

                var label = _this3._renderLabel(scene);

                var icon = _this3.props.renderIcon ? _this3.props.renderIcon(scene) : null;
                var badge = _this3.props.renderBadge ? _this3.props.renderBadge(scene) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this3.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = finalTabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = route.accessibilityLabel || route.title;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: route.testID,
                    accessible: route.accessible,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: "button",
                    pressColor: _this3.props.pressColor,
                    pressOpacity: _this3.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      var _props2 = _this3.props,
                          onTabPress = _props2.onTabPress,
                          jumpToIndex = _props2.jumpToIndex;
                      jumpToIndex(i);

                      if (onTabPress) {
                        onTabPress(scene);
                      }
                    },
                    style: tabContainerStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 451
                    }
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 471
                      }
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 472
                        }
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this3.state.visibility
                        }],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 484
                        }
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);
    return TabBar;
  }(React.PureComponent), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _reactNative.Text.propTypes.style,
    style: _propTypes2.default.any
  }), _class.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return route.title ? route.title.toUpperCase() : null;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this._isManualScroll = false;
    this._isMomentumScroll = false;

    this._renderLabel = function (scene) {
      if (typeof _this4.props.renderLabel !== 'undefined') {
        return _this4.props.renderLabel(scene);
      }

      var label = _this4.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Text,
        {
          style: [styles.tabLabel, _this4.props.labelStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 160
          }
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this4.props.renderIndicator !== 'undefined') {
        return _this4.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position, width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this4.props.indicatorStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 174
        }
      });
    };

    this._getTabWidthFromStyle = function (style) {
      if (_this4._tabWidthCache && _this4._tabWidthCache.style === style) {
        return _this4._tabWidthCache.width;
      }

      var passedTabStyle = _reactNative.StyleSheet.flatten(_this4.props.tabStyle);

      var cache = {
        style: style,
        width: passedTabStyle ? passedTabStyle.width : null
      };
      _this4._tabWidthCache = cache;
      return cache;
    };

    this._getFinalTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this4._getTabWidthFromStyle(props.tabStyle);

      if (typeof tabWidth === 'number') {
        return tabWidth;
      }

      if (typeof tabWidth === 'string' && tabWidth.endsWith('%')) {
        return layout.width * (parseFloat(tabWidth) / 100);
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._getMaxScrollableDistance = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState;

      if (layout.width === 0) {
        return 0;
      }

      var finalTabWidth = _this4._getFinalTabWidth(props);

      var tabBarWidth = finalTabWidth * navigationState.routes.length;
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(maxDistance, 0);
    };

    this._normalizeScrollValue = function (props, value) {
      var maxDistance = _this4._getMaxScrollableDistance(props);

      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var finalTabWidth = _this4._getFinalTabWidth(props);

      var centerDistance = finalTabWidth * i + finalTabWidth / 2;
      var scrollAmount = centerDistance - layout.width / 2;
      return _this4._normalizeScrollValue(props, scrollAmount);
    };

    this._resetScrollOffset = function (props) {
      if (!props.scrollEnabled || !_this4._scrollView) {
        return;
      }

      var scrollAmount = _this4._getScrollAmount(props, props.navigationState.index);

      _this4._scrollView && _this4._scrollView.scrollTo({
        x: scrollAmount,
        animated: true
      });

      _reactNative.Animated.timing(_this4.state.offset, {
        toValue: 0,
        duration: 150
      }).start();
    };

    this._adjustScroll = function (index) {
      if (!_this4.props.scrollEnabled || !_this4._scrollView) {
        return;
      }

      var scrollAmount = _this4._getScrollAmount(_this4.props, index);

      _this4._scrollView && _this4._scrollView.scrollTo({
        x: scrollAmount,
        animated: false
      });
    };

    this._adjustOffset = function (value) {
      if (!_this4._isManualScroll || !_this4.props.scrollEnabled) {
        return;
      }

      var scrollAmount = _this4._getScrollAmount(_this4.props, _this4.props.navigationState.index);

      var scrollOffset = value - scrollAmount;

      if (_this4._isMomentumScroll) {
        _reactNative.Animated.spring(_this4.state.offset, {
          toValue: -scrollOffset,
          tension: 300,
          friction: 35
        }).start();
      } else {
        _this4.state.offset.setValue(-scrollOffset);
      }
    };

    this._handleScroll = function (e) {
      _this4._adjustOffset(e.nativeEvent.contentOffset.x);
    };

    this._handleBeginDrag = function () {
      _this4._isManualScroll = true;
      _this4._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this4._isMomentumScroll) {
          return;
        }

        _this4._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this4._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this4._isMomentumScroll = false;
      _this4._isManualScroll = false;
    };

    this._setRef = function (el) {
      return _this4._scrollView = el;
    };
  }, _temp);
  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: _reactNative.Platform.OS === 'android' ? 0 : 1
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flexGrow: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},627,[109,128,12,628,623],"react-native-tab-view/src/TabBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/TouchableItem.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var LOLLIPOP = 21;
  var TouchableItem = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TouchableItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
        global.requestAnimationFrame(_this.props.onPress);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = babelHelpers.objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 49
              }
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 54
                }
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              style: style,
              activeOpacity: pressOpacity,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 59
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return TouchableItem;
  }(React.Component), _class.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  }, _class.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  }, _temp2);
  exports.default = TouchableItem;
},628,[109,128,12],"react-native-tab-view/src/TouchableItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-tab-view/src/SceneMap.js";
  exports.default = SceneMap;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  function SceneMap(scenes) {
    var SceneComponent = function (_PureComponent) {
      babelHelpers.inherits(SceneComponent, _PureComponent);

      function SceneComponent() {
        babelHelpers.classCallCheck(this, SceneComponent);
        return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(SceneComponent, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(scenes[this.props.route.key], this.props);
        }
      }]);
      return SceneComponent;
    }(_react.PureComponent);

    return function (_ref) {
      var route = _ref.route;
      return _react2.default.createElement(SceneComponent, {
        key: route.key,
        route: route,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 13
        }
      });
    };
  }
},629,[109],"react-native-tab-view/src/SceneMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/withCachedChildNavigation.js";
  exports.default = withCachedChildNavigation;

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _addNavigationHelpers = require(_dependencyMap[1], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  function withCachedChildNavigation(Comp) {
    var _class, _temp2;

    var displayName = Comp.displayName || Comp.name;
    return _temp2 = _class = function (_React$PureComponent) {
      babelHelpers.inherits(_class, _React$PureComponent);

      function _class() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, _class);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this._updateNavigationProps = function (navigation) {
          if (!_this._childNavigationProps) {
            _this._childNavigationProps = {};
          }

          navigation.state.routes.forEach(function (route) {
            var childNavigation = _this._childNavigationProps[route.key];

            if (childNavigation && childNavigation.state === route) {
              return;
            }

            _this._childNavigationProps[route.key] = (0, _addNavigationHelpers2.default)({
              dispatch: navigation.dispatch,
              state: route
            });
          });
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(_class, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._updateNavigationProps(this.props.navigation);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._updateNavigationProps(nextProps.navigation);
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(Comp, babelHelpers.extends({}, this.props, {
            childNavigationProps: this._childNavigationProps,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          }));
        }
      }]);
      return _class;
    }(React.PureComponent), _class.displayName = "withCachedChildNavigation(" + displayName + ")", _temp2;
  }
},630,[109,583],"react-navigation/src/withCachedChildNavigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/TabView/TabBarTop.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = require(_dependencyMap[2], "react-native-tab-view");

  var _TabBarIcon = require(_dependencyMap[3], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var TabBarTop = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarTop);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return React.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color
              }, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            },
            upperCaseLabel ? label.toUpperCase() : label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        return React.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.icon, iconStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        });
      }, _this._handleOnPress = function (scene) {
        var _this$props3 = _this.props,
            getOnPress = _this$props3.getOnPress,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var previousScene = navigation.state.routes[navigation.state.index];
        var onPress = getOnPress(previousScene, scene);

        if (onPress) {
          onPress({
            previousScene: previousScene,
            scene: scene,
            jumpToIndex: jumpToIndex
          });
        } else {
          jumpToIndex(scene.index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarTop, [{
      key: "render",
      value: function render() {
        var props = this.props;
        return React.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, props, {
          onTabPress: this._handleOnPress,
          jumpToIndex: function jumpToIndex() {},
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 142
          }
        }));
      }
    }]);
    return TabBarTop;
  }(React.PureComponent), _class.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  }, _temp2);
  exports.default = TabBarTop;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},631,[109,12,621,632],"react-navigation/src/views/TabView/TabBarTop.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/TabView/TabBarIcon.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var TabBarIcon = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarIcon, _React$PureComponent);

    function TabBarIcon() {
      babelHelpers.classCallCheck(this, TabBarIcon);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            position = _props.position,
            scene = _props.scene,
            navigation = _props.navigation,
            activeTintColor = _props.activeTintColor,
            inactiveTintColor = _props.inactiveTintColor,
            style = _props.style;
        var route = scene.route,
            index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return React.createElement(
          _reactNative.View,
          {
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 49
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: activeOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 50
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: true,
              tintColor: activeTintColor
            })
          ),
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: inactiveOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 58
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: false,
              tintColor: inactiveTintColor
            })
          )
        );
      }
    }]);
    return TabBarIcon;
  }(React.PureComponent);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
},632,[109,12],"react-navigation/src/views/TabView/TabBarIcon.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/TabView/TabBarBottom.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _TabBarIcon = require(_dependencyMap[2], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var _SafeAreaView = require(_dependencyMap[3], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _withOrientation = require(_dependencyMap[4], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = _reactNative.Platform.OS === 'ios';
  var useHorizontalTabs = majorVersion >= 11 && isIos;
  var TabBarBottom = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarBottom, _React$PureComponent);

    function TabBarBottom() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarBottom);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            labelStyle = _this$props.labelStyle,
            showLabel = _this$props.showLabel,
            showIcon = _this$props.showIcon,
            isLandscape = _this$props.isLandscape,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        var marginLeft = 0;

        if (isLandscape && showIcon && useHorizontalTabs) {
          marginLeft = LABEL_LEFT_MARGIN;
        }

        var marginTop = 0;

        if (!isLandscape && showIcon && useHorizontalTabs) {
          marginTop = LABEL_TOP_MARGIN;
        }

        if (typeof label === 'string') {
          return React.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color,
                marginLeft: marginLeft,
                marginTop: marginTop
              }, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 113
              }
            },
            label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            showLabel = _this$props2.showLabel;

        if (showIcon === false) {
          return null;
        }

        return React.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: showLabel && useHorizontalTabs ? {} : styles.icon,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        });
      }, _this._renderTestIDProps = function (scene) {
        var testIDProps = _this.props.getTestIDProps && _this.props.getTestIDProps(scene);

        return testIDProps;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarBottom, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigation = _props.navigation,
            jumpToIndex = _props.jumpToIndex,
            getOnPress = _props.getOnPress,
            getTestIDProps = _props.getTestIDProps,
            activeBackgroundColor = _props.activeBackgroundColor,
            inactiveBackgroundColor = _props.inactiveBackgroundColor,
            style = _props.style,
            animateStyle = _props.animateStyle,
            tabStyle = _props.tabStyle,
            isLandscape = _props.isLandscape;
        var routes = navigation.state.routes;
        var previousScene = routes[navigation.state.index];
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var tabBarStyle = [styles.tabBar, isLandscape && useHorizontalTabs ? styles.tabBarLandscape : styles.tabBarPortrait, style];
        return React.createElement(
          _reactNative.Animated.View,
          {
            style: animateStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 189
            }
          },
          React.createElement(
            _SafeAreaView2.default,
            {
              style: tabBarStyle,
              forceInset: {
                bottom: 'always',
                top: 'never'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 190
              }
            },
            routes.map(function (route, index) {
              var focused = index === navigation.state.index;
              var scene = {
                route: route,
                index: index,
                focused: focused
              };

              var _onPress = getOnPress(previousScene, scene);

              var outputRange = inputRange.map(function (inputIndex) {
                return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;
              });
              var backgroundColor = position.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              });
              var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';
              var extraProps = _this2._renderTestIDProps(scene) || {};
              var testID = extraProps.testID,
                  accessibilityLabel = extraProps.accessibilityLabel;
              return React.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                  key: route.key,
                  testID: testID,
                  accessibilityLabel: accessibilityLabel,
                  onPress: function onPress() {
                    return _onPress ? _onPress({
                      previousScene: previousScene,
                      scene: scene,
                      jumpToIndex: jumpToIndex
                    }) : jumpToIndex(index);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 214
                  }
                },
                React.createElement(
                  _reactNative.Animated.View,
                  {
                    style: [styles.tab, isLandscape && useHorizontalTabs && styles.tabLandscape, !isLandscape && useHorizontalTabs && styles.tabPortrait, {
                      backgroundColor: backgroundColor
                    }, tabStyle],
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 223
                    }
                  },
                  _this2._renderIcon(scene),
                  _this2._renderLabel(scene)
                )
              );
            })
          )
        );
      }
    }]);
    return TabBarBottom;
  }(React.PureComponent), _class.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true
  }, _temp2);
  var LABEL_LEFT_MARGIN = 20;
  var LABEL_TOP_MARGIN = 15;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#F7F7F7',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarLandscape: {
      height: 29
    },
    tabBarPortrait: {
      height: 49
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch',
      justifyContent: 'flex-end'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    icon: {
      flexGrow: 1
    },
    label: {
      textAlign: 'center',
      fontSize: 10,
      marginBottom: 1.5,
      backgroundColor: 'transparent'
    }
  });

  exports.default = (0, _withOrientation2.default)(TabBarBottom);
},633,[109,12,632,601,602],"react-navigation/src/views/TabView/TabBarBottom.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/navigators/DrawerNavigator.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _createNavigator = require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter2 = require(_dependencyMap[4], "../routers/TabRouter");

  var _TabRouter3 = babelHelpers.interopRequireDefault(_TabRouter2);

  var _DrawerScreen = require(_dependencyMap[5], "../views/Drawer/DrawerScreen");

  var _DrawerScreen2 = babelHelpers.interopRequireDefault(_DrawerScreen);

  var _DrawerView = require(_dependencyMap[6], "../views/Drawer/DrawerView");

  var _DrawerView2 = babelHelpers.interopRequireDefault(_DrawerView);

  var _DrawerNavigatorItems = require(_dependencyMap[7], "../views/Drawer/DrawerNavigatorItems");

  var _DrawerNavigatorItems2 = babelHelpers.interopRequireDefault(_DrawerNavigatorItems);

  var _SafeAreaView = require(_dependencyMap[8], "../views/SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _NavigatorTypes = require(_dependencyMap[9], "./NavigatorTypes");

  var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

  var defaultContentComponent = function defaultContentComponent(props) {
    return React.createElement(
      _reactNative.ScrollView,
      {
        alwaysBounceVertical: false,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      },
      React.createElement(
        _SafeAreaView2.default,
        {
          forceInset: {
            top: 'always',
            horizontal: 'never'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 43
          }
        },
        React.createElement(_DrawerNavigatorItems2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 44
          }
        }))
      )
    );
  };

  var DefaultDrawerConfig = {
    drawerWidth: function drawerWidth() {
      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var smallerAxisSize = Math.min(height, width);
      var isLandscape = width > height;
      var isTablet = smallerAxisSize >= 600;
      var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
      var maxWidth = isTablet ? 320 : 280;
      return Math.min(smallerAxisSize - appBarHeight, maxWidth);
    },
    contentComponent: defaultContentComponent,
    drawerPosition: 'left',
    drawerBackgroundColor: 'white',
    useNativeAnimations: true
  };

  var DrawerNavigator = function DrawerNavigator(routeConfigs) {
    var _TabRouter;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      drawerOpenRoute: 'DrawerOpen',
      drawerCloseRoute: 'DrawerClose',
      drawerToggleRoute: 'DrawerToggle'
    };
    var mergedConfig = babelHelpers.extends({}, DefaultDrawerConfig, config);
    var containerConfig = mergedConfig.containerConfig,
        drawerWidth = mergedConfig.drawerWidth,
        drawerLockMode = mergedConfig.drawerLockMode,
        contentComponent = mergedConfig.contentComponent,
        contentOptions = mergedConfig.contentOptions,
        drawerPosition = mergedConfig.drawerPosition,
        useNativeAnimations = mergedConfig.useNativeAnimations,
        drawerBackgroundColor = mergedConfig.drawerBackgroundColor,
        drawerOpenRoute = mergedConfig.drawerOpenRoute,
        drawerCloseRoute = mergedConfig.drawerCloseRoute,
        drawerToggleRoute = mergedConfig.drawerToggleRoute,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["containerConfig", "drawerWidth", "drawerLockMode", "contentComponent", "contentOptions", "drawerPosition", "useNativeAnimations", "drawerBackgroundColor", "drawerOpenRoute", "drawerCloseRoute", "drawerToggleRoute"]);
    var contentRouter = (0, _TabRouter3.default)(routeConfigs, tabsConfig);
    var drawerRouter = (0, _TabRouter3.default)((_TabRouter = {}, babelHelpers.defineProperty(_TabRouter, drawerCloseRoute, {
      screen: (0, _createNavigator2.default)(contentRouter, routeConfigs, config, _NavigatorTypes2.default.DRAWER)(function (props) {
        return React.createElement(_DrawerScreen2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        }));
      })
    }), babelHelpers.defineProperty(_TabRouter, drawerOpenRoute, {
      screen: function screen() {
        return null;
      }
    }), babelHelpers.defineProperty(_TabRouter, drawerToggleRoute, {
      screen: function screen() {
        return null;
      }
    }), _TabRouter), {
      initialRouteName: drawerCloseRoute
    });
    var navigator = (0, _createNavigator2.default)(drawerRouter, routeConfigs, config, _NavigatorTypes2.default.DRAWER)(function (props) {
      return React.createElement(_DrawerView2.default, babelHelpers.extends({}, props, {
        drawerBackgroundColor: drawerBackgroundColor,
        drawerLockMode: drawerLockMode,
        useNativeAnimations: useNativeAnimations,
        drawerWidth: drawerWidth,
        contentComponent: contentComponent,
        contentOptions: contentOptions,
        drawerPosition: drawerPosition,
        drawerOpenRoute: drawerOpenRoute,
        drawerCloseRoute: drawerCloseRoute,
        drawerToggleRoute: drawerToggleRoute,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 127
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  exports.default = DrawerNavigator;
},634,[109,12,586,580,619,635,636,639,601,617],"react-navigation/src/navigators/DrawerNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _SceneView = require(_dependencyMap[1], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var DrawerScreen = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerScreen, _React$PureComponent);

    function DrawerScreen() {
      babelHelpers.classCallCheck(this, DrawerScreen);
      return babelHelpers.possibleConstructorReturn(this, (DrawerScreen.__proto__ || Object.getPrototypeOf(DrawerScreen)).apply(this, arguments));
    }

    babelHelpers.createClass(DrawerScreen, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            navigation = _props.navigation,
            childNavigationProps = _props.childNavigationProps,
            screenProps = _props.screenProps;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;
        var childNavigation = childNavigationProps[routes[index].key];
        var Content = router.getComponentForRouteName(routes[index].routeName);
        return React.createElement(_SceneView2.default, {
          screenProps: screenProps,
          component: Content,
          navigation: childNavigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        });
      }
    }]);
    return DrawerScreen;
  }(React.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerScreen);
},635,[109,603,630],"react-navigation/src/views/Drawer/DrawerScreen.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Drawer/DrawerView.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeDrawerLayoutPolyfill = require(_dependencyMap[2], "react-native-drawer-layout-polyfill");

  var _reactNativeDrawerLayoutPolyfill2 = babelHelpers.interopRequireDefault(_reactNativeDrawerLayoutPolyfill);

  var _addNavigationHelpers = require(_dependencyMap[3], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _DrawerSidebar = require(_dependencyMap[4], "./DrawerSidebar");

  var _DrawerSidebar2 = babelHelpers.interopRequireDefault(_DrawerSidebar);

  var DrawerView = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerView, _React$PureComponent);

    function DrawerView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerView.__proto__ || Object.getPrototypeOf(DrawerView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        drawerWidth: typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth
      }, _this._handleDrawerOpen = function () {
        var _this$props = _this.props,
            navigation = _this$props.navigation,
            drawerOpenRoute = _this$props.drawerOpenRoute;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;

        if (routes[index].routeName !== drawerOpenRoute) {
          _this.props.navigation.navigate(drawerOpenRoute);
        }
      }, _this._handleDrawerClose = function () {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            drawerCloseRoute = _this$props2.drawerCloseRoute;
        var _navigation$state2 = navigation.state,
            routes = _navigation$state2.routes,
            index = _navigation$state2.index;

        if (routes[index].routeName !== drawerCloseRoute) {
          _this.props.navigation.navigate(drawerCloseRoute);
        }
      }, _this._updateScreenNavigation = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });

        if (_this._screenNavigationProp && _this._screenNavigationProp.state === navigationState) {
          return;
        }

        _this._screenNavigationProp = (0, _addNavigationHelpers2.default)({
          dispatch: navigation.dispatch,
          state: navigationState
        });
      }, _this._updateWidth = function () {
        var drawerWidth = typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth;

        if (_this.state.drawerWidth !== drawerWidth) {
          _this.setState({
            drawerWidth: drawerWidth
          });
        }
      }, _this._getNavigationState = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });
        return navigationState;
      }, _this._renderNavigationView = function () {
        return React.createElement(_DrawerSidebar2.default, {
          screenProps: _this.props.screenProps,
          navigation: _this._screenNavigationProp,
          router: _this.props.router,
          contentComponent: _this.props.contentComponent,
          contentOptions: _this.props.contentOptions,
          drawerPosition: _this.props.drawerPosition,
          style: _this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 166
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._updateScreenNavigation(this.props.navigation);

        _reactNative.Dimensions.addEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.Dimensions.removeEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.navigation.state.index !== nextProps.navigation.state.index) {
          var _props = this.props,
              _drawerOpenRoute = _props.drawerOpenRoute,
              _drawerCloseRoute = _props.drawerCloseRoute,
              _drawerToggleRoute = _props.drawerToggleRoute;
          var _nextProps$navigation = nextProps.navigation.state,
              routes = _nextProps$navigation.routes,
              _index = _nextProps$navigation.index;

          if (routes[_index].routeName === _drawerOpenRoute) {
            this._drawer.openDrawer();
          } else if (routes[_index].routeName === _drawerToggleRoute) {
            if (this._drawer.state.drawerShown) {
              this.props.navigation.navigate(_drawerCloseRoute);
            } else {
              this.props.navigation.navigate(_drawerOpenRoute);
            }
          } else {
            this._drawer.closeDrawer();
          }
        }

        this._updateScreenNavigation(nextProps.navigation);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var DrawerScreen = this.props.router.getComponentForRouteName(this.props.drawerCloseRoute);
        var screenNavigation = (0, _addNavigationHelpers2.default)({
          state: this._screenNavigationProp.state,
          dispatch: this._screenNavigationProp.dispatch
        });
        var config = this.props.router.getScreenOptions(screenNavigation, this.props.screenProps);
        return React.createElement(
          _reactNativeDrawerLayoutPolyfill2.default,
          {
            ref: function ref(c) {
              _this2._drawer = c;
            },
            drawerLockMode: this.props.screenProps && this.props.screenProps.drawerLockMode || config && config.drawerLockMode,
            drawerBackgroundColor: this.props.drawerBackgroundColor,
            drawerWidth: this.state.drawerWidth,
            onDrawerOpen: this._handleDrawerOpen,
            onDrawerClose: this._handleDrawerClose,
            useNativeAnimations: this.props.useNativeAnimations,
            renderNavigationView: this._renderNavigationView,
            drawerPosition: this.props.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill2.default.positions.Right : _reactNativeDrawerLayoutPolyfill2.default.positions.Left,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 195
            }
          },
          React.createElement(DrawerScreen, {
            screenProps: this.props.screenProps,
            navigation: this._screenNavigationProp,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 215
            }
          })
        );
      }
    }]);
    return DrawerView;
  }(React.PureComponent);

  exports.default = DrawerView;
},636,[109,12,637,583,638],"react-navigation/src/views/Drawer/DrawerView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], 'react-native');

  exports.default = _reactNative.DrawerLayoutAndroid;
},637,[12],"react-native-drawer-layout-polyfill/dist/index.android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _withCachedChildNavigation = require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var _NavigationActions = require(_dependencyMap[3], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = require(_dependencyMap[4], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _SafeAreaView = require(_dependencyMap[5], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var DrawerSidebar = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerSidebar, _React$PureComponent);

    function DrawerSidebar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerSidebar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerSidebar.__proto__ || Object.getPrototypeOf(DrawerSidebar)).call.apply(_ref, [this].concat(args))), _this), _this._getScreenOptions = function (routeKey) {
        var DrawerScreen = _this.props.router.getComponentForRouteName('DrawerClose');

        (0, _invariant2.default)(DrawerScreen.router, 'NavigationComponent with routeName DrawerClose should be a Navigator');
        var childNavigation = _this.props.childNavigationProps[routeKey];
        return DrawerScreen.router.getScreenOptions(childNavigation.state.index !== undefined ? babelHelpers.extends({}, childNavigation, {
          state: babelHelpers.extends({}, childNavigation.state, {
            index: 0
          })
        }) : childNavigation, _this.props.screenProps);
      }, _this._getLabel = function (_ref2) {
        var focused = _ref2.focused,
            tintColor = _ref2.tintColor,
            route = _ref2.route;

        var _this$_getScreenOptio = _this._getScreenOptions(route.key),
            drawerLabel = _this$_getScreenOptio.drawerLabel,
            title = _this$_getScreenOptio.title;

        if (drawerLabel) {
          return typeof drawerLabel === 'function' ? drawerLabel({
            tintColor: tintColor,
            focused: focused
          }) : drawerLabel;
        }

        if (typeof title === 'string') {
          return title;
        }

        return route.routeName;
      }, _this._renderIcon = function (_ref3) {
        var focused = _ref3.focused,
            tintColor = _ref3.tintColor,
            route = _ref3.route;

        var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
            drawerIcon = _this$_getScreenOptio2.drawerIcon;

        if (drawerIcon) {
          return typeof drawerIcon === 'function' ? drawerIcon({
            tintColor: tintColor,
            focused: focused
          }) : drawerIcon;
        }

        return null;
      }, _this._onItemPress = function (_ref4) {
        var route = _ref4.route,
            focused = _ref4.focused;

        _this.props.navigation.navigate('DrawerClose');

        if (!focused) {
          var subAction = void 0;

          if (route.index !== undefined && route.index !== 0) {
            route = route;
            subAction = _NavigationActions2.default.navigate({
              routeName: route.routes[0].routeName
            });
          }

          _this.props.navigation.navigate(route.routeName, undefined, subAction);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerSidebar, [{
      key: "render",
      value: function render() {
        var ContentComponent = this.props.contentComponent;

        if (!ContentComponent) {
          return null;
        }

        var state = this.props.navigation.state;
        (0, _invariant2.default)(typeof state.index === 'number', 'should be set');
        return React.createElement(
          _reactNative.View,
          {
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 111
            }
          },
          React.createElement(ContentComponent, babelHelpers.extends({}, this.props.contentOptions, {
            navigation: this.props.navigation,
            items: state.routes,
            activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,
            screenProps: this.props.screenProps,
            getLabel: this._getLabel,
            renderIcon: this._renderIcon,
            onItemPress: this._onItemPress,
            router: this.props.router,
            drawerPosition: this.props.drawerPosition,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 112
            }
          }))
        );
      }
    }]);
    return DrawerSidebar;
  }(React.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerSidebar);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},638,[109,12,630,582,584,601],"react-navigation/src/views/Drawer/DrawerSidebar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js";

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _SafeAreaView = require(_dependencyMap[2], "../SafeAreaView");

  var _SafeAreaView2 = babelHelpers.interopRequireDefault(_SafeAreaView);

  var _TouchableItem = require(_dependencyMap[3], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
    var _ref$navigation = _ref.navigation,
        state = _ref$navigation.state,
        navigate = _ref$navigation.navigate,
        items = _ref.items,
        activeItemKey = _ref.activeItemKey,
        activeTintColor = _ref.activeTintColor,
        activeBackgroundColor = _ref.activeBackgroundColor,
        inactiveTintColor = _ref.inactiveTintColor,
        inactiveBackgroundColor = _ref.inactiveBackgroundColor,
        getLabel = _ref.getLabel,
        renderIcon = _ref.renderIcon,
        onItemPress = _ref.onItemPress,
        itemsContainerStyle = _ref.itemsContainerStyle,
        itemStyle = _ref.itemStyle,
        labelStyle = _ref.labelStyle,
        iconContainerStyle = _ref.iconContainerStyle,
        drawerPosition = _ref.drawerPosition;
    return React.createElement(
      _reactNative.View,
      {
        style: [styles.container, itemsContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      },
      items.map(function (route, index) {
        var _ref2;

        var focused = activeItemKey === route.key;
        var color = focused ? activeTintColor : inactiveTintColor;
        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var scene = {
          route: route,
          index: index,
          focused: focused,
          tintColor: color
        };
        var icon = renderIcon(scene);
        var label = getLabel(scene);
        return React.createElement(
          _TouchableItem2.default,
          {
            key: route.key,
            onPress: function onPress() {
              onItemPress({
                route: route,
                focused: focused
              });
            },
            delayPressIn: 0,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          React.createElement(
            _SafeAreaView2.default,
            {
              style: {
                backgroundColor: backgroundColor
              },
              forceInset: (_ref2 = {}, babelHelpers.defineProperty(_ref2, drawerPosition, 'always'), babelHelpers.defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), babelHelpers.defineProperty(_ref2, "vertical", 'never'), _ref2),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            React.createElement(
              _reactNative.View,
              {
                style: [styles.item, itemStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 83
                }
              },
              icon ? React.createElement(
                _reactNative.View,
                {
                  style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                  }
                },
                icon
              ) : null,
              typeof label === 'string' ? React.createElement(
                _reactNative.Text,
                {
                  style: [styles.label, {
                    color: color
                  }, labelStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                  }
                },
                label
              ) : label
            )
          )
        );
      })
    );
  };

  DrawerNavigatorItems.defaultProps = {
    activeTintColor: '#2196f3',
    activeBackgroundColor: 'rgba(0, 0, 0, .04)',
    inactiveTintColor: 'rgba(0, 0, 0, .87)',
    inactiveBackgroundColor: 'transparent'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingVertical: 4
    },
    item: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      marginHorizontal: 16,
      width: 24,
      alignItems: 'center'
    },
    inactiveIcon: {
      opacity: 0.62
    },
    label: {
      margin: 16,
      fontWeight: 'bold'
    }
  });

  exports.default = DrawerNavigatorItems;
},639,[109,12,601,597],"react-navigation/src/views/Drawer/DrawerNavigatorItems.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-navigation/src/views/withNavigation.js";
  exports.default = withNavigation;

  var _react = require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _hoistNonReactStatics = require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  function withNavigation(Component) {
    var componentWithNavigation = function componentWithNavigation(props, _ref) {
      var navigation = _ref.navigation;
      return React.createElement(Component, babelHelpers.extends({}, props, {
        navigation: navigation,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 21
        }
      }));
    };

    var displayName = Component.displayName || Component.name;
    componentWithNavigation.displayName = "withNavigation(" + displayName + ")";
    componentWithNavigation.contextTypes = {
      navigation: _propTypes2.default.object.isRequired
    };
    return (0, _hoistNonReactStatics2.default)(componentWithNavigation, Component);
  }
},640,[109,128,560],"react-navigation/src/views/withNavigation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _jsxFileName = 'src/NavBar.js';
  exports.BackButton = BackButton;
  exports.LeftButton = LeftButton;
  exports.RightButton = RightButton;

  var _react = require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _reactNavigation = require(_dependencyMap[1], 'react-navigation');

  var _reactNative = require(_dependencyMap[2], 'react-native');

  var _navigationStore = require(_dependencyMap[3], './navigationStore');

  var _navigationStore2 = _interopRequireDefault(_navigationStore);

  var _back_chevron = require(_dependencyMap[4], '../images/back_chevron.png');

  var _back_chevron2 = _interopRequireDefault(_back_chevron);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var hitSlop = {
    top: 15,
    bottom: 15,
    left: 15,
    right: 15
  };

  function BackButton(state) {
    var textButtonStyle = [styles.barBackButtonText, state.backButtonTextStyle];
    var style = [styles.backButton, state.leftButtonStyle];
    var buttonImage = state.backButtonImage || _back_chevron2.default;
    var tintColor = getValue(state.backButtonTintColor, state) || state.tintColor || state.navBarButtonColor || state.headerTintColor;
    var onPress = state.onBack;

    if (onPress) {
      onPress = onPress.bind(null, state);
    } else {
      onPress = _navigationStore2.default.pop;
    }

    if (!state.backButtonImage) {
      return _react2.default.createElement(_reactNavigation.HeaderBackButton, {
        onPress: onPress,
        title: state.backTitle,
        titleStyle: textButtonStyle,
        tintColor: tintColor,
        truncatedTitle: state.truncatedTitle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      });
    }

    var text = state.backTitle ? _react2.default.createElement(_reactNative.Text, {
      style: textButtonStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49
      }
    }, state.backTitle) : null;
    return _react2.default.createElement(_reactNative.TouchableOpacity, {
      testID: 'backNavButton',
      style: styles.backButtonContainer,
      onPress: onPress,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 55
      }
    }, _react2.default.createElement(_reactNative.View, {
      style: style,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 60
      }
    }, buttonImage && !state.hideBackImage && _react2.default.createElement(_reactNative.Image, {
      source: buttonImage,
      style: [styles.backButtonImage, state.barButtonIconStyle, state.leftButtonIconStyle, {
        tintColor: tintColor
      }],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61
      }
    }), text));
  }

  function LeftButton(state) {
    var onPress = state.onLeft;
    var buttonImage = getValue(state.leftButtonImage, state);
    var menuIcon = getValue(state.drawerIcon, state);
    var style = [styles.leftButton, state.leftButtonStyle];
    var leftButtonTextStyle = getValue(state.leftButtonTextStyle, state);
    var leftButtonIconStyle = getValue(state.leftButtonIconStyle, state);
    var leftButtonStyle = [styles.defaultImageStyle, leftButtonIconStyle];
    var leftTitle = state.getLeftTitle ? state.getLeftTitle(state) : getValue(state.leftTitle, state);
    var textColor = getValue(state.leftButtonTintColor, state);
    var tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;
    var textStyle = [styles.barLeftButtonText, tintColor && {
      color: tintColor
    }, leftButtonTextStyle, textColor && {
      color: textColor
    }];

    if (state.leftButton || state.left) {
      var Button = state.leftButton || state.left;
      return _react2.default.createElement(Button, _extends({}, state, {
        key: 'leftNavBarBtn',
        testID: 'leftNavButton',
        style: [].concat(style, leftButtonStyle),
        textStyle: textStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }));
    }

    if (!onPress && !state.hideDrawerButton && (state.drawerImage || menuIcon) && state.drawerPosition !== 'right') {
      buttonImage = state.drawerImage;

      if (buttonImage || menuIcon) {
        onPress = _navigationStore2.default.drawerOpen;
      }

      if (!menuIcon) {
        menuIcon = _react2.default.createElement(_reactNative.Image, {
          source: buttonImage,
          style: [state.leftButtonIconStyle || styles.defaultImageStyle, {
            tintColor: tintColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        });
      }
    }

    if (onPress && (leftTitle || buttonImage || menuIcon)) {
      onPress = onPress.bind(null, state);
      return _react2.default.createElement(_reactNative.TouchableOpacity, {
        key: 'leftNavBarBtn',
        testID: 'leftNavButton',
        style: style,
        onPress: onPress,
        hitSlop: state.hitSlop || hitSlop,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121
        }
      }, leftTitle && _react2.default.createElement(_reactNative.Text, {
        style: textStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 128
        }
      }, leftTitle), !leftTitle && (menuIcon || buttonImage) && _react2.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'flex-start'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 132
        }
      }, menuIcon || _react2.default.createElement(_reactNative.Image, {
        source: buttonImage,
        style: [state.leftButtonIconStyle || styles.defaultImageStyle, {
          tintColor: tintColor
        }],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 133
        }
      })));
    }

    if (!!state.onLeft ^ !!(leftTitle || buttonImage || menuIcon)) {
      console.warn('Both onLeft and leftTitle/leftButtonImage\n            must be specified for the scene: ' + state.name);
    }

    return null;
  }

  function getValue(value, params) {
    return value instanceof Function ? value(params) : value;
  }

  function RightButton(state) {
    if (!state) {
      return null;
    }

    var onPress = state.onRight;
    var buttonImage = getValue(state.rightButtonImage, state);
    var menuIcon = state.drawerIcon;
    var style = [styles.rightButton, state.rightButtonStyle];
    var rightButtonTextStyle = getValue(state.rightButtonTextStyle, state);
    var rightButtonIconStyle = getValue(state.rightButtonIconStyle, state);
    var rightButtonStyle = [styles.defaultImageStyle, rightButtonIconStyle];
    var rightTitle = state.getRightTitle ? state.getRightTitle(state) : getValue(state.rightTitle, state);
    var textColor = getValue(state.rightButtonTintColor, state);
    var tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;
    var textStyle = [styles.barRightButtonText, tintColor && {
      color: tintColor
    }, rightButtonTextStyle, textColor && {
      color: textColor
    }];

    if (state.rightButton || state.right) {
      var Button = state.rightButton || state.right;
      return _react2.default.createElement(Button, _extends({}, state, {
        key: 'rightNavBarBtn',
        testID: 'rightNavButton',
        style: style,
        textButtonStyle: textStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 176
        }
      }));
    }

    if (!onPress && !state.hideDrawerButton && state.drawerImage && state.drawerPosition === 'right') {
      buttonImage = state.drawerImage;

      if (buttonImage || menuIcon) {
        onPress = _navigationStore2.default.drawerOpen;
      }

      if (!menuIcon) {
        menuIcon = _react2.default.createElement(_reactNative.Image, {
          source: buttonImage,
          style: [rightButtonStyle, {
            tintColor: tintColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        });
      }
    }

    if (onPress && (rightTitle || buttonImage)) {
      onPress = onPress.bind(null, state);
      return _react2.default.createElement(_reactNative.TouchableOpacity, {
        key: 'rightNavBarBtn',
        testID: 'rightNavButton',
        style: style,
        onPress: onPress,
        hitSlop: state.hitSlop || hitSlop,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 204
        }
      }, rightTitle && _react2.default.createElement(_reactNative.Text, {
        style: textStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 211
        }
      }, rightTitle), !rightTitle && buttonImage && _react2.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'flex-end'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 215
        }
      }, menuIcon || _react2.default.createElement(_reactNative.Image, {
        source: buttonImage,
        style: [state.rightButtonIconStyle || styles.defaultImageStyle, {
          tintColor: tintColor
        }],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 216
        }
      })));
    }

    if (!!state.onRight ^ !!(typeof rightTitle !== 'undefined' || typeof buttonImage !== 'undefined')) {
      console.warn('Both onRight and rightTitle/rightButtonImage\n            must be specified for the scene: ' + state.routeName);
    }

    return null;
  }

  var styles = _reactNative.StyleSheet.create({
    title: {
      textAlign: 'center',
      color: '#0A0A0A',
      fontSize: 18,
      width: 180,
      alignSelf: 'center'
    },
    titleImage: {
      width: 180,
      alignSelf: 'center'
    },
    titleWrapper: _extends({
      marginTop: 10,
      position: 'absolute'
    }, _reactNative.Platform.select({
      ios: {
        top: 20
      },
      android: {
        top: 5
      },
      windows: {
        top: 5
      }
    }), {
      left: 0,
      right: 0
    }),
    header: _extends({
      backgroundColor: '#EFEFF2',
      paddingTop: 0,
      top: 0
    }, _reactNative.Platform.select({
      ios: {
        height: 64
      },
      android: {
        height: 54
      },
      windows: {
        height: 54
      }
    }), {
      right: 0,
      left: 0,
      borderBottomWidth: 0.5,
      borderBottomColor: '#828287',
      position: 'absolute'
    }),
    backButton: _extends({
      position: 'absolute'
    }, _reactNative.Platform.select({
      ios: {
        top: 12
      },
      android: {
        top: 10
      },
      windows: {
        top: 8
      }
    }), {
      left: 2,
      paddingLeft: 8,
      flexDirection: 'row',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    }),
    rightButton: _extends({}, _reactNative.Platform.select({
      ios: {
        position: 'absolute',
        top: 12
      },
      android: {
        top: 0
      },
      windows: {
        top: 8
      }
    }), {
      right: 2,
      paddingRight: 8
    }),
    leftButton: _extends({}, _reactNative.Platform.select({
      ios: {
        position: 'absolute',
        top: 12
      },
      android: {
        top: 0
      },
      windows: {
        top: 8
      }
    }), {
      left: 2,
      paddingLeft: 8
    }),
    barRightButtonText: {
      color: 'rgb(0, 122, 255)',
      textAlign: 'right',
      fontSize: 17
    },
    barBackButtonText: {
      color: 'rgb(0, 122, 255)',
      textAlign: 'left',
      fontSize: 17,
      paddingLeft: 6
    },
    barLeftButtonText: {
      color: 'rgb(0, 122, 255)',
      textAlign: 'left',
      fontSize: 17
    },
    backButtonContainer: _extends({}, _reactNative.Platform.select({
      ios: {
        position: 'absolute',
        top: 0,
        left: 0
      }
    }), {
      height: 50,
      width: 70
    }),
    backButtonImage: _extends({}, _reactNative.Platform.select({
      android: {
        marginTop: 5
      }
    }), {
      width: 13,
      height: 21
    }),
    defaultImageStyle: {
      height: 24,
      resizeMode: 'contain'
    }
  });
},641,[109,579,12,576,642],"react-native-router-flux/dist/NavBar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-router-flux/images",
    "width": 26,
    "height": 42,
    "scales": [1],
    "hash": "fb13fafd1da1ad19e708c53cfad2e514",
    "name": "back_chevron",
    "type": "png"
  });
},642,[162],"node_modules/react-native-router-flux/images/back_chevron.png");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = 'src/LightboxNavigator.js';

  var _react = require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _reactNavigation = require(_dependencyMap[1], 'react-navigation');

  var _reactNative = require(_dependencyMap[2], 'react-native');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var LightboxNavigator = function LightboxNavigator(routeConfigs) {
    var tabsConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _reactNavigation.TabRouter)(routeConfigs, tabsConfig);
    var navigator = (0, _reactNavigation.createNavigator)(router, routeConfigs, tabsConfig, 'react-navigation/STACK')(function (_ref) {
      var navigation = _ref.navigation;
      var state = navigation.state,
          dispatch = navigation.dispatch;
      var routes = state.routes,
          index = state.index;
      var Component = routeConfigs[tabsConfig.initialRouteName].screen;
      var initialIndex = 0;

      for (var i = 0; i < routes.length; i++) {
        var route = routes[i];

        if (route.routeName === tabsConfig.initialRouteName) {
          initialIndex = i;
        }
      }

      var Popup = index !== initialIndex ? routeConfigs[routes[index].routeName].screen : null;
      return _react2.default.createElement(_reactNative.View, {
        style: {
          flex: 1
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, _react2.default.createElement(Component, {
        navigation: (0, _reactNavigation.addNavigationHelpers)({
          dispatch: dispatch,
          state: routes[initialIndex]
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }), Popup && _react2.default.createElement(Popup, {
        navigation: (0, _reactNavigation.addNavigationHelpers)({
          dispatch: dispatch,
          state: routes[index]
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }));
    });
    return (0, _reactNavigation.createNavigationContainer)(navigator, tabsConfig.containerOptions);
  };

  exports.default = LightboxNavigator;
},643,[109,579,12],"react-native-router-flux/dist/LightboxNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-router-flux/images",
    "width": 26,
    "height": 42,
    "scales": [1],
    "hash": "315b6bc9518b83448be6761e6cc5cb7e",
    "name": "menu_burger",
    "type": "png"
  });
},644,[162],"node_modules/react-native-router-flux/images/menu_burger.png");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},645,[],"react-native-router-flux/dist/Scene.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.getActiveStateExceptDrawer = getActiveStateExceptDrawer;
  exports.isActiveRoute = isActiveRoute;
  exports.getActiveState = getActiveState;
  exports.inject = inject;
  exports.popPrevious = popPrevious;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function getActiveStateExceptDrawer(param) {
    var state = param;

    if (!state.routes) {
      return state;
    }

    if (state.routes[state.index].routeName === 'DrawerOpen') {
      return getActiveState(state.routes[0]);
    }

    return getActiveState(state.routes[state.index]);
  }

  function isActiveRoute(state, routeName) {
    if (state.routeName === routeName) {
      return true;
    }

    if (!state.routes) {
      return state.routeName === routeName;
    }

    if (state.routes[state.index].routeName === 'DrawerOpen') {
      return isActiveRoute(state.routes[0], routeName);
    }

    return isActiveRoute(state.routes[state.index], routeName);
  }

  function getActiveState(param, parent) {
    var state = param;

    if (!state.routes) {
      return _extends({}, state, {
        parent: parent
      });
    }

    return getActiveState(state.routes[state.index], _extends({}, state, {
      parent: parent
    }));
  }

  function inject(state, key, index, routes) {
    if (!state.routes) {
      return state;
    }

    if (state.key === key) {
      if (routes) {
        return _extends({}, state, {
          routes: routes,
          index: index
        });
      }

      return _extends({}, state, {
        index: index
      });
    }

    return _extends({}, state, {
      routes: state.routes.map(function (x) {
        return inject(x, key, index, routes);
      })
    });
  }

  function popPrevious(state) {
    var activeState = getActiveState(state);

    if (activeState.parent && activeState.parent.index) {
      var parent = activeState.parent;
      var key = parent.key;
      var routes = [].concat(_toConsumableArray(parent.routes.slice(0, parent.index - 1)), _toConsumableArray(parent.routes.slice(parent.index)));
      var newState = inject(state, key, parent.index - 1, routes);
      return newState;
    }

    return state;
  }
},646,[],"react-native-router-flux/dist/State.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var nativeObjectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Buffer = moduleExports ? root.Buffer : undefined,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  function stackGet(key) {
    return this.__data__.get(key);
  }

  function stackHas(key) {
    return this.__data__.has(key);
  }

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };
  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  var isBuffer = nativeIsBuffer || stubFalse;

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function stubArray() {
    return [];
  }

  function stubFalse() {
    return false;
  }

  module.exports = isEqual;
},647,[],"lodash.isequal/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},648,[],"react-native-router-flux/dist/Modal.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},649,[],"react-native-router-flux/dist/Lightbox.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},650,[],"react-native-router-flux/dist/Drawer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},651,[],"react-native-router-flux/dist/Tabs.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},652,[],"react-native-router-flux/dist/Overlay.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = 'src/OverlayNavigator.js';

  var _react = require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _reactNavigation = require(_dependencyMap[1], 'react-navigation');

  var _reactNative = require(_dependencyMap[2], 'react-native');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var OverlayNavigator = function OverlayNavigator(routeConfigs) {
    var tabsConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _reactNavigation.TabRouter)(routeConfigs, tabsConfig);
    var navigator = (0, _reactNavigation.createNavigator)(router, routeConfigs, tabsConfig, 'react-navigation/STACK')(function (_ref) {
      var navigation = _ref.navigation;
      var state = navigation.state,
          dispatch = navigation.dispatch;
      var routes = state.routes;
      var Component = routeConfigs[tabsConfig.initialRouteName].screen;
      var initialIndex = 0;
      var routesMap = {};

      for (var i = 0; i < routes.length; i++) {
        var route = routes[i];

        if (route.routeName === tabsConfig.initialRouteName) {
          initialIndex = i;
        }

        routesMap[route.routeName] = route;
      }

      var initialRouteName = tabsConfig.initialRouteName || routes[initialIndex].routeName;
      var overlays = [];

      for (var _i = 0; _i < tabsConfig.order.length; _i++) {
        var routeName = tabsConfig.order[_i];

        if (initialRouteName !== routeName) {
          var Overlay = routeConfigs[routeName].screen;
          overlays.push(_react2.default.createElement(Overlay, {
            key: routeName,
            navigation: {
              dispatch: dispatch,
              state: routesMap[routeName]
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          }));
        }
      }

      var ContentComponent = tabsConfig.contentComponent || _reactNative.View;
      return _react2.default.createElement(ContentComponent, {
        style: {
          flex: 1
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement(Component, {
        navigation: {
          dispatch: dispatch,
          state: routes[initialIndex]
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }), overlays);
    });
    return (0, _reactNavigation.createNavigationContainer)(navigator, tabsConfig.containerOptions);
  };

  exports.default = OverlayNavigator;
},653,[109,579,12],"react-native-router-flux/dist/OverlayNavigator.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator') in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _class,
      _class2,
      _temp2,
      _jsxFileName = 'src/Router.js';

  var _react = require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _native = require(_dependencyMap[1], 'mobx-react/native');

  var _reactNative = require(_dependencyMap[2], 'react-native');

  var _propTypes = require(_dependencyMap[3], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNavigation = require(_dependencyMap[4], 'react-navigation');

  var _navigationStore = require(_dependencyMap[5], './navigationStore');

  var _navigationStore2 = _interopRequireDefault(_navigationStore);

  var _pathParser = require(_dependencyMap[6], './pathParser');

  var _pathParser2 = _interopRequireDefault(_pathParser);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var App = (0, _native.observer)(_class = (_temp2 = _class2 = function (_React$Component) {
    _inherits(App, _React$Component);

    function App() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, App);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.onBackPress = function () {
        return _navigationStore2.default.pop();
      }, _this.handleDeepURL = function (e) {
        return _this.parseDeepURL(e.url);
      }, _this.parseDeepURL = function (url) {
        if (!url) {
          return;
        }

        var cleanUrl = _this.props.uriPrefix ? url.split(_this.props.uriPrefix)[1] : url;
        var allPaths = Object.values(_navigationStore2.default.states).map(function (obj) {
          return obj.path;
        }).filter(function (path) {
          return path;
        });
        var parsedPath = (0, _pathParser2.default)(cleanUrl, allPaths);

        if (!parsedPath) {
          return;
        }

        var path = parsedPath.path,
            params = parsedPath.params;
        var actionKey = Object.entries(_navigationStore2.default.states).filter(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              value = _ref3[1];

          return value.path === path;
        }).map(function (_ref4) {
          var _ref5 = _slicedToArray(_ref4, 1),
              key = _ref5[0];

          return key;
        }).find(function (key) {
          return key;
        });

        if (_this.props.onDeepLink) {
          _this.props.onDeepLink({
            url: url,
            action: actionKey,
            params: params
          });
        } else if (actionKey && _navigationStore2.default[actionKey]) {
          _navigationStore2.default[actionKey](params);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(App, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        _reactNative.BackHandler.addEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);

        _reactNative.Linking.getInitialURL().then(function (url) {
          return _this2.parseDeepURL(url);
        });

        _reactNative.Linking.addEventListener('url', this.handleDeepURL);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);

        _reactNative.Linking.removeEventListener('url', this.handleDeepURL);
      }
    }, {
      key: 'render',
      value: function render() {
        var AppNavigator = this.props.navigator;
        return _react2.default.createElement(AppNavigator, {
          navigation: (0, _reactNavigation.addNavigationHelpers)({
            dispatch: _navigationStore2.default.dispatch,
            state: _navigationStore2.default.state
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        });
      }
    }]);

    return App;
  }(_react2.default.Component), _class2.propTypes = {
    navigator: _propTypes2.default.func,
    backAndroidHandler: _propTypes2.default.func,
    uriPrefix: _propTypes2.default.string,
    onDeepLink: _propTypes2.default.func
  }, _temp2)) || _class;

  var Router = function Router(_ref6) {
    var createReducer = _ref6.createReducer,
        sceneStyle = _ref6.sceneStyle,
        scenes = _ref6.scenes,
        uriPrefix = _ref6.uriPrefix,
        navigator = _ref6.navigator,
        getSceneStyle = _ref6.getSceneStyle,
        children = _ref6.children,
        state = _ref6.state,
        dispatch = _ref6.dispatch,
        onDeepLink = _ref6.onDeepLink,
        _ref6$wrapBy = _ref6.wrapBy,
        wrapBy = _ref6$wrapBy === undefined ? function (props) {
      return props;
    } : _ref6$wrapBy,
        props = _objectWithoutProperties(_ref6, ['createReducer', 'sceneStyle', 'scenes', 'uriPrefix', 'navigator', 'getSceneStyle', 'children', 'state', 'dispatch', 'onDeepLink', 'wrapBy']);

    var data = _extends({}, props);

    if (getSceneStyle) {
      data.cardStyle = getSceneStyle(props);
    }

    if (sceneStyle) {
      data.cardStyle = sceneStyle;
    }

    var AppNavigator = scenes || navigator || _navigationStore2.default.create(children, data, wrapBy);

    _navigationStore2.default.reducer = createReducer && createReducer(props);

    if (dispatch && state) {
      _navigationStore2.default.setState(state);

      _navigationStore2.default.dispatch = dispatch;
      return _react2.default.createElement(AppNavigator, {
        navigation: (0, _reactNavigation.addNavigationHelpers)({
          dispatch: dispatch,
          state: state
        }),
        uriPrefix: uriPrefix,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      });
    }

    return _react2.default.createElement(App, _extends({}, props, {
      onDeepLink: onDeepLink,
      navigator: AppNavigator,
      uriPrefix: uriPrefix,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 91
      }
    }));
  };

  Router.propTypes = {
    createReducer: _propTypes2.default.func,
    dispatch: _propTypes2.default.func,
    state: _propTypes2.default.object,
    scenes: _propTypes2.default.func,
    navigator: _propTypes2.default.func,
    wrapBy: _propTypes2.default.func,
    getSceneStyle: _propTypes2.default.func,
    sceneStyle: _reactNative.ViewPropTypes.style,
    children: _propTypes2.default.element,
    uriPrefix: _propTypes2.default.string,
    onDeepLink: _propTypes2.default.func
  };
  exports.default = Router;
},654,[109,655,12,128,579,576,656],"react-native-router-flux/dist/Router.js");
__d(function (global, require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

    function _interopDefault(ex) {
        return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
    }

    var mobx = require(_dependencyMap[0], 'mobx');

    var React = require(_dependencyMap[1], 'react');

    var React__default = _interopDefault(React);

    var reactNative = require(_dependencyMap[2], 'react-native');

    var unstable_batchedUpdates$1 = undefined;
    var findDOMNode = undefined;

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
    };

    var asyncGenerator = function () {
        function AwaitValue(value) {
            this.value = value;
        }

        function AsyncGenerator(gen) {
            var front, back;

            function send(key, arg) {
                return new Promise(function (resolve, reject) {
                    var request = {
                        key: key,
                        arg: arg,
                        resolve: resolve,
                        reject: reject,
                        next: null
                    };

                    if (back) {
                        back = back.next = request;
                    } else {
                        front = back = request;
                        resume(key, arg);
                    }
                });
            }

            function resume(key, arg) {
                try {
                    var result = gen[key](arg);
                    var value = result.value;

                    if (value instanceof AwaitValue) {
                        Promise.resolve(value.value).then(function (arg) {
                            resume("next", arg);
                        }, function (arg) {
                            resume("throw", arg);
                        });
                    } else {
                        settle(result.done ? "return" : "normal", result.value);
                    }
                } catch (err) {
                    settle("throw", err);
                }
            }

            function settle(type, value) {
                switch (type) {
                    case "return":
                        front.resolve({
                            value: value,
                            done: true
                        });
                        break;

                    case "throw":
                        front.reject(value);
                        break;

                    default:
                        front.resolve({
                            value: value,
                            done: false
                        });
                        break;
                }

                front = front.next;

                if (front) {
                    resume(front.key, front.arg);
                } else {
                    back = null;
                }
            }

            this._invoke = send;

            if (typeof gen.return !== "function") {
                this.return = undefined;
            }
        }

        if (typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator")) {
            AsyncGenerator.prototype[typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator"] = function () {
                return this;
            };
        }

        AsyncGenerator.prototype.next = function (arg) {
            return this._invoke("next", arg);
        };

        AsyncGenerator.prototype.throw = function (arg) {
            return this._invoke("throw", arg);
        };

        AsyncGenerator.prototype.return = function (arg) {
            return this._invoke("return", arg);
        };

        return {
            wrap: function wrap(fn) {
                return function () {
                    return new AsyncGenerator(fn.apply(this, arguments));
                };
            },
            await: function _await(value) {
                return new AwaitValue(value);
            }
        };
    }();

    var classCallCheck = function classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    var createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var inherits = function inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    var EventEmitter = function () {
        function EventEmitter() {
            classCallCheck(this, EventEmitter);
            this.listeners = [];
        }

        createClass(EventEmitter, [{
            key: "on",
            value: function on(cb) {
                var _this = this;

                this.listeners.push(cb);
                return function () {
                    var index = _this.listeners.indexOf(cb);

                    if (index !== -1) _this.listeners.splice(index, 1);
                };
            }
        }, {
            key: "emit",
            value: function emit(data) {
                this.listeners.forEach(function (fn) {
                    return fn(data);
                });
            }
        }]);
        return EventEmitter;
    }();

    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
    var defineProperty$1 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

    var hoistNonReactStatics = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);

                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }

            var keys = getOwnPropertyNames(sourceComponent);

            if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];

                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                        defineProperty$1(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }

            return targetComponent;
        }

        return targetComponent;
    };

    function createChainableTypeChecker(validate) {
        function checkType(isRequired, props, propName, componentName, location, propFullName) {
            for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
                rest[_key - 6] = arguments[_key];
            }

            return mobx.untracked(function () {
                componentName = componentName || "<<anonymous>>";
                propFullName = propFullName || propName;

                if (props[propName] == null) {
                    if (isRequired) {
                        var actual = props[propName] === null ? "null" : "undefined";
                        return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
                    }

                    return null;
                } else {
                    return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));
                }
            });
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }

    function isSymbol(propType, propValue) {
        if (propType === "symbol") {
            return true;
        }

        if (propValue["@@toStringTag"] === "Symbol") {
            return true;
        }

        if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
        }

        return false;
    }

    function getPropType(propValue) {
        var propType = typeof propValue === "undefined" ? "undefined" : _typeof(propValue);

        if (Array.isArray(propValue)) {
            return "array";
        }

        if (propValue instanceof RegExp) {
            return "object";
        }

        if (isSymbol(propType, propValue)) {
            return "symbol";
        }

        return propType;
    }

    function getPreciseType(propValue) {
        var propType = getPropType(propValue);

        if (propType === "object") {
            if (propValue instanceof Date) {
                return "date";
            } else if (propValue instanceof RegExp) {
                return "regexp";
            }
        }

        return propType;
    }

    function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
        return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
            return mobx.untracked(function () {
                if (allowNativeType) {
                    if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
                }

                var mobxChecker = void 0;

                switch (mobxType) {
                    case "Array":
                        mobxChecker = mobx.isObservableArray;
                        break;

                    case "Object":
                        mobxChecker = mobx.isObservableObject;
                        break;

                    case "Map":
                        mobxChecker = mobx.isObservableMap;
                        break;

                    default:
                        throw new Error("Unexpected mobxType: " + mobxType);
                }

                var propValue = props[propName];

                if (!mobxChecker(propValue)) {
                    var preciseType = getPreciseType(propValue);
                    var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
                    return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
                }

                return null;
            });
        });
    }

    function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
        return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
            for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
                rest[_key2 - 5] = arguments[_key2];
            }

            return mobx.untracked(function () {
                if (typeof typeChecker !== "function") {
                    return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
                }

                var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName);
                if (error instanceof Error) return error;
                var propValue = props[propName];

                for (var i = 0; i < propValue.length; i++) {
                    error = typeChecker.apply(undefined, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
                    if (error instanceof Error) return error;
                }

                return null;
            });
        });
    }

    var observableArray = createObservableTypeCheckerCreator(false, "Array");
    var observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);
    var observableMap = createObservableTypeCheckerCreator(false, "Map");
    var observableObject = createObservableTypeCheckerCreator(false, "Object");
    var arrayOrObservableArray = createObservableTypeCheckerCreator(true, "Array");
    var arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);
    var objectOrObservableObject = createObservableTypeCheckerCreator(true, "Object");
    var propTypes = Object.freeze({
        observableArray: observableArray,
        observableArrayOf: observableArrayOf,
        observableMap: observableMap,
        observableObject: observableObject,
        arrayOrObservableArray: arrayOrObservableArray,
        arrayOrObservableArrayOf: arrayOrObservableArrayOf,
        objectOrObservableObject: objectOrObservableObject
    });

    function isStateless(component) {
        return !(component.prototype && component.prototype.render);
    }

    var injectorContextTypes = {
        mobxStores: objectOrObservableObject
    };
    Object.seal(injectorContextTypes);
    var proxiedInjectorProps = {
        contextTypes: {
            get: function get$$1() {
                return injectorContextTypes;
            },
            set: function set$$1(_) {
                console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`");
            },
            configurable: true,
            enumerable: false
        },
        isMobxInjector: {
            value: true,
            writable: true,
            configurable: true,
            enumerable: true
        }
    };

    function createStoreInjector(grabStoresFn, component, injectNames) {
        var _class, _temp2;

        var displayName = "inject-" + (component.displayName || component.name || component.constructor && component.constructor.name || "Unknown");
        if (injectNames) displayName += "-with-" + injectNames;
        var Injector = (_temp2 = _class = function (_Component) {
            inherits(Injector, _Component);

            function Injector() {
                var _ref;

                var _temp, _this, _ret;

                classCallCheck(this, Injector);

                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Injector.__proto__ || Object.getPrototypeOf(Injector)).call.apply(_ref, [this].concat(args))), _this), _this.storeRef = function (instance) {
                    _this.wrappedInstance = instance;
                }, _temp), possibleConstructorReturn(_this, _ret);
            }

            createClass(Injector, [{
                key: "render",
                value: function render() {
                    var newProps = {};

                    for (var key in this.props) {
                        if (this.props.hasOwnProperty(key)) {
                            newProps[key] = this.props[key];
                        }
                    }

                    var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};

                    for (var _key2 in additionalProps) {
                        newProps[_key2] = additionalProps[_key2];
                    }

                    if (!isStateless(component)) {
                        newProps.ref = this.storeRef;
                    }

                    return React.createElement(component, newProps);
                }
            }]);
            return Injector;
        }(React.Component), _class.displayName = displayName, _temp2);
        hoistNonReactStatics(Injector, component);
        Injector.wrappedComponent = component;
        Object.defineProperties(Injector, proxiedInjectorProps);
        return Injector;
    }

    function grabStoresByName(storeNames) {
        return function (baseStores, nextProps) {
            storeNames.forEach(function (storeName) {
                if (storeName in nextProps) return;
                if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
                nextProps[storeName] = baseStores[storeName];
            });
            return nextProps;
        };
    }

    function inject() {
        var grabStoresFn = void 0;

        if (typeof arguments[0] === "function") {
            grabStoresFn = arguments[0];
            return function (componentClass) {
                var injected = createStoreInjector(grabStoresFn, componentClass);
                injected.isMobxInjector = false;
                injected = observer(injected);
                injected.isMobxInjector = true;
                return injected;
            };
        } else {
            var storeNames = [];

            for (var i = 0; i < arguments.length; i++) {
                storeNames[i] = arguments[i];
            }

            grabStoresFn = grabStoresByName(storeNames);
            return function (componentClass) {
                return createStoreInjector(grabStoresFn, componentClass, storeNames.join("-"));
            };
        }
    }

    var isDevtoolsEnabled = false;
    var isUsingStaticRendering = false;
    var warnedAboutObserverInjectDeprecation = false;
    var componentByNodeRegistery = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
    var renderReporter = new EventEmitter();

    function findDOMNode$1(component) {
        if (findDOMNode) {
            try {
                return findDOMNode(component);
            } catch (e) {
                return null;
            }
        }

        return null;
    }

    function reportRendering(component) {
        var node = findDOMNode$1(component);
        if (node && componentByNodeRegistery) componentByNodeRegistery.set(node, component);
        renderReporter.emit({
            event: "render",
            renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
            totalTime: Date.now() - component.__$mobRenderStart,
            component: component,
            node: node
        });
    }

    function trackComponents() {
        if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
        if (!isDevtoolsEnabled) isDevtoolsEnabled = true;
    }

    function useStaticRendering(useStaticRendering) {
        isUsingStaticRendering = useStaticRendering;
    }

    var errorsReporter = new EventEmitter();

    function patch(target, funcName) {
        var runMixinFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var base = target[funcName];
        var mixinFunc = reactiveMixin[funcName];
        var f = !base ? mixinFunc : runMixinFirst === true ? function () {
            mixinFunc.apply(this, arguments);
            base.apply(this, arguments);
        } : function () {
            base.apply(this, arguments);
            mixinFunc.apply(this, arguments);
        };
        target[funcName] = f;
    }

    function shallowEqual(objA, objB) {
        if (is(objA, objB)) return true;

        if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== "object" || objB === null) {
            return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;

        for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }

        return true;
    }

    function is(x, y) {
        if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
        } else {
            return x !== x && y !== y;
        }
    }

    var reactiveMixin = {
        componentWillMount: function componentWillMount() {
            var _this = this;

            if (isUsingStaticRendering === true) return;
            var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
            var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID || this._reactInternalFiber && this._reactInternalFiber._debugID;
            var skipRender = false;
            var isForcingUpdate = false;

            function makePropertyObservableReference(propName) {
                var valueHolder = this[propName];
                var atom = new mobx.Atom("reactive " + propName);
                Object.defineProperty(this, propName, {
                    configurable: true,
                    enumerable: true,
                    get: function get$$1() {
                        atom.reportObserved();
                        return valueHolder;
                    },
                    set: function set$$1(v) {
                        if (!isForcingUpdate && !shallowEqual(valueHolder, v)) {
                            valueHolder = v;
                            skipRender = true;
                            atom.reportChanged();
                            skipRender = false;
                        } else {
                            valueHolder = v;
                        }
                    }
                });
            }

            makePropertyObservableReference.call(this, "props");
            makePropertyObservableReference.call(this, "state");
            var baseRender = this.render.bind(this);
            var reaction = null;
            var isRenderingPending = false;

            var initialRender = function initialRender() {
                reaction = new mobx.Reaction(initialName + "#" + rootNodeID + ".render()", function () {
                    if (!isRenderingPending) {
                        isRenderingPending = true;
                        if (typeof _this.componentWillReact === "function") _this.componentWillReact();

                        if (_this.__$mobxIsUnmounted !== true) {
                            var hasError = true;

                            try {
                                isForcingUpdate = true;
                                if (!skipRender) React.Component.prototype.forceUpdate.call(_this);
                                hasError = false;
                            } finally {
                                isForcingUpdate = false;
                                if (hasError) reaction.dispose();
                            }
                        }
                    }
                });
                reaction.reactComponent = _this;
                reactiveRender.$mobx = reaction;
                _this.render = reactiveRender;
                return reactiveRender();
            };

            var reactiveRender = function reactiveRender() {
                isRenderingPending = false;
                var exception = undefined;
                var rendering = undefined;
                reaction.track(function () {
                    if (isDevtoolsEnabled) {
                        _this.__$mobRenderStart = Date.now();
                    }

                    try {
                        rendering = mobx.extras.allowStateChanges(false, baseRender);
                    } catch (e) {
                        exception = e;
                    }

                    if (isDevtoolsEnabled) {
                        _this.__$mobRenderEnd = Date.now();
                    }
                });

                if (exception) {
                    errorsReporter.emit(exception);
                    throw exception;
                }

                return rendering;
            };

            this.render = initialRender;
        },
        componentWillUnmount: function componentWillUnmount() {
            if (isUsingStaticRendering === true) return;
            this.render.$mobx && this.render.$mobx.dispose();
            this.__$mobxIsUnmounted = true;

            if (isDevtoolsEnabled) {
                var node = findDOMNode$1(this);

                if (node && componentByNodeRegistery) {
                    componentByNodeRegistery.delete(node);
                }

                renderReporter.emit({
                    event: "destroy",
                    component: this,
                    node: node
                });
            }
        },
        componentDidMount: function componentDidMount() {
            if (isDevtoolsEnabled) {
                reportRendering(this);
            }
        },
        componentDidUpdate: function componentDidUpdate() {
            if (isDevtoolsEnabled) {
                reportRendering(this);
            }
        },
        shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
            if (isUsingStaticRendering) {
                console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
            }

            if (this.state !== nextState) {
                return true;
            }

            return !shallowEqual(this.props, nextProps);
        }
    };

    function observer(arg1, arg2) {
        if (typeof arg1 === "string") {
            throw new Error("Store names should be provided as array");
        }

        if (Array.isArray(arg1)) {
            if (!warnedAboutObserverInjectDeprecation) {
                warnedAboutObserverInjectDeprecation = true;
                console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`');
            }

            if (!arg2) {
                return function (componentClass) {
                    return observer(arg1, componentClass);
                };
            } else {
                return inject.apply(null, arg1)(observer(arg2));
            }
        }

        var componentClass = arg1;

        if (componentClass.isMobxInjector === true) {
            console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
        }

        if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !React.Component.isPrototypeOf(componentClass)) {
            var _class, _temp;

            return observer((_temp = _class = function (_Component) {
                inherits(_class, _Component);

                function _class() {
                    classCallCheck(this, _class);
                    return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
                }

                createClass(_class, [{
                    key: "render",
                    value: function render() {
                        return componentClass.call(this, this.props, this.context);
                    }
                }]);
                return _class;
            }(React.Component), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));
        }

        if (!componentClass) {
            throw new Error("Please pass a valid component to 'observer'");
        }

        var target = componentClass.prototype || componentClass;
        mixinLifecycleEvents(target);
        componentClass.isMobXReactObserver = true;
        return componentClass;
    }

    function mixinLifecycleEvents(target) {
        patch(target, "componentWillMount", true);
        ["componentDidMount", "componentWillUnmount", "componentDidUpdate"].forEach(function (funcName) {
            patch(target, funcName);
        });

        if (!target.shouldComponentUpdate) {
            target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;
        }
    }

    var Observer = observer(function (_ref) {
        var children = _ref.children,
            observerInject = _ref.inject,
            render = _ref.render;
        var component = children || render;

        if (typeof component === "undefined") {
            return null;
        }

        if (!observerInject) {
            return component();
        }

        var InjectComponent = inject(observerInject)(component);
        return React__default.createElement(InjectComponent, null);
    });
    Observer.displayName = "Observer";

    var ObserverPropsCheck = function ObserverPropsCheck(props, key, componentName, location, propFullName) {
        var extraKey = key === "children" ? "render" : "children";

        if (typeof props[key] === "function" && typeof props[extraKey] === "function") {
            return new Error("Invalid prop,do not use children and render in the same time in`" + componentName);
        }

        if (typeof props[key] === "function" || typeof props[extraKey] === "function") {
            return;
        }

        return new Error("Invalid prop `" + propFullName + "` of type `" + _typeof(props[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");
    };

    Observer.propTypes = {
        render: ObserverPropsCheck,
        children: ObserverPropsCheck
    };

    var _class;

    var _temp;

    var specialReactKeys = {
        children: true,
        key: true,
        ref: true
    };
    var Provider = (_temp = _class = function (_Component) {
        inherits(Provider, _Component);

        function Provider() {
            classCallCheck(this, Provider);
            return possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).apply(this, arguments));
        }

        createClass(Provider, [{
            key: "render",
            value: function render() {
                return React.Children.only(this.props.children);
            }
        }, {
            key: "getChildContext",
            value: function getChildContext() {
                var stores = {};
                var baseStores = this.context.mobxStores;
                if (baseStores) for (var key in baseStores) {
                    stores[key] = baseStores[key];
                }

                for (var _key in this.props) {
                    if (!specialReactKeys[_key] && _key !== "suppressChangedStoreWarning") stores[_key] = this.props[_key];
                }

                return {
                    mobxStores: stores
                };
            }
        }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                if (Object.keys(nextProps).length !== Object.keys(this.props).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
                if (!nextProps.suppressChangedStoreWarning) for (var key in nextProps) {
                    if (!specialReactKeys[key] && this.props[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
                }
            }
        }]);
        return Provider;
    }(React.Component), _class.contextTypes = {
        mobxStores: objectOrObservableObject
    }, _class.childContextTypes = {
        mobxStores: objectOrObservableObject.isRequired
    }, _temp);
    if (!React.Component) throw new Error("mobx-react requires React to be available");
    if (!mobx.extras) throw new Error("mobx-react requires mobx to be available");
    if (typeof unstable_batchedUpdates$1 === "function") mobx.extras.setReactionScheduler(unstable_batchedUpdates$1);else if (typeof reactNative.unstable_batchedUpdates === "function") mobx.extras.setReactionScheduler(reactNative.unstable_batchedUpdates);

    var onError = function onError(fn) {
        return errorsReporter.on(fn);
    };

    if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {
        var mobx$1 = {
            spy: mobx.spy,
            extras: mobx.extras
        };
        var mobxReact = {
            renderReporter: renderReporter,
            componentByNodeRegistery: componentByNodeRegistery,
            trackComponents: trackComponents
        };

        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact, mobx$1);
    }

    exports.propTypes = propTypes;
    exports.PropTypes = propTypes;
    exports.onError = onError;
    exports.observer = observer;
    exports.Observer = Observer;
    exports.renderReporter = renderReporter;
    exports.componentByNodeRegistery = componentByNodeRegistery;
    exports.trackComponents = trackComponents;
    exports.useStaticRendering = useStaticRendering;
    exports.Provider = Provider;
    exports.inject = inject;
},655,[577,109,12],"mobx-react/native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.matchPath = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator') in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var _pathToRegexp = require(_dependencyMap[0], 'path-to-regexp');

  var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toArray(arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  }

  var compilePathToRegex = function compilePathToRegex(path) {
    var keys = [];
    var re = (0, _pathToRegexp2.default)(path, keys);
    return {
      re: re,
      keys: keys
    };
  };

  var matchPath = exports.matchPath = function matchPath(path, url) {
    var _url$split = url.split('?'),
        _url$split2 = _slicedToArray(_url$split, 1),
        urlCleaned = _url$split2[0];

    var urlToMatch = !urlCleaned.endsWith('/') ? urlCleaned + '/' : urlCleaned;

    var _compilePathToRegex = compilePathToRegex(path),
        re = _compilePathToRegex.re,
        keys = _compilePathToRegex.keys;

    var match = re.exec(urlToMatch);

    if (!match) {
      return null;
    }

    var _match = _toArray(match),
        compiledUrl = _match[0],
        values = _match.slice(1);

    if (urlToMatch !== compiledUrl) {
      return null;
    }

    var params = keys.reduce(function (acc, key, index) {
      return _extends({}, acc, _defineProperty({}, key.name, values[index]));
    }, {});
    return {
      path: path,
      params: params
    };
  };

  var pathParser = function pathParser(url) {
    var possibleMatchingpaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return possibleMatchingpaths.map(function (path) {
      return matchPath(path, url);
    }).find(function (obj) {
      return obj;
    });
  };

  exports.default = pathParser;
},656,[657],"react-native-router-flux/dist/pathParser.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var DEFAULT_DELIMITER = '/';
  var DEFAULT_DELIMITERS = './';
  var PATH_REGEXP = new RegExp(['(\\\\.)', '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;
    var delimiters = options && options.delimiters || DEFAULT_DELIMITERS;
    var pathEscaped = false;
    var res;

    while ((res = PATH_REGEXP.exec(str)) !== null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        pathEscaped = true;
        continue;
      }

      var prev = '';
      var next = str[index];
      var name = res[2];
      var capture = res[3];
      var group = res[4];
      var modifier = res[5];

      if (!pathEscaped && path.length) {
        var k = path.length - 1;

        if (delimiters.indexOf(path[k]) > -1) {
          prev = path[k];
          path = path.slice(0, k);
        }
      }

      if (path) {
        tokens.push(path);
        path = '';
        pathEscaped = false;
      }

      var partial = prev !== '' && next !== undefined && next !== prev;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = prev || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prev,
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (path || index < str.length) {
      tokens.push(path + str.substr(index));
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (data, options) {
      var path = '';
      var encode = options && options.encode || encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data ? data[token.name] : undefined;
        var segment;

        if (Array.isArray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but got array');
          }

          if (value.length === 0) {
            if (token.optional) continue;
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j], token);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
          segment = encode(String(value), token);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
          }

          path += token.prefix + segment;
          continue;
        }

        if (token.optional) {
          if (token.partial) path += token.prefix;
          continue;
        }

        throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'));
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$/()])/g, '\\$1');
  }

  function flags(options) {
    return options && options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    if (!keys) return path;
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          pattern: null
        });
      }
    }

    return path;
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    return new RegExp('(?:' + parts.join('|') + ')', flags(options));
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);
    var delimiters = options.delimiters || DEFAULT_DELIMITERS;
    var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');
    var route = '';
    var isEndDelimited = false;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
        isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;
      } else {
        var prefix = escapeString(token.prefix);
        var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*' : token.pattern;
        if (keys) keys.push(token);

        if (token.optional) {
          if (token.partial) {
            route += prefix + '(' + capture + ')?';
          } else {
            route += '(?:' + prefix + '(' + capture + '))?';
          }
        } else {
          route += prefix + '(' + capture + ')';
        }
      }
    }

    if (end) {
      if (!strict) route += '(?:' + delimiter + ')?';
      route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
    } else {
      if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';
      if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';
    }

    return new RegExp('^' + route, flags(options));
  }

  function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (Array.isArray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},657,[],"path-to-regexp/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return null;
  };
},658,[],"react-native-router-flux/dist/Stack.js");
__d(function (global, require, module, exports, _dependencyMap) {
   Object.defineProperty(exports, "__esModule", {
      value: true
   });
   var images = {
      addIcon: require(_dependencyMap[0], './img/icn_add.png'),
      amaIcon: require(_dependencyMap[1], './img/icn_ama.png'),
      chevronIcon: require(_dependencyMap[2], './img/icn_Chevron.png'),
      newsIcon_pressed: require(_dependencyMap[3], './img/icn_news_pressed.png'),
      newsIcon: require(_dependencyMap[4], './img/icn_news.png'),
      priceIcon: require(_dependencyMap[5], './img/icn_price.png'),
      logo: require(_dependencyMap[6], './img/logo.png'),
      shareIcon: require(_dependencyMap[7], './img/share-arrow.png'),
      closeIcon: require(_dependencyMap[8], './img/icn_close.png'),
      imgHands: require(_dependencyMap[9], './img/img_hands.png'),
      imgCoins: require(_dependencyMap[10], './img/img_coins.png')
   };
   exports.default = images;
},659,[660,661,662,663,664,665,666,667,668,669,670],"@assets/images.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 232,
    "height": 100,
    "scales": [1, 2, 3],
    "hash": "bf83aac17d0aae19342fbc9d8dc5d8d6",
    "name": "icn_add",
    "type": "png"
  });
},660,[162],"src/assets/img/icn_add@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 60,
    "height": 48,
    "scales": [1, 2, 3],
    "hash": "79a703566d3f2bc081bb387292d27a1b",
    "name": "icn_ama",
    "type": "png"
  });
},661,[162],"src/assets/img/icn_ama@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 16,
    "height": 24,
    "scales": [1, 2, 3],
    "hash": "e5be8de9c5a265fcade96fac0bcd70ea",
    "name": "icn_Chevron",
    "type": "png"
  });
},662,[162],"src/assets/img/icn_Chevron@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 48,
    "height": 48,
    "scales": [1, 2, 3],
    "hash": "85dffeec7cde9c2eeacc9a11d7484de1",
    "name": "icn_news_pressed",
    "type": "png"
  });
},663,[162],"src/assets/img/icn_news_pressed@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 36,
    "height": 36,
    "scales": [2, 3],
    "hash": "6e2275ecc53afc2dc8fa049b01f82a7f",
    "name": "icn_news",
    "type": "png"
  });
},664,[162],"src/assets/img/icn_news@2x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 56,
    "height": 48,
    "scales": [1, 2, 3],
    "hash": "d9413b0ad5e88b146ee89ba090e27902",
    "name": "icn_price",
    "type": "png"
  });
},665,[162],"src/assets/img/icn_price@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/src/assets/img",
      "width": 313,
      "height": 52,
      "scales": [1, 2, 3],
      "hash": "95b21f35aa667cbf5756e51eb14baadf",
      "name": "logo",
      "type": "png"
   });
},666,[162],"src/assets/img/logo@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
   module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/src/assets/img",
      "width": 50,
      "height": 50,
      "scales": [1, 2, 3],
      "hash": "f6e6173ac1db84d82129c8ad8a4cb5ca",
      "name": "share-arrow",
      "type": "png"
   });
},667,[162],"src/assets/img/share-arrow@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 24,
    "height": 24,
    "scales": [1, 2, 3],
    "hash": "5a65c14e0e6b521205515bbb9e0bc3f8",
    "name": "icn_close",
    "type": "png"
  });
},668,[162],"src/assets/img/icn_close@1x.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 108,
    "height": 82,
    "scales": [1, 2, 3],
    "hash": "d636a5814602b4c3a13e2a8aa82eb9a0",
    "name": "img_hands",
    "type": "png"
  });
},669,[162],"src/assets/img/img_hands@1x.android.png");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/img",
    "width": 343,
    "height": 32,
    "scales": [1, 2, 3],
    "hash": "e6f6a3c9d2bf2be8529de8159caeab80",
    "name": "img_coins",
    "type": "png"
  });
},670,[162],"src/assets/img/img_coins@1x.png");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var colors = {
        gray50: 'rgb(250, 250, 250)',
        gray100: 'rgb(230, 230, 230)',
        gray200: 'rgb(217, 216, 216)',
        gray300: 'rgb(158, 158, 158)',
        gray500: 'rgb(142, 142, 142)',
        gray700: 'rgb(97, 97, 97)',
        gray900: 'rgb(33, 33, 33)',
        clear: 'rgba(255, 255, 255, 0.0)',
        gray100T: 'rgba(230, 230, 230, 0.2)',
        themeRed: 'rgb(229, 78, 82)',
        themeRedT: 'rgba(229, 78, 82, 0.1)',
        themeGreen: 'rgb(142, 204, 96)',
        themeGreenT: 'rgba(142, 204, 96, 0.1)',
        chartOrange: 'rgb(255, 235, 198)',
        chartBorderOrange: 'rgba(255, 191, 176, 0.2)',
        sponsoredYellow: 'rgba(248, 231, 28, 0.1)'
    };
    exports.default = colors;
},671,[],"@assets/colors.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Price/Price.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _CoinPairList = require(_dependencyMap[2], "./CoinPairList");

  var _CoinPairList2 = babelHelpers.interopRequireDefault(_CoinPairList);

  var _colors = require(_dependencyMap[3], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Rates = function Rates() {
    return _react2.default.createElement(
      _reactNative.View,
      {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      },
      _react2.default.createElement(_reactNative.StatusBar, {
        backgroundColor: _colors2.default.gray50,
        barStyle: "dark-content",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 11
        }
      }),
      _react2.default.createElement(_CoinPairList2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 15
        }
      })
    );
  };

  exports.default = Rates;
},672,[109,12,673,671],"NNCoins/src/components/Screens/Price/Price.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Price/CoinPairList.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _CoinPairRow = require(_dependencyMap[2], "./CoinPairRow");

    var _CoinPairRow2 = babelHelpers.interopRequireDefault(_CoinPairRow);

    var _CoinListHeader = require(_dependencyMap[3], "./CoinListHeader");

    var _CoinListHeader2 = babelHelpers.interopRequireDefault(_CoinListHeader);

    var _reactRedux = require(_dependencyMap[4], "react-redux");

    var _colors = require(_dependencyMap[5], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var _Constants = require(_dependencyMap[6], "./../../../Utils/Constants");

    var _reactNativeRouterFlux = require(_dependencyMap[7], "react-native-router-flux");

    var _FetchPriceData = require(_dependencyMap[8], "./../../../Actions/FetchPriceData");

    var _FetchPriceData2 = babelHelpers.interopRequireDefault(_FetchPriceData);

    var _reactNativeFirebase = require(_dependencyMap[9], "react-native-firebase");

    var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

    var ITEM_HEIGHT = 56;

    var CoinPairList = function (_Component) {
        babelHelpers.inherits(CoinPairList, _Component);

        function CoinPairList() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, CoinPairList);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CoinPairList.__proto__ || Object.getPrototypeOf(CoinPairList)).call.apply(_ref, [this].concat(args))), _this), _this.keyExtractor = function (item) {
                return item.id;
            }, _this.renderItem = function (_ref2) {
                var item = _ref2.item;
                return _react2.default.createElement(_CoinPairRow2.default, {
                    key: item.id,
                    coinName: item.name,
                    symbol: item.symbol,
                    priceUsd: item.price_usd.toFixed(2),
                    percentChange24h: item.percent_change_usd_7d.toFixed(2),
                    imageUrl: _Constants.NNBITCOINS_PRICE_BASE_URL + item.icon,
                    onPressItem: function onPressItem() {
                        _reactNativeFirebase2.default.analytics().logEvent('click_coin', {
                            coin: item.symbol
                        });
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 51
                    }
                });
            }, _this.renderSeparator = function () {
                return _react2.default.createElement(_reactNative.View, {
                    style: {
                        height: 1,
                        width: '95%',
                        backgroundColor: _colors2.default.gray100,
                        marginLeft: 16
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 66
                    }
                });
            }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(CoinPairList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                console.log('componentDidMount prices');
                this.props.fetchPriceData();
            }
        }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
                return this.props.coinList.data !== nextProps.coinList.data || this.props.priceData.data !== nextProps.priceData.data;
            }
        }, {
            key: "onRefresh",
            value: function onRefresh() {
                this.props.fetchPriceData();
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                console.log('RENDERING COIN LIST');
                var _props = this.props,
                    priceData = _props.priceData,
                    coinList = _props.coinList;
                return _react2.default.createElement(_reactNative.FlatList, {
                    onRefresh: function onRefresh() {
                        _reactNativeFirebase2.default.analytics().logEvent('pull_to_refresh_pricelist', {});

                        _this2.onRefresh();
                    },
                    refreshing: priceData.isFetching,
                    data: priceData.data,
                    extraData: coinList.data,
                    keyExtractor: this.keyExtractor,
                    renderItem: this.renderItem,
                    ItemSeparatorComponent: this.renderSeparator,
                    ListHeaderComponent: _CoinListHeader2.default,
                    getItemLayout: function getItemLayout(data, index) {
                        return {
                            length: ITEM_HEIGHT,
                            offset: ITEM_HEIGHT * index,
                            index: index
                        };
                    },
                    backgroundColor: 'white',
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 80
                    }
                });
            }
        }]);
        return CoinPairList;
    }(_react.Component);

    function mapStateToProps(state) {
        return {
            priceData: state.priceData,
            coinList: state.coinList
        };
    }

    exports.default = (0, _reactRedux.connect)(mapStateToProps, {
        fetchPriceData: _FetchPriceData2.default
    })(CoinPairList);
},673,[109,12,674,713,555,671,554,573,714,741],"NNCoins/src/components/Screens/Price/CoinPairList.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Price/CoinPairRow.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _colors = require(_dependencyMap[2], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var _reactNativeProgress = require(_dependencyMap[3], "react-native-progress");

    var Progress = babelHelpers.interopRequireWildcard(_reactNativeProgress);

    var _reactNativeImgCache = require(_dependencyMap[4], "react-native-img-cache");

    var CoinPairRow = function CoinPairRow(_ref) {
        var symbol = _ref.symbol,
            coinName = _ref.coinName,
            priceUsd = _ref.priceUsd,
            percentChange24h = _ref.percentChange24h,
            imageUrl = _ref.imageUrl,
            onPressItem = _ref.onPressItem;
        return _react2.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            {
                onPress: onPressItem,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 10
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: styles.container,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 12
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.coinContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 13
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.circleContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 14
                            }
                        },
                        _react2.default.createElement(_reactNativeImgCache.CachedImage, {
                            style: styles.image,
                            source: {
                                uri: imageUrl
                            },
                            indicator: Progress.CircleSnail,
                            indicatorProps: {
                                color: _colors2.default.themeRed
                            },
                            resizeMode: "contain",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 15
                            }
                        }),
                        _react2.default.createElement(_reactNative.View, {
                            style: {
                                position: 'absolute',
                                height: 56,
                                width: 56,
                                borderWidth: 10,
                                borderRadius: 28,
                                borderColor: _colors2.default.gray50
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 23
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.coinSymbol,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 26
                            }
                        },
                        symbol
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.seperator,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 27
                            }
                        },
                        "|"
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.coinName,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 28
                            }
                        },
                        coinName
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.priceContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 30
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.coinPrice,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 31
                            }
                        },
                        "$",
                        priceUsd
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: percentChange24h < 0 ? styles.priceChangeMinus : styles.priceChangePlus,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 32
                            }
                        },
                        percentChange24h,
                        "%"
                    )
                )
            )
        );
    };

    var styles = _reactNative.StyleSheet.create({
        container: {
            flexDirection: 'row',
            padding: 16,
            backgroundColor: _colors2.default.gray50,
            borderBottomWidth: 0,
            justifyContent: 'space-between'
        },
        coinContainer: {
            flexDirection: 'row'
        },
        circleContainer: {
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'center'
        },
        priceContainer: {
            flexDirection: 'row',
            justifyContent: 'flex-end'
        },
        coinSymbol: {
            marginTop: 10,
            marginLeft: 8,
            fontWeight: 'bold'
        },
        seperator: {
            marginTop: 10,
            marginLeft: 2
        },
        coinName: {
            marginTop: 10,
            marginLeft: 2
        },
        coinPrice: {
            marginTop: 10,
            fontWeight: 'bold'
        },
        image: {
            width: 36,
            height: 36,
            borderRadius: 18,
            overflow: 'hidden'
        },
        moneySymbol: {
            fontWeight: 'bold'
        },
        priceChangePlus: {
            color: _colors2.default.themeGreen,
            marginTop: 10,
            fontWeight: '400',
            width: 60,
            textAlign: 'right'
        },
        priceChangeMinus: {
            color: _colors2.default.themeRed,
            marginTop: 10,
            fontWeight: '400',
            width: 60,
            textAlign: 'right'
        }
    });

    exports.default = CoinPairRow;
},674,[109,12,671,675,684],"NNCoins/src/components/Screens/Price/CoinPairRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Bar = require(_dependencyMap[0], "./Bar");

  Object.defineProperty(exports, "Bar", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_Bar).default;
    }
  });

  var _Circle = require(_dependencyMap[1], "./Circle");

  Object.defineProperty(exports, "Circle", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_Circle).default;
    }
  });

  var _CircleSnail = require(_dependencyMap[2], "./CircleSnail");

  Object.defineProperty(exports, "CircleSnail", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_CircleSnail).default;
    }
  });

  var _Pie = require(_dependencyMap[3], "./Pie");

  Object.defineProperty(exports, "Pie", {
    enumerable: true,
    get: function get() {
      return babelHelpers.interopRequireDefault(_Pie).default;
    }
  });
},675,[676,677,680,681],"react-native-progress/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Bar.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var INDETERMINATE_WIDTH_FACTOR = 0.3;
  var BAR_WIDTH_ZERO_POSITION = INDETERMINATE_WIDTH_FACTOR / (1 + INDETERMINATE_WIDTH_FACTOR);
  var RNViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var ProgressBar = (_temp = _class = function (_Component) {
    babelHelpers.inherits(ProgressBar, _Component);

    function ProgressBar(props) {
      babelHelpers.classCallCheck(this, ProgressBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this, props));

      _this.handleLayout = function (event) {
        if (!_this.props.width) {
          _this.setState({
            width: event.nativeEvent.layout.width
          });
        }

        if (_this.props.onLayout) {
          _this.props.onLayout(event);
        }
      };

      var progress = Math.min(Math.max(props.progress, 0), 1);
      _this.state = {
        width: 0,
        progress: new _reactNative.Animated.Value(props.indeterminate ? INDETERMINATE_WIDTH_FACTOR : progress),
        animationValue: new _reactNative.Animated.Value(BAR_WIDTH_ZERO_POSITION)
      };
      return _this;
    }

    babelHelpers.createClass(ProgressBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.indeterminate) {
          this.animate();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        if (props.indeterminate !== this.props.indeterminate) {
          if (props.indeterminate) {
            this.animate();
          } else {
            _reactNative.Animated.spring(this.state.animationValue, {
              toValue: BAR_WIDTH_ZERO_POSITION,
              useNativeDriver: props.useNativeDriver
            }).start();
          }
        }

        if (props.indeterminate !== this.props.indeterminate || props.progress !== this.props.progress) {
          var progress = props.indeterminate ? INDETERMINATE_WIDTH_FACTOR : Math.min(Math.max(props.progress, 0), 1);

          if (props.animated) {
            var _props = this.props,
                animationType = _props.animationType,
                animationConfig = _props.animationConfig;

            _reactNative.Animated[animationType](this.state.progress, babelHelpers.extends({}, animationConfig, {
              toValue: progress,
              useNativeDriver: props.useNativeDriver
            })).start();
          } else {
            this.state.progress.setValue(progress);
          }
        }
      }
    }, {
      key: "animate",
      value: function animate() {
        var _this2 = this;

        this.state.animationValue.setValue(0);

        _reactNative.Animated.timing(this.state.animationValue, {
          toValue: 1,
          duration: 1000,
          easing: _reactNative.Easing.linear,
          isInteraction: false,
          useNativeDriver: this.props.useNativeDriver
        }).start(function (endState) {
          if (endState.finished) {
            _this2.animate();
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props2 = this.props,
            borderColor = _props2.borderColor,
            borderRadius = _props2.borderRadius,
            borderWidth = _props2.borderWidth,
            children = _props2.children,
            color = _props2.color,
            height = _props2.height,
            style = _props2.style,
            unfilledColor = _props2.unfilledColor,
            width = _props2.width,
            restProps = babelHelpers.objectWithoutProperties(_props2, ["borderColor", "borderRadius", "borderWidth", "children", "color", "height", "style", "unfilledColor", "width"]);
        var innerWidth = Math.max(0, width || this.state.width) - borderWidth * 2;
        var containerStyle = {
          width: width,
          borderWidth: borderWidth,
          borderColor: borderColor || color,
          borderRadius: borderRadius,
          overflow: 'hidden',
          backgroundColor: unfilledColor
        };
        var progressStyle = {
          backgroundColor: color,
          height: height,
          transform: [{
            translateX: this.state.animationValue.interpolate({
              inputRange: [0, 1],
              outputRange: [innerWidth * -INDETERMINATE_WIDTH_FACTOR, innerWidth]
            })
          }, {
            translateX: this.state.progress.interpolate({
              inputRange: [0, 1],
              outputRange: [innerWidth / -2, 0]
            })
          }, {
            scaleX: this.state.progress.interpolate({
              inputRange: [0, 1],
              outputRange: [0.0001, 1]
            })
          }]
        };
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({
            style: [containerStyle, style],
            onLayout: this.handleLayout
          }, restProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 169
            }
          }),
          _react2.default.createElement(_reactNative.Animated.View, {
            style: progressStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 170
            }
          }),
          children
        );
      }
    }]);
    return ProgressBar;
  }(_react.Component), _class.propTypes = {
    animated: _propTypes2.default.bool,
    borderColor: _propTypes2.default.string,
    borderRadius: _propTypes2.default.number,
    borderWidth: _propTypes2.default.number,
    children: _propTypes2.default.node,
    color: _propTypes2.default.string,
    height: _propTypes2.default.number,
    indeterminate: _propTypes2.default.bool,
    onLayout: _propTypes2.default.func,
    progress: _propTypes2.default.number,
    style: RNViewPropTypes.style,
    unfilledColor: _propTypes2.default.string,
    width: _propTypes2.default.number,
    useNativeDriver: _propTypes2.default.bool,
    animationConfig: _propTypes2.default.object.isRequired,
    animationType: _propTypes2.default.oneOf(['decay', 'timing', 'spring'])
  }, _class.defaultProps = {
    animated: true,
    borderRadius: 4,
    borderWidth: 1,
    color: 'rgba(0, 122, 255, 1)',
    height: 6,
    indeterminate: false,
    progress: 0,
    width: 150,
    useNativeDriver: false,
    animationConfig: {
      bounciness: 0
    },
    animationType: 'spring'
  }, _temp);
  exports.default = ProgressBar;
},676,[109,128,12],"react-native-progress/Bar.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressCircle = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Circle.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Arc = require(_dependencyMap[3], "./Shapes/Arc");

  var _Arc2 = babelHelpers.interopRequireDefault(_Arc);

  var _withAnimation = require(_dependencyMap[4], "./withAnimation");

  var _withAnimation2 = babelHelpers.interopRequireDefault(_withAnimation);

  var CIRCLE = Math.PI * 2;

  var AnimatedSurface = _reactNative.Animated.createAnimatedComponent(_reactNative.ART.Surface);

  var AnimatedArc = _reactNative.Animated.createAnimatedComponent(_Arc2.default);

  var RNViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'transparent',
      overflow: 'hidden'
    }
  });

  var ProgressCircle = exports.ProgressCircle = (_temp = _class = function (_Component) {
    babelHelpers.inherits(ProgressCircle, _Component);

    function ProgressCircle(props, context) {
      babelHelpers.classCallCheck(this, ProgressCircle);

      var _this = babelHelpers.possibleConstructorReturn(this, (ProgressCircle.__proto__ || Object.getPrototypeOf(ProgressCircle)).call(this, props, context));

      _this.progressValue = 0;
      return _this;
    }

    babelHelpers.createClass(ProgressCircle, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        if (this.props.animated) {
          this.props.progress.addListener(function (event) {
            _this2.progressValue = event.value;

            if (_this2.props.showsText || _this2.progressValue === 1) {
              _this2.forceUpdate();
            }
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            animated = _props.animated,
            borderColor = _props.borderColor,
            borderWidth = _props.borderWidth,
            color = _props.color,
            children = _props.children,
            direction = _props.direction,
            formatText = _props.formatText,
            indeterminate = _props.indeterminate,
            progress = _props.progress,
            rotation = _props.rotation,
            showsText = _props.showsText,
            size = _props.size,
            style = _props.style,
            strokeCap = _props.strokeCap,
            textStyle = _props.textStyle,
            thickness = _props.thickness,
            unfilledColor = _props.unfilledColor,
            restProps = babelHelpers.objectWithoutProperties(_props, ["animated", "borderColor", "borderWidth", "color", "children", "direction", "formatText", "indeterminate", "progress", "rotation", "showsText", "size", "style", "strokeCap", "textStyle", "thickness", "unfilledColor"]);
        var border = borderWidth || (indeterminate ? 1 : 0);
        var radius = size / 2 - border;
        var offset = {
          top: border,
          left: border
        };
        var textOffset = border + thickness;
        var textSize = size - textOffset * 2;
        var Surface = rotation ? AnimatedSurface : _reactNative.ART.Surface;
        var Shape = animated ? AnimatedArc : _Arc2.default;
        var progressValue = animated ? this.progressValue : progress;
        var angle = animated ? _reactNative.Animated.multiply(progress, CIRCLE) : progress * CIRCLE;
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({
            style: [styles.container, style]
          }, restProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          }),
          _react2.default.createElement(
            Surface,
            {
              width: size,
              height: size,
              style: {
                transform: [{
                  rotate: indeterminate && rotation ? rotation.interpolate({
                    inputRange: [0, 1],
                    outputRange: ['0deg', '360deg']
                  }) : '0deg'
                }]
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            unfilledColor && progressValue !== 1 ? _react2.default.createElement(Shape, {
              radius: radius,
              offset: offset,
              startAngle: angle,
              endAngle: CIRCLE,
              direction: direction,
              stroke: unfilledColor,
              strokeWidth: thickness,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 134
              }
            }) : false,
            !indeterminate ? _react2.default.createElement(Shape, {
              radius: radius,
              offset: offset,
              startAngle: 0,
              endAngle: angle,
              direction: direction,
              stroke: color,
              strokeCap: strokeCap,
              strokeWidth: thickness,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 145
              }
            }) : false,
            border ? _react2.default.createElement(_Arc2.default, {
              radius: size / 2,
              startAngle: 0,
              endAngle: (indeterminate ? 1.8 : 2) * Math.PI,
              stroke: borderColor || color,
              strokeCap: strokeCap,
              strokeWidth: border,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 157
              }
            }) : false
          ),
          !indeterminate && showsText ? _react2.default.createElement(
            _reactNative.View,
            {
              style: {
                position: 'absolute',
                left: textOffset,
                top: textOffset,
                width: textSize,
                height: textSize,
                borderRadius: textSize / 2,
                alignItems: 'center',
                justifyContent: 'center'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 168
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: [{
                  color: color,
                  fontSize: textSize / 4.5,
                  fontWeight: '300'
                }, textStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 180
                }
              },
              formatText(progressValue)
            )
          ) : false,
          children
        );
      }
    }]);
    return ProgressCircle;
  }(_react.Component), _class.propTypes = {
    animated: _propTypes2.default.bool,
    borderColor: _propTypes2.default.string,
    borderWidth: _propTypes2.default.number,
    color: _propTypes2.default.string,
    children: _propTypes2.default.node,
    direction: _propTypes2.default.oneOf(['clockwise', 'counter-clockwise']),
    formatText: _propTypes2.default.func,
    indeterminate: _propTypes2.default.bool,
    progress: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.instanceOf(_reactNative.Animated.Value)]),
    rotation: _propTypes2.default.instanceOf(_reactNative.Animated.Value),
    showsText: _propTypes2.default.bool,
    size: _propTypes2.default.number,
    style: RNViewPropTypes.style,
    textStyle: _reactNative.Text.propTypes.style,
    thickness: _propTypes2.default.number,
    unfilledColor: _propTypes2.default.string
  }, _class.defaultProps = {
    borderWidth: 1,
    color: 'rgba(0, 122, 255, 1)',
    direction: 'clockwise',
    formatText: function formatText(progress) {
      return Math.round(progress * 100) + "%";
    },
    progress: 0,
    showsText: false,
    size: 40,
    thickness: 3
  }, _temp);
  exports.default = (0, _withAnimation2.default)(ProgressCircle);
},677,[109,128,12,678,679],"react-native-progress/Circle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Shapes/Arc.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var CIRCLE = Math.PI * 2;

  function makeArcPath(x, y, startAngleArg, endAngleArg, radius, direction) {
    var startAngle = startAngleArg;
    var endAngle = endAngleArg;

    if (endAngle - startAngle >= CIRCLE) {
      endAngle = CIRCLE + endAngle % CIRCLE;
    } else {
      endAngle = endAngle % CIRCLE;
    }

    startAngle = startAngle % CIRCLE;
    var angle = startAngle > endAngle ? CIRCLE - startAngle + endAngle : endAngle - startAngle;

    if (angle >= CIRCLE) {
      return _reactNative.ART.Path().moveTo(x + radius, y).arc(0, radius * 2, radius, radius).arc(0, radius * -2, radius, radius).close();
    }

    var directionFactor = direction === 'counter-clockwise' ? -1 : 1;
    endAngle *= directionFactor;
    startAngle *= directionFactor;
    var startSine = Math.sin(startAngle);
    var startCosine = Math.cos(startAngle);
    var endSine = Math.sin(endAngle);
    var endCosine = Math.cos(endAngle);
    var arcFlag = angle > Math.PI ? 1 : 0;
    var reverseFlag = direction === 'counter-clockwise' ? 0 : 1;
    return "M" + (x + radius * (1 + startSine)) + " " + (y + radius - radius * startCosine) + "\n          A" + radius + " " + radius + " 0 " + arcFlag + " " + reverseFlag + " " + (x + radius * (1 + endSine)) + " " + (y + radius - radius * endCosine);
  }

  var Arc = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Arc, _Component);

    function Arc() {
      babelHelpers.classCallCheck(this, Arc);
      return babelHelpers.possibleConstructorReturn(this, (Arc.__proto__ || Object.getPrototypeOf(Arc)).apply(this, arguments));
    }

    babelHelpers.createClass(Arc, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            startAngle = _props.startAngle,
            endAngle = _props.endAngle,
            radius = _props.radius,
            offset = _props.offset,
            direction = _props.direction,
            strokeCap = _props.strokeCap,
            strokeWidth = _props.strokeWidth,
            restProps = babelHelpers.objectWithoutProperties(_props, ["startAngle", "endAngle", "radius", "offset", "direction", "strokeCap", "strokeWidth"]);
        var path = makeArcPath((offset.left || 0) + strokeWidth / 2, (offset.top || 0) + strokeWidth / 2, startAngle, endAngle, radius - strokeWidth / 2, direction);
        return _react2.default.createElement(_reactNative.ART.Shape, babelHelpers.extends({
          d: path,
          strokeCap: strokeCap,
          strokeWidth: strokeWidth
        }, restProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        }));
      }
    }]);
    return Arc;
  }(_react.Component), _class.propTypes = {
    startAngle: _propTypes2.default.number.isRequired,
    endAngle: _propTypes2.default.number.isRequired,
    radius: _propTypes2.default.number.isRequired,
    offset: _propTypes2.default.shape({
      top: _propTypes2.default.number,
      left: _propTypes2.default.number
    }),
    strokeCap: _propTypes2.default.string,
    strokeWidth: _propTypes2.default.number,
    direction: _propTypes2.default.oneOf(['clockwise', 'counter-clockwise'])
  }, _class.defaultProps = {
    startAngle: 0,
    offset: {
      top: 0,
      left: 0
    },
    strokeCap: 'butt',
    strokeWidth: 0,
    direction: 'clockwise'
  }, _temp);
  exports.default = Arc;
},678,[109,128,12],"react-native-progress/Shapes/Arc.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/withAnimation.js";
  exports.default = withAnimation;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  function withAnimation(WrappedComponent, indeterminateProgress) {
    var _class, _temp;

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    return _temp = _class = function (_Component) {
      babelHelpers.inherits(AnimatedComponent, _Component);

      function AnimatedComponent(props) {
        babelHelpers.classCallCheck(this, AnimatedComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this.progressValue = Math.min(Math.max(props.progress, 0), 1);
        _this.rotationValue = 0;
        _this.state = {
          progress: new _reactNative.Animated.Value(_this.progressValue),
          rotation: new _reactNative.Animated.Value(_this.rotationValue)
        };
        return _this;
      }

      babelHelpers.createClass(AnimatedComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this.state.progress.addListener(function (event) {
            _this2.progressValue = event.value;
          });
          this.state.rotation.addListener(function (event) {
            _this2.rotationValue = event.value;
          });

          if (this.props.indeterminate) {
            this.spin();

            if (indeterminateProgress) {
              _reactNative.Animated.spring(this.state.progress, {
                toValue: indeterminateProgress
              }).start();
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.state.progress.removeAllListeners();
          this.state.rotation.removeAllListeners();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(props) {
          var _this3 = this;

          if (props.indeterminate !== this.props.indeterminate) {
            if (props.indeterminate) {
              this.spin();
            } else {
              _reactNative.Animated.spring(this.state.rotation, {
                toValue: this.rotationValue > 0.5 ? 1 : 0
              }).start(function (endState) {
                if (endState.finished) {
                  _this3.state.rotation.setValue(0);
                }
              });
            }
          }

          var progress = props.indeterminate ? indeterminateProgress || 0 : Math.min(Math.max(props.progress, 0), 1);

          if (progress !== this.progressValue) {
            if (props.animated) {
              _reactNative.Animated.spring(this.state.progress, {
                toValue: progress,
                bounciness: 0
              }).start();
            } else {
              this.state.progress.setValue(progress);
            }
          }
        }
      }, {
        key: "spin",
        value: function spin() {
          var _this4 = this;

          this.state.rotation.setValue(0);

          _reactNative.Animated.timing(this.state.rotation, {
            toValue: this.props.direction === 'counter-clockwise' ? -1 : 1,
            duration: 1000,
            easing: _reactNative.Easing.linear,
            isInteraction: false
          }).start(function (endState) {
            if (endState.finished) {
              _this4.spin();
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, {
            progress: this.props.animated ? this.state.progress : this.props.progress,
            rotation: this.state.rotation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 104
            }
          }));
        }
      }]);
      return AnimatedComponent;
    }(_react.Component), _class.displayName = "withAnimation(" + wrappedComponentName + ")", _class.propTypes = {
      animated: _propTypes2.default.bool,
      direction: _propTypes2.default.oneOf(['clockwise', 'counter-clockwise']),
      indeterminate: _propTypes2.default.bool,
      progress: _propTypes2.default.number.isRequired
    }, _class.defaultProps = {
      animated: true,
      indeterminate: false,
      progress: 0
    }, _temp;
  }
},679,[109,128,12],"react-native-progress/withAnimation.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/CircleSnail.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Arc = require(_dependencyMap[3], "./Shapes/Arc");

  var _Arc2 = babelHelpers.interopRequireDefault(_Arc);

  var AnimatedArc = _reactNative.Animated.createAnimatedComponent(_Arc2.default);

  var MIN_ARC_ANGLE = 0.1;
  var MAX_ARC_ANGLE = 1.5 * Math.PI;
  var RNViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var CircleSnail = (_temp = _class = function (_Component) {
    babelHelpers.inherits(CircleSnail, _Component);

    function CircleSnail(props) {
      babelHelpers.classCallCheck(this, CircleSnail);

      var _this = babelHelpers.possibleConstructorReturn(this, (CircleSnail.__proto__ || Object.getPrototypeOf(CircleSnail)).call(this, props));

      _this.state = {
        startAngle: new _reactNative.Animated.Value(-MIN_ARC_ANGLE),
        endAngle: new _reactNative.Animated.Value(0),
        rotation: new _reactNative.Animated.Value(0),
        colorIndex: 0
      };
      return _this;
    }

    babelHelpers.createClass(CircleSnail, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.animating) {
          this.animate();
          this.spin();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        if (props.animating !== this.props.animating) {
          if (props.animating) {
            this.animate();
            this.spin();
          } else {
            this.stopAnimations();
          }
        }
      }
    }, {
      key: "animate",
      value: function animate() {
        var _this2 = this;

        var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.startAngle, {
          toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,
          duration: this.props.duration || 1000,
          isInteraction: false,
          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad)
        }), _reactNative.Animated.timing(this.state.endAngle, {
          toValue: -MAX_ARC_ANGLE * iteration,
          duration: this.props.duration || 1000,
          isInteraction: false,
          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad)
        })]).start(function (endState) {
          if (endState.finished) {
            if (Array.isArray(_this2.props.color)) {
              _this2.setState({
                colorIndex: iteration % _this2.props.color.length
              });
            }

            _this2.animate(iteration + 1);
          }
        });
      }
    }, {
      key: "spin",
      value: function spin() {
        var _this3 = this;

        _reactNative.Animated.timing(this.state.rotation, {
          toValue: 1,
          duration: this.props.spinDuration || 5000,
          easing: _reactNative.Easing.linear,
          isInteraction: false
        }).start(function (endState) {
          if (endState.finished) {
            _this3.state.rotation.setValue(0);

            _this3.spin();
          }
        });
      }
    }, {
      key: "stopAnimations",
      value: function stopAnimations() {
        this.state.startAngle.stopAnimation();
        this.state.endAngle.stopAnimation();
        this.state.rotation.stopAnimation();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            animating = _props.animating,
            children = _props.children,
            color = _props.color,
            direction = _props.direction,
            hidesWhenStopped = _props.hidesWhenStopped,
            size = _props.size,
            style = _props.style,
            thickness = _props.thickness,
            strokeCap = _props.strokeCap,
            restProps = babelHelpers.objectWithoutProperties(_props, ["animating", "children", "color", "direction", "hidesWhenStopped", "size", "style", "thickness", "strokeCap"]);

        if (!animating && hidesWhenStopped) {
          return null;
        }

        var radius = size / 2 - thickness;
        var offset = {
          top: thickness,
          left: thickness
        };
        var directionFactor = direction === 'counter-clockwise' ? -1 : 1;
        return _react2.default.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({}, restProps, {
            style: [style, {
              backgroundColor: 'transparent',
              overflow: 'hidden',
              transform: [{
                rotate: this.state.rotation.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0deg', directionFactor * 360 + "deg"]
                })
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 150
            }
          }),
          _react2.default.createElement(
            _reactNative.ART.Surface,
            {
              width: size,
              height: size,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 166
              }
            },
            _react2.default.createElement(AnimatedArc, {
              direction: direction === 'counter-clockwise' ? 'clockwise' : 'counter-clockwise',
              radius: radius,
              stroke: Array.isArray(color) ? color[this.state.colorIndex] : color,
              offset: offset,
              startAngle: this.state.startAngle,
              endAngle: this.state.endAngle,
              strokeCap: strokeCap,
              strokeWidth: thickness,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 170
              }
            })
          ),
          children
        );
      }
    }]);
    return CircleSnail;
  }(_react.Component), _class.propTypes = {
    animating: _propTypes2.default.bool,
    color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    children: _propTypes2.default.node,
    direction: _propTypes2.default.oneOf(['clockwise', 'counter-clockwise']),
    duration: _propTypes2.default.number,
    hidesWhenStopped: _propTypes2.default.bool,
    size: _propTypes2.default.number,
    spinDuration: _propTypes2.default.number,
    style: RNViewPropTypes.style,
    thickness: _propTypes2.default.number,
    strokeCap: _propTypes2.default.string
  }, _class.defaultProps = {
    animating: true,
    color: 'rgba(0, 122, 255, 1)',
    direction: 'counter-clockwise',
    hidesWhenStopped: false,
    size: 40,
    thickness: 3,
    strokeCap: 'round'
  }, _temp);
  exports.default = CircleSnail;
},680,[109,128,12,678],"react-native-progress/CircleSnail.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressPie = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Pie.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Circle = require(_dependencyMap[3], "./Shapes/Circle");

  var _Circle2 = babelHelpers.interopRequireDefault(_Circle);

  var _Sector = require(_dependencyMap[4], "./Shapes/Sector");

  var _Sector2 = babelHelpers.interopRequireDefault(_Sector);

  var _withAnimation = require(_dependencyMap[5], "./withAnimation");

  var _withAnimation2 = babelHelpers.interopRequireDefault(_withAnimation);

  var CIRCLE = Math.PI * 2;

  var AnimatedSurface = _reactNative.Animated.createAnimatedComponent(_reactNative.ART.Surface);

  var AnimatedSector = _reactNative.Animated.createAnimatedComponent(_Sector2.default);

  var RNViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'transparent',
      overflow: 'hidden'
    }
  });

  var ProgressPie = exports.ProgressPie = (_temp = _class = function (_Component) {
    babelHelpers.inherits(ProgressPie, _Component);

    function ProgressPie() {
      babelHelpers.classCallCheck(this, ProgressPie);
      return babelHelpers.possibleConstructorReturn(this, (ProgressPie.__proto__ || Object.getPrototypeOf(ProgressPie)).apply(this, arguments));
    }

    babelHelpers.createClass(ProgressPie, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            animated = _props.animated,
            borderColor = _props.borderColor,
            borderWidth = _props.borderWidth,
            children = _props.children,
            color = _props.color,
            progress = _props.progress,
            rotation = _props.rotation,
            size = _props.size,
            style = _props.style,
            unfilledColor = _props.unfilledColor,
            restProps = babelHelpers.objectWithoutProperties(_props, ["animated", "borderColor", "borderWidth", "children", "color", "progress", "rotation", "size", "style", "unfilledColor"]);
        var Surface = rotation ? AnimatedSurface : _reactNative.ART.Surface;
        var Shape = animated ? AnimatedSector : _Sector2.default;
        var angle = animated ? _reactNative.Animated.multiply(progress, CIRCLE) : progress * CIRCLE;
        var radius = size / 2 - borderWidth;
        var offset = {
          top: borderWidth,
          left: borderWidth
        };
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({
            style: [styles.container, style]
          }, restProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80
            }
          }),
          _react2.default.createElement(
            Surface,
            {
              width: size,
              height: size,
              style: rotation ? {
                transform: [{
                  rotate: rotation.interpolate({
                    inputRange: [0, 1],
                    outputRange: ['0deg', '360deg']
                  })
                }]
              } : undefined,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 81
              }
            },
            unfilledColor ? _react2.default.createElement(_Circle2.default, {
              radius: radius,
              offset: offset,
              fill: unfilledColor,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 94
              }
            }) : false,
            _react2.default.createElement(Shape, {
              radius: radius,
              angle: angle,
              offset: offset,
              fill: color,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 100
              }
            }),
            borderWidth ? _react2.default.createElement(_Circle2.default, {
              radius: size / 2,
              stroke: borderColor || color,
              strokeWidth: borderWidth,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 107
              }
            }) : false
          ),
          children
        );
      }
    }]);
    return ProgressPie;
  }(_react.Component), _class.propTypes = {
    animated: _propTypes2.default.bool,
    borderColor: _propTypes2.default.string,
    borderWidth: _propTypes2.default.number,
    color: _propTypes2.default.string,
    children: _propTypes2.default.node,
    progress: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.instanceOf(_reactNative.Animated.Value)]),
    rotation: _propTypes2.default.instanceOf(_reactNative.Animated.Value),
    size: _propTypes2.default.number,
    style: RNViewPropTypes.style,
    unfilledColor: _propTypes2.default.string
  }, _class.defaultProps = {
    borderWidth: 1,
    color: 'rgba(0, 122, 255, 1)',
    progress: 0,
    size: 40
  }, _temp);
  exports.default = (0, _withAnimation2.default)(ProgressPie, 0.2);
},681,[109,128,12,682,683,679],"react-native-progress/Pie.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Shapes/Circle.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  function makeCirclePath(x, y, radius, direction) {
    var arcMethod = direction === 'counter-clockwise' ? 'counterArc' : 'arc';
    return _reactNative.ART.Path().moveTo(x, y).move(radius, 0)[arcMethod](0, radius * 2, radius, radius)[arcMethod](0, radius * -2, radius, radius).close();
  }

  var Circle = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Circle, _Component);

    function Circle() {
      babelHelpers.classCallCheck(this, Circle);
      return babelHelpers.possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).apply(this, arguments));
    }

    babelHelpers.createClass(Circle, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            radius = _props.radius,
            offset = _props.offset,
            strokeWidth = _props.strokeWidth,
            direction = _props.direction,
            restProps = babelHelpers.objectWithoutProperties(_props, ["radius", "offset", "strokeWidth", "direction"]);
        var path = makeCirclePath((offset.left || 0) + strokeWidth / 2, (offset.top || 0) + strokeWidth / 2, radius - strokeWidth / 2, direction);
        return _react2.default.createElement(_reactNative.ART.Shape, babelHelpers.extends({
          d: path,
          strokeCap: "butt",
          strokeWidth: strokeWidth
        }, restProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 45
          }
        }));
      }
    }]);
    return Circle;
  }(_react.Component), _class.propTypes = {
    radius: _propTypes2.default.number.isRequired,
    offset: _propTypes2.default.shape({
      top: _propTypes2.default.number,
      left: _propTypes2.default.number
    }),
    strokeWidth: _propTypes2.default.number,
    direction: _propTypes2.default.oneOf(['clockwise', 'counter-clockwise'])
  }, _class.defaultProps = {
    offset: {
      top: 0,
      left: 0
    },
    strokeWidth: 0,
    direction: 'clockwise'
  }, _temp);
  exports.default = Circle;
},682,[109,128,12],"react-native-progress/Shapes/Circle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-progress/Shapes/Sector.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var CIRCLE = Math.PI * 2;

  function makeSectorPath(x, y, angle, radius) {
    if (angle >= CIRCLE) {
      return _reactNative.ART.Path().moveTo(x, y).move(radius, 0).arc(0, radius * 2, radius, radius).arc(0, radius * -2, radius, radius).close();
    }

    var startAngle = Math.PI / 2 - angle;
    var endAngle = Math.PI / 2;
    var arcFlag = angle > Math.PI ? 1 : 0;
    var centerX = x + radius;
    var centerY = y + radius;
    return "M" + centerX + " " + centerY + "\n          L" + (centerX + Math.cos(startAngle) * radius) + " " + (centerY - Math.sin(startAngle) * radius) + "\n          A" + radius + " " + radius + " 0 " + arcFlag + " 0 " + (centerX + Math.cos(endAngle) * radius) + " " + (centerY - Math.sin(endAngle) * radius) + "\n          L" + centerX + " " + centerY;
  }

  var Sector = (_temp = _class = function (_Component) {
    babelHelpers.inherits(Sector, _Component);

    function Sector() {
      babelHelpers.classCallCheck(this, Sector);
      return babelHelpers.possibleConstructorReturn(this, (Sector.__proto__ || Object.getPrototypeOf(Sector)).apply(this, arguments));
    }

    babelHelpers.createClass(Sector, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            angle = _props.angle,
            radius = _props.radius,
            offset = _props.offset,
            restProps = babelHelpers.objectWithoutProperties(_props, ["angle", "radius", "offset"]);
        var path = makeSectorPath(offset.left || 0, offset.top || 0, angle, radius);
        return _react2.default.createElement(_reactNative.ART.Shape, babelHelpers.extends({
          d: path
        }, restProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        }));
      }
    }]);
    return Sector;
  }(_react.Component), _class.propTypes = {
    angle: _propTypes2.default.number.isRequired,
    radius: _propTypes2.default.number.isRequired,
    offset: _propTypes2.default.shape({
      top: _propTypes2.default.number,
      left: _propTypes2.default.number
    })
  }, _class.defaultProps = {
    offset: {
      top: 0,
      left: 0
    }
  }, _temp);
  exports.default = Sector;
},683,[109,128,12],"react-native-progress/Shapes/Sector.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.CustomCachedImage = exports.CachedImageBackground = exports.CachedImage = exports.BaseCachedImage = exports.ImageCache = undefined;

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _reactNativeFetchBlob = require(_dependencyMap[2], "react-native-fetch-blob");

    var _reactNativeFetchBlob2 = babelHelpers.interopRequireDefault(_reactNativeFetchBlob);

    var SHA1 = require(_dependencyMap[3], "crypto-js/sha1");

    var s4 = function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };

    var BASE_DIR = _reactNativeFetchBlob2.default.fs.dirs.CacheDir + "/react-native-img-cache";
    var FILE_PREFIX = _reactNative.Platform.OS === "ios" ? "" : "file://";

    var ImageCache = exports.ImageCache = function () {
        function ImageCache() {
            babelHelpers.classCallCheck(this, ImageCache);
            this.cache = {};
        }

        babelHelpers.createClass(ImageCache, [{
            key: "getPath",
            value: function getPath(uri, immutable) {
                var path = uri.substring(uri.lastIndexOf("/"));
                path = path.indexOf("?") === -1 ? path : path.substring(path.lastIndexOf("."), path.indexOf("?"));
                var ext = path.indexOf(".") === -1 ? ".jpg" : path.substring(path.indexOf("."));

                if (immutable === true) {
                    return BASE_DIR + "/" + SHA1(uri) + ext;
                } else {
                    return BASE_DIR + "/" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4() + ext;
                }
            }
        }, {
            key: "clear",
            value: function clear() {
                this.cache = {};
                return _reactNativeFetchBlob2.default.fs.unlink(BASE_DIR);
            }
        }, {
            key: "on",
            value: function on(source, handler, immutable) {
                var uri = source.uri;

                if (!this.cache[uri]) {
                    this.cache[uri] = {
                        source: source,
                        downloading: false,
                        handlers: [handler],
                        immutable: immutable === true,
                        path: immutable === true ? this.getPath(uri, immutable) : undefined
                    };
                } else {
                    this.cache[uri].handlers.push(handler);
                }

                this.get(uri);
            }
        }, {
            key: "dispose",
            value: function dispose(uri, handler) {
                var cache = this.cache[uri];

                if (cache) {
                    cache.handlers.forEach(function (h, index) {
                        if (h === handler) {
                            cache.handlers.splice(index, 1);
                        }
                    });
                }
            }
        }, {
            key: "bust",
            value: function bust(uri) {
                var cache = this.cache[uri];

                if (cache !== undefined && !cache.immutable) {
                    cache.path = undefined;
                    this.get(uri);
                }
            }
        }, {
            key: "cancel",
            value: function cancel(uri) {
                var cache = this.cache[uri];

                if (cache && cache.downloading) {
                    cache.task.cancel();
                }
            }
        }, {
            key: "download",
            value: function download(cache) {
                var _this = this;

                var source = cache.source;
                var uri = source.uri;

                if (!cache.downloading) {
                    var path = this.getPath(uri, cache.immutable);
                    cache.downloading = true;
                    var method = source.method ? source.method : "GET";
                    cache.task = _reactNativeFetchBlob2.default.config({
                        path: path
                    }).fetch(method, uri, source.headers);
                    cache.task.then(function () {
                        cache.downloading = false;
                        cache.path = path;

                        _this.notify(uri);
                    }).catch(function () {
                        cache.downloading = false;

                        _reactNativeFetchBlob2.default.fs.unlink(path);
                    });
                }
            }
        }, {
            key: "get",
            value: function get(uri) {
                var _this2 = this;

                var cache = this.cache[uri];

                if (cache.path) {
                    _reactNativeFetchBlob2.default.fs.exists(cache.path).then(function (exists) {
                        if (exists) {
                            _this2.notify(uri);
                        } else {
                            _this2.download(cache);
                        }
                    });
                } else {
                    this.download(cache);
                }
            }
        }, {
            key: "notify",
            value: function notify(uri) {
                var _this3 = this;

                var handlers = this.cache[uri].handlers;
                handlers.forEach(function (handler) {
                    handler(_this3.cache[uri].path);
                });
            }
        }], [{
            key: "get",
            value: function get() {
                if (!ImageCache.instance) {
                    ImageCache.instance = new ImageCache();
                }

                return ImageCache.instance;
            }
        }]);
        return ImageCache;
    }();

    var BaseCachedImage = exports.BaseCachedImage = function (_Component) {
        babelHelpers.inherits(BaseCachedImage, _Component);

        function BaseCachedImage() {
            babelHelpers.classCallCheck(this, BaseCachedImage);

            var _this4 = babelHelpers.possibleConstructorReturn(this, (BaseCachedImage.__proto__ || Object.getPrototypeOf(BaseCachedImage)).apply(this, arguments));

            _this4.handler = function (path) {
                _this4.setState({
                    path: path
                });
            };

            return _this4;
        }

        babelHelpers.createClass(BaseCachedImage, [{
            key: "dispose",
            value: function dispose() {
                if (this.uri) {
                    ImageCache.get().dispose(this.uri, this.handler);
                }
            }
        }, {
            key: "observe",
            value: function observe(source, mutable) {
                if (source.uri !== this.uri) {
                    this.dispose();
                    this.uri = source.uri;
                    ImageCache.get().on(source, this.handler, !mutable);
                }
            }
        }, {
            key: "getProps",
            value: function getProps() {
                var _this5 = this;

                var props = {};
                Object.keys(this.props).forEach(function (prop) {
                    if (prop === "source" && _this5.props.source.uri) {
                        props["source"] = _this5.state.path ? {
                            uri: FILE_PREFIX + _this5.state.path
                        } : {};
                    } else if (["mutable", "component"].indexOf(prop) === -1) {
                        props[prop] = _this5.props[prop];
                    }
                });
                return props;
            }
        }, {
            key: "checkSource",
            value: function checkSource(source) {
                if (Array.isArray(source)) {
                    throw new Error("Giving multiple URIs to CachedImage is not yet supported.\n            If you want to see this feature supported, please file and issue at\n             https://github.com/wcandillon/react-native-img-cache");
                }

                return source;
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {
                var mutable = this.props.mutable;
                var source = this.checkSource(this.props.source);
                this.setState({
                    path: undefined
                });

                if (typeof source !== "number" && source.uri) {
                    this.observe(source, mutable === true);
                }
            }
        }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                var mutable = nextProps.mutable;
                var source = this.checkSource(nextProps.source);

                if (typeof source !== "number" && source.uri) {
                    this.observe(source, mutable === true);
                }
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.dispose();
            }
        }]);
        return BaseCachedImage;
    }(_react.Component);

    var CachedImage = exports.CachedImage = function (_BaseCachedImage) {
        babelHelpers.inherits(CachedImage, _BaseCachedImage);

        function CachedImage() {
            babelHelpers.classCallCheck(this, CachedImage);
            return babelHelpers.possibleConstructorReturn(this, (CachedImage.__proto__ || Object.getPrototypeOf(CachedImage)).apply(this, arguments));
        }

        babelHelpers.createClass(CachedImage, [{
            key: "render",
            value: function render() {
                var props = this.getProps();

                if (_react2.default.Children.count(this.props.children) > 0) {
                    console.warn("Using <CachedImage> with children is deprecated, use <CachedImageBackground> instead.");
                }

                return _react2.default.createElement(_reactNative.Image, babelHelpers.extends({}, props), this.props.children);
            }
        }]);
        return CachedImage;
    }(BaseCachedImage);

    var CachedImageBackground = exports.CachedImageBackground = function (_BaseCachedImage2) {
        babelHelpers.inherits(CachedImageBackground, _BaseCachedImage2);

        function CachedImageBackground() {
            babelHelpers.classCallCheck(this, CachedImageBackground);
            return babelHelpers.possibleConstructorReturn(this, (CachedImageBackground.__proto__ || Object.getPrototypeOf(CachedImageBackground)).apply(this, arguments));
        }

        babelHelpers.createClass(CachedImageBackground, [{
            key: "render",
            value: function render() {
                var props = this.getProps();
                return _react2.default.createElement(_reactNative.ImageBackground, babelHelpers.extends({}, props), this.props.children);
            }
        }]);
        return CachedImageBackground;
    }(BaseCachedImage);

    var CustomCachedImage = exports.CustomCachedImage = function (_BaseCachedImage3) {
        babelHelpers.inherits(CustomCachedImage, _BaseCachedImage3);

        function CustomCachedImage() {
            babelHelpers.classCallCheck(this, CustomCachedImage);
            return babelHelpers.possibleConstructorReturn(this, (CustomCachedImage.__proto__ || Object.getPrototypeOf(CustomCachedImage)).apply(this, arguments));
        }

        babelHelpers.createClass(CustomCachedImage, [{
            key: "render",
            value: function render() {
                var component = this.props.component;
                var props = this.getProps();
                var Component = component;
                return _react2.default.createElement(Component, babelHelpers.extends({}, props), this.props.children);
            }
        }]);
        return CustomCachedImage;
    }(BaseCachedImage);
},684,[109,12,685,711],"react-native-img-cache/build/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _uri = require(_dependencyMap[1], "./utils/uri");

  var _uri2 = babelHelpers.interopRequireDefault(_uri);

  var _StatefulPromise = require(_dependencyMap[2], "./class/StatefulPromise.js");

  var _StatefulPromise2 = babelHelpers.interopRequireDefault(_StatefulPromise);

  var _fs = require(_dependencyMap[3], "./fs");

  var _fs2 = babelHelpers.interopRequireDefault(_fs);

  var _uuid = require(_dependencyMap[4], "./utils/uuid");

  var _uuid2 = babelHelpers.interopRequireDefault(_uuid);

  var _base = require(_dependencyMap[5], "base-64");

  var _base2 = babelHelpers.interopRequireDefault(_base);

  var _polyfill = require(_dependencyMap[6], "./polyfill");

  var _polyfill2 = babelHelpers.interopRequireDefault(_polyfill);

  var _lodash = require(_dependencyMap[7], "lodash");

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _android = require(_dependencyMap[8], "./android");

  var _android2 = babelHelpers.interopRequireDefault(_android);

  var _ios = require(_dependencyMap[9], "./ios");

  var _ios2 = babelHelpers.interopRequireDefault(_ios);

  var _jsonStream = require(_dependencyMap[10], "./json-stream");

  var _jsonStream2 = babelHelpers.interopRequireDefault(_jsonStream);

  var RNFetchBlobSession = _fs2.default.RNFetchBlobSession,
      readStream = _fs2.default.readStream,
      createFile = _fs2.default.createFile,
      unlink = _fs2.default.unlink,
      exists = _fs2.default.exists,
      mkdir = _fs2.default.mkdir,
      session = _fs2.default.session,
      writeStream = _fs2.default.writeStream,
      readFile = _fs2.default.readFile,
      ls = _fs2.default.ls,
      isDir = _fs2.default.isDir,
      mv = _fs2.default.mv,
      cp = _fs2.default.cp;
  var Blob = _polyfill2.default.Blob;
  var emitter = _reactNative.DeviceEventEmitter;
  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  if (_reactNative.Platform.OS === 'ios') {
    _reactNative.AppState.addEventListener('change', function (e) {
      if (e === 'active') RNFetchBlob.emitExpiredEvent(function () {});
    });
  }

  emitter.addListener("RNFetchBlobMessage", function (e) {
    if (e.event === 'warn') {
      console.warn(e.detail);
    } else if (e.event === 'error') {
      throw e.detail;
    } else {
      console.log("RNFetchBlob native message", e.detail);
    }
  });

  if (!RNFetchBlob || !RNFetchBlob.fetchBlobForm || !RNFetchBlob.fetchBlob) {
    console.warn('react-native-fetch-blob could not find valid native module.', 'please make sure you have linked native modules using `rnpm link`,', 'and restart RN packager or manually compile IOS/Android project.');
  }

  function wrap(path) {
    return 'RNFetchBlob-file://' + path;
  }

  function config(options) {
    return {
      fetch: fetch.bind(options)
    };
  }

  function fetchFile() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var method = arguments[1];
    var url = arguments[2];
    var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var body = arguments[4];

    if (!_uri2.default.isFileURI(url)) {
      throw "could not fetch file from an invalid URI : " + url;
    }

    url = _uri2.default.unwrapFileURI(url);
    var promise = null;
    var cursor = 0;
    var total = -1;
    var cacheData = '';
    var info = null;

    var _progress = void 0,
        _uploadProgress = void 0,
        _stateChange = void 0;

    switch (method.toLowerCase()) {
      case 'post':
        break;

      case 'put':
        break;

      default:
        promise = _fs2.default.stat(url).then(function (stat) {
          total = stat.size;
          return _fs2.default.readStream(url, headers.encoding || 'utf8', Math.floor(headers.bufferSize) || 409600, Math.floor(headers.interval) || 100);
        }).then(function (stream) {
          return new Promise(function (resolve, reject) {
            stream.open();
            info = {
              state: "2",
              headers: {
                'source': 'system-fs'
              },
              status: 200,
              respType: 'text',
              rnfbEncode: headers.encoding || 'utf8'
            };

            _stateChange(info);

            stream.onData(function (chunk) {
              _progress && _progress(cursor, total, chunk);
              if (headers.noCache) return;
              cacheData += chunk;
            });
            stream.onError(function (err) {
              reject(err);
            });
            stream.onEnd(function () {
              resolve(new FetchBlobResponse(null, info, cacheData));
            });
          });
        });
        break;
    }

    promise.progress = function (fn) {
      _progress = fn;
      return promise;
    };

    promise.stateChange = function (fn) {
      _stateChange = fn;
      return promise;
    };

    promise.uploadProgress = function (fn) {
      _uploadProgress = fn;
      return promise;
    };

    return promise;
  }

  function fetch() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var taskId = (0, _uuid2.default)();
    var options = this || {};
    var subscription = void 0,
        subscriptionUpload = void 0,
        stateEvent = void 0,
        partEvent = void 0;
    var respInfo = {};

    var _ref = [].concat(babelHelpers.toConsumableArray(args)),
        method = _ref[0],
        url = _ref[1],
        headers = _ref[2],
        body = _ref[3];

    headers = _lodash2.default.reduce(headers, function (result, value, key) {
      result[key] = value || '';
      return result;
    }, {});

    if (_uri2.default.isFileURI(url)) {
      return fetchFile(options, method, url, headers, body);
    }

    var promise = new Promise(function (resolve, reject) {
      var nativeMethodName = Array.isArray(body) ? 'fetchBlobForm' : 'fetchBlob';
      subscription = emitter.addListener('RNFetchBlobProgress', function (e) {
        if (e.taskId === taskId && promise.onProgress) {
          promise.onProgress(e.written, e.total, e.chunk);
        }
      });
      subscriptionUpload = emitter.addListener('RNFetchBlobProgress-upload', function (e) {
        if (e.taskId === taskId && promise.onUploadProgress) {
          promise.onUploadProgress(e.written, e.total);
        }
      });
      stateEvent = emitter.addListener('RNFetchBlobState', function (e) {
        if (e.taskId === taskId) respInfo = e;
        promise.onStateChange && promise.onStateChange(e);
      });
      subscription = emitter.addListener('RNFetchBlobExpire', function (e) {
        if (e.taskId === taskId && promise.onExpire) {
          promise.onExpire(e);
        }
      });
      partEvent = emitter.addListener('RNFetchBlobServerPush', function (e) {
        if (e.taskId === taskId && promise.onPartData) {
          promise.onPartData(e.chunk);
        }
      });

      if (body instanceof Blob && body.isRNFetchBlobPolyfill) {
        body = body.getRNFetchBlobRef();
      }

      var req = RNFetchBlob[nativeMethodName];
      req(options, taskId, method, url, headers || {}, body, function (err, rawType, data) {
        subscription.remove();
        subscriptionUpload.remove();
        stateEvent.remove();
        partEvent.remove();
        delete promise['progress'];
        delete promise['uploadProgress'];
        delete promise['stateChange'];
        delete promise['part'];
        delete promise['cancel'];

        promise.cancel = function () {};

        if (err) reject(new Error(err, respInfo));else {
          if (options.path || options.fileCache || options.addAndroidDownloads || options.key || options.auto && respInfo.respType === 'blob') {
            if (options.session) session(options.session).add(data);
          }

          respInfo.rnfbEncode = rawType;
          resolve(new FetchBlobResponse(taskId, respInfo, data));
        }
      });
    });

    promise.progress = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var interval = 250;
      var count = -1;

      var fn = function fn() {};

      if (args.length === 2) {
        interval = args[0].interval || interval;
        count = args[0].count || count;
        fn = args[1];
      } else {
        fn = args[0];
      }

      promise.onProgress = fn;
      RNFetchBlob.enableProgressReport(taskId, interval, count);
      return promise;
    };

    promise.uploadProgress = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var interval = 250;
      var count = -1;

      var fn = function fn() {};

      if (args.length === 2) {
        interval = args[0].interval || interval;
        count = args[0].count || count;
        fn = args[1];
      } else {
        fn = args[0];
      }

      promise.onUploadProgress = fn;
      RNFetchBlob.enableUploadProgressReport(taskId, interval, count);
      return promise;
    };

    promise.part = function (fn) {
      promise.onPartData = fn;
      return promise;
    };

    promise.stateChange = function (fn) {
      promise.onStateChange = fn;
      return promise;
    };

    promise.expire = function (fn) {
      promise.onExpire = fn;
      return promise;
    };

    promise.cancel = function (fn) {
      fn = fn || function () {};

      subscription.remove();
      subscriptionUpload.remove();
      stateEvent.remove();
      RNFetchBlob.cancelRequest(taskId, fn);
    };

    promise.taskId = taskId;
    return promise;
  }

  var FetchBlobResponse = function FetchBlobResponse(taskId, info, data) {
    var _this = this;

    babelHelpers.classCallCheck(this, FetchBlobResponse);
    this.data = data;
    this.taskId = taskId;
    this.type = info.rnfbEncode;
    this.respInfo = info;

    this.info = function () {
      return _this.respInfo;
    };

    this.array = function () {
      var cType = info.headers['Content-Type'] || info.headers['content-type'];
      return new Promise(function (resolve, reject) {
        switch (_this.type) {
          case 'base64':
            break;

          case 'path':
            _fs2.default.readFile(_this.data, 'ascii').then(resolve);

            break;

          default:
            break;
        }
      });
    };

    this.blob = function () {
      var Blob = _polyfill2.default.Blob;
      var cType = info.headers['Content-Type'] || info.headers['content-type'];
      return new Promise(function (resolve, reject) {
        switch (_this.type) {
          case 'base64':
            Blob.build(_this.data, {
              type: cType + ';BASE64'
            }).then(resolve);
            break;

          case 'path':
            _polyfill2.default.Blob.build(wrap(_this.data), {
              type: cType
            }).then(resolve);

            break;

          default:
            _polyfill2.default.Blob.build(_this.data, {
              type: 'text/plain'
            }).then(resolve);

            break;
        }
      });
    };

    this.text = function () {
      var res = _this.data;

      switch (_this.type) {
        case 'base64':
          return _base2.default.decode(_this.data);

        case 'path':
          return _fs2.default.readFile(_this.data, 'base64').then(function (b64) {
            return Promise.resolve(_base2.default.decode(b64));
          });

        default:
          return _this.data;
      }
    };

    this.json = function () {
      switch (_this.type) {
        case 'base64':
          return JSON.parse(_base2.default.decode(_this.data));

        case 'path':
          return _fs2.default.readFile(_this.data, 'utf8').then(function (text) {
            return Promise.resolve(JSON.parse(text));
          });

        default:
          return JSON.parse(_this.data);
      }
    };

    this.base64 = function () {
      switch (_this.type) {
        case 'base64':
          return _this.data;

        case 'path':
          return _fs2.default.readFile(_this.data, 'base64');

        default:
          return _base2.default.encode(_this.data);
      }
    };

    this.flush = function () {
      var path = _this.path();

      if (!path || _this.type !== 'path') return;
      return unlink(path);
    };

    this.path = function () {
      if (_this.type === 'path') return _this.data;
      return null;
    };

    this.session = function (name) {
      if (_this.type === 'path') return session(name).add(_this.data);else {
        console.warn('only file paths can be add into session.');
        return null;
      }
    };

    this.readStream = function (encode) {
      if (_this.type === 'path') {
        return readStream(_this.data, encode);
      } else {
        console.warn('RNFetchblob', 'this response data does not contains any available stream');
        return null;
      }
    };

    this.readFile = function (encode) {
      if (_this.type === 'path') {
        encode = encode || 'utf8';
        return readFile(_this.data, encode);
      } else {
        console.warn('RNFetchblob', 'this response does not contains a readable file');
        return null;
      }
    };
  };

  exports.default = {
    fetch: fetch,
    base64: _base2.default,
    android: _android2.default,
    ios: _ios2.default,
    config: config,
    session: session,
    fs: _fs2.default,
    wrap: wrap,
    polyfill: _polyfill2.default,
    JSONStream: _jsonStream2.default
  };
},685,[12,686,687,688,692,380,694,706,707,708,709],"react-native-fetch-blob/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    isFileURI: function isFileURI(uri) {
      if (typeof uri !== 'string') return false;
      return (/^RNFetchBlob-file\:\/\//.test(uri)
      );
    },
    isJSONStreamURI: function isJSONStreamURI(uri) {
      if (typeof uri !== 'string') return false;
      return (/^JSONStream\:\/\//.test(uri)
      );
    },
    removeURIScheme: function removeURIScheme(uri, iterations) {
      iterations = iterations || 1;
      var result = uri;

      for (var i = 0; i < iterations; i++) {
        result = String(result).replace(/^[^\:]+\:\/\//, '');
      }

      return String(result);
    },
    unwrapFileURI: function unwrapFileURI(uri) {
      return String(uri).replace(/^RNFetchBlob-file\:\/\//, '');
    }
  };
},686,[],"react-native-fetch-blob/utils/uri.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var StatefulPromise = function (_Promise) {
    babelHelpers.inherits(StatefulPromise, _Promise);

    function StatefulPromise() {
      babelHelpers.classCallCheck(this, StatefulPromise);
      return babelHelpers.possibleConstructorReturn(this, (StatefulPromise.__proto__ || Object.getPrototypeOf(StatefulPromise)).apply(this, arguments));
    }

    return StatefulPromise;
  }(Promise);

  exports.default = StatefulPromise;
},687,[],"react-native-fetch-blob/class/StatefulPromise.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _RNFetchBlobSession = require(_dependencyMap[1], "./class/RNFetchBlobSession");

  var _RNFetchBlobSession2 = babelHelpers.interopRequireDefault(_RNFetchBlobSession);

  var _RNFetchBlobWriteStream = require(_dependencyMap[2], "./class/RNFetchBlobWriteStream");

  var _RNFetchBlobWriteStream2 = babelHelpers.interopRequireDefault(_RNFetchBlobWriteStream);

  var _RNFetchBlobReadStream = require(_dependencyMap[3], "./class/RNFetchBlobReadStream");

  var _RNFetchBlobReadStream2 = babelHelpers.interopRequireDefault(_RNFetchBlobReadStream);

  var _RNFetchBlobFile = require(_dependencyMap[4], "./class/RNFetchBlobFile");

  var _RNFetchBlobFile2 = babelHelpers.interopRequireDefault(_RNFetchBlobFile);

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;
  var dirs = {
    DocumentDir: RNFetchBlob.DocumentDir,
    CacheDir: RNFetchBlob.CacheDir,
    PictureDir: RNFetchBlob.PictureDir,
    MusicDir: RNFetchBlob.MusicDir,
    MovieDir: RNFetchBlob.MovieDir,
    DownloadDir: RNFetchBlob.DownloadDir,
    DCIMDir: RNFetchBlob.DCIMDir,
    SDCardDir: RNFetchBlob.SDCardDir,
    SDCardApplicationDir: RNFetchBlob.SDCardApplicationDir,
    MainBundleDir: RNFetchBlob.MainBundleDir,
    LibraryDir: RNFetchBlob.LibraryDir
  };

  function session(name) {
    var s = _RNFetchBlobSession2.default.getSession(name);

    if (s) return new _RNFetchBlobSession2.default(name);else {
      _RNFetchBlobSession2.default.setSession(name, []);

      return new _RNFetchBlobSession2.default(name, []);
    }
  }

  function asset(path) {
    if (_reactNative.Platform.OS === 'ios') {
      if (/^assets-library\:\/\//.test(path)) return path;
    }

    return 'bundle-assets://' + path;
  }

  function createFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    return new Promise(function (resolve, reject) {
      var handler = function handler(err) {
        if (err) reject(new Error(err));else resolve();
      };

      if (encoding.toLowerCase() === 'ascii') {
        if (Array.isArray(data)) RNFetchBlob.createFileASCII(path, data, handler);else reject(new Error('`data` of ASCII file must be an array contains numbers'));
      } else {
        RNFetchBlob.createFile(path, data, encoding, handler);
      }
    });
  }

  function writeStream(path, encoding, append) {
    if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');
    encoding = encoding || 'utf8';
    append = append || false;
    return new Promise(function (resolve, reject) {
      RNFetchBlob.writeStream(path, encoding || 'base64', append || false, function (err, streamId) {
        if (err) reject(new Error(err));else resolve(new _RNFetchBlobWriteStream2.default(streamId, encoding));
      });
    });
  }

  function readStream(path, encoding, bufferSize) {
    var tick = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
    return Promise.resolve(new _RNFetchBlobReadStream2.default(path, encoding, bufferSize, tick));
  }

  function mkdir(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.mkdir(path, function (err, res) {
        if (err) reject(new Error(err));else resolve();
      });
    });
  }

  function pathForAppGroup(groupName) {
    return RNFetchBlob.pathForAppGroup(groupName);
  }

  function readFile(path, encoding, bufferSize) {
    if (typeof path !== 'string') return Promise.reject(new Error('Invalid argument "path" '));
    return RNFetchBlob.readFile(path, encoding);
  }

  function writeFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    if (typeof path !== 'string') return Promise.reject('Invalid argument "path" ');

    if (encoding.toLocaleLowerCase() === 'ascii') {
      if (!Array.isArray(data)) return Promise.reject(new Error("Expected \"data\" is an Array when encoding is \"ascii\", however got " + typeof data));else return RNFetchBlob.writeFileArray(path, data, false);
    } else {
      if (typeof data !== 'string') return Promise.reject(new Error("Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got " + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, false);
    }
  }

  function appendFile(path, data, encoding) {
    encoding = encoding || 'utf8';
    if (typeof path !== 'string') return Promise.reject('Invalid argument "path" ');

    if (encoding.toLocaleLowerCase() === 'ascii') {
      if (!Array.isArray(data)) return Promise.reject(new Error("Expected \"data\" is an Array when encoding is \"ascii\", however got " + typeof data));else return RNFetchBlob.writeFileArray(path, data, true);
    } else {
      if (typeof data !== 'string') return Promise.reject(new Error("Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got " + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, true);
    }
  }

  function stat(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.stat(path, function (err, stat) {
        if (err) reject(new Error(err));else {
          if (stat) {
            stat.size = parseInt(stat.size);
            stat.lastModified = parseInt(stat.lastModified);
          }

          resolve(stat);
        }
      });
    });
  }

  function scanFile(pairs) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.scanFile(pairs, function (err) {
        if (err) reject(new Error(err));else resolve();
      });
    });
  }

  function cp(path, dest) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.cp(path, dest, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function mv(path, dest) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.mv(path, dest, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function lstat(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.lstat(path, function (err, stat) {
        if (err) reject(new Error(err));else resolve(stat);
      });
    });
  }

  function ls(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.ls(path, function (err, res) {
        if (err) reject(new Error(err));else resolve(res);
      });
    });
  }

  function unlink(path) {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.unlink(path, function (err) {
        if (err) {
          reject(new Error(err));
        } else resolve();
      });
    });
  }

  function exists(path) {
    return new Promise(function (resolve, reject) {
      try {
        RNFetchBlob.exists(path, function (exist) {
          resolve(exist);
        });
      } catch (err) {
        reject(new Error(err));
      }
    });
  }

  function slice(src, dest, start, end) {
    var p = Promise.resolve();
    var size = 0;

    function normalize(num, size) {
      if (num < 0) return Math.max(0, size + num);
      if (!num && num !== 0) return size;
      return num;
    }

    if (start < 0 || end < 0 || !start || !end) {
      p = p.then(function () {
        return stat(src);
      }).then(function (stat) {
        size = Math.floor(stat.size);
        start = normalize(start || 0, size);
        end = normalize(end, size);
        return Promise.resolve();
      });
    }

    return p.then(function () {
      return RNFetchBlob.slice(src, dest, start, end);
    });
  }

  function isDir(path) {
    return new Promise(function (resolve, reject) {
      try {
        RNFetchBlob.exists(path, function (exist, isDir) {
          resolve(isDir);
        });
      } catch (err) {
        reject(new Error(err));
      }
    });
  }

  function df() {
    return new Promise(function (resolve, reject) {
      RNFetchBlob.df(function (err, stat) {
        if (err) reject(err);else resolve(stat);
      });
    });
  }

  exports.default = {
    RNFetchBlobSession: _RNFetchBlobSession2.default,
    unlink: unlink,
    mkdir: mkdir,
    session: session,
    ls: ls,
    readStream: readStream,
    mv: mv,
    cp: cp,
    writeStream: writeStream,
    writeFile: writeFile,
    appendFile: appendFile,
    pathForAppGroup: pathForAppGroup,
    readFile: readFile,
    exists: exists,
    createFile: createFile,
    isDir: isDir,
    stat: stat,
    lstat: lstat,
    scanFile: scanFile,
    dirs: dirs,
    slice: slice,
    asset: asset,
    df: df
  };
},688,[12,689,690,691,693],"react-native-fetch-blob/fs.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;
  var sessions = {};

  var RNFetchBlobSession = function () {
    babelHelpers.createClass(RNFetchBlobSession, null, [{
      key: "getSession",
      value: function getSession(name) {
        return sessions[name];
      }
    }, {
      key: "setSession",
      value: function setSession(name, val) {
        sessions[name] = val;
      }
    }, {
      key: "removeSession",
      value: function removeSession(name) {
        delete sessions[name];
      }
    }]);

    function RNFetchBlobSession(name, list) {
      babelHelpers.classCallCheck(this, RNFetchBlobSession);
      this.name = name;

      if (!sessions[name]) {
        if (Array.isArray(list)) sessions[name] = list;else sessions[name] = [];
      }
    }

    babelHelpers.createClass(RNFetchBlobSession, [{
      key: "add",
      value: function add(path) {
        sessions[this.name].push(path);
        return this;
      }
    }, {
      key: "remove",
      value: function remove(path) {
        var list = sessions[this.name];

        for (var i in list) {
          if (list[i] === path) {
            sessions[this.name].splice(i, 1);
            break;
          }
        }

        return this;
      }
    }, {
      key: "list",
      value: function list() {
        return sessions[this.name];
      }
    }, {
      key: "dispose",
      value: function dispose() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          RNFetchBlob.removeSession(sessions[_this.name], function (err) {
            if (err) reject(err);else {
              delete sessions[_this.name];
              resolve();
            }
          });
        });
      }
    }]);
    return RNFetchBlobSession;
  }();

  exports.default = RNFetchBlobSession;
},689,[12],"react-native-fetch-blob/class/RNFetchBlobSession.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobWriteStream = function () {
    function RNFetchBlobWriteStream(streamId, encoding, append) {
      babelHelpers.classCallCheck(this, RNFetchBlobWriteStream);
      this.id = streamId;
      this.encoding = encoding;
      this.append = append;
    }

    babelHelpers.createClass(RNFetchBlobWriteStream, [{
      key: "write",
      value: function write(data) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          try {
            var method = _this.encoding === 'ascii' ? 'writeArrayChunk' : 'writeChunk';

            if (_this.encoding.toLocaleLowerCase() === 'ascii' && !Array.isArray(data)) {
              reject('ascii input data must be an Array');
              return;
            }

            RNFetchBlob[method](_this.id, data, function (error) {
              if (error) reject(error);else resolve();
            });
          } catch (err) {
            reject(err);
          }
        });
      }
    }, {
      key: "close",
      value: function close() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          try {
            RNFetchBlob.closeStream(_this2.id, function () {
              resolve();
            });
          } catch (err) {
            reject(err);
          }
        });
      }
    }]);
    return RNFetchBlobWriteStream;
  }();

  exports.default = RNFetchBlobWriteStream;
},690,[12],"react-native-fetch-blob/class/RNFetchBlobWriteStream.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _uuid = require(_dependencyMap[1], "../utils/uuid");

  var _uuid2 = babelHelpers.interopRequireDefault(_uuid);

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobReadStream = function () {
    function RNFetchBlobReadStream(path, encoding, bufferSize, tick) {
      var _this = this;

      babelHelpers.classCallCheck(this, RNFetchBlobReadStream);
      this.tick = 10;
      if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');
      this.encoding = encoding || 'utf8';
      this.bufferSize = bufferSize;
      this.path = path;
      this.closed = false;
      this.tick = tick;

      this._onData = function () {};

      this._onEnd = function () {};

      this._onError = function () {};

      this.streamId = 'RNFBRS' + (0, _uuid2.default)();
      var subscription = emitter.addListener(this.streamId, function (e) {
        var event = e.event,
            detail = e.detail;

        if (_this._onData && event === 'data') {
          _this._onData(detail);

          return;
        } else if (_this._onEnd && event === 'end') {
          _this._onEnd(detail);
        } else {
          if (_this._onError) _this._onError(detail);else throw new Error(detail);
        }

        if (event === 'error' || event === 'end') {
          subscription.remove();
          _this.closed = true;
        }
      });
    }

    babelHelpers.createClass(RNFetchBlobReadStream, [{
      key: "open",
      value: function open() {
        if (!this.closed) RNFetchBlob.readStream(this.path, this.encoding, this.bufferSize || 10240, this.tick || -1, this.streamId);else throw new Error('Stream closed');
      }
    }, {
      key: "onData",
      value: function onData(fn) {
        this._onData = fn;
      }
    }, {
      key: "onError",
      value: function onError(fn) {
        this._onError = fn;
      }
    }, {
      key: "onEnd",
      value: function onEnd(fn) {
        this._onEnd = fn;
      }
    }]);
    return RNFetchBlobReadStream;
  }();

  exports.default = RNFetchBlobReadStream;
},691,[12,692],"react-native-fetch-blob/class/RNFetchBlobReadStream.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getUUID;

  function getUUID() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
},692,[],"react-native-fetch-blob/utils/uuid.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;
  var emitter = _reactNative.DeviceEventEmitter;

  var RNFetchBlobFile = function RNFetchBlobFile() {
    babelHelpers.classCallCheck(this, RNFetchBlobFile);
  };

  exports.default = RNFetchBlobFile;
},693,[12],"react-native-fetch-blob/class/RNFetchBlobFile.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Blob = require(_dependencyMap[0], "./Blob.js");

  var _Blob2 = babelHelpers.interopRequireDefault(_Blob);

  var _File = require(_dependencyMap[1], "./File.js");

  var _File2 = babelHelpers.interopRequireDefault(_File);

  var _XMLHttpRequest = require(_dependencyMap[2], "./XMLHttpRequest.js");

  var _XMLHttpRequest2 = babelHelpers.interopRequireDefault(_XMLHttpRequest);

  var _ProgressEvent = require(_dependencyMap[3], "./ProgressEvent");

  var _ProgressEvent2 = babelHelpers.interopRequireDefault(_ProgressEvent);

  var _Event = require(_dependencyMap[4], "./Event");

  var _Event2 = babelHelpers.interopRequireDefault(_Event);

  var _FileReader = require(_dependencyMap[5], "./FileReader");

  var _FileReader2 = babelHelpers.interopRequireDefault(_FileReader);

  var _Fetch = require(_dependencyMap[6], "./Fetch");

  var _Fetch2 = babelHelpers.interopRequireDefault(_Fetch);

  exports.default = {
    Blob: _Blob2.default,
    File: _File2.default,
    XMLHttpRequest: _XMLHttpRequest2.default,
    ProgressEvent: _ProgressEvent2.default,
    Event: _Event2.default,
    FileReader: _FileReader2.default,
    Fetch: _Fetch2.default
  };
},694,[695,698,699,701,702,703,704],"react-native-fetch-blob/polyfill/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _index = require(_dependencyMap[0], "../index.js");

  var _index2 = babelHelpers.interopRequireDefault(_index);

  var _fs = require(_dependencyMap[1], "../fs.js");

  var _fs2 = babelHelpers.interopRequireDefault(_fs);

  var _uuid = require(_dependencyMap[2], "../utils/uuid");

  var _uuid2 = babelHelpers.interopRequireDefault(_uuid);

  var _log = require(_dependencyMap[3], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var _EventTarget2 = require(_dependencyMap[4], "./EventTarget");

  var _EventTarget3 = babelHelpers.interopRequireDefault(_EventTarget2);

  var log = new _log2.default('Blob');
  var blobCacheDir = _fs2.default.dirs.DocumentDir + '/RNFetchBlob-blobs/';
  log.disable();

  var Blob = function (_EventTarget) {
    babelHelpers.inherits(Blob, _EventTarget);
    babelHelpers.createClass(Blob, [{
      key: "blobPath",
      get: function get() {
        return this._ref;
      }
    }], [{
      key: "clearCache",
      value: function clearCache() {
        return _fs2.default.unlink(blobCacheDir).then(function () {
          return _fs2.default.mkdir(blobCacheDir);
        });
      }
    }, {
      key: "build",
      value: function build(data, cType) {
        return new Promise(function (resolve, reject) {
          new Blob(data, cType).onCreated(resolve);
        });
      }
    }, {
      key: "setLog",
      value: function setLog(level) {
        if (level === -1) log.disable();else log.level(level);
      }
    }]);

    function Blob(data, cType, defer) {
      babelHelpers.classCallCheck(this, Blob);

      var _this = babelHelpers.possibleConstructorReturn(this, (Blob.__proto__ || Object.getPrototypeOf(Blob)).call(this));

      _this.isRNFetchBlobPolyfill = true;
      _this.multipartBoundary = null;
      _this._ref = null;
      _this._blobCreated = false;
      _this._onCreated = [];
      _this._closed = false;
      cType = cType || {};
      _this.cacheName = getBlobName();
      _this.isRNFetchBlobPolyfill = true;
      _this.isDerived = defer;
      _this.type = cType.type || 'text/plain';
      log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);
      _this._ref = blobCacheDir + _this.cacheName;
      var p = null;
      if (!data) data = '';

      if (data.isRNFetchBlobPolyfill) {
        log.verbose('create Blob cache file from Blob object');
        var size = 0;
        _this._ref = String(data.getRNFetchBlobRef());
        var orgPath = _this._ref;
        p = _fs2.default.exists(orgPath).then(function (exist) {
          if (exist) return _fs2.default.writeFile(orgPath, data, 'uri').then(function (size) {
            return Promise.resolve(size);
          }).catch(function (err) {
            throw "RNFetchBlob Blob file creation error, " + err;
          });else throw "could not create Blob from path " + orgPath + ", file not exists";
        });
      } else if (data instanceof FormData) {
          log.verbose('create Blob cache file from FormData', data);
          var boundary = "RNFetchBlob-" + _this.cacheName + "-" + Date.now();
          _this.multipartBoundary = boundary;
          var parts = data.getParts();
          var formArray = [];

          if (!parts) {
            p = _fs2.default.writeFile(_this._ref, '', 'utf8');
          } else {
            for (var i in parts) {
              formArray.push('\r\n--' + boundary + '\r\n');
              var part = parts[i];

              for (var j in part.headers) {
                formArray.push(j + ': ' + part.headers[j] + '\r\n');
              }

              formArray.push('\r\n');
              if (part.isRNFetchBlobPolyfill) formArray.push(part);else formArray.push(part.string);
            }

            log.verbose('FormData array', formArray);
            formArray.push('\r\n--' + boundary + '--\r\n');
            p = createMixedBlobData(_this._ref, formArray);
          }
        } else if (typeof data === 'string' && data.startsWith('RNFetchBlob-file://')) {
            log.verbose('create Blob cache file from file path', data);
            _this._isReference = true;
            _this._ref = String(data).replace('RNFetchBlob-file://', '');
            var _orgPath = _this._ref;
            if (defer) return babelHelpers.possibleConstructorReturn(_this);else {
              p = _fs2.default.stat(_orgPath).then(function (stat) {
                return Promise.resolve(stat.size);
              });
            }
          } else if (typeof data === 'string') {
              var encoding = 'utf8';
              var mime = String(_this.type);
              if (/(application\/octet|\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();
              _this.type = String(_this.type).replace(/;base64/ig, '');
              log.verbose('create Blob cache file from string', 'encode', encoding);
              p = _fs2.default.writeFile(_this._ref, data, encoding).then(function (size) {
                return Promise.resolve(size);
              });
            } else if (Array.isArray(data)) {
                log.verbose('create Blob cache file from mixed array', data);
                p = createMixedBlobData(_this._ref, data);
              } else {
                data = data.toString();
                p = _fs2.default.writeFile(_this._ref, data, 'utf8').then(function (size) {
                  return Promise.resolve(size);
                });
              }

      p && p.then(function (size) {
        _this.size = size;

        _this._invokeOnCreateEvent();
      }).catch(function (err) {
        log.error('RNFetchBlob could not create Blob : ' + _this._ref, err);
      });
      return _this;
    }

    babelHelpers.createClass(Blob, [{
      key: "onCreated",
      value: function onCreated(fn) {
        log.verbose('#register blob onCreated', this._blobCreated);
        if (!this._blobCreated) this._onCreated.push(fn);else {
          fn(this);
        }
        return this;
      }
    }, {
      key: "markAsDerived",
      value: function markAsDerived() {
        this._isDerived = true;
      }
    }, {
      key: "getRNFetchBlobRef",
      value: function getRNFetchBlobRef() {
        return this._ref;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var _this2 = this;

        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        if (this._closed) throw 'Blob has been released.';
        log.verbose('slice called', start, end, contentType);
        var resPath = blobCacheDir + getBlobName();
        var pass = false;
        log.debug('fs.slice new blob will at', resPath);
        var result = new Blob(_index2.default.wrap(resPath), {
          type: contentType
        }, true);

        _fs2.default.exists(blobCacheDir).then(function (exist) {
          if (exist) return Promise.resolve();
          return _fs2.default.mkdir(blobCacheDir);
        }).then(function () {
          return _fs2.default.slice(_this2._ref, resPath, start, end);
        }).then(function (dest) {
          log.debug('fs.slice done', dest);

          result._invokeOnCreateEvent();

          pass = true;
        }).catch(function (err) {
          console.warn('Blob.slice failed:', err);
          pass = true;
        });

        log.debug('slice returning new Blob');
        return result;
      }
    }, {
      key: "readBlob",
      value: function readBlob(encoding) {
        if (this._closed) throw 'Blob has been released.';
        return _fs2.default.readFile(this._ref, encoding || 'utf8');
      }
    }, {
      key: "close",
      value: function close() {
        if (this._closed) return Promise.reject('Blob has been released.');
        this._closed = true;
        return _fs2.default.unlink(this._ref).catch(function (err) {
          console.warn(err);
        });
      }
    }, {
      key: "safeClose",
      value: function safeClose() {
        if (this._closed) return Promise.reject('Blob has been released.');
        this._closed = true;

        if (!this._isReference) {
          return _fs2.default.unlink(this._ref).catch(function (err) {
            console.warn(err);
          });
        } else {
          return Promise.resolve();
        }
      }
    }, {
      key: "_invokeOnCreateEvent",
      value: function _invokeOnCreateEvent() {
        log.verbose('invoke create event', this._onCreated);
        this._blobCreated = true;
        var fns = this._onCreated;

        for (var i in fns) {
          if (typeof fns[i] === 'function') {
            fns[i](this);
          }
        }

        delete this._onCreated;
      }
    }, {
      key: "isDerived",
      get: function get() {
        return this._isDerived || false;
      }
    }]);
    return Blob;
  }(_EventTarget3.default);

  exports.default = Blob;

  function getBlobName() {
    return 'blob-' + (0, _uuid2.default)();
  }

  function createMixedBlobData(ref, dataArray) {
    var p = _fs2.default.writeFile(ref, '');

    var args = [];
    var size = 0;

    for (var i in dataArray) {
      var part = dataArray[i];
      if (!part) continue;

      if (part.isRNFetchBlobPolyfill) {
        args.push([ref, part._ref, 'uri']);
      } else if (typeof part === 'string') args.push([ref, part, 'utf8']);else if (Array.isArray(part)) args.push([ref, part, 'ascii']);
    }

    var _loop = function _loop(_i) {
      p = p.then(function (written) {
        var arg = this;
        if (written) size += written;
        log.verbose('mixed blob write', args[_i], written);
        return _fs2.default.appendFile.apply(_fs2.default, babelHelpers.toConsumableArray(arg));
      }.bind(args[_i]));
    };

    for (var _i in args) {
      _loop(_i);
    }

    return p.then(function () {
      return Promise.resolve(size);
    });
  }
},695,[685,688,692,696,697],"react-native-fetch-blob/polyfill/Blob.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Log = function () {
    function Log(name) {
      babelHelpers.classCallCheck(this, Log);
      this._isEnable = true;
      this._level = 0;
      this._name = name;
    }

    babelHelpers.createClass(Log, [{
      key: "level",
      value: function level(val) {
        this._isEnable = true;
        this._level = val;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._isEnable = true;
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnable = false;
      }
    }, {
      key: "verbose",
      value: function verbose() {
        var _console;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._isEnable && this._level > 2 && (_console = console).log.apply(_console, [this._name, 'verbose:'].concat(args));
      }
    }, {
      key: "debug",
      value: function debug() {
        var _console2;

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._isEnable && this._level > 1 && (_console2 = console).log.apply(_console2, [this._name, 'debug:'].concat(args));
      }
    }, {
      key: "info",
      value: function info() {
        var _console3;

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._isEnable && this._level > 0 && (_console3 = console).log.apply(_console3, [this._name, 'info:'].concat(args));
      }
    }, {
      key: "error",
      value: function error() {
        var _console4;

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._isEnable && this._level > -1 && (_console4 = console).warn.apply(_console4, [this._name, 'error:'].concat(args));
      }
    }]);
    return Log;
  }();

  exports.default = Log;
},696,[],"react-native-fetch-blob/utils/log.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _log = require(_dependencyMap[0], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var log = new _log2.default('EventTarget');
  log.disable();

  var EventTarget = function () {
    function EventTarget() {
      babelHelpers.classCallCheck(this, EventTarget);
      log.info('constructor called');
      this.listeners = {};
    }

    babelHelpers.createClass(EventTarget, [{
      key: "addEventListener",
      value: function addEventListener(type, cb) {
        log.info('add event listener', type, cb);

        if (!(type in this.listeners)) {
          this.listeners[type] = [];
        }

        this.listeners[type].push(cb);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, cb) {
        log.info('remove event listener', type, cb);
        if (!(type in this.listeners)) return;
        var handlers = this.listeners[type];

        for (var i in handlers) {
          if (cb === handlers[i]) {
            handlers.splice(i, 1);
            return this.removeEventListener(type, cb);
          }
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(type, event) {
        log.info('dispatch event', event);
        if (!(type in this.listeners)) return;
        var handlers = this.listeners[type];

        for (var i in handlers) {
          handlers[i].call(this, event);
        }
      }
    }, {
      key: "clearEventListeners",
      value: function clearEventListeners() {
        for (var i in this.listeners) {
          delete this.listeners[i];
        }
      }
    }]);
    return EventTarget;
  }();

  exports.default = EventTarget;
},697,[696],"react-native-fetch-blob/polyfill/EventTarget.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _fs = require(_dependencyMap[0], "../fs.js");

  var _fs2 = babelHelpers.interopRequireDefault(_fs);

  var _Blob2 = require(_dependencyMap[1], "./Blob.js");

  var _Blob3 = babelHelpers.interopRequireDefault(_Blob2);

  var File = function (_Blob) {
    babelHelpers.inherits(File, _Blob);
    babelHelpers.createClass(File, null, [{
      key: "build",
      value: function build(name, data, cType) {
        return new Promise(function (resolve, reject) {
          new File(data, cType).onCreated(function (f) {
            f.name = name;
            resolve(f);
          });
        });
      }
    }]);

    function File(data, cType) {
      babelHelpers.classCallCheck(this, File);

      var _this = babelHelpers.possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, data, cType));

      _this.name = '';
      return _this;
    }

    return File;
  }(_Blob3.default);

  exports.default = File;
},698,[688,695],"react-native-fetch-blob/polyfill/File.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _index = require(_dependencyMap[0], "../index.js");

  var _index2 = babelHelpers.interopRequireDefault(_index);

  var _XMLHttpRequestEventTarget = require(_dependencyMap[1], "./XMLHttpRequestEventTarget.js");

  var _XMLHttpRequestEventTarget2 = babelHelpers.interopRequireDefault(_XMLHttpRequestEventTarget);

  var _log = require(_dependencyMap[2], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var _Blob = require(_dependencyMap[3], "./Blob.js");

  var _Blob2 = babelHelpers.interopRequireDefault(_Blob);

  var _ProgressEvent = require(_dependencyMap[4], "./ProgressEvent.js");

  var _ProgressEvent2 = babelHelpers.interopRequireDefault(_ProgressEvent);

  var _uri = require(_dependencyMap[5], "../utils/uri");

  var _uri2 = babelHelpers.interopRequireDefault(_uri);

  var log = new _log2.default('XMLHttpRequest');
  log.disable();
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var XMLHttpRequest = (_temp = _class = function (_XMLHttpRequestEventT) {
    babelHelpers.inherits(XMLHttpRequest, _XMLHttpRequestEventT);
    babelHelpers.createClass(XMLHttpRequest, [{
      key: "UNSENT",
      get: function get() {
        return UNSENT;
      }
    }, {
      key: "OPENED",
      get: function get() {
        return OPENED;
      }
    }, {
      key: "HEADERS_RECEIVED",
      get: function get() {
        return HEADERS_RECEIVED;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return LOADING;
      }
    }, {
      key: "DONE",
      get: function get() {
        return DONE;
      }
    }], [{
      key: "setLog",
      value: function setLog(level) {
        if (level === -1) log.disable();else log.level(level);
      }
    }, {
      key: "addBinaryContentType",
      value: function addBinaryContentType(substr) {
        for (var i in XMLHttpRequest.binaryContentTypes) {
          if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
            return;
          }
        }

        XMLHttpRequest.binaryContentTypes.push(substr);
      }
    }, {
      key: "removeBinaryContentType",
      value: function removeBinaryContentType(val) {
        for (var i in XMLHttpRequest.binaryContentTypes) {
          if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
            XMLHttpRequest.binaryContentTypes.splice(i, 1);
            return;
          }
        }
      }
    }, {
      key: "UNSENT",
      get: function get() {
        return UNSENT;
      }
    }, {
      key: "OPENED",
      get: function get() {
        return OPENED;
      }
    }, {
      key: "HEADERS_RECEIVED",
      get: function get() {
        return HEADERS_RECEIVED;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return LOADING;
      }
    }, {
      key: "DONE",
      get: function get() {
        return DONE;
      }
    }]);

    function XMLHttpRequest() {
      babelHelpers.classCallCheck(this, XMLHttpRequest);
      log.verbose('XMLHttpRequest constructor called');

      var _this = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this.upload = new _XMLHttpRequestEventTarget2.default();
      _this._readyState = UNSENT;
      _this._uriType = 'net';
      _this._response = '';
      _this._responseText = '';
      _this._responseHeaders = {};
      _this._responseType = '';
      _this._responseURL = '';
      _this._responseXML = '';
      _this._status = 0;
      _this._statusText = '';
      _this._timeout = 60000;
      _this._sendFlag = false;
      _this._uploadStarted = false;
      _this._increment = false;
      _this._config = {};
      _this._headers = {
        'Content-Type': 'text/plain'
      };
      _this._cleanUp = null;

      _this._headerReceived = function (e) {
        log.debug('header received ', _this._task.taskId, e);
        _this.responseURL = _this._url;

        if (e.state === "2" && e.taskId === _this._task.taskId) {
          _this._responseHeaders = e.headers;
          _this._statusText = e.status;
          _this._status = Math.floor(e.status);

          _this._dispatchReadStateChange(XMLHttpRequest.HEADERS_RECEIVED);
        }
      };

      _this._uploadProgressEvent = function (send, total) {
        if (!_this._uploadStarted) {
          _this.upload.dispatchEvent('loadstart');

          _this._uploadStarted = true;
        }

        if (send >= total) _this.upload.dispatchEvent('load');

        _this.upload.dispatchEvent('progress', new _ProgressEvent2.default(true, send, total));
      };

      _this._progressEvent = function (send, total, chunk) {
        log.verbose(_this.readyState);
        if (_this._readyState === XMLHttpRequest.HEADERS_RECEIVED) _this._dispatchReadStateChange(XMLHttpRequest.LOADING);
        var lengthComputable = false;
        if (total && total >= 0) lengthComputable = true;
        var e = new _ProgressEvent2.default(lengthComputable, send, total);

        if (_this._increment) {
          _this._responseText += chunk;
        }

        _this.dispatchEvent('progress', e);
      };

      _this._onError = function (err) {
        var statusCode = Math.floor(_this.status);

        if (statusCode >= 100 && statusCode !== 408) {
          return;
        }

        log.debug('XMLHttpRequest error', err);
        _this._statusText = err;
        _this._status = String(err).match(/\d+/);
        _this._status = _this._status ? Math.floor(_this.status) : 404;

        _this._dispatchReadStateChange(XMLHttpRequest.DONE);

        if (err && String(err.message).match(/(timed\sout|timedout)/) || _this._status == 408) {
          _this.dispatchEvent('timeout');
        }

        _this.dispatchEvent('loadend');

        _this.dispatchEvent('error', {
          type: 'error',
          detail: err
        });

        _this.clearEventListeners();
      };

      _this._onDone = function (resp) {
        log.debug('XMLHttpRequest done', _this._url, resp, _this);
        _this._statusText = _this._status;

        var responseDataReady = function responseDataReady() {
          log.debug('request done state = 4');

          _this.dispatchEvent('load');

          _this.dispatchEvent('loadend');

          _this._dispatchReadStateChange(XMLHttpRequest.DONE);

          _this.clearEventListeners();
        };

        if (resp) {
          var info = resp.respInfo || {};
          log.debug(_this._url, info, info.respType);

          switch (_this._responseType) {
            case 'blob':
              resp.blob().then(function (b) {
                _this._responseText = resp.text();
                _this._response = b;
                responseDataReady();
              });
              break;

            case 'arraybuffer':
              break;

            case 'json':
              _this._response = resp.json();
              _this._responseText = resp.text();
              break;

            default:
              _this._responseText = resp.text();
              _this._response = _this.responseText;
              responseDataReady();
              break;
          }
        }
      };

      return _this;
    }

    babelHelpers.createClass(XMLHttpRequest, [{
      key: "open",
      value: function open(method, url, async, user, password) {
        log.verbose('XMLHttpRequest open ', method, url, async, user, password);
        this._method = method;
        this._url = url;
        this._headers = {};
        this._increment = _uri2.default.isJSONStreamURI(this._url);
        this._url = this._url.replace(/^JSONStream\:\/\//, '');

        this._dispatchReadStateChange(XMLHttpRequest.OPENED);
      }
    }, {
      key: "send",
      value: function send(body) {
        var _this2 = this;

        this._body = body;
        if (this._readyState !== XMLHttpRequest.OPENED) throw 'InvalidStateError : XMLHttpRequest is not opened yet.';
        var promise = Promise.resolve();
        this._sendFlag = true;
        log.verbose('XMLHttpRequest send ', body);
        var _method = this._method,
            _url = this._url,
            _headers = this._headers;
        log.verbose('sending request with args', _method, _url, _headers, body);
        log.verbose(typeof body, body instanceof FormData);

        if (body instanceof _Blob2.default) {
          log.debug('sending blob body', body._blobCreated);
          promise = new Promise(function (resolve, reject) {
            body.onCreated(function (blob) {
              if (blob.isDerived) {
                _this2._cleanUp = function () {
                  blob.close();
                };
              }

              log.debug('body created send request');
              body = _index2.default.wrap(blob.getRNFetchBlobRef());
              resolve();
            });
          });
        } else if (typeof body === 'object') {
          body = JSON.stringify(body);
          promise = Promise.resolve();
        } else {
          body = body ? body.toString() : body;
          promise = Promise.resolve();
        }

        promise.then(function () {
          log.debug('send request invoke', body);

          for (var h in _headers) {
            _headers[h] = _headers[h].toString();
          }

          _this2._task = _index2.default.config({
            auto: true,
            timeout: _this2._timeout,
            increment: _this2._increment,
            binaryContentTypes: XMLHttpRequest.binaryContentTypes
          }).fetch(_method, _url, _headers, body);

          _this2._task.stateChange(_this2._headerReceived).uploadProgress(_this2._uploadProgressEvent).progress(_this2._progressEvent).catch(_this2._onError).then(_this2._onDone);
        });
      }
    }, {
      key: "overrideMimeType",
      value: function overrideMimeType(mime) {
        log.verbose('XMLHttpRequest overrideMimeType', mime);
        this._headers['Content-Type'] = mime;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(name, value) {
        log.verbose('XMLHttpRequest set header', name, value);

        if (this._readyState !== OPENED || this._sendFlag) {
          throw "InvalidStateError : Calling setRequestHeader in wrong state  " + this._readyState;
        }

        if (typeof name !== 'string' || /[^\u0000-\u00ff]/.test(name)) {
          throw 'TypeError : header field name should be a string';
        }

        var invalidPatterns = [/[\(\)\>\<\@\,\:\\\/\[\]\?\=\}\{\s\ \u007f\;\t\0\v\r]/, /tt/];

        for (var i in invalidPatterns) {
          if (invalidPatterns[i].test(name) || typeof name !== 'string') {
            throw "SyntaxError : Invalid header field name " + name;
          }
        }

        this._headers[name] = value;
      }
    }, {
      key: "abort",
      value: function abort() {
        var _this3 = this;

        log.verbose('XMLHttpRequest abort ');
        if (!this._task) return;

        this._task.cancel(function (err) {
          var e = {
            timeStamp: Date.now()
          };
          if (_this3.onabort) _this3.onabort();

          if (err) {
            e.detail = err;
            e.type = 'error';

            _this3.dispatchEvent('error', e);
          } else {
            e.type = 'abort';

            _this3.dispatchEvent('abort', e);
          }
        });
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(field) {
        log.verbose('XMLHttpRequest get header', field, this._responseHeaders);
        if (!this._responseHeaders) return null;
        return this._responseHeaders[field] || this._responseHeaders[field.toLowerCase()] || null;
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        log.verbose('XMLHttpRequest get all headers', this._responseHeaders);
        if (!this._responseHeaders) return '';
        var result = '';
        var respHeaders = this.responseHeaders;

        for (var i in respHeaders) {
          result += i + ": " + respHeaders[i] + String.fromCharCode(0x0D, 0x0A);
        }

        return result.substr(0, result.length - 2);
      }
    }, {
      key: "_dispatchReadStateChange",
      value: function _dispatchReadStateChange(state) {
        this._readyState = state;
        if (typeof this._onreadystatechange === 'function') this._onreadystatechange();
      }
    }, {
      key: "onreadystatechange",
      set: function set(fn) {
        log.verbose('XMLHttpRequest set onreadystatechange', fn);
        this._onreadystatechange = fn;
      },
      get: function get() {
        return this._onreadystatechange;
      }
    }, {
      key: "readyState",
      get: function get() {
        log.verbose('get readyState', this._readyState);
        return this._readyState;
      }
    }, {
      key: "status",
      get: function get() {
        log.verbose('get status', this._status);
        return this._status;
      }
    }, {
      key: "statusText",
      get: function get() {
        log.verbose('get statusText', this._statusText);
        return this._statusText;
      }
    }, {
      key: "response",
      get: function get() {
        log.verbose('get response', this._response);
        return this._response;
      }
    }, {
      key: "responseText",
      get: function get() {
        log.verbose('get responseText', this._responseText);
        return this._responseText;
      }
    }, {
      key: "responseURL",
      get: function get() {
        log.verbose('get responseURL', this._responseURL);
        return this._responseURL;
      }
    }, {
      key: "responseHeaders",
      get: function get() {
        log.verbose('get responseHeaders', this._responseHeaders);
        return this._responseHeaders;
      }
    }, {
      key: "timeout",
      set: function set(val) {
        this._timeout = val * 1000;
        log.verbose('set timeout', this._timeout);
      },
      get: function get() {
        log.verbose('get timeout', this._timeout);
        return this._timeout;
      }
    }, {
      key: "responseType",
      set: function set(val) {
        log.verbose('set response type', this._responseType);
        this._responseType = val;
      },
      get: function get() {
        log.verbose('get response type', this._responseType);
        return this._responseType;
      }
    }], [{
      key: "isRNFBPolyfill",
      get: function get() {
        return true;
      }
    }]);
    return XMLHttpRequest;
  }(_XMLHttpRequestEventTarget2.default), _class.binaryContentTypes = ['image/', 'video/', 'audio/'], _temp);
  exports.default = XMLHttpRequest;
},699,[685,700,696,695,701,686],"react-native-fetch-blob/polyfill/XMLHttpRequest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _EventTarget2 = require(_dependencyMap[0], "./EventTarget.js");

  var _EventTarget3 = babelHelpers.interopRequireDefault(_EventTarget2);

  var _log = require(_dependencyMap[1], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var log = new _log2.default('XMLHttpRequestEventTarget');
  log.disable();

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);

      var _this = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).call(this));

      _this._onabort = function () {};

      _this._onerror = function () {};

      _this._onload = function () {};

      _this._onloadstart = function () {};

      _this._onprogress = function () {};

      _this._ontimeout = function () {};

      _this._onloadend = function () {};

      log.info('constructor called');
      return _this;
    }

    babelHelpers.createClass(XMLHttpRequestEventTarget, [{
      key: "dispatchEvent",
      value: function dispatchEvent(event, e) {
        log.debug('dispatch event', event, e);
        babelHelpers.get(XMLHttpRequestEventTarget.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget.prototype), "dispatchEvent", this).call(this, event, e);

        switch (event) {
          case 'abort':
            this._onabort(e);

            break;

          case 'error':
            this._onerror(e);

            break;

          case 'load':
            this._onload(e);

            break;

          case 'loadstart':
            this._onloadstart(e);

            break;

          case 'loadend':
            this._onloadend(e);

            break;

          case 'progress':
            this._onprogress(e);

            break;

          case 'timeout':
            this._ontimeout(e);

            break;
        }
      }
    }, {
      key: "onabort",
      set: function set(fn) {
        log.info('set onabort');
        this._onabort = fn;
      },
      get: function get() {
        return this._onabort;
      }
    }, {
      key: "onerror",
      set: function set(fn) {
        log.info('set onerror');
        this._onerror = fn;
      },
      get: function get() {
        return this._onerror;
      }
    }, {
      key: "onload",
      set: function set(fn) {
        log.info('set onload', fn);
        this._onload = fn;
      },
      get: function get() {
        return this._onload;
      }
    }, {
      key: "onloadstart",
      set: function set(fn) {
        log.info('set onloadstart');
        this._onloadstart = fn;
      },
      get: function get() {
        return this._onloadstart;
      }
    }, {
      key: "onprogress",
      set: function set(fn) {
        log.info('set onprogress');
        this._onprogress = fn;
      },
      get: function get() {
        return this._onprogress;
      }
    }, {
      key: "ontimeout",
      set: function set(fn) {
        log.info('set ontimeout');
        this._ontimeout = fn;
      },
      get: function get() {
        return this._ontimeout;
      }
    }, {
      key: "onloadend",
      set: function set(fn) {
        log.info('set onloadend');
        this._onloadend = fn;
      },
      get: function get() {
        return this._onloadend;
      }
    }]);
    return XMLHttpRequestEventTarget;
  }(_EventTarget3.default);

  exports.default = XMLHttpRequestEventTarget;
},700,[697,696],"react-native-fetch-blob/polyfill/XMLHttpRequestEventTarget.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Event2 = require(_dependencyMap[0], "./Event");

  var _Event3 = babelHelpers.interopRequireDefault(_Event2);

  var ProgressEvent = function (_Event) {
    babelHelpers.inherits(ProgressEvent, _Event);

    function ProgressEvent(lengthComputable, loaded, total) {
      babelHelpers.classCallCheck(this, ProgressEvent);

      var _this = babelHelpers.possibleConstructorReturn(this, (ProgressEvent.__proto__ || Object.getPrototypeOf(ProgressEvent)).call(this));

      _this._lengthComputable = false;
      _this._loaded = -1;
      _this._total = -1;
      _this._lengthComputable = lengthComputable;
      _this._loaded = loaded;
      _this._total = total;
      return _this;
    }

    babelHelpers.createClass(ProgressEvent, [{
      key: "lengthComputable",
      get: function get() {
        return this._lengthComputable;
      }
    }, {
      key: "loaded",
      get: function get() {
        return this._loaded;
      }
    }, {
      key: "total",
      get: function get() {
        return this._total;
      }
    }]);
    return ProgressEvent;
  }(_Event3.default);

  exports.default = ProgressEvent;
},701,[702],"react-native-fetch-blob/polyfill/ProgressEvent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Event = function Event() {
    babelHelpers.classCallCheck(this, Event);
  };

  exports.default = Event;
},702,[],"react-native-fetch-blob/polyfill/Event.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _index = require(_dependencyMap[0], "../index.js");

  var _index2 = babelHelpers.interopRequireDefault(_index);

  var _ProgressEvent = require(_dependencyMap[1], "./ProgressEvent.js");

  var _ProgressEvent2 = babelHelpers.interopRequireDefault(_ProgressEvent);

  var _EventTarget2 = require(_dependencyMap[2], "./EventTarget");

  var _EventTarget3 = babelHelpers.interopRequireDefault(_EventTarget2);

  var _Blob = require(_dependencyMap[3], "./Blob");

  var _Blob2 = babelHelpers.interopRequireDefault(_Blob);

  var _log = require(_dependencyMap[4], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var _fs = require(_dependencyMap[5], "../fs");

  var _fs2 = babelHelpers.interopRequireDefault(_fs);

  var log = new _log2.default('FileReader');
  log.level(3);

  var FileReader = function (_EventTarget) {
    babelHelpers.inherits(FileReader, _EventTarget);
    babelHelpers.createClass(FileReader, [{
      key: "isRNFBPolyFill",
      get: function get() {
        return true;
      }
    }], [{
      key: "EMPTY",
      get: function get() {
        return 0;
      }
    }, {
      key: "LOADING",
      get: function get() {
        return 1;
      }
    }, {
      key: "DONE",
      get: function get() {
        return 2;
      }
    }]);

    function FileReader() {
      babelHelpers.classCallCheck(this, FileReader);

      var _this = babelHelpers.possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this._readState = 0;
      log.verbose('file reader const');
      _this._result = null;
      return _this;
    }

    babelHelpers.createClass(FileReader, [{
      key: "abort",
      value: function abort() {
        log.verbose('abort');
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(b) {
        log.verbose('readAsArrayBuffer', b);
      }
    }, {
      key: "readAsBinaryString",
      value: function readAsBinaryString(b) {
        log.verbose('readAsBinaryString', b);
      }
    }, {
      key: "readAsText",
      value: function readAsText(b, label) {
        log.verbose('readAsText', b, label);
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(b) {
        log.verbose('readAsDataURL', b);
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event, e) {
        log.verbose('dispatch event', event, e);
        babelHelpers.get(FileReader.prototype.__proto__ || Object.getPrototypeOf(FileReader.prototype), "dispatchEvent", this).call(this, event, e);

        if (typeof this["on" + event] === 'function') {
          this["on" + event](e);
        }
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);
    return FileReader;
  }(_EventTarget3.default);

  exports.default = FileReader;
},703,[685,701,697,695,696,688],"react-native-fetch-blob/polyfill/FileReader.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _index = require(_dependencyMap[0], "../index.js");

  var _index2 = babelHelpers.interopRequireDefault(_index);

  var _log = require(_dependencyMap[1], "../utils/log.js");

  var _log2 = babelHelpers.interopRequireDefault(_log);

  var _fs = require(_dependencyMap[2], "../fs");

  var _fs2 = babelHelpers.interopRequireDefault(_fs);

  var _unicode = require(_dependencyMap[3], "../utils/unicode");

  var _unicode2 = babelHelpers.interopRequireDefault(_unicode);

  var _Blob = require(_dependencyMap[4], "./Blob");

  var _Blob2 = babelHelpers.interopRequireDefault(_Blob);

  var log = new _log2.default('FetchPolyfill');
  log.disable();

  var Fetch = function Fetch(config) {
    babelHelpers.classCallCheck(this, Fetch);
    babelHelpers.extends(this, new RNFetchBlobFetchPolyfill(config));
  };

  exports.default = Fetch;

  var RNFetchBlobFetchPolyfill = function RNFetchBlobFetchPolyfill(config) {
    babelHelpers.classCallCheck(this, RNFetchBlobFetchPolyfill);

    this.build = function () {
      return function (url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var body = options.body;
        var promise = Promise.resolve();
        var blobCache = null;
        options.headers = options.headers || {};
        var ctype = options['Content-Type'] || options['content-type'];
        var ctypeH = options.headers['Content-Type'] || options.headers['content-type'];
        options.headers['Content-Type'] = ctype || ctypeH;
        options.headers['content-type'] = ctype || ctypeH;
        options.method = options.method || 'GET';

        if (body) {
          if (body instanceof FormData) {
            log.verbose('convert FormData to blob body');
            promise = _Blob2.default.build(body).then(function (b) {
              blobCache = b;
              options.headers['Content-Type'] = 'multipart/form-data;boundary=' + b.multipartBoundary;
              return Promise.resolve(_index2.default.wrap(b._ref));
            });
          } else if (body.isRNFetchBlobPolyfill) promise = Promise.resolve(_index2.default.wrap(body.blobPath));else if (typeof body !== 'object' && options.headers['Content-Type'] !== 'application/json') promise = Promise.resolve(JSON.stringify(body));else if (typeof body !== 'string') promise = Promise.resolve(body.toString());else promise = Promise.resolve(body);
        }

        var progressHandler = void 0,
            uploadHandler = void 0,
            cancelHandler = void 0;
        var statefulPromise = promise.then(function (body) {
          var task = _index2.default.config(config).fetch(options.method, url, options.headers, body);

          if (progressHandler) task.progress(progressHandler);
          if (uploadHandler) task.uploadProgress(uploadHandler);
          if (cancelHandler) task.cancel();
          return task.then(function (resp) {
            log.verbose('response', resp);
            if (blobCache !== null && blobCache instanceof _Blob2.default) blobCache.close();
            return Promise.resolve(new RNFetchBlobFetchRepsonse(resp));
          });
        });

        statefulPromise.progress = function (fn) {
          progressHandler = fn;
        };

        statefulPromise.uploadProgress = function (fn) {
          uploadHandler = fn;
        };

        statefulPromise.cancel = function () {
          cancelHandler = true;
          if (task.cancel) task.cancel();
        };

        return statefulPromise;
      };
    };
  };

  var RNFetchBlobFetchRepsonse = function () {
    function RNFetchBlobFetchRepsonse(resp) {
      babelHelpers.classCallCheck(this, RNFetchBlobFetchRepsonse);
      var info = resp.info();
      this.headers = info.headers;
      this.ok = info.status >= 200 && info.status <= 299, this.status = info.status;
      this.type = 'basic';
      this.bodyUsed = false;
      this.resp = resp;
      this.rnfbRespInfo = info;
      this.rnfbResp = resp;
    }

    babelHelpers.createClass(RNFetchBlobFetchRepsonse, [{
      key: "rawResp",
      value: function rawResp() {
        return Promise.resolve(this.rnfbResp);
      }
    }, {
      key: "arrayBuffer",
      value: function arrayBuffer() {
        log.verbose('to arrayBuffer', this.rnfbRespInfo);
        this.bodyUsed = true;
        return readArrayBuffer(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "text",
      value: function text() {
        log.verbose('to text', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readText(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "json",
      value: function json() {
        log.verbose('to json', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readJSON(this.rnfbResp, this.rnfbRespInfo);
      }
    }, {
      key: "blob",
      value: function blob() {
        log.verbose('to blob', this.rnfbResp, this.rnfbRespInfo);
        this.bodyUsed = true;
        return readBlob(this.rnfbResp, this.rnfbRespInfo);
      }
    }]);
    return RNFetchBlobFetchRepsonse;
  }();

  function readArrayBuffer(resp, info) {
    switch (info.rnfbEncode) {
      case 'path':
        return resp.readFile('ascii');
        break;

      default:
        var buffer = [];
        var str = resp.text();

        for (var i in str) {
          buffer[i] = str.charCodeAt(i);
        }

        return Promise.resolve(buffer);
        break;
    }
  }

  function readText(resp, info) {
    switch (info.rnfbEncode) {
      case 'base64':
        return Promise.resolve(resp.text());
        break;

      case 'path':
        return resp.text();
        break;

      default:
        return Promise.resolve(resp.text());
        break;
    }
  }

  function readBlob(resp, info) {
    log.verbose('readBlob', resp, info);
    return resp.blob();
  }

  function readJSON(resp, info) {
    log.verbose('readJSON', resp, info);

    switch (info.rnfbEncode) {
      case 'base64':
        return Promise.resolve(resp.json());

      case 'path':
        return resp.json();

      default:
        return Promise.resolve(resp.json());
    }
  }
},704,[685,696,688,705,695],"react-native-fetch-blob/polyfill/Fetch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (x) {
    var r = /\\u([\d\w]{4})/gi;
    x = x.replace(r, function (match, grp) {
      return String.fromCharCode(parseInt(grp, 16));
    });
    return unescape(x);
  };
},705,[],"react-native-fetch-blob/utils/unicode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */;
  (function () {
    var undefined;
    var VERSION = '4.17.5';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = "\\u200d";
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function safeGet(object, key) {
      return key == '__proto__' ? undefined : object[key];
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined,
          symIterator = Symbol ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : undefined,
          symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},706,[],"lodash/lodash.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  function actionViewIntent(path) {
    var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text/plain';
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.actionViewIntent(path, mime);else return Promise.reject('RNFetchBlob.android.actionViewIntent only supports Android.');
  }

  function getContentIntent(mime) {
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.getContentIntent(mime);else return Promise.reject('RNFetchBlob.android.getContentIntent only supports Android.');
  }

  function addCompleteDownload(config) {
    if (_reactNative.Platform.OS === 'android') return RNFetchBlob.addCompleteDownload(config);else return Promise.reject('RNFetchBlob.android.addCompleteDownload only supports Android.');
  }

  exports.default = {
    actionViewIntent: actionViewIntent,
    getContentIntent: getContentIntent,
    addCompleteDownload: addCompleteDownload
  };
},707,[12],"react-native-fetch-blob/android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;

  function previewDocument(path, scheme) {
    if (_reactNative.Platform.OS === 'ios') return RNFetchBlob.previewDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.openDocument only supports IOS.');
  }

  function openDocument(path, scheme) {
    if (_reactNative.Platform.OS === 'ios') return RNFetchBlob.openDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.previewDocument only supports IOS.');
  }

  function excludeFromBackupKey(url) {
    return RNFetchBlob.excludeFromBackupKey('file://' + path);
  }

  exports.default = {
    openDocument: openDocument,
    previewDocument: previewDocument,
    excludeFromBackupKey: excludeFromBackupKey
  };
},708,[12],"react-native-fetch-blob/ios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _oboeBrowserMin = require(_dependencyMap[0], "./lib/oboe-browser.min.js");

  var _oboeBrowserMin2 = babelHelpers.interopRequireDefault(_oboeBrowserMin);

  var _XMLHttpRequest = require(_dependencyMap[1], "./polyfill/XMLHttpRequest");

  var _XMLHttpRequest2 = babelHelpers.interopRequireDefault(_XMLHttpRequest);

  var _uri = require(_dependencyMap[2], "./utils/uri");

  var _uri2 = babelHelpers.interopRequireDefault(_uri);

  var OboeExtended = function OboeExtended(arg) {
    window.location = '';

    if (!window.XMLHttpRequest.isRNFBPolyfill) {
      window.XMLHttpRequest = _XMLHttpRequest2.default;
      console.warn('Use JSONStream will automatically replace window.XMLHttpRequest with RNFetchBlob.polyfill.XMLHttpRequest. You are seeing this warning because you did not replace it maually.');
    }

    if (typeof arg === 'string') {
      if (_uri2.default.isFileURI(arg)) {
        arg = {
          url: 'JSONStream://' + arg,
          headers: {
            noCache: true
          }
        };
      } else arg = 'JSONStream://' + arg;
    } else if (typeof arg === 'object') {
      var headers = arg.headers || {};

      if (_uri2.default.isFileURI(arg.url)) {
        headers.noCache = true;
      }

      arg = babelHelpers.extends(arg, {
        url: 'JSONStream://' + arg.url,
        headers: headers
      });
    }

    return (0, _oboeBrowserMin2.default)(arg);
  };

  exports.default = OboeExtended;
},709,[710,699,686],"react-native-fetch-blob/json-stream.js");
__d(function (global, require, module, exports, _dependencyMap) {
  !function (a, b, c, d, e, f) {
    function g(a, b) {
      return function () {
        return a.call(this, b.apply(this, arguments));
      };
    }

    function h(a) {
      return function (b) {
        return b[a];
      };
    }

    function i(a, b) {
      return b.apply(f, a);
    }

    function j(a) {
      var b = a.length - 1,
          d = c.prototype.slice;
      if (0 == b) return function () {
        return a.call(this, d.call(arguments));
      };
      if (1 == b) return function () {
        return a.call(this, arguments[0], d.call(arguments, 1));
      };
      var e = c(a.length);
      return function () {
        for (var c = 0; b > c; c++) {
          e[c] = arguments[c];
        }

        return e[b] = d.call(arguments, b), a.apply(this, e);
      };
    }

    function k(a) {
      return function (b, c) {
        return a(c, b);
      };
    }

    function l(a, b) {
      return function (c) {
        return a(c) && b(c);
      };
    }

    function m() {}

    function n() {
      return !0;
    }

    function o(a) {
      return function () {
        return a;
      };
    }

    function p(a, b) {
      return b && b.constructor === a;
    }

    function q(a) {
      return a !== f;
    }

    function r(a, c) {
      return c instanceof b && y(function (a) {
        return a in c;
      }, a);
    }

    function s(a, b) {
      return [a, b];
    }

    function t(a) {
      return A(a.reduce(k(s), X));
    }

    function u(a) {
      return w(function (a, b) {
        return a.unshift(b), a;
      }, [], a);
    }

    function v(a, b) {
      return b ? s(a(Y(b)), v(a, Z(b))) : X;
    }

    function w(a, b, c) {
      return c ? a(w(a, b, Z(c)), Y(c)) : b;
    }

    function x(a, b, c) {
      function d(a, c) {
        return a ? b(Y(a)) ? (c(Y(a)), Z(a)) : s(Y(a), d(Z(a), c)) : X;
      }

      return d(a, c || m);
    }

    function y(a, b) {
      return !b || a(Y(b)) && y(a, Z(b));
    }

    function z(a, b) {
      a && (Y(a).apply(null, b), z(Z(a), b));
    }

    function A(a) {
      function b(a, c) {
        return a ? b(Z(a), s(Y(a), c)) : c;
      }

      return b(a, X);
    }

    function B(a, b) {
      return b && (a(Y(b)) ? Y(b) : B(a, Z(b)));
    }

    function C(a) {
      "use strict";

      function b() {
        var a = 0;
        P.length > p && (c("Max buffer length exceeded: textNode"), a = Math.max(a, P.length)), Q.length > p && (c("Max buffer length exceeded: numberNode"), a = Math.max(a, Q.length)), O = p - a + Y;
      }

      function c(a) {
        P && (m(P), n(), P = ""), i = d(a + "\nLn: " + $ + "\nCol: " + Z + "\nChr: " + j), o(N(f, f, i));
      }

      function e() {
        return T == s ? (m({}), n(), void (S = !0)) : ((T !== t || 0 !== X) && c("Unexpected end"), P && (m(P), n(), P = ""), void (S = !0));
      }

      function g(a) {
        return "\r" == a || "\n" == a || " " == a || "	" == a;
      }

      function h(a) {
        if (!i) {
          if (S) return c("Cannot write after close");
          var d = 0;

          for (j = a[0]; j && (k = j, j = a[d++]);) {
            switch (Y++, "\n" == j ? ($++, Z = 0) : Z++, T) {
              case s:
                if ("{" === j) T = u;else if ("[" === j) T = w;else if (!g(j)) return c("Non-whitespace before {[.");
                continue;

              case z:
              case u:
                if (g(j)) continue;
                if (T === z) U.push(A);else {
                  if ("}" === j) {
                    m({}), n(), T = U.pop() || t;
                    continue;
                  }

                  U.push(v);
                }
                if ('"' !== j) return c('Malformed object key should start with " ');
                T = y;
                continue;

              case A:
              case v:
                if (g(j)) continue;
                if (":" === j) T === v ? (U.push(v), P && (m({}), l(P), P = ""), X++) : P && (l(P), P = ""), T = t;else if ("}" === j) P && (m(P), n(), P = ""), n(), X--, T = U.pop() || t;else {
                  if ("," !== j) return c("Bad object");
                  T === v && U.push(v), P && (m(P), n(), P = ""), T = z;
                }
                continue;

              case w:
              case t:
                if (g(j)) continue;

                if (T === w) {
                  if (m([]), X++, T = t, "]" === j) {
                    n(), X--, T = U.pop() || t;
                    continue;
                  }

                  U.push(x);
                }

                if ('"' === j) T = y;else if ("{" === j) T = u;else if ("[" === j) T = w;else if ("t" === j) T = B;else if ("f" === j) T = E;else if ("n" === j) T = I;else if ("-" === j) Q += j;else if ("0" === j) Q += j, T = M;else {
                  if (-1 === "123456789".indexOf(j)) return c("Bad value");
                  Q += j, T = M;
                }
                continue;

              case x:
                if ("," === j) U.push(x), P && (m(P), n(), P = ""), T = t;else {
                  if ("]" !== j) {
                    if (g(j)) continue;
                    return c("Bad array");
                  }

                  P && (m(P), n(), P = ""), n(), X--, T = U.pop() || t;
                }
                continue;

              case y:
                var e = d - 1;

                a: for (;;) {
                  for (; W > 0;) {
                    if (V += j, j = a.charAt(d++), 4 === W ? (P += String.fromCharCode(parseInt(V, 16)), W = 0, e = d - 1) : W++, !j) break a;
                  }

                  if ('"' === j && !R) {
                    T = U.pop() || t, P += a.substring(e, d - 1), P || (m(""), n());
                    break;
                  }

                  if ("\\" === j && !R && (R = !0, P += a.substring(e, d - 1), j = a.charAt(d++), !j)) break;

                  if (R) {
                    if (R = !1, "n" === j ? P += "\n" : "r" === j ? P += "\r" : "t" === j ? P += "	" : "f" === j ? P += "\f" : "b" === j ? P += "\b" : "u" === j ? (W = 1, V = "") : P += j, j = a.charAt(d++), e = d - 1, j) continue;
                    break;
                  }

                  q.lastIndex = d;
                  var f = q.exec(a);

                  if (!f) {
                    d = a.length + 1, P += a.substring(e, d - 1);
                    break;
                  }

                  if (d = f.index + 1, j = a.charAt(f.index), !j) {
                    P += a.substring(e, d - 1);
                    break;
                  }
                }

                continue;

              case B:
                if (!j) continue;
                if ("r" !== j) return c("Invalid true started with t" + j);
                T = C;
                continue;

              case C:
                if (!j) continue;
                if ("u" !== j) return c("Invalid true started with tr" + j);
                T = D;
                continue;

              case D:
                if (!j) continue;
                if ("e" !== j) return c("Invalid true started with tru" + j);
                m(!0), n(), T = U.pop() || t;
                continue;

              case E:
                if (!j) continue;
                if ("a" !== j) return c("Invalid false started with f" + j);
                T = F;
                continue;

              case F:
                if (!j) continue;
                if ("l" !== j) return c("Invalid false started with fa" + j);
                T = G;
                continue;

              case G:
                if (!j) continue;
                if ("s" !== j) return c("Invalid false started with fal" + j);
                T = H;
                continue;

              case H:
                if (!j) continue;
                if ("e" !== j) return c("Invalid false started with fals" + j);
                m(!1), n(), T = U.pop() || t;
                continue;

              case I:
                if (!j) continue;
                if ("u" !== j) return c("Invalid null started with n" + j);
                T = J;
                continue;

              case J:
                if (!j) continue;
                if ("l" !== j) return c("Invalid null started with nu" + j);
                T = K;
                continue;

              case K:
                if (!j) continue;
                if ("l" !== j) return c("Invalid null started with nul" + j);
                m(null), n(), T = U.pop() || t;
                continue;

              case L:
                if ("." !== j) return c("Leading zero not followed by .");
                Q += j, T = M;
                continue;

              case M:
                if (-1 !== "0123456789".indexOf(j)) Q += j;else if ("." === j) {
                  if (-1 !== Q.indexOf(".")) return c("Invalid number has two dots");
                  Q += j;
                } else if ("e" === j || "E" === j) {
                  if (-1 !== Q.indexOf("e") || -1 !== Q.indexOf("E")) return c("Invalid number has two exponential");
                  Q += j;
                } else if ("+" === j || "-" === j) {
                  if ("e" !== k && "E" !== k) return c("Invalid symbol in number");
                  Q += j;
                } else Q && (m(parseFloat(Q)), n(), Q = ""), d--, T = U.pop() || t;
                continue;

              default:
                return c("Unknown state: " + T);
            }
          }

          Y >= O && b();
        }
      }

      var i,
          j,
          k,
          l = a(qb).emit,
          m = a(rb).emit,
          n = a(sb).emit,
          o = a(jb).emit,
          p = 65536,
          q = /[\\"\n]/g,
          r = 0,
          s = r++,
          t = r++,
          u = r++,
          v = r++,
          w = r++,
          x = r++,
          y = r++,
          z = r++,
          A = r++,
          B = r++,
          C = r++,
          D = r++,
          E = r++,
          F = r++,
          G = r++,
          H = r++,
          I = r++,
          J = r++,
          K = r++,
          L = r++,
          M = r,
          O = p,
          P = "",
          Q = "",
          R = !1,
          S = !1,
          T = s,
          U = [],
          V = null,
          W = 0,
          X = 0,
          Y = 0,
          Z = 0,
          $ = 1;
      a(nb).on(h), a(ob).on(e);
    }

    function D(a, b) {
      "use strict";

      function c(a) {
        return function (b) {
          d = a(d, b);
        };
      }

      var d,
          e = {};

      for (var f in b) {
        a(f).on(c(b[f]), e);
      }

      a(hb).on(function (a) {
        var b,
            c = Y(d),
            e = ab(c),
            f = Z(d);
        f && (b = bb(Y(f)), b[e] = a);
      }), a(ib).on(function () {
        var a,
            b = Y(d),
            c = ab(b),
            e = Z(d);
        e && (a = bb(Y(e)), delete a[c]);
      }), a(pb).on(function () {
        for (var c in b) {
          a(c).un(e);
        }
      });
    }

    function E(a) {
      var b = {};
      return a && a.split("\r\n").forEach(function (a) {
        var c = a.indexOf(": ");
        b[a.substring(0, c)] = a.substring(c + 2);
      }), b;
    }

    function F(a, b) {
      function c(a) {
        return {
          "http:": 80,
          "https:": 443
        }[a];
      }

      function d(b) {
        return b.port || c(b.protocol || a.protocol);
      }

      return !!(b.protocol && b.protocol != a.protocol || b.host && b.host != a.host || b.host && d(b) != d(a));
    }

    function G(a) {
      var b = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,
          c = b.exec(a) || [];
      return {
        protocol: c[1] || "",
        host: c[2] || "",
        port: c[3] || ""
      };
    }

    function H() {
      return new XMLHttpRequest();
    }

    function I(b, c, d, e, g, h, i) {
      "use strict";

      function j() {
        var a = c.responseText,
            b = a.substr(m);
        b && k(b), m = V(a);
      }

      var k = b(nb).emit,
          l = b(jb).emit,
          m = 0,
          n = !0;
      b(pb).on(function () {
        c.onreadystatechange = null, c.abort();
      }), "onprogress" in c && (c.onprogress = j), c.onreadystatechange = function () {
        function a() {
          try {
            n && b(mb).emit(c.status, E(c.getAllResponseHeaders())), n = !1;
          } catch (a) {}
        }

        switch (c.readyState) {
          case 2:
          case 3:
            return a();

          case 4:
            a();
            var d = 2 == String(c.status)[0];
            d ? (j(), b(ob).emit()) : l(N(c.status, c.responseText));
        }
      };

      try {
        c.open(d, e, !0);

        for (var o in h) {
          c.setRequestHeader(o, h[o]);
        }

        F(a.location, G(e)) || c.setRequestHeader("X-Requested-With", "XMLHttpRequest"), c.withCredentials = i, c.send(g);
      } catch (p) {
        a.setTimeout(T(l, N(f, f, p)), 0);
      }
    }

    function J(a, b) {
      return {
        key: a,
        node: b
      };
    }

    function K(a) {
      function b(a, b) {
        var d = bb(Y(a));
        return p(c, d) ? f(a, V(d), b) : a;
      }

      function d(a, c) {
        if (!a) return j(c), f(a, cb, c);
        var d = b(a, c),
            g = Z(d),
            h = ab(Y(d));
        return e(g, h, c), s(J(h, c), g);
      }

      function e(a, b, c) {
        bb(Y(a))[b] = c;
      }

      function f(a, b, c) {
        a && e(a, b, c);
        var d = s(J(b, c), a);
        return h(d), d;
      }

      function g(a) {
        return i(a), Z(a) || k(bb(Y(a)));
      }

      var h = a(fb).emit,
          i = a(gb).emit,
          j = a(lb).emit,
          k = a(kb).emit,
          l = {};
      return l[rb] = d, l[sb] = g, l[qb] = f, l;
    }

    function L(a, b, c) {
      function d(a) {
        return function (b) {
          return b.id == a;
        };
      }

      var e, f;
      return {
        on: function on(c, d) {
          var g = {
            listener: c,
            id: d || c
          };
          return b && b.emit(a, c, g.id), e = s(g, e), f = s(c, f), this;
        },
        emit: function emit() {
          z(f, arguments);
        },
        un: function un(b) {
          var g;
          e = x(e, d(b), function (a) {
            g = a;
          }), g && (f = x(f, function (a) {
            return a == g.listener;
          }), c && c.emit(a, g.listener, g.id));
        },
        listeners: function listeners() {
          return f;
        },
        hasListener: function hasListener(a) {
          var b = a ? d(a) : n;
          return q(B(b, e));
        }
      };
    }

    function M() {
      function a(a) {
        return c[a] = L(a, d, e);
      }

      function b(b) {
        return c[b] || a(b);
      }

      var c = {},
          d = a("newListener"),
          e = a("removeListener");
      return ["emit", "on", "un"].forEach(function (a) {
        b[a] = j(function (c, d) {
          i(d, b(c)[a]);
        });
      }), b;
    }

    function N(a, b, c) {
      try {
        var d = e.parse(b);
      } catch (f) {}

      return {
        statusCode: a,
        body: b,
        jsonBody: d,
        thrown: c
      };
    }

    function O(a, b) {
      function c(a, b, c) {
        var d = A(c);
        a(b, u(Z(v(ab, d))), u(v(bb, d)));
      }

      function d(b, d, e) {
        var f = a(b).emit;
        d.on(function (a) {
          var b = e(a);
          b !== !1 && c(f, bb(b), a);
        }, b), a("removeListener").on(function (c) {
          c == b && (a(c).listeners() || d.un(b));
        });
      }

      var e = {
        node: a(gb),
        path: a(fb)
      };
      a("newListener").on(function (a) {
        var c = /(node|path):(.*)/.exec(a);

        if (c) {
          var f = e[c[1]];
          f.hasListener(a) || d(a, f, b(c[2]));
        }
      });
    }

    function P(a, b) {
      function c(b, c) {
        return a(b).on(e(c), c), p;
      }

      function d(a, b, c) {
        c = c || b;
        var d = e(b);
        return a.on(function () {
          var b = !1;
          p.forget = function () {
            b = !0;
          }, i(arguments, d), delete p.forget, b && a.un(c);
        }, c), p;
      }

      function e(b) {
        return function () {
          try {
            return b.apply(p, arguments);
          } catch (c) {
            a(jb).emit(N(f, f, c));
          }
        };
      }

      function g(b, c) {
        return a(b + ":" + c);
      }

      function h(a) {
        return function () {
          var b = a.apply(this, arguments);
          q(b) && (b == S.drop ? t() : u(b));
        };
      }

      function k(a, b, c) {
        var e;
        e = "node" == a ? h(c) : c, d(g(a, b), e, c);
      }

      function l(a, b) {
        for (var c in b) {
          k(a, c, b[c]);
        }
      }

      function n(a, b, c) {
        return W(b) ? k(a, b, c) : l(a, b), p;
      }

      var p,
          r = /^(node|path):./,
          s = a(kb),
          t = a(ib).emit,
          u = a(hb).emit,
          v = j(function (b, c) {
        if (p[b]) i(c, p[b]);else {
          var e = a(b),
              f = c[0];
          r.test(b) ? d(e, f) : e.on(f);
        }
        return p;
      }),
          w = function w(b, c, d) {
        if ("done" == b) s.un(c);else if ("node" == b || "path" == b) a.un(b + ":" + c, d);else {
          var e = c;
          a(b).un(e);
        }
        return p;
      };

      return a(lb).on(function (a) {
        p.root = o(a);
      }), a(mb).on(function (a, b) {
        p.header = function (a) {
          return a ? b[a] : b;
        };
      }), p = {
        on: v,
        addListener: v,
        removeListener: w,
        emit: a.emit,
        node: T(n, "node"),
        path: T(n, "path"),
        done: T(d, s),
        start: T(c, mb),
        fail: a(jb).on,
        abort: a(pb).emit,
        header: m,
        root: m,
        source: b
      };
    }

    function Q(a, b, c, d, e) {
      var f = M();
      return b && I(f, H(), a, b, c, d, e), C(f), D(f, K(f)), O(f, db), P(f, b);
    }

    function R(a, b, c, d, f, g, h) {
      function i(a, b) {
        return b === !1 && (a += -1 == a.indexOf("?") ? "?" : "&", a += "_=" + new Date().getTime()), a;
      }

      return f = f ? e.parse(e.stringify(f)) : {}, d ? W(d) || (d = e.stringify(d), f["Content-Type"] = f["Content-Type"] || "application/json") : d = null, a(c || "GET", i(b, h), d, f, g || !1);
    }

    function S(a) {
      var b = $("resume", "pause", "pipe"),
          c = T(r, b);
      return a ? c(a) || W(a) ? R(Q, a) : R(Q, a.url, a.method, a.body, a.headers, a.withCredentials, a.cached) : Q();
    }

    var T = j(function (a, b) {
      var c = b.length;
      return j(function (d) {
        for (var e = 0; e < d.length; e++) {
          b[c + e] = d[e];
        }

        return b.length = c + d.length, a.apply(this, b);
      });
    }),
        U = (j(function (a) {
      function b(a, b) {
        return [i(a, b)];
      }

      var c = t(a);
      return j(function (a) {
        return w(b, a, c)[0];
      });
    }), j(function (a) {
      return j(function (b) {
        for (var c, d = 0; d < V(a); d++) {
          if (c = i(b, a[d])) return c;
        }
      });
    })),
        V = h("length"),
        W = T(p, String),
        X = null,
        Y = h(0),
        Z = h(1),
        $ = j(t),
        _ = function () {
      var a = function a(_a) {
        return _a.exec.bind(_a);
      },
          b = j(function (b) {
        return b.unshift(/^/), a(RegExp(b.map(h("source")).join("")));
      }),
          c = /(\$?)/,
          d = /([\w-_]+|\*)/,
          e = /()/,
          f = /\["([^"]+)"\]/,
          g = /\[(\d+|\*)\]/,
          i = /{([\w ]*?)}/,
          k = /(?:{([\w ]*?)})?/,
          l = b(c, d, k),
          m = b(c, f, k),
          n = b(c, g, k),
          o = b(c, e, i),
          p = b(/\.\./),
          q = b(/\./),
          r = b(c, /!/),
          s = b(/$/);

      return function (a) {
        return a(U(l, m, n, o), p, q, r, s);
      };
    }(),
        ab = h("key"),
        bb = h("node"),
        cb = {},
        db = _(function (a, b, c, e, f) {
      function h(a, b) {
        var c = b[z],
            d = c && "*" != c ? function (a) {
          return B(a) == c;
        } : n;
        return l(d, a);
      }

      function i(a, b) {
        var c = b[A];
        if (!c) return a;
        var d = T(r, t(c.split(/\W+/))),
            e = g(d, C);
        return l(e, a);
      }

      function j(a, b) {
        var c = !!b[y];
        return c ? l(a, Y) : a;
      }

      function k(a) {
        function b(a) {
          return B(a) != cb;
        }

        return a == n ? n : l(b, g(a, Z));
      }

      function m(a) {
        if (a == n) return n;
        var b = o(),
            c = a,
            d = k(function (a) {
          return e(a);
        }),
            e = U(b, c, d);
        return e;
      }

      function o() {
        return function (a) {
          return B(a) == cb;
        };
      }

      function p(a) {
        return function (b) {
          var c = a(b);
          return c === !0 ? Y(b) : c;
        };
      }

      function q(a, b, c) {
        return w(function (a, b) {
          return b(a, c);
        }, b, a);
      }

      function s(a, b, c, d, e) {
        var f = a(c);

        if (f) {
          var g = q(b, d, f),
              h = c.substr(V(f[0]));
          return e(h, g);
        }
      }

      function u(a, b) {
        return T(s, a, b);
      }

      function v(a, b) {
        return b;
      }

      function x(a, b) {
        var c = a ? x : v;
        return D(a, b, c);
      }

      var y = 1,
          z = 2,
          A = 3,
          B = g(ab, Y),
          C = g(bb, Y),
          D = U(u(a, $(j, i, h, k)), u(b, $(m)), u(c, $()), u(e, $(j, o)), u(f, $(p)), function (a) {
        throw d('"' + a + '" could not be tokenised');
      });
      return function (a) {
        try {
          return x(a, n);
        } catch (b) {
          throw d('Could not compile "' + a + '" because ' + b.message);
        }
      };
    }),
        eb = 1,
        fb = eb++,
        gb = eb++,
        hb = eb++,
        ib = eb++,
        jb = "fail",
        kb = eb++,
        lb = eb++,
        mb = "start",
        nb = "data",
        ob = "end",
        pb = eb++,
        qb = eb++,
        rb = eb++,
        sb = eb++;

    S.drop = function () {
      return S.drop;
    }, "function" == typeof define && define.amd ? define("oboe", [], function () {
      return S;
    }) : "object" == typeof exports ? module.exports = S : a.oboe = S;
  }(function () {
    try {
      return window;
    } catch (a) {
      return self;
    }
  }(), Object, Array, Error, JSON);
},710,[],"react-native-fetch-blob/lib/oboe-browser.min.js");
__d(function (global, require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory(require(_dependencyMap[0], "./core"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function () {
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var Hasher = C_lib.Hasher;
			var C_algo = C.algo;
			var W = [];
			var SHA1 = C_algo.SHA1 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
				},
				_doProcessBlock: function _doProcessBlock(M, offset) {
					var H = this._hash.words;
					var a = H[0];
					var b = H[1];
					var c = H[2];
					var d = H[3];
					var e = H[4];

					for (var i = 0; i < 80; i++) {
						if (i < 16) {
							W[i] = M[offset + i] | 0;
						} else {
							var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
							W[i] = n << 1 | n >>> 31;
						}

						var t = (a << 5 | a >>> 27) + e + W[i];

						if (i < 20) {
							t += (b & c | ~b & d) + 0x5a827999;
						} else if (i < 40) {
							t += (b ^ c ^ d) + 0x6ed9eba1;
						} else if (i < 60) {
							t += (b & c | b & d | c & d) - 0x70e44324;
						} else {
								t += (b ^ c ^ d) - 0x359d3e2a;
							}

						e = d;
						d = c;
						c = b << 30 | b >>> 2;
						b = a;
						a = t;
					}

					H[0] = H[0] + a | 0;
					H[1] = H[1] + b | 0;
					H[2] = H[2] + c | 0;
					H[3] = H[3] + d | 0;
					H[4] = H[4] + e | 0;
				},
				_doFinalize: function _doFinalize() {
					var data = this._data;
					var dataWords = data.words;
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;

					this._process();

					return this._hash;
				},
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
					return clone;
				}
			});
			C.SHA1 = Hasher._createHelper(SHA1);
			C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		})();

		return CryptoJS.SHA1;
	});
},711,[712],"crypto-js/sha1.js");
__d(function (global, require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory();
		} else if (typeof define === "function" && define.amd) {
			define([], factory);
		} else {
			root.CryptoJS = factory();
		}
	})(this, function () {
		var CryptoJS = CryptoJS || function (Math, undefined) {
			var create = Object.create || function () {
				function F() {}

				;
				return function (obj) {
					var subtype;
					F.prototype = obj;
					subtype = new F();
					F.prototype = null;
					return subtype;
				};
			}();

			var C = {};
			var C_lib = C.lib = {};

			var Base = C_lib.Base = function () {
				return {
					extend: function extend(overrides) {
						var subtype = create(this);

						if (overrides) {
							subtype.mixIn(overrides);
						}

						if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
							subtype.init = function () {
								subtype.$super.init.apply(this, arguments);
							};
						}

						subtype.init.prototype = subtype;
						subtype.$super = this;
						return subtype;
					},
					create: function create() {
						var instance = this.extend();
						instance.init.apply(instance, arguments);
						return instance;
					},
					init: function init() {},
					mixIn: function mixIn(properties) {
						for (var propertyName in properties) {
							if (properties.hasOwnProperty(propertyName)) {
								this[propertyName] = properties[propertyName];
							}
						}

						if (properties.hasOwnProperty('toString')) {
							this.toString = properties.toString;
						}
					},
					clone: function clone() {
						return this.init.prototype.extend(this);
					}
				};
			}();

			var WordArray = C_lib.WordArray = Base.extend({
				init: function init(words, sigBytes) {
					words = this.words = words || [];

					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 4;
					}
				},
				toString: function toString(encoder) {
					return (encoder || Hex).stringify(this);
				},
				concat: function concat(wordArray) {
					var thisWords = this.words;
					var thatWords = wordArray.words;
					var thisSigBytes = this.sigBytes;
					var thatSigBytes = wordArray.sigBytes;
					this.clamp();

					if (thisSigBytes % 4) {
						for (var i = 0; i < thatSigBytes; i++) {
							var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
							thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
						}
					} else {
						for (var i = 0; i < thatSigBytes; i += 4) {
							thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
						}
					}

					this.sigBytes += thatSigBytes;
					return this;
				},
				clamp: function clamp() {
					var words = this.words;
					var sigBytes = this.sigBytes;
					words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
					words.length = Math.ceil(sigBytes / 4);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone.words = this.words.slice(0);
					return clone;
				},
				random: function random(nBytes) {
					var words = [];

					var r = function r(m_w) {
						var m_w = m_w;
						var m_z = 0x3ade68b1;
						var mask = 0xffffffff;
						return function () {
							m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
							m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
							var result = (m_z << 0x10) + m_w & mask;
							result /= 0x100000000;
							result += 0.5;
							return result * (Math.random() > .5 ? 1 : -1);
						};
					};

					for (var i = 0, rcache; i < nBytes; i += 4) {
						var _r = r((rcache || Math.random()) * 0x100000000);

						rcache = _r() * 0x3ade67b7;
						words.push(_r() * 0x100000000 | 0);
					}

					return new WordArray.init(words, nBytes);
				}
			});
			var C_enc = C.enc = {};
			var Hex = C_enc.Hex = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var hexChars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						hexChars.push((bite >>> 4).toString(16));
						hexChars.push((bite & 0x0f).toString(16));
					}

					return hexChars.join('');
				},
				parse: function parse(hexStr) {
					var hexStrLength = hexStr.length;
					var words = [];

					for (var i = 0; i < hexStrLength; i += 2) {
						words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
					}

					return new WordArray.init(words, hexStrLength / 2);
				}
			};
			var Latin1 = C_enc.Latin1 = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var latin1Chars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						latin1Chars.push(String.fromCharCode(bite));
					}

					return latin1Chars.join('');
				},
				parse: function parse(latin1Str) {
					var latin1StrLength = latin1Str.length;
					var words = [];

					for (var i = 0; i < latin1StrLength; i++) {
						words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
					}

					return new WordArray.init(words, latin1StrLength);
				}
			};
			var Utf8 = C_enc.Utf8 = {
				stringify: function stringify(wordArray) {
					try {
						return decodeURIComponent(escape(Latin1.stringify(wordArray)));
					} catch (e) {
						throw new Error('Malformed UTF-8 data');
					}
				},
				parse: function parse(utf8Str) {
					return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				}
			};
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				reset: function reset() {
					this._data = new WordArray.init();
					this._nDataBytes = 0;
				},
				_append: function _append(data) {
					if (typeof data == 'string') {
						data = Utf8.parse(data);
					}

					this._data.concat(data);

					this._nDataBytes += data.sigBytes;
				},
				_process: function _process(doFlush) {
					var data = this._data;
					var dataWords = data.words;
					var dataSigBytes = data.sigBytes;
					var blockSize = this.blockSize;
					var blockSizeBytes = blockSize * 4;
					var nBlocksReady = dataSigBytes / blockSizeBytes;

					if (doFlush) {
						nBlocksReady = Math.ceil(nBlocksReady);
					} else {
						nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
					}

					var nWordsReady = nBlocksReady * blockSize;
					var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

					if (nWordsReady) {
						for (var offset = 0; offset < nWordsReady; offset += blockSize) {
							this._doProcessBlock(dataWords, offset);
						}

						var processedWords = dataWords.splice(0, nWordsReady);
						data.sigBytes -= nBytesReady;
					}

					return new WordArray.init(processedWords, nBytesReady);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone._data = this._data.clone();
					return clone;
				},
				_minBufferSize: 0
			});
			var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				cfg: Base.extend(),
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
					this.reset();
				},
				reset: function reset() {
					BufferedBlockAlgorithm.reset.call(this);

					this._doReset();
				},
				update: function update(messageUpdate) {
					this._append(messageUpdate);

					this._process();

					return this;
				},
				finalize: function finalize(messageUpdate) {
					if (messageUpdate) {
						this._append(messageUpdate);
					}

					var hash = this._doFinalize();

					return hash;
				},
				blockSize: 512 / 32,
				_createHelper: function _createHelper(hasher) {
					return function (message, cfg) {
						return new hasher.init(cfg).finalize(message);
					};
				},
				_createHmacHelper: function _createHmacHelper(hasher) {
					return function (message, key) {
						return new C_algo.HMAC.init(hasher, key).finalize(message);
					};
				}
			});
			var C_algo = C.algo = {};
			return C;
		}(Math);

		return CryptoJS;
	});
},712,[],"crypto-js/core.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Price/CoinListHeader.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _colors = require(_dependencyMap[2], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var CoinListHeader = function CoinListHeader() {
        var container = styles.container,
            crypto = styles.crypto,
            price = styles.price,
            change = styles.change,
            priceContainer = styles.priceContainer;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    style: crypto,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 10
                    }
                },
                "CRYPTO"
            ),
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: priceContainer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 11
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: price,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 12
                        }
                    },
                    "PRICE"
                ),
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: change,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 13
                        }
                    },
                    "24H"
                )
            )
        );
    };

    var styles = {
        container: {
            height: 30,
            backgroundColor: _colors2.default.gray50,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            paddingLeft: 16,
            paddingRight: 16
        },
        priceContainer: {
            flexDirection: 'row',
            justifyContent: 'flex-end'
        },
        crypto: {
            fontSize: 10,
            fontWeight: '400'
        },
        price: {
            fontSize: 10,
            fontWeight: '400'
        },
        change: {
            fontSize: 10,
            fontWeight: '400',
            width: 60,
            textAlign: 'right'
        }
    };
    exports.default = CoinListHeader;
},713,[109,12,671],"NNCoins/src/components/Screens/Price/CoinListHeader.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = FetchPriceData;

    var _axios = require(_dependencyMap[0], "axios");

    var _axios2 = babelHelpers.interopRequireDefault(_axios);

    var _Constants = require(_dependencyMap[1], "./../Utils/Constants");

    var _ActionTypes = require(_dependencyMap[2], "./../Utils/ActionTypes");

    function FetchPriceData() {
        return function (dispatch) {
            dispatch({
                type: _ActionTypes.FETCHING_PRICE_DATA
            });
            return _axios2.default.get(_Constants.NNBITCOINS_PRICE_BASE_URL + "/last/hour/all.json?limit=100").then(function (res) {
                dispatch({
                    type: _ActionTypes.FETCHING_PRICE_DATA_SUCCESS,
                    payload: res.data
                });
            }).catch(function (err) {
                dispatch({
                    type: _ActionTypes.FETCHING_PRICE_DATA_FAIL,
                    payload: err
                });
            });
        };
    }
},714,[715,554,548],"NNCoins/src/Actions/FetchPriceData.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0], './lib/axios');
},715,[716],"axios/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './utils');

  var bind = require(_dependencyMap[1], './helpers/bind');

  var Axios = require(_dependencyMap[2], './core/Axios');

  var defaults = require(_dependencyMap[3], './defaults');

  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    utils.extend(instance, Axios.prototype, context);
    utils.extend(instance, context);
    return instance;
  }

  var axios = createInstance(defaults);
  axios.Axios = Axios;

  axios.create = function create(instanceConfig) {
    return createInstance(utils.merge(defaults, instanceConfig));
  };

  axios.Cancel = require(_dependencyMap[4], './cancel/Cancel');
  axios.CancelToken = require(_dependencyMap[5], './cancel/CancelToken');
  axios.isCancel = require(_dependencyMap[6], './cancel/isCancel');

  axios.all = function all(promises) {
    return Promise.all(promises);
  };

  axios.spread = require(_dependencyMap[7], './helpers/spread');
  module.exports = axios;
  module.exports.default = axios;
},716,[717,718,720,721,738,739,735,740],"axios/lib/axios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var bind = require(_dependencyMap[0], './helpers/bind');

  var isBuffer = require(_dependencyMap[1], 'is-buffer');

  var toString = Object.prototype.toString;

  function isArray(val) {
    return toString.call(val) === '[object Array]';
  }

  function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
  }

  function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
  }

  function isArrayBufferView(val) {
    var result;

    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    }

    return result;
  }

  function isString(val) {
    return typeof val === 'string';
  }

  function isNumber(val) {
    return typeof val === 'number';
  }

  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  function isObject(val) {
    return val !== null && typeof val === 'object';
  }

  function isDate(val) {
    return toString.call(val) === '[object Date]';
  }

  function isFile(val) {
    return toString.call(val) === '[object File]';
  }

  function isBlob(val) {
    return toString.call(val) === '[object Blob]';
  }

  function isFunction(val) {
    return toString.call(val) === '[object Function]';
  }

  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }

  function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
  }

  function trim(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
  }

  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
      return false;
    }

    return typeof window !== 'undefined' && typeof document !== 'undefined';
  }

  function forEach(obj, fn) {
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    if (typeof obj !== 'object' && !isArray(obj)) {
      obj = [obj];
    }

    if (isArray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  function merge() {
    var result = {};

    function assignValue(val, key) {
      if (typeof result[key] === 'object' && typeof val === 'object') {
        result[key] = merge(result[key], val);
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }

    return result;
  }

  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim
  };
},717,[718,719],"axios/lib/utils.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      return fn.apply(thisArg, args);
    };
  };
},718,[],"axios/lib/helpers/bind.js");
__d(function (global, require, module, exports, _dependencyMap) {
  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */module.exports = function (obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
  };

  function isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
  }

  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
  }
},719,[],"is-buffer/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var defaults = require(_dependencyMap[0], './../defaults');

  var utils = require(_dependencyMap[1], './../utils');

  var InterceptorManager = require(_dependencyMap[2], './InterceptorManager');

  var dispatchRequest = require(_dependencyMap[3], './dispatchRequest');

  var isAbsoluteURL = require(_dependencyMap[4], './../helpers/isAbsoluteURL');

  var combineURLs = require(_dependencyMap[5], './../helpers/combineURLs');

  function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  Axios.prototype.request = function request(config) {
    if (typeof config === 'string') {
      config = utils.merge({
        url: arguments[0]
      }, arguments[1]);
    }

    config = utils.merge(defaults, this.defaults, {
      method: 'get'
    }, config);
    config.method = config.method.toLowerCase();

    if (config.baseURL && !isAbsoluteURL(config.url)) {
      config.url = combineURLs(config.baseURL, config.url);
    }

    var chain = [dispatchRequest, undefined];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      chain.push(interceptor.fulfilled, interceptor.rejected);
    });

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  };

  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    Axios.prototype[method] = function (url, config) {
      return this.request(utils.merge(config || {}, {
        method: method,
        url: url
      }));
    };
  });
  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    Axios.prototype[method] = function (url, data, config) {
      return this.request(utils.merge(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });
  module.exports = Axios;
},720,[721,717,732,733,736,737],"axios/lib/core/Axios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './utils');

  var normalizeHeaderName = require(_dependencyMap[1], './helpers/normalizeHeaderName');

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;

    if (typeof XMLHttpRequest !== 'undefined') {
      adapter = require(_dependencyMap[2], './adapters/xhr');
    } else if (typeof process !== 'undefined') {
      adapter = require(_dependencyMap[3], './adapters/http');
    }

    return adapter;
  }

  var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Content-Type');

      if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
        return data;
      }

      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }

      if (utils.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }

      if (utils.isObject(data)) {
        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
        return JSON.stringify(data);
      }

      return data;
    }],
    transformResponse: [function transformResponse(data) {
      if (typeof data === 'string') {
        try {
          data = JSON.parse(data);
        } catch (e) {}
      }

      return data;
    }],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    }
  };
  defaults.headers = {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  };
  utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  });
  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  });
  module.exports = defaults;
},721,[717,722,723,723],"axios/lib/defaults.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], '../utils');

  module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };
},722,[717],"axios/lib/helpers/normalizeHeaderName.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  var settle = require(_dependencyMap[1], './../core/settle');

  var buildURL = require(_dependencyMap[2], './../helpers/buildURL');

  var parseHeaders = require(_dependencyMap[3], './../helpers/parseHeaders');

  var isURLSameOrigin = require(_dependencyMap[4], './../helpers/isURLSameOrigin');

  var createError = require(_dependencyMap[5], '../core/createError');

  var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || require(_dependencyMap[6], './../helpers/btoa');

  module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;

      if (utils.isFormData(requestData)) {
        delete requestHeaders['Content-Type'];
      }

      var request = new XMLHttpRequest();
      var loadEvent = 'onreadystatechange';
      var xDomain = false;

      if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
        request = new window.XDomainRequest();
        loadEvent = 'onload';
        xDomain = true;

        request.onprogress = function handleProgress() {};

        request.ontimeout = function handleTimeout() {};
      }

      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password || '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
      request.timeout = config.timeout;

      request[loadEvent] = function handleLoad() {
        if (!request || request.readyState !== 4 && !xDomain) {
          return;
        }

        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }

        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status === 1223 ? 204 : request.status,
          statusText: request.status === 1223 ? 'No Content' : request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };
        settle(resolve, reject, response);
        request = null;
      };

      request.onerror = function handleError() {
        reject(createError('Network Error', config, null, request));
        request = null;
      };

      request.ontimeout = function handleTimeout() {
        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));
        request = null;
      };

      if (utils.isStandardBrowserEnv()) {
        var cookies = require(_dependencyMap[7], './../helpers/cookies');

        var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            delete requestHeaders[key];
          } else {
            request.setRequestHeader(key, val);
          }
        });
      }

      if (config.withCredentials) {
        request.withCredentials = true;
      }

      if (config.responseType) {
        try {
          request.responseType = config.responseType;
        } catch (e) {
          if (config.responseType !== 'json') {
            throw e;
          }
        }
      }

      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken) {
        config.cancelToken.promise.then(function onCanceled(cancel) {
          if (!request) {
            return;
          }

          request.abort();
          reject(cancel);
          request = null;
        });
      }

      if (requestData === undefined) {
        requestData = null;
      }

      request.send(requestData);
    });
  };
},723,[717,724,727,728,729,725,730,731],"axios/lib/adapters/xhr.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var createError = require(_dependencyMap[0], './createError');

  module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;

    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
    }
  };
},724,[725],"axios/lib/core/settle.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var enhanceError = require(_dependencyMap[0], './enhanceError');

  module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  };
},725,[726],"axios/lib/core/createError.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;

    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    return error;
  };
},726,[],"axios/lib/core/enhanceError.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  function encode(val) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
  }

  module.exports = function buildURL(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }

    var serializedParams;

    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils.isArray(val)) {
          key = key + '[]';
        }

        if (!utils.isArray(val)) {
          val = [val];
        }

        utils.forEach(val, function parseValue(v) {
          if (utils.isDate(v)) {
            v = v.toISOString();
          } else if (utils.isObject(v)) {
            v = JSON.stringify(v);
          }

          parts.push(encode(key) + '=' + encode(v));
        });
      });
      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };
},727,[717],"axios/lib/helpers/buildURL.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) {
      return parsed;
    }

    utils.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils.trim(line.substr(0, i)).toLowerCase();
      val = utils.trim(line.substr(i + 1));

      if (key) {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
    return parsed;
  };
},728,[717],"axios/lib/helpers/parseHeaders.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    function resolveURL(url) {
      var href = url;

      if (msie) {
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }();
},729,[717],"axios/lib/helpers/isURLSameOrigin.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function E() {
    this.message = 'String contains an invalid character';
  }

  E.prototype = new Error();
  E.prototype.code = 5;
  E.prototype.name = 'InvalidCharacterError';

  function btoa(input) {
    var str = String(input);
    var output = '';

    for (var block, charCode, idx = 0, map = chars; str.charAt(idx | 0) || (map = '=', idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
      charCode = str.charCodeAt(idx += 3 / 4);

      if (charCode > 0xFF) {
        throw new E();
      }

      block = block << 8 | charCode;
    }

    return output;
  }

  module.exports = btoa;
},730,[],"axios/lib/helpers/btoa.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },
      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  }() : function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() {
        return null;
      },
      remove: function remove() {}
    };
  }();
},731,[717],"axios/lib/helpers/cookies.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  function InterceptorManager() {
    this.handlers = [];
  }

  InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected
    });
    return this.handlers.length - 1;
  };

  InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  module.exports = InterceptorManager;
},732,[717],"axios/lib/core/InterceptorManager.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  var transformData = require(_dependencyMap[1], './transformData');

  var isCancel = require(_dependencyMap[2], '../cancel/isCancel');

  var defaults = require(_dependencyMap[3], '../defaults');

  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  }

  module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = config.headers || {};
    config.data = transformData(config.data, config.headers, config.transformRequest);
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
    utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData(response.data, response.headers, config.transformResponse);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        if (reason && reason.response) {
          reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
      }

      return Promise.reject(reason);
    });
  };
},733,[717,734,735,721],"axios/lib/core/dispatchRequest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var utils = require(_dependencyMap[0], './../utils');

  module.exports = function transformData(data, headers, fns) {
    utils.forEach(fns, function transform(fn) {
      data = fn(data, headers);
    });
    return data;
  };
},734,[717],"axios/lib/core/transformData.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };
},735,[],"axios/lib/cancel/isCancel.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function isAbsoluteURL(url) {
    return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
    );
  };
},736,[],"axios/lib/helpers/isAbsoluteURL.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
  };
},737,[],"axios/lib/helpers/combineURLs.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function Cancel(message) {
    this.message = message;
  }

  Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel.prototype.__CANCEL__ = true;
  module.exports = Cancel;
},738,[],"axios/lib/cancel/Cancel.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Cancel = require(_dependencyMap[0], './Cancel');

  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
      if (token.reason) {
        return;
      }

      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    });
  }

  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  module.exports = CancelToken;
},739,[738],"axios/lib/cancel/CancelToken.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };
},740,[],"axios/lib/helpers/spread.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _firebase = require(_dependencyMap[0], "./modules/core/firebase");

  var _firebase2 = babelHelpers.interopRequireDefault(_firebase);

  exports.default = _firebase2.default;
},741,[742],"react-native-firebase/dist/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _apps = require(_dependencyMap[1], "../../utils/apps");

  var _apps2 = babelHelpers.interopRequireDefault(_apps);

  var _internals = require(_dependencyMap[2], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _app = require(_dependencyMap[3], "./app");

  var _app2 = babelHelpers.interopRequireDefault(_app);

  var _version = require(_dependencyMap[4], "../../version");

  var _version2 = babelHelpers.interopRequireDefault(_version);

  var _admob = require(_dependencyMap[5], "../admob");

  var _auth = require(_dependencyMap[6], "../auth");

  var _analytics = require(_dependencyMap[7], "../analytics");

  var _config = require(_dependencyMap[8], "../config");

  var _crash = require(_dependencyMap[9], "../crash");

  var _crashlytics = require(_dependencyMap[10], "../fabric/crashlytics");

  var _database = require(_dependencyMap[11], "../database");

  var _firestore = require(_dependencyMap[12], "../firestore");

  var _links = require(_dependencyMap[13], "../links");

  var _messaging = require(_dependencyMap[14], "../messaging");

  var _perf = require(_dependencyMap[15], "../perf");

  var _storage = require(_dependencyMap[16], "../storage");

  var _utils = require(_dependencyMap[17], "../utils");

  var FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;

  var Firebase = function () {
    function Firebase() {
      babelHelpers.classCallCheck(this, Firebase);

      if (!FirebaseCoreModule) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_CORE);
      }

      _apps2.default.initializeNativeApps();

      this.admob = _apps2.default.moduleAndStatics('admob', _admob.statics, _admob.MODULE_NAME);
      this.analytics = _apps2.default.moduleAndStatics('analytics', _analytics.statics, _analytics.MODULE_NAME);
      this.auth = _apps2.default.moduleAndStatics('auth', _auth.statics, _auth.MODULE_NAME);
      this.config = _apps2.default.moduleAndStatics('config', _config.statics, _config.MODULE_NAME);
      this.crash = _apps2.default.moduleAndStatics('crash', _crash.statics, _crash.MODULE_NAME);
      this.database = _apps2.default.moduleAndStatics('database', _database.statics, _database.MODULE_NAME);
      this.fabric = {
        crashlytics: _apps2.default.moduleAndStatics('crashlytics', _crashlytics.statics, _crashlytics.MODULE_NAME)
      };
      this.firestore = _apps2.default.moduleAndStatics('firestore', _firestore.statics, _firestore.MODULE_NAME);
      this.links = _apps2.default.moduleAndStatics('links', _links.statics, _links.MODULE_NAME);
      this.messaging = _apps2.default.moduleAndStatics('messaging', _messaging.statics, _messaging.MODULE_NAME);
      this.perf = _apps2.default.moduleAndStatics('perf', _perf.statics, _perf.MODULE_NAME);
      this.storage = _apps2.default.moduleAndStatics('storage', _storage.statics, _storage.MODULE_NAME);
      this.utils = _apps2.default.moduleAndStatics('utils', _utils.statics, _utils.MODULE_NAME);
    }

    babelHelpers.createClass(Firebase, [{
      key: "initializeApp",
      value: function initializeApp(options, name) {
        return _apps2.default.initializeApp(options, name);
      }
    }, {
      key: "app",
      value: function app(name) {
        return _apps2.default.app(name);
      }
    }, {
      key: "apps",
      get: function get() {
        return _apps2.default.apps();
      }
    }, {
      key: "SDK_VERSION",
      get: function get() {
        return _version2.default;
      }
    }]);
    return Firebase;
  }();

  exports.default = new Firebase();
},742,[12,743,750,744,812,752,764,775,776,777,778,779,787,803,804,806,808,811],"react-native-firebase/dist/modules/core/firebase.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _app2 = require(_dependencyMap[1], "../modules/core/app");

  var _app3 = babelHelpers.interopRequireDefault(_app2);

  var _internals = require(_dependencyMap[2], "./internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _ = require(_dependencyMap[3], "./");

  var FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;
  var APPS = {};
  var APP_MODULES = {};
  var DEFAULT_APP_NAME = '[DEFAULT]';
  exports.default = {
    DEFAULT_APP_NAME: DEFAULT_APP_NAME,
    app: function app(name) {
      var _name = name ? name.toUpperCase() : DEFAULT_APP_NAME;

      var app = APPS[_name];
      if (!app) throw new Error(_internals2.default.STRINGS.ERROR_APP_NOT_INIT(_name));
      return app;
    },
    apps: function apps() {
      return Object.values(APPS);
    },
    appModule: function appModule(app, namespace, InstanceClass) {
      return function () {
        if (!APP_MODULES[app]) {
          APP_MODULES[app] = {};
        }

        if (_.isAndroid && namespace !== 'utils' && !_internals2.default.FLAGS.checkedPlayServices) {
          _internals2.default.FLAGS.checkedPlayServices = true;
          app.utils().checkPlayServicesAvailability();
        }

        if (!APP_MODULES[app][namespace]) {
          APP_MODULES[app][namespace] = new InstanceClass(app, app.options);
        }

        return APP_MODULES[app][namespace];
      };
    },
    deleteApp: function deleteApp(name) {
      var app = APPS[name];
      if (!app) return Promise.resolve(true);
      return app.delete().then(function () {
        delete APPS[name];
        return true;
      });
    },
    initializeApp: function initializeApp(options, name) {
      if (name && !(0, _.isString)(name)) {
        throw new Error(_internals2.default.STRINGS.ERROR_INIT_STRING_NAME);
      }

      var _name = (name || DEFAULT_APP_NAME).toUpperCase();

      if (APPS[_name]) {
        console.warn(_internals2.default.STRINGS.WARN_INITIALIZE_DEPRECATION);
        return APPS[_name];
      }

      if (!(0, _.isObject)(options)) {
        throw new Error(_internals2.default.STRINGS.ERROR_INIT_OBJECT);
      }

      if (!options.apiKey) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('apiKey'));
      }

      if (!options.appId) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('appId'));
      }

      if (!options.databaseURL) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('databaseURL'));
      }

      if (!options.messagingSenderId) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('messagingSenderId'));
      }

      if (!options.projectId) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('projectId'));
      }

      if (!options.storageBucket) {
        throw new Error(_internals2.default.STRINGS.ERROR_MISSING_OPT('storageBucket'));
      }

      APPS[_name] = new _app3.default(_name, options);
      return APPS[_name];
    },
    initializeNativeApps: function initializeNativeApps() {
      for (var i = 0, len = FirebaseCoreModule.apps.length; i < len; i++) {
        var app = FirebaseCoreModule.apps[i];
        var options = babelHelpers.extends({}, app);
        delete options.name;
        APPS[app.name] = new _app3.default(app.name, options, true);
      }
    },
    moduleAndStatics: function moduleAndStatics(namespace, statics, moduleName) {
      var _this = this;

      var getModule = function getModule(app) {
        var _app = app;
        if (_app && !(_app instanceof _app3.default)) throw new Error(_internals2.default.STRINGS.ERROR_NOT_APP(namespace));else if (!_app) _app = _this.app(DEFAULT_APP_NAME);

        if (namespace === 'crashlytics') {
          return _app.fabric[namespace]();
        }

        var module = _app[namespace];
        return module();
      };

      return babelHelpers.extends(getModule, statics, {
        nativeModuleExists: !!_reactNative.NativeModules[moduleName]
      });
    }
  };
},743,[12,744,750,751],"react-native-firebase/dist/utils/apps.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _apps = require(_dependencyMap[1], "../../utils/apps");

  var _apps2 = babelHelpers.interopRequireDefault(_apps);

  var _events = require(_dependencyMap[2], "../../utils/events");

  var _internals = require(_dependencyMap[3], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _utils = require(_dependencyMap[4], "../../utils");

  var _admob = require(_dependencyMap[5], "../admob");

  var _admob2 = babelHelpers.interopRequireDefault(_admob);

  var _auth = require(_dependencyMap[6], "../auth");

  var _auth2 = babelHelpers.interopRequireDefault(_auth);

  var _analytics = require(_dependencyMap[7], "../analytics");

  var _analytics2 = babelHelpers.interopRequireDefault(_analytics);

  var _config = require(_dependencyMap[8], "../config");

  var _config2 = babelHelpers.interopRequireDefault(_config);

  var _crash = require(_dependencyMap[9], "../crash");

  var _crash2 = babelHelpers.interopRequireDefault(_crash);

  var _crashlytics = require(_dependencyMap[10], "../fabric/crashlytics");

  var _crashlytics2 = babelHelpers.interopRequireDefault(_crashlytics);

  var _database = require(_dependencyMap[11], "../database");

  var _database2 = babelHelpers.interopRequireDefault(_database);

  var _firestore = require(_dependencyMap[12], "../firestore");

  var _firestore2 = babelHelpers.interopRequireDefault(_firestore);

  var _links = require(_dependencyMap[13], "../links");

  var _links2 = babelHelpers.interopRequireDefault(_links);

  var _messaging = require(_dependencyMap[14], "../messaging");

  var _messaging2 = babelHelpers.interopRequireDefault(_messaging);

  var _perf = require(_dependencyMap[15], "../perf");

  var _perf2 = babelHelpers.interopRequireDefault(_perf);

  var _storage = require(_dependencyMap[16], "../storage");

  var _storage2 = babelHelpers.interopRequireDefault(_storage);

  var _utils2 = require(_dependencyMap[17], "../utils");

  var _utils3 = babelHelpers.interopRequireDefault(_utils2);

  var FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;

  var App = function () {
    function App(name, options) {
      var _this = this;

      var fromNative = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      babelHelpers.classCallCheck(this, App);
      this._initialized = false;
      this._nativeInitialized = false;
      this._name = name;
      this._options = babelHelpers.extends({}, options);

      if (fromNative) {
        this._initialized = true;
        this._nativeInitialized = true;
      } else if (options.databaseURL && options.apiKey) {
        FirebaseCoreModule.initializeApp(this._name, this._options, function (error, result) {
          _this._initialized = true;

          _events.SharedEventEmitter.emit("AppReady:" + _this._name, {
            error: error,
            result: result
          });
        });
      }

      this.admob = _apps2.default.appModule(this, _admob.NAMESPACE, _admob2.default);
      this.analytics = _apps2.default.appModule(this, _analytics.NAMESPACE, _analytics2.default);
      this.auth = _apps2.default.appModule(this, _auth.NAMESPACE, _auth2.default);
      this.config = _apps2.default.appModule(this, _config.NAMESPACE, _config2.default);
      this.crash = _apps2.default.appModule(this, _crash.NAMESPACE, _crash2.default);
      this.database = _apps2.default.appModule(this, _database.NAMESPACE, _database2.default);
      this.fabric = {
        crashlytics: _apps2.default.appModule(this, _crashlytics.NAMESPACE, _crashlytics2.default)
      };
      this.firestore = _apps2.default.appModule(this, _firestore.NAMESPACE, _firestore2.default);
      this.links = _apps2.default.appModule(this, _links.NAMESPACE, _links2.default);
      this.messaging = _apps2.default.appModule(this, _messaging.NAMESPACE, _messaging2.default);
      this.perf = _apps2.default.appModule(this, _perf.NAMESPACE, _perf2.default);
      this.storage = _apps2.default.appModule(this, _storage.NAMESPACE, _storage2.default);
      this.utils = _apps2.default.appModule(this, _utils2.NAMESPACE, _utils3.default);
      this._extendedProps = {};
    }

    babelHelpers.createClass(App, [{
      key: "extendApp",
      value: function extendApp(props) {
        if (!(0, _utils.isObject)(props)) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_ARG('Object', 'extendApp'));
        }

        var keys = Object.keys(props);

        for (var i = 0, len = keys.length; i < len; i++) {
          var key = keys[i];

          if (!this._extendedProps[key] && Object.hasOwnProperty.call(this, key)) {
            throw new Error(_internals2.default.STRINGS.ERROR_PROTECTED_PROP(key));
          }

          this[key] = props[key];
          this._extendedProps[key] = true;
        }
      }
    }, {
      key: "delete",
      value: function _delete() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('app', 'delete'));
      }
    }, {
      key: "onReady",
      value: function onReady() {
        var _this2 = this;

        if (this._initialized) return Promise.resolve(this);
        return new Promise(function (resolve, reject) {
          _events.SharedEventEmitter.once("AppReady:" + _this2._name, function (_ref) {
            var error = _ref.error;
            if (error) return reject(new Error(error));
            return resolve(_this2);
          });
        });
      }
    }, {
      key: "toString",
      value: function toString() {
        return this._name;
      }
    }, {
      key: "name",
      get: function get() {
        return this._name;
      }
    }, {
      key: "options",
      get: function get() {
        return babelHelpers.extends({}, this._options);
      }
    }]);
    return App;
  }();

  exports.default = App;
},744,[12,743,745,750,751,752,764,775,776,777,778,779,787,803,804,806,808,811],"react-native-firebase/dist/modules/core/app.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialiseNativeModuleEventEmitter = exports.getAppEventName = exports.SharedEventEmitter = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _EventEmitter = require(_dependencyMap[1], "./emitter/EventEmitter");

  var _EventEmitter2 = babelHelpers.interopRequireDefault(_EventEmitter);

  var NATIVE_EMITTERS = {};
  var NATIVE_SUBSCRIPTIONS = {};
  var SharedEventEmitter = exports.SharedEventEmitter = new _EventEmitter2.default();

  var getAppEventName = exports.getAppEventName = function getAppEventName(module, eventName) {
    return module.app.name + "-" + eventName;
  };

  var getNativeEmitter = function getNativeEmitter(moduleName, module) {
    var name = module.app.name + "-" + moduleName;
    var nativeModule = _reactNative.NativeModules[moduleName];

    if (!NATIVE_EMITTERS[name]) {
      NATIVE_EMITTERS[name] = new _reactNative.NativeEventEmitter(nativeModule);
    }

    return NATIVE_EMITTERS[name];
  };

  var subscribeToNativeModuleEvents = function subscribeToNativeModuleEvents(moduleName, module, eventName) {
    if (!NATIVE_SUBSCRIPTIONS[eventName]) {
      var nativeEmitter = getNativeEmitter(moduleName, module);
      nativeEmitter.addListener(eventName, function (event) {
        if (event.appName) {
          SharedEventEmitter.emit(event.appName + "-" + eventName, event);
        } else {
          SharedEventEmitter.emit(eventName, event);
        }
      });
      NATIVE_SUBSCRIPTIONS[eventName] = true;
    }
  };

  var initialiseNativeModuleEventEmitter = exports.initialiseNativeModuleEventEmitter = function initialiseNativeModuleEventEmitter(module, config) {
    var events = config.events,
        moduleName = config.moduleName;

    if (events && events.length) {
      for (var i = 0, len = events.length; i < len; i++) {
        subscribeToNativeModuleEvents(moduleName, module, events[i]);
      }
    }
  };
},745,[12,746],"react-native-firebase/dist/utils/events.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = require(_dependencyMap[0], './EmitterSubscription');

  var EventSubscriptionVendor = require(_dependencyMap[1], './EventSubscriptionVendor');

  var emptyFunction = require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
},746,[747,749,58,13],"react-native-firebase/dist/utils/emitter/EventEmitter.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = require(_dependencyMap[0], './EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    babelHelpers.inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      babelHelpers.classCallCheck(this, EmitterSubscription);

      var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    babelHelpers.createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);
    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},747,[748],"react-native-firebase/dist/utils/emitter/EmitterSubscription.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      babelHelpers.classCallCheck(this, EventSubscription);
      this.subscriber = subscriber;
    }

    babelHelpers.createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);
    return EventSubscription;
  }();

  module.exports = EventSubscription;
},748,[],"react-native-firebase/dist/utils/emitter/EventSubscription.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      babelHelpers.classCallCheck(this, EventSubscriptionVendor);
      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    babelHelpers.createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);
    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},749,[13],"react-native-firebase/dist/utils/emitter/EventSubscriptionVendor.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var NAMESPACE_PODS = {
    admob: 'Firebase/AdMob',
    analytics: 'Firebase/Analytics',
    auth: 'Firebase/Auth',
    config: 'Firebase/RemoteConfig',
    crash: 'Firebase/Crash',
    database: 'Firebase/Database',
    links: 'Firebase/DynamicLinks',
    messaging: 'Firebase/Messaging',
    perf: 'Firebase/Performance',
    storage: 'Firebase/Storage'
  };
  var GRADLE_DEPS = {
    admob: 'ads'
  };
  var PLAY_SERVICES_CODES = {
    1: {
      code: 'SERVICE_MISSING',
      message: 'Google Play services is missing on this device.'
    },
    2: {
      code: 'SERVICE_VERSION_UPDATE_REQUIRED',
      message: 'The installed version of Google Play services on this device is out of date.'
    },
    3: {
      code: 'SERVICE_DISABLED',
      message: 'The installed version of Google Play services has been disabled on this device.'
    },
    9: {
      code: 'SERVICE_INVALID',
      message: 'The version of the Google Play services installed on this device is not authentic.'
    },
    18: {
      code: 'SERVICE_UPDATING',
      message: 'Google Play services is currently being updated on this device.'
    },
    19: {
      code: 'SERVICE_MISSING_PERMISSION',
      message: "Google Play service doesn't have one or more required permissions."
    }
  };
  exports.default = {
    OPTIONS: {
      logLevel: 'warn',
      errorOnMissingPlayServices: true,
      promptOnMissingPlayServices: true
    },
    FLAGS: {
      checkedPlayServices: false
    },
    STRINGS: {
      WARN_INITIALIZE_DEPRECATION: "Deprecation: Calling 'initializeApp()' for apps that are already initialised natively " + "is unnecessary, use 'firebase.app()' instead to access the already initialized default app instance.",

      get ERROR_MISSING_CORE() {
        if (_reactNative.Platform.OS === 'ios') {
          return 'RNFirebase core module was not found natively on iOS, ensure you have ' + 'correctly included the RNFirebase pod in your projects `Podfile` and have run `pod install`.' + '\r\n\r\n See http://invertase.link/ios for the ios setup guide.';
        }

        return 'RNFirebase core module was not found natively on Android, ensure you have ' + 'correctly added the RNFirebase and Firebase gradle dependencies to your `android/app/build.gradle` file.' + '\r\n\r\n See http://invertase.link/android for the android setup guide.';
      },

      ERROR_INIT_OBJECT: 'Firebase.initializeApp(options <-- requires a valid configuration object.',
      ERROR_INIT_STRING_NAME: 'Firebase.initializeApp(options, name <-- requires a valid string value.',
      ERROR_MISSING_CB: function ERROR_MISSING_CB(method) {
        return "Missing required callback for method " + method + "().";
      },
      ERROR_MISSING_ARG: function ERROR_MISSING_ARG(type, method) {
        return "Missing required argument of type '" + type + "' for method '" + method + "()'.";
      },
      ERROR_MISSING_ARG_NAMED: function ERROR_MISSING_ARG_NAMED(name, type, method) {
        return "Missing required argument '" + name + "' of type '" + type + "' for method '" + method + "()'.";
      },
      ERROR_ARG_INVALID_VALUE: function ERROR_ARG_INVALID_VALUE(name, expected, got) {
        return "Invalid value for argument '" + name + "' expected value '" + expected + "' but got '" + got + "'.";
      },
      ERROR_PROTECTED_PROP: function ERROR_PROTECTED_PROP(name) {
        return "Property '" + name + "' is protected and can not be overridden by extendApp.";
      },
      ERROR_MISSING_MODULE: function ERROR_MISSING_MODULE(namespace, nativeModule) {
        var snippet = "firebase." + namespace + "()";

        if (_reactNative.Platform.OS === 'ios') {
          return "You attempted to use a firebase module that's not installed natively on your iOS project by calling " + snippet + "." + '\r\n\r\nEnsure you have the required Firebase iOS SDK pod for this module included in your Podfile, in this instance ' + ("confirm you've added \"pod '" + NAMESPACE_PODS[namespace] + "'\" to your Podfile") + '\r\n\r\nSee http://invertase.link/ios for full setup instructions.';
        }

        var fbSDKDep = "'com.google.firebase:firebase-" + (GRADLE_DEPS[namespace] || namespace) + "'";
        var rnFirebasePackage = "'io.invertase.firebase." + namespace + "." + nativeModule + "Package'";
        var newInstance = "'new " + nativeModule + "Package()'";
        return "You attempted to use a firebase module that's not installed on your Android project by calling " + snippet + "." + ("\r\n\r\nEnsure you have:\r\n\r\n1) Installed the required Firebase Android SDK dependency " + fbSDKDep + " in your 'android/app/build.gradle' ") + ("file.\r\n\r\n2) Imported the " + rnFirebasePackage + " module in your 'MainApplication.java' file.\r\n\r\n3) Added the ") + (newInstance + " line inside of the RN 'getPackages()' method list.") + '\r\n\r\nSee http://invertase.link/android for full setup instructions.';
      },
      ERROR_APP_NOT_INIT: function ERROR_APP_NOT_INIT(appName) {
        return "The [" + appName + "] firebase app has not been initialized!";
      },
      ERROR_MISSING_OPT: function ERROR_MISSING_OPT(optName) {
        return "Failed to initialize app. FirebaseOptions missing or invalid '" + optName + "' property.";
      },
      ERROR_NOT_APP: function ERROR_NOT_APP(namespace) {
        return "Invalid App instance passed to firebase." + namespace + "(app <--).";
      },
      ERROR_UNSUPPORTED_CLASS_METHOD: function ERROR_UNSUPPORTED_CLASS_METHOD(className, method) {
        return className + "." + method + "() is unsupported by the native Firebase SDKs.";
      },
      ERROR_UNSUPPORTED_CLASS_PROPERTY: function ERROR_UNSUPPORTED_CLASS_PROPERTY(className, property) {
        return className + "." + property + " is unsupported by the native Firebase SDKs.";
      },
      ERROR_UNSUPPORTED_MODULE_METHOD: function ERROR_UNSUPPORTED_MODULE_METHOD(namespace, method) {
        return "firebase." + namespace + "()." + method + "() is unsupported by the native Firebase SDKs.";
      },
      ERROR_PLAY_SERVICES: function ERROR_PLAY_SERVICES(statusCode) {
        var knownError = PLAY_SERVICES_CODES[statusCode];
        var start = 'Google Play Services is required to run firebase services on android but a valid installation was not found on this device.';

        if (statusCode === 2) {
          start = 'Google Play Services is out of date and may cause some firebase services like authentication to hang when used. It is recommended that you update it.';
        }

        return "" + (start + "\r\n\r\n-------------------------\r\n") + (knownError ? knownError.code + ": " + knownError.message + " (code " + statusCode + ")" : "A specific play store availability reason reason was not available (unknown code: " + statusCode + ")") + "\r\n-------------------------" + "\r\n\r\n" + "For more information on how to resolve this issue, configure Play Services checks or for guides on how to validate Play Services on your users devices see the link below:" + "\r\n\r\nhttp://invertase.link/play-services";
      }
    }
  };
},750,[12],"react-native-firebase/dist/utils/internals.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAndroid = exports.isIOS = undefined;
  exports.deepGet = deepGet;
  exports.deepExists = deepExists;
  exports.areObjectKeysContainedInOther = areObjectKeysContainedInOther;
  exports.isArrayContainedInOther = isArrayContainedInOther;
  exports.isObject = isObject;
  exports.isFunction = isFunction;
  exports.isString = isString;
  exports.tryJSONParse = tryJSONParse;
  exports.tryJSONStringify = tryJSONStringify;
  exports.noop = noop;
  exports.typeOf = typeOf;
  exports.generatePushID = generatePushID;
  exports.nativeToJSError = nativeToJSError;
  exports.objectToUniqueId = objectToUniqueId;
  exports.promiseOrCallback = promiseOrCallback;
  exports.firestoreAutoId = firestoreAutoId;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
  var AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var hasOwnProperty = Object.hasOwnProperty;

  function deepGet(object, path) {
    var joiner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';
    var keys = path.split(joiner);
    var i = 0;
    var tmp = object;
    var len = keys.length;

    while (i < len) {
      var key = keys[i++];
      if (!tmp || !hasOwnProperty.call(tmp, key)) return null;
      tmp = tmp[key];
    }

    return tmp;
  }

  function deepExists(object, path) {
    var joiner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';
    var keys = path.split(joiner);
    var i = 0;
    var tmp = object;
    var len = keys.length;

    while (i < len) {
      var key = keys[i++];
      if (!tmp || !hasOwnProperty.call(tmp, key)) return false;
      tmp = tmp[key];
    }

    return tmp !== undefined;
  }

  function areObjectKeysContainedInOther(obj1, obj2) {
    if (!isObject(obj1) || !isObject(obj2)) {
      return false;
    }

    var keys1 = Object.keys(obj1);
    var keys2 = Object.keys(obj2);

    if (isArrayContainedInOther(keys1, keys2)) {
      return keys1.filter(function (key) {
        return isObject(obj1[key]);
      }).reduce(function (acc, cur) {
        return acc && areObjectKeysContainedInOther(obj1[cur], obj2[cur]);
      }, true);
    }

    return false;
  }

  function isArrayContainedInOther(arr1, arr2) {
    if (!Array.isArray(arr1) || !Array.isArray(arr2)) {
      return false;
    }

    return arr1.reduce(function (acc, cur) {
      return acc && arr2.includes(cur);
    }, true);
  }

  function isObject(item) {
    return item ? typeof item === 'object' && !Array.isArray(item) && item !== null : false;
  }

  function isFunction(item) {
    return item ? typeof item === 'function' : false;
  }

  function isString(value) {
    return typeof value === 'string';
  }

  var isIOS = exports.isIOS = _reactNative.Platform.OS === 'ios';
  var isAndroid = exports.isAndroid = _reactNative.Platform.OS === 'android';

  function tryJSONParse(string) {
    try {
      return string && JSON.parse(string);
    } catch (jsonError) {
      return string;
    }
  }

  function tryJSONStringify(data) {
    try {
      return JSON.stringify(data);
    } catch (jsonError) {
      return null;
    }
  }

  function noop() {}

  function typeOf(value) {
    if (value === null) return 'null';
    if (Array.isArray(value)) return 'array';
    return typeof value;
  }

  var lastPushTime = 0;
  var lastRandChars = [];

  function generatePushID() {
    var serverTimeOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var timeStampChars = new Array(8);
    var now = new Date().getTime() + serverTimeOffset;
    var duplicateTime = now === lastPushTime;
    lastPushTime = now;

    for (var i = 7; i >= 0; i -= 1) {
      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
      now = Math.floor(now / 64);
    }

    if (now !== 0) throw new Error('We should have converted the entire timestamp.');
    var id = timeStampChars.join('');

    if (!duplicateTime) {
      for (var _i = 0; _i < 12; _i += 1) {
        lastRandChars[_i] = Math.floor(Math.random() * 64);
      }
    } else {
      var _i2 = void 0;

      for (_i2 = 11; _i2 >= 0 && lastRandChars[_i2] === 63; _i2 -= 1) {
        lastRandChars[_i2] = 0;
      }

      lastRandChars[_i2] += 1;
    }

    for (var _i3 = 0; _i3 < 12; _i3++) {
      id += PUSH_CHARS.charAt(lastRandChars[_i3]);
    }

    if (id.length !== 20) throw new Error('Length should be 20.');
    return id;
  }

  function nativeToJSError(code, message) {
    var additionalProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var error = new Error(message);
    error.code = code;
    babelHelpers.extends(error, additionalProps);

    var _stackArray = error.stack.split('\n');

    error.stack = _stackArray.splice(1, _stackArray.length).join('\n');
    return error;
  }

  function objectToUniqueId(object) {
    if (!isObject(object) || object === null) return JSON.stringify(object);
    var keys = Object.keys(object).sort();
    var key = '{';

    for (var i = 0; i < keys.length; i++) {
      if (i !== 0) key += ',';
      key += JSON.stringify(keys[i]);
      key += ':';
      key += objectToUniqueId(object[keys[i]]);
    }

    key += '}';
    return key;
  }

  function promiseOrCallback(promise, optionalCallback) {
    if (!isFunction(optionalCallback)) return promise;
    return promise.then(function (result) {
      if (optionalCallback && optionalCallback.length === 1) {
        optionalCallback(null);
      } else if (optionalCallback) {
        optionalCallback(null, result);
      }

      return Promise.resolve(result);
    }).catch(function (error) {
      if (optionalCallback) optionalCallback(error);
      return Promise.reject(error);
    });
  }

  function firestoreAutoId() {
    var autoId = '';

    for (var i = 0; i < 20; i++) {
      autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));
    }

    return autoId;
  }
},751,[12],"react-native-firebase/dist/utils/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _events = require(_dependencyMap[0], "../../utils/events");

  var _log = require(_dependencyMap[1], "../../utils/log");

  var _native = require(_dependencyMap[2], "../../utils/native");

  var _ModuleBase2 = require(_dependencyMap[3], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _Interstitial = require(_dependencyMap[4], "./Interstitial");

  var _Interstitial2 = babelHelpers.interopRequireDefault(_Interstitial);

  var _RewardedVideo = require(_dependencyMap[5], "./RewardedVideo");

  var _RewardedVideo2 = babelHelpers.interopRequireDefault(_RewardedVideo);

  var _AdRequest = require(_dependencyMap[6], "./AdRequest");

  var _AdRequest2 = babelHelpers.interopRequireDefault(_AdRequest);

  var _VideoOptions = require(_dependencyMap[7], "./VideoOptions");

  var _VideoOptions2 = babelHelpers.interopRequireDefault(_VideoOptions);

  var _Banner = require(_dependencyMap[8], "./Banner");

  var _Banner2 = babelHelpers.interopRequireDefault(_Banner);

  var _NativeExpress = require(_dependencyMap[9], "./NativeExpress");

  var _NativeExpress2 = babelHelpers.interopRequireDefault(_NativeExpress);

  var _EventTypes = require(_dependencyMap[10], "./EventTypes");

  var _EventTypes2 = babelHelpers.interopRequireDefault(_EventTypes);

  var NATIVE_EVENTS = ['interstitial_event', 'rewarded_video_event'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseAdMob';
  var NAMESPACE = exports.NAMESPACE = 'admob';

  var AdMob = function (_ModuleBase) {
    babelHelpers.inherits(AdMob, _ModuleBase);

    function AdMob(app) {
      babelHelpers.classCallCheck(this, AdMob);

      var _this = babelHelpers.possibleConstructorReturn(this, (AdMob.__proto__ || Object.getPrototypeOf(AdMob)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));

      _this._initialized = false;
      _this._appId = null;

      _events.SharedEventEmitter.addListener('interstitial_event', _this._onInterstitialEvent.bind(_this));

      _events.SharedEventEmitter.addListener('rewarded_video_event', _this._onRewardedVideoEvent.bind(_this));

      return _this;
    }

    babelHelpers.createClass(AdMob, [{
      key: "_onInterstitialEvent",
      value: function _onInterstitialEvent(event) {
        var adUnit = event.adUnit;
        var jsEventType = "interstitial_" + adUnit;

        if (_events.SharedEventEmitter.listeners(jsEventType).length === 0) {}

        _events.SharedEventEmitter.emit(jsEventType, event);
      }
    }, {
      key: "_onRewardedVideoEvent",
      value: function _onRewardedVideoEvent(event) {
        var adUnit = event.adUnit;
        var jsEventType = "rewarded_video_" + adUnit;

        if (_events.SharedEventEmitter.listeners(jsEventType).length === 0) {}

        _events.SharedEventEmitter.emit(jsEventType, event);
      }
    }, {
      key: "initialize",
      value: function initialize(appId) {
        if (this._initialized) {
          (0, _log.getLogger)(this).warn('AdMob has already been initialized!');
        } else {
          this._initialized = true;
          this._appId = appId;
          (0, _native.getNativeModule)(this).initialize(appId);
        }
      }
    }, {
      key: "openDebugMenu",
      value: function openDebugMenu() {
        if (!this._initialized) {
          (0, _log.getLogger)(this).warn('AdMob needs to be initialized before opening the dev menu!');
        } else {
          (0, _log.getLogger)(this).info('Opening debug menu');
          (0, _native.getNativeModule)(this).openDebugMenu(this._appId);
        }
      }
    }, {
      key: "interstitial",
      value: function interstitial(adUnit) {
        return new _Interstitial2.default(this, adUnit);
      }
    }, {
      key: "rewarded",
      value: function rewarded(adUnit) {
        return new _RewardedVideo2.default(this, adUnit);
      }
    }]);
    return AdMob;
  }(_ModuleBase3.default);

  exports.default = AdMob;
  var statics = exports.statics = {
    Banner: _Banner2.default,
    NativeExpress: _NativeExpress2.default,
    AdRequest: _AdRequest2.default,
    VideoOptions: _VideoOptions2.default,
    EventTypes: _EventTypes2.default,
    RewardedVideoEventTypes: _EventTypes.RewardedVideoEventTypes,
    NativeExpressEventTypes: _EventTypes.NativeExpressEventTypes
  };
},752,[745,753,754,755,756,758,757,759,760,763,762],"react-native-firebase/dist/modules/admob/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialiseLogger = exports.LEVELS = exports.getLogger = undefined;

  var _internals = require(_dependencyMap[0], "./internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var NATIVE_LOGGERS = {};

  var getModuleKey = function getModuleKey(module) {
    return module.app.name + ":" + module.namespace;
  };

  var getLogger = exports.getLogger = function getLogger(module) {
    var key = getModuleKey(module);
    return NATIVE_LOGGERS[key];
  };

  var LEVELS = exports.LEVELS = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3
  };

  var initialiseLogger = exports.initialiseLogger = function initialiseLogger(module, logNamespace) {
    var key = getModuleKey(module);

    if (!NATIVE_LOGGERS[key]) {
      var prefix = "\uD83D\uDD25 " + logNamespace.toUpperCase();
      NATIVE_LOGGERS[key] = {
        debug: function debug() {
          var _console;

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (__DEV__ && LEVELS.debug >= LEVELS[_internals2.default.OPTIONS.logLevel]) (_console = console).log.apply(_console, [prefix].concat(babelHelpers.toConsumableArray(args)));
        },
        info: function info() {
          var _console2;

          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          if (__DEV__ && LEVELS.info >= LEVELS[_internals2.default.OPTIONS.logLevel]) (_console2 = console).log.apply(_console2, [prefix].concat(babelHelpers.toConsumableArray(args)));
        },
        warn: function warn() {
          var _console3;

          if (__DEV__ && LEVELS.warn >= LEVELS[_internals2.default.OPTIONS.logLevel]) (_console3 = console).warn.apply(_console3, arguments);
        },
        error: function error() {
          var _console4;

          (_console4 = console).error.apply(_console4, arguments);
        }
      };
    }
  };
},753,[750],"react-native-firebase/dist/utils/log.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialiseNativeModule = exports.getNativeModule = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _events = require(_dependencyMap[1], "./events");

  var _internals = require(_dependencyMap[2], "./internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var NATIVE_MODULES = {};

  var nativeWithApp = function nativeWithApp(appName, NativeModule) {
    var native = {};
    var methods = Object.keys(NativeModule);

    var _loop = function _loop(i, len) {
      var method = methods[i];

      native[method] = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return NativeModule[method].apply(NativeModule, [appName].concat(args));
      };
    };

    for (var i = 0, len = methods.length; i < len; i++) {
      _loop(i, len);
    }

    return native;
  };

  var getModuleKey = function getModuleKey(module) {
    return module.app.name + ":" + module.namespace;
  };

  var getNativeModule = exports.getNativeModule = function getNativeModule(module) {
    var key = getModuleKey(module);
    return NATIVE_MODULES[key];
  };

  var initialiseNativeModule = exports.initialiseNativeModule = function initialiseNativeModule(module, config) {
    var moduleName = config.moduleName,
        multiApp = config.multiApp,
        namespace = config.namespace;
    var nativeModule = _reactNative.NativeModules[moduleName];
    var key = getModuleKey(module);

    if (!nativeModule && namespace !== 'utils') {
      throw new Error(_internals2.default.STRINGS.ERROR_MISSING_MODULE(namespace, moduleName));
    }

    if (multiApp) {
      NATIVE_MODULES[key] = nativeWithApp(module.app.name, nativeModule);
    } else {
      NATIVE_MODULES[key] = nativeModule;
    }

    (0, _events.initialiseNativeModuleEventEmitter)(module, config);
    return NATIVE_MODULES[key];
  };
},754,[12,745,750],"react-native-firebase/dist/utils/native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _log = require(_dependencyMap[0], "./log");

  var _native = require(_dependencyMap[1], "./native");

  var ModuleBase = function () {
    function ModuleBase(app, config) {
      babelHelpers.classCallCheck(this, ModuleBase);

      if (!config.moduleName) {
        throw new Error('Missing module name');
      }

      if (!config.namespace) {
        throw new Error('Missing namespace');
      }

      var moduleName = config.moduleName;
      this._app = app;
      this.namespace = config.namespace;
      (0, _native.initialiseNativeModule)(this, config);
      (0, _log.initialiseLogger)(this, app.name + ":" + moduleName.replace('RNFirebase', ''));
    }

    babelHelpers.createClass(ModuleBase, [{
      key: "app",
      get: function get() {
        return this._app;
      }
    }]);
    return ModuleBase;
  }();

  exports.default = ModuleBase;
},755,[753,754],"react-native-firebase/dist/utils/ModuleBase.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _ = require(_dependencyMap[1], "./");

  var _AdRequest = require(_dependencyMap[2], "./AdRequest");

  var _AdRequest2 = babelHelpers.interopRequireDefault(_AdRequest);

  var _events = require(_dependencyMap[3], "../../utils/events");

  var _native = require(_dependencyMap[4], "../../utils/native");

  var _utils = require(_dependencyMap[5], "../../utils");

  var subscriptions = [];

  var Interstitial = function () {
    function Interstitial(admob, adUnit) {
      var _this = this;

      babelHelpers.classCallCheck(this, Interstitial);

      this._onInterstitialEvent = function (event) {
        var eventType = "interstitial:" + _this.adUnit + ":" + event.type;
        var emitData = babelHelpers.extends({}, event);

        switch (event.type) {
          case 'onAdLoaded':
            _this.loaded = true;
            break;

          case 'onAdFailedToLoad':
            emitData = (0, _utils.nativeToJSError)(event.payload.code, event.payload.message);
            emitData.type = event.type;
            break;

          default:}

        _events.SharedEventEmitter.emit(eventType, emitData);

        _events.SharedEventEmitter.emit("interstitial:" + _this.adUnit + ":*", emitData);
      };

      if (_reactNative.Platform.OS === 'ios') {
        (0, _native.getNativeModule)(admob).clearInterstitial(adUnit);
      }

      for (var i = 0, len = subscriptions.length; i < len; i++) {
        subscriptions[i].remove();
      }

      subscriptions = [];
      this._admob = admob;
      this.adUnit = adUnit;
      this.loaded = false;

      _events.SharedEventEmitter.removeAllListeners("interstitial_" + adUnit);

      _events.SharedEventEmitter.addListener("interstitial_" + adUnit, this._onInterstitialEvent);
    }

    babelHelpers.createClass(Interstitial, [{
      key: "loadAd",
      value: function loadAd(request) {
        var adRequest = request;

        if (!adRequest || !Object.keys(adRequest)) {
          adRequest = new _AdRequest2.default().addTestDevice().build();
        }

        return (0, _native.getNativeModule)(this._admob).interstitialLoadAd(this.adUnit, adRequest);
      }
    }, {
      key: "isLoaded",
      value: function isLoaded() {
        return this.loaded;
      }
    }, {
      key: "show",
      value: function show() {
        if (this.loaded) {
          (0, _native.getNativeModule)(this._admob).interstitialShowAd(this.adUnit);
        }
      }
    }, {
      key: "on",
      value: function on(eventType, listenerCb) {
        if (!_.statics.EventTypes[eventType]) {
          console.warn("Invalid event type provided, must be one of: " + Object.keys(_.statics.EventTypes).join(', '));
          return null;
        }

        var sub = _events.SharedEventEmitter.addListener("interstitial:" + this.adUnit + ":" + eventType, listenerCb);

        subscriptions.push(sub);
        return sub;
      }
    }]);
    return Interstitial;
  }();

  exports.default = Interstitial;
},756,[12,752,757,745,754,751],"react-native-firebase/dist/modules/admob/Interstitial.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var AdRequest = function () {
    function AdRequest() {
      babelHelpers.classCallCheck(this, AdRequest);
      this._props = {
        keywords: [],
        testDevices: []
      };
    }

    babelHelpers.createClass(AdRequest, [{
      key: "build",
      value: function build() {
        return this._props;
      }
    }, {
      key: "addTestDevice",
      value: function addTestDevice(deviceId) {
        this._props.testDevices.push(deviceId || 'DEVICE_ID_EMULATOR');

        return this;
      }
    }, {
      key: "addKeyword",
      value: function addKeyword(keyword) {
        this._props.keywords.push(keyword);

        return this;
      }
    }, {
      key: "setBirthday",
      value: function setBirthday() {}
    }, {
      key: "setContentUrl",
      value: function setContentUrl(url) {
        this._props.contentUrl = url;
        return this;
      }
    }, {
      key: "setGender",
      value: function setGender(gender) {
        var genders = ['male', 'female', 'unknown'];

        if (genders.includes(gender)) {
          this._props.gender = gender;
        }

        return this;
      }
    }, {
      key: "setLocation",
      value: function setLocation() {}
    }, {
      key: "setRequestAgent",
      value: function setRequestAgent(requestAgent) {
        this._props.requestAgent = requestAgent;
        return this;
      }
    }, {
      key: "setIsDesignedForFamilies",
      value: function setIsDesignedForFamilies(isDesignedForFamilies) {
        this._props.isDesignedForFamilies = isDesignedForFamilies;
        return this;
      }
    }, {
      key: "tagForChildDirectedTreatment",
      value: function tagForChildDirectedTreatment(_tagForChildDirectedTreatment) {
        this._props.tagForChildDirectedTreatment = _tagForChildDirectedTreatment;
        return this;
      }
    }]);
    return AdRequest;
  }();

  exports.default = AdRequest;
},757,[],"react-native-firebase/dist/modules/admob/AdRequest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ = require(_dependencyMap[0], "./");

  var _AdRequest = require(_dependencyMap[1], "./AdRequest");

  var _AdRequest2 = babelHelpers.interopRequireDefault(_AdRequest);

  var _events = require(_dependencyMap[2], "../../utils/events");

  var _native = require(_dependencyMap[3], "../../utils/native");

  var _utils = require(_dependencyMap[4], "../../utils");

  var subscriptions = [];

  var RewardedVideo = function () {
    function RewardedVideo(admob, adUnit) {
      var _this = this;

      babelHelpers.classCallCheck(this, RewardedVideo);

      this._onRewardedVideoEvent = function (event) {
        var eventType = "rewarded_video:" + _this.adUnit + ":" + event.type;
        var emitData = babelHelpers.extends({}, event);

        switch (event.type) {
          case 'onAdLoaded':
            _this.loaded = true;
            break;

          case 'onAdFailedToLoad':
            emitData = (0, _utils.nativeToJSError)(event.payload.code, event.payload.message);
            emitData.type = event.type;
            break;

          default:}

        _events.SharedEventEmitter.emit(eventType, emitData);

        _events.SharedEventEmitter.emit("rewarded_video:" + _this.adUnit + ":*", emitData);
      };

      for (var i = 0, len = subscriptions.length; i < len; i++) {
        subscriptions[i].remove();
      }

      subscriptions = [];
      this._admob = admob;
      this.adUnit = adUnit;
      this.loaded = false;

      _events.SharedEventEmitter.removeAllListeners("rewarded_video_" + adUnit);

      _events.SharedEventEmitter.addListener("rewarded_video_" + adUnit, this._onRewardedVideoEvent);
    }

    babelHelpers.createClass(RewardedVideo, [{
      key: "loadAd",
      value: function loadAd(request) {
        var adRequest = request;

        if (!adRequest || !Object.keys(adRequest)) {
          adRequest = new _AdRequest2.default().addTestDevice().build();
        }

        return (0, _native.getNativeModule)(this._admob).rewardedVideoLoadAd(this.adUnit, adRequest);
      }
    }, {
      key: "isLoaded",
      value: function isLoaded() {
        return this.loaded;
      }
    }, {
      key: "show",
      value: function show() {
        if (this.loaded) {
          (0, _native.getNativeModule)(this._admob).rewardedVideoShowAd(this.adUnit);
        }
      }
    }, {
      key: "on",
      value: function on(eventType, listenerCb) {
        var types = babelHelpers.extends({}, _.statics.EventTypes, _.statics.RewardedVideoEventTypes);

        if (!types[eventType]) {
          console.warn("Invalid event type provided, must be one of: " + Object.keys(types).join(', '));
          return null;
        }

        var sub = _events.SharedEventEmitter.addListener("rewarded_video:" + this.adUnit + ":" + eventType, listenerCb);

        subscriptions.push(sub);
        return sub;
      }
    }]);
    return RewardedVideo;
  }();

  exports.default = RewardedVideo;
},758,[752,757,745,754,751],"react-native-firebase/dist/modules/admob/RewardedVideo.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var VideoOptions = function () {
    function VideoOptions() {
      babelHelpers.classCallCheck(this, VideoOptions);
      this._props = {
        startMuted: true
      };
    }

    babelHelpers.createClass(VideoOptions, [{
      key: "build",
      value: function build() {
        return this._props;
      }
    }, {
      key: "setStartMuted",
      value: function setStartMuted() {
        var muted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this._props.startMuted = muted;
        return this;
      }
    }]);
    return VideoOptions;
  }();

  exports.default = VideoOptions;
},759,[],"react-native-firebase/dist/modules/admob/VideoOptions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-firebase/dist/modules/admob/Banner.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _AdMobComponent = require(_dependencyMap[1], "./AdMobComponent");

  var _AdMobComponent2 = babelHelpers.interopRequireDefault(_AdMobComponent);

  function Banner(_ref) {
    var props = babelHelpers.objectWithoutProperties(_ref, []);
    return _react2.default.createElement(_AdMobComponent2.default, babelHelpers.extends({}, props, {
      "class": "RNFirebaseAdMobBanner",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 5
      }
    }));
  }

  Banner.propTypes = _AdMobComponent2.default.propTypes;
  Banner.defaultProps = {
    size: 'SMART_BANNER'
  };
  exports.default = Banner;
},760,[109,761],"react-native-firebase/dist/modules/admob/Banner.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-firebase/dist/modules/admob/AdMobComponent.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _propTypes = require(_dependencyMap[2], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _EventTypes = require(_dependencyMap[3], "./EventTypes");

  var _EventTypes2 = babelHelpers.interopRequireDefault(_EventTypes);

  var _utils = require(_dependencyMap[4], "../../utils");

  var _AdRequest = require(_dependencyMap[5], "./AdRequest");

  var _AdRequest2 = babelHelpers.interopRequireDefault(_AdRequest);

  var _VideoOptions = require(_dependencyMap[6], "./VideoOptions");

  var _VideoOptions2 = babelHelpers.interopRequireDefault(_VideoOptions);

  var adMobPropTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
    size: _propTypes2.default.string.isRequired,
    unitId: _propTypes2.default.string.isRequired,
    request: _propTypes2.default.object,
    video: _propTypes2.default.object
  });
  Object.keys(_EventTypes2.default).forEach(function (eventType) {
    adMobPropTypes[eventType] = _propTypes2.default.func;
  });
  Object.keys(_EventTypes.NativeExpressEventTypes).forEach(function (eventType) {
    adMobPropTypes[eventType] = _propTypes2.default.func;
  });
  var nativeComponents = {};

  function getNativeComponent(name) {
    if (nativeComponents[name]) return nativeComponents[name];
    var component = (0, _reactNative.requireNativeComponent)(name, AdMobComponent, {
      nativeOnly: {
        onBannerEvent: true
      }
    });
    nativeComponents[name] = component;
    return component;
  }

  var AdMobComponent = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(AdMobComponent, _React$Component);

    function AdMobComponent(props) {
      babelHelpers.classCallCheck(this, AdMobComponent);

      var _this = babelHelpers.possibleConstructorReturn(this, (AdMobComponent.__proto__ || Object.getPrototypeOf(AdMobComponent)).call(this, props));

      _this.onBannerEvent = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (_this.props[nativeEvent.type]) {
          if (nativeEvent.type === 'onAdFailedToLoad') {
            var _nativeEvent$payload = nativeEvent.payload,
                code = _nativeEvent$payload.code,
                message = _nativeEvent$payload.message;

            _this.props[nativeEvent.type]((0, _utils.nativeToJSError)(code, message));
          } else {
            _this.props[nativeEvent.type](nativeEvent.payload || {});
          }
        }

        if (nativeEvent.type === 'onSizeChange') _this.updateSize(nativeEvent.payload);
      };

      _this.updateSize = function (_ref2) {
        var width = _ref2.width,
            height = _ref2.height;

        _this.setState({
          width: width,
          height: height
        });
      };

      _this.state = {
        width: 0,
        height: 0
      };
      _this.nativeView = getNativeComponent(props.class);
      return _this;
    }

    babelHelpers.createClass(AdMobComponent, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(this.nativeView, babelHelpers.extends({}, this.props, {
          style: [this.props.style, babelHelpers.extends({}, this.state)],
          onBannerEvent: this.onBannerEvent,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89
          }
        }));
      }
    }]);
    return AdMobComponent;
  }(_react2.default.Component), _class.propTypes = adMobPropTypes, _class.defaultProps = {
    request: new _AdRequest2.default().addTestDevice().build(),
    video: new _VideoOptions2.default().build()
  }, _temp);
  exports.default = AdMobComponent;
},761,[109,12,128,762,751,757,759],"react-native-firebase/dist/modules/admob/AdMobComponent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    onAdLoaded: 'onAdLoaded',
    onAdOpened: 'onAdOpened',
    onAdLeftApplication: 'onAdLeftApplication',
    onAdClosed: 'onAdClosed',
    onAdFailedToLoad: 'onAdFailedToLoad'
  };
  var NativeExpressEventTypes = exports.NativeExpressEventTypes = {
    onVideoEnd: 'onVideoEnd',
    onVideoMute: 'onVideoMute',
    onVideoPause: 'onVideoPause',
    onVideoPlay: 'onVideoPlay',
    onVideoStart: 'onVideoStart'
  };
  var RewardedVideoEventTypes = exports.RewardedVideoEventTypes = {
    onRewarded: 'onRewarded',
    onRewardedVideoStarted: 'onRewardedVideoStarted'
  };
},762,[],"react-native-firebase/dist/modules/admob/EventTypes.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-firebase/dist/modules/admob/NativeExpress.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _AdMobComponent = require(_dependencyMap[1], "./AdMobComponent");

  var _AdMobComponent2 = babelHelpers.interopRequireDefault(_AdMobComponent);

  function NativeExpress(_ref) {
    var props = babelHelpers.objectWithoutProperties(_ref, []);
    return _react2.default.createElement(_AdMobComponent2.default, babelHelpers.extends({}, props, {
      "class": "RNFirebaseAdMobNativeExpress",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 5
      }
    }));
  }

  NativeExpress.propTypes = _AdMobComponent2.default.propTypes;
  NativeExpress.defaultProps = {
    size: 'SMART_BANNER'
  };
  exports.default = NativeExpress;
},763,[109,761],"react-native-firebase/dist/modules/admob/NativeExpress.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _User = require(_dependencyMap[0], "./User");

  var _User2 = babelHelpers.interopRequireDefault(_User);

  var _ModuleBase2 = require(_dependencyMap[1], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _events = require(_dependencyMap[2], "../../utils/events");

  var _log = require(_dependencyMap[3], "../../utils/log");

  var _native = require(_dependencyMap[4], "../../utils/native");

  var _internals = require(_dependencyMap[5], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _ConfirmationResult = require(_dependencyMap[6], "./ConfirmationResult");

  var _ConfirmationResult2 = babelHelpers.interopRequireDefault(_ConfirmationResult);

  var _EmailAuthProvider = require(_dependencyMap[7], "./providers/EmailAuthProvider");

  var _EmailAuthProvider2 = babelHelpers.interopRequireDefault(_EmailAuthProvider);

  var _PhoneAuthProvider = require(_dependencyMap[8], "./providers/PhoneAuthProvider");

  var _PhoneAuthProvider2 = babelHelpers.interopRequireDefault(_PhoneAuthProvider);

  var _GoogleAuthProvider = require(_dependencyMap[9], "./providers/GoogleAuthProvider");

  var _GoogleAuthProvider2 = babelHelpers.interopRequireDefault(_GoogleAuthProvider);

  var _GithubAuthProvider = require(_dependencyMap[10], "./providers/GithubAuthProvider");

  var _GithubAuthProvider2 = babelHelpers.interopRequireDefault(_GithubAuthProvider);

  var _OAuthProvider = require(_dependencyMap[11], "./providers/OAuthProvider");

  var _OAuthProvider2 = babelHelpers.interopRequireDefault(_OAuthProvider);

  var _TwitterAuthProvider = require(_dependencyMap[12], "./providers/TwitterAuthProvider");

  var _TwitterAuthProvider2 = babelHelpers.interopRequireDefault(_TwitterAuthProvider);

  var _FacebookAuthProvider = require(_dependencyMap[13], "./providers/FacebookAuthProvider");

  var _FacebookAuthProvider2 = babelHelpers.interopRequireDefault(_FacebookAuthProvider);

  var _PhoneAuthListener = require(_dependencyMap[14], "./PhoneAuthListener");

  var _PhoneAuthListener2 = babelHelpers.interopRequireDefault(_PhoneAuthListener);

  var NATIVE_EVENTS = ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseAuth';
  var NAMESPACE = exports.NAMESPACE = 'auth';

  var Auth = function (_ModuleBase) {
    babelHelpers.inherits(Auth, _ModuleBase);

    function Auth(app) {
      babelHelpers.classCallCheck(this, Auth);

      var _this = babelHelpers.possibleConstructorReturn(this, (Auth.__proto__ || Object.getPrototypeOf(Auth)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: true,
        namespace: NAMESPACE
      }));

      _this._user = null;
      _this._authResult = false;
      _this._languageCode = (0, _native.getNativeModule)(_this).APP_LANGUAGE[app._name] || (0, _native.getNativeModule)(_this).APP_LANGUAGE['[DEFAULT]'];

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'auth_state_changed'), function (state) {
        _this._setUser(state.user);

        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(_this, 'onAuthStateChanged'), _this._user);
      });

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'phone_auth_state_changed'), function (event) {
        var eventKey = "phone:auth:" + event.requestKey + ":" + event.type;

        _events.SharedEventEmitter.emit(eventKey, event.state);
      });

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'auth_id_token_changed'), function (auth) {
        _this._setUser(auth.user);

        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(_this, 'onIdTokenChanged'), _this._user);
      });

      (0, _native.getNativeModule)(_this).addAuthStateListener();
      (0, _native.getNativeModule)(_this).addIdTokenListener();
      return _this;
    }

    babelHelpers.createClass(Auth, [{
      key: "_setUser",
      value: function _setUser(user) {
        this._authResult = true;
        this._user = user ? new _User2.default(this, user) : null;

        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, 'onUserChanged'), this._user);

        return this._user;
      }
    }, {
      key: "_setUserCredential",
      value: function _setUserCredential(userCredential) {
        var user = new _User2.default(this, userCredential.user);
        this._authResult = true;
        this._user = user;

        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, 'onUserChanged'), this._user);

        return {
          additionalUserInfo: userCredential.additionalUserInfo,
          user: user
        };
      }
    }, {
      key: "onAuthStateChanged",
      value: function onAuthStateChanged(listener) {
        var _this2 = this;

        (0, _log.getLogger)(this).info('Creating onAuthStateChanged listener');

        _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this, 'onAuthStateChanged'), listener);

        if (this._authResult) listener(this._user || null);
        return function () {
          (0, _log.getLogger)(_this2).info('Removing onAuthStateChanged listener');

          _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(_this2, 'onAuthStateChanged'), listener);
        };
      }
    }, {
      key: "onIdTokenChanged",
      value: function onIdTokenChanged(listener) {
        var _this3 = this;

        (0, _log.getLogger)(this).info('Creating onIdTokenChanged listener');

        _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this, 'onIdTokenChanged'), listener);

        if (this._authResult) listener(this._user || null);
        return function () {
          (0, _log.getLogger)(_this3).info('Removing onIdTokenChanged listener');

          _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(_this3, 'onIdTokenChanged'), listener);
        };
      }
    }, {
      key: "onUserChanged",
      value: function onUserChanged(listener) {
        var _this4 = this;

        (0, _log.getLogger)(this).info('Creating onUserChanged listener');

        _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this, 'onUserChanged'), listener);

        if (this._authResult) listener(this._user || null);
        return function () {
          (0, _log.getLogger)(_this4).info('Removing onUserChanged listener');

          _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(_this4, 'onUserChanged'), listener);
        };
      }
    }, {
      key: "signOut",
      value: function signOut() {
        var _this5 = this;

        return (0, _native.getNativeModule)(this).signOut().then(function () {
          _this5._setUser();
        });
      }
    }, {
      key: "signInAnonymously",
      value: function signInAnonymously() {
        var _this6 = this;

        console.warn('Deprecated firebase.User.prototype.signInAnonymously in favor of firebase.User.prototype.signInAnonymouslyAndRetrieveData.');
        return (0, _native.getNativeModule)(this).signInAnonymously().then(function (user) {
          return _this6._setUser(user);
        });
      }
    }, {
      key: "signInAnonymouslyAndRetrieveData",
      value: function signInAnonymouslyAndRetrieveData() {
        var _this7 = this;

        return (0, _native.getNativeModule)(this).signInAnonymouslyAndRetrieveData().then(function (userCredential) {
          return _this7._setUserCredential(userCredential);
        });
      }
    }, {
      key: "createUserWithEmailAndPassword",
      value: function createUserWithEmailAndPassword(email, password) {
        var _this8 = this;

        console.warn('Deprecated firebase.User.prototype.createUserWithEmailAndPassword in favor of firebase.User.prototype.createUserAndRetrieveDataWithEmailAndPassword.');
        return (0, _native.getNativeModule)(this).createUserWithEmailAndPassword(email, password).then(function (user) {
          return _this8._setUser(user);
        });
      }
    }, {
      key: "createUserAndRetrieveDataWithEmailAndPassword",
      value: function createUserAndRetrieveDataWithEmailAndPassword(email, password) {
        var _this9 = this;

        return (0, _native.getNativeModule)(this).createUserAndRetrieveDataWithEmailAndPassword(email, password).then(function (userCredential) {
          return _this9._setUserCredential(userCredential);
        });
      }
    }, {
      key: "signInWithEmailAndPassword",
      value: function signInWithEmailAndPassword(email, password) {
        var _this10 = this;

        console.warn('Deprecated firebase.User.prototype.signInWithEmailAndPassword in favor of firebase.User.prototype.signInAndRetrieveDataWithEmailAndPassword.');
        return (0, _native.getNativeModule)(this).signInWithEmailAndPassword(email, password).then(function (user) {
          return _this10._setUser(user);
        });
      }
    }, {
      key: "signInAndRetrieveDataWithEmailAndPassword",
      value: function signInAndRetrieveDataWithEmailAndPassword(email, password) {
        var _this11 = this;

        return (0, _native.getNativeModule)(this).signInAndRetrieveDataWithEmailAndPassword(email, password).then(function (userCredential) {
          return _this11._setUserCredential(userCredential);
        });
      }
    }, {
      key: "signInWithCustomToken",
      value: function signInWithCustomToken(customToken) {
        var _this12 = this;

        console.warn('Deprecated firebase.User.prototype.signInWithCustomToken in favor of firebase.User.prototype.signInAndRetrieveDataWithCustomToken.');
        return (0, _native.getNativeModule)(this).signInWithCustomToken(customToken).then(function (user) {
          return _this12._setUser(user);
        });
      }
    }, {
      key: "signInAndRetrieveDataWithCustomToken",
      value: function signInAndRetrieveDataWithCustomToken(customToken) {
        var _this13 = this;

        return (0, _native.getNativeModule)(this).signInAndRetrieveDataWithCustomToken(customToken).then(function (userCredential) {
          return _this13._setUserCredential(userCredential);
        });
      }
    }, {
      key: "signInWithCredential",
      value: function signInWithCredential(credential) {
        var _this14 = this;

        console.warn('Deprecated firebase.User.prototype.signInWithCredential in favor of firebase.User.prototype.signInAndRetrieveDataWithCredential.');
        return (0, _native.getNativeModule)(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(function (user) {
          return _this14._setUser(user);
        });
      }
    }, {
      key: "signInAndRetrieveDataWithCredential",
      value: function signInAndRetrieveDataWithCredential(credential) {
        var _this15 = this;

        return (0, _native.getNativeModule)(this).signInAndRetrieveDataWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {
          return _this15._setUserCredential(userCredential);
        });
      }
    }, {
      key: "signInWithPhoneNumber",
      value: function signInWithPhoneNumber(phoneNumber) {
        var _this16 = this;

        return (0, _native.getNativeModule)(this).signInWithPhoneNumber(phoneNumber).then(function (result) {
          return new _ConfirmationResult2.default(_this16, result.verificationId);
        });
      }
    }, {
      key: "verifyPhoneNumber",
      value: function verifyPhoneNumber(phoneNumber, autoVerifyTimeout) {
        return new _PhoneAuthListener2.default(this, phoneNumber, autoVerifyTimeout);
      }
    }, {
      key: "sendPasswordResetEmail",
      value: function sendPasswordResetEmail(email, actionCodeSettings) {
        return (0, _native.getNativeModule)(this).sendPasswordResetEmail(email, actionCodeSettings);
      }
    }, {
      key: "confirmPasswordReset",
      value: function confirmPasswordReset(code, newPassword) {
        return (0, _native.getNativeModule)(this).confirmPasswordReset(code, newPassword);
      }
    }, {
      key: "applyActionCode",
      value: function applyActionCode(code) {
        return (0, _native.getNativeModule)(this).applyActionCode(code);
      }
    }, {
      key: "checkActionCode",
      value: function checkActionCode(code) {
        return (0, _native.getNativeModule)(this).checkActionCode(code);
      }
    }, {
      key: "fetchProvidersForEmail",
      value: function fetchProvidersForEmail(email) {
        return (0, _native.getNativeModule)(this).fetchProvidersForEmail(email);
      }
    }, {
      key: "verifyPasswordResetCode",
      value: function verifyPasswordResetCode(code) {
        return (0, _native.getNativeModule)(this).verifyPasswordResetCode(code);
      }
    }, {
      key: "getRedirectResult",
      value: function getRedirectResult() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));
      }
    }, {
      key: "setPersistence",
      value: function setPersistence() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));
      }
    }, {
      key: "signInWithPopup",
      value: function signInWithPopup() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));
      }
    }, {
      key: "signInWithRedirect",
      value: function signInWithRedirect() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect'));
      }
    }, {
      key: "useDeviceLanguage",
      value: function useDeviceLanguage() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));
      }
    }, {
      key: "languageCode",
      set: function set(code) {
        this._languageCode = code;
        (0, _native.getNativeModule)(this).setLanguageCode(code);
      },
      get: function get() {
        return this._languageCode;
      }
    }, {
      key: "currentUser",
      get: function get() {
        return this._user;
      }
    }]);
    return Auth;
  }(_ModuleBase3.default);

  exports.default = Auth;
  var statics = exports.statics = {
    EmailAuthProvider: _EmailAuthProvider2.default,
    PhoneAuthProvider: _PhoneAuthProvider2.default,
    GoogleAuthProvider: _GoogleAuthProvider2.default,
    GithubAuthProvider: _GithubAuthProvider2.default,
    TwitterAuthProvider: _TwitterAuthProvider2.default,
    FacebookAuthProvider: _FacebookAuthProvider2.default,
    OAuthProvider: _OAuthProvider2.default,
    PhoneAuthState: {
      CODE_SENT: 'sent',
      AUTO_VERIFY_TIMEOUT: 'timeout',
      AUTO_VERIFIED: 'verified',
      ERROR: 'error'
    }
  };
},764,[765,755,745,753,754,750,766,767,768,769,770,771,772,773,774],"react-native-firebase/dist/modules/auth/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _internals = require(_dependencyMap[0], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _native = require(_dependencyMap[1], "../../utils/native");

  var User = function () {
    function User(auth, user) {
      babelHelpers.classCallCheck(this, User);
      this._auth = auth;
      this._user = user;
    }

    babelHelpers.createClass(User, [{
      key: "delete",
      value: function _delete() {
        var _this = this;

        return (0, _native.getNativeModule)(this._auth).delete().then(function () {
          _this._auth._setUser();
        });
      }
    }, {
      key: "getIdToken",
      value: function getIdToken() {
        var forceRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return (0, _native.getNativeModule)(this._auth).getToken(forceRefresh);
      }
    }, {
      key: "getToken",
      value: function getToken() {
        var forceRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        console.warn('Deprecated firebase.User.prototype.getToken in favor of firebase.User.prototype.getIdToken.');
        return (0, _native.getNativeModule)(this._auth).getToken(forceRefresh);
      }
    }, {
      key: "linkWithCredential",
      value: function linkWithCredential(credential) {
        var _this2 = this;

        console.warn('Deprecated firebase.User.prototype.linkWithCredential in favor of firebase.User.prototype.linkAndRetrieveDataWithCredential.');
        return (0, _native.getNativeModule)(this._auth).linkWithCredential(credential.providerId, credential.token, credential.secret).then(function (user) {
          return _this2._auth._setUser(user);
        });
      }
    }, {
      key: "linkAndRetrieveDataWithCredential",
      value: function linkAndRetrieveDataWithCredential(credential) {
        var _this3 = this;

        return (0, _native.getNativeModule)(this._auth).linkAndRetrieveDataWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {
          return _this3._auth._setUserCredential(userCredential);
        });
      }
    }, {
      key: "reauthenticateWithCredential",
      value: function reauthenticateWithCredential(credential) {
        var _this4 = this;

        console.warn('Deprecated firebase.User.prototype.reauthenticateWithCredential in favor of firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential.');
        return (0, _native.getNativeModule)(this._auth).reauthenticateWithCredential(credential.providerId, credential.token, credential.secret).then(function (user) {
          _this4._auth._setUser(user);
        });
      }
    }, {
      key: "reauthenticateAndRetrieveDataWithCredential",
      value: function reauthenticateAndRetrieveDataWithCredential(credential) {
        var _this5 = this;

        return (0, _native.getNativeModule)(this._auth).reauthenticateAndRetrieveDataWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {
          return _this5._auth._setUserCredential(userCredential);
        });
      }
    }, {
      key: "reload",
      value: function reload() {
        var _this6 = this;

        return (0, _native.getNativeModule)(this._auth).reload().then(function (user) {
          _this6._auth._setUser(user);
        });
      }
    }, {
      key: "sendEmailVerification",
      value: function sendEmailVerification(actionCodeSettings) {
        var _this7 = this;

        return (0, _native.getNativeModule)(this._auth).sendEmailVerification(actionCodeSettings).then(function (user) {
          _this7._auth._setUser(user);
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return babelHelpers.extends({}, this._user);
      }
    }, {
      key: "unlink",
      value: function unlink(providerId) {
        var _this8 = this;

        return (0, _native.getNativeModule)(this._auth).unlink(providerId).then(function (user) {
          return _this8._auth._setUser(user);
        });
      }
    }, {
      key: "updateEmail",
      value: function updateEmail(email) {
        var _this9 = this;

        return (0, _native.getNativeModule)(this._auth).updateEmail(email).then(function (user) {
          _this9._auth._setUser(user);
        });
      }
    }, {
      key: "updatePassword",
      value: function updatePassword(password) {
        var _this10 = this;

        return (0, _native.getNativeModule)(this._auth).updatePassword(password).then(function (user) {
          _this10._auth._setUser(user);
        });
      }
    }, {
      key: "updateProfile",
      value: function updateProfile() {
        var _this11 = this;

        var updates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return (0, _native.getNativeModule)(this._auth).updateProfile(updates).then(function (user) {
          _this11._auth._setUser(user);
        });
      }
    }, {
      key: "linkWithPhoneNumber",
      value: function linkWithPhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPhoneNumber'));
      }
    }, {
      key: "linkWithPopup",
      value: function linkWithPopup() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPopup'));
      }
    }, {
      key: "linkWithRedirect",
      value: function linkWithRedirect() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithRedirect'));
      }
    }, {
      key: "reauthenticateWithPhoneNumber",
      value: function reauthenticateWithPhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPhoneNumber'));
      }
    }, {
      key: "reauthenticateWithPopup",
      value: function reauthenticateWithPopup() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPopup'));
      }
    }, {
      key: "reauthenticateWithRedirect",
      value: function reauthenticateWithRedirect() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithRedirect'));
      }
    }, {
      key: "updatePhoneNumber",
      value: function updatePhoneNumber() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'updatePhoneNumber'));
      }
    }, {
      key: "displayName",
      get: function get() {
        return this._user.displayName || null;
      }
    }, {
      key: "email",
      get: function get() {
        return this._user.email || null;
      }
    }, {
      key: "emailVerified",
      get: function get() {
        return this._user.emailVerified || false;
      }
    }, {
      key: "isAnonymous",
      get: function get() {
        return this._user.isAnonymous || false;
      }
    }, {
      key: "metadata",
      get: function get() {
        return this._user.metadata;
      }
    }, {
      key: "phoneNumber",
      get: function get() {
        return this._user.phoneNumber || null;
      }
    }, {
      key: "photoURL",
      get: function get() {
        return this._user.photoURL || null;
      }
    }, {
      key: "providerData",
      get: function get() {
        return this._user.providerData;
      }
    }, {
      key: "providerId",
      get: function get() {
        return this._user.providerId;
      }
    }, {
      key: "uid",
      get: function get() {
        return this._user.uid;
      }
    }, {
      key: "refreshToken",
      get: function get() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_CLASS_PROPERTY('User', 'refreshToken'));
      }
    }]);
    return User;
  }();

  exports.default = User;
},765,[750,754],"react-native-firebase/dist/modules/auth/User.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _native = require(_dependencyMap[0], "../../utils/native");

  var ConfirmationResult = function () {
    function ConfirmationResult(auth, verificationId) {
      babelHelpers.classCallCheck(this, ConfirmationResult);
      this._auth = auth;
      this._verificationId = verificationId;
    }

    babelHelpers.createClass(ConfirmationResult, [{
      key: "confirm",
      value: function confirm(verificationCode) {
        var _this = this;

        return (0, _native.getNativeModule)(this._auth)._confirmVerificationCode(verificationCode).then(function (user) {
          return _this._auth._setUser(user);
        });
      }
    }, {
      key: "verificationId",
      get: function get() {
        return this._verificationId;
      }
    }]);
    return ConfirmationResult;
  }();

  exports.default = ConfirmationResult;
},766,[754],"react-native-firebase/dist/modules/auth/ConfirmationResult.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'password';

  var EmailAuthProvider = function () {
    function EmailAuthProvider() {
      babelHelpers.classCallCheck(this, EmailAuthProvider);
      throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(EmailAuthProvider, null, [{
      key: "credential",
      value: function credential(email, password) {
        return {
          token: email,
          secret: password,
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return EmailAuthProvider;
  }();

  exports.default = EmailAuthProvider;
},767,[],"react-native-firebase/dist/modules/auth/providers/EmailAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'phone';

  var PhoneAuthProvider = function () {
    function PhoneAuthProvider() {
      babelHelpers.classCallCheck(this, PhoneAuthProvider);
      throw new Error('`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(PhoneAuthProvider, null, [{
      key: "credential",
      value: function credential(verificationId, code) {
        return {
          token: verificationId,
          secret: code,
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return PhoneAuthProvider;
  }();

  exports.default = PhoneAuthProvider;
},768,[],"react-native-firebase/dist/modules/auth/providers/PhoneAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'google.com';

  var GoogleAuthProvider = function () {
    function GoogleAuthProvider() {
      babelHelpers.classCallCheck(this, GoogleAuthProvider);
      throw new Error('`new GoogleAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(GoogleAuthProvider, null, [{
      key: "credential",
      value: function credential(token, secret) {
        return {
          token: token,
          secret: secret,
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return GoogleAuthProvider;
  }();

  exports.default = GoogleAuthProvider;
},769,[],"react-native-firebase/dist/modules/auth/providers/GoogleAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'github.com';

  var GithubAuthProvider = function () {
    function GithubAuthProvider() {
      babelHelpers.classCallCheck(this, GithubAuthProvider);
      throw new Error('`new GithubAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(GithubAuthProvider, null, [{
      key: "credential",
      value: function credential(token) {
        return {
          token: token,
          secret: '',
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return GithubAuthProvider;
  }();

  exports.default = GithubAuthProvider;
},770,[],"react-native-firebase/dist/modules/auth/providers/GithubAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'oauth';

  var OAuthProvider = function () {
    function OAuthProvider() {
      babelHelpers.classCallCheck(this, OAuthProvider);
      throw new Error('`new OAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(OAuthProvider, null, [{
      key: "credential",
      value: function credential(idToken, accessToken) {
        return {
          token: idToken,
          secret: accessToken,
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return OAuthProvider;
  }();

  exports.default = OAuthProvider;
},771,[],"react-native-firebase/dist/modules/auth/providers/OAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'twitter.com';

  var TwitterAuthProvider = function () {
    function TwitterAuthProvider() {
      babelHelpers.classCallCheck(this, TwitterAuthProvider);
      throw new Error('`new TwitterAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(TwitterAuthProvider, null, [{
      key: "credential",
      value: function credential(token, secret) {
        return {
          token: token,
          secret: secret,
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return TwitterAuthProvider;
  }();

  exports.default = TwitterAuthProvider;
},772,[],"react-native-firebase/dist/modules/auth/providers/TwitterAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var providerId = 'facebook.com';

  var FacebookAuthProvider = function () {
    function FacebookAuthProvider() {
      babelHelpers.classCallCheck(this, FacebookAuthProvider);
      throw new Error('`new FacebookAuthProvider()` is not supported on the native Firebase SDKs.');
    }

    babelHelpers.createClass(FacebookAuthProvider, null, [{
      key: "credential",
      value: function credential(token) {
        return {
          token: token,
          secret: '',
          providerId: providerId
        };
      }
    }, {
      key: "PROVIDER_ID",
      get: function get() {
        return providerId;
      }
    }]);
    return FacebookAuthProvider;
  }();

  exports.default = FacebookAuthProvider;
},773,[],"react-native-firebase/dist/modules/auth/providers/FacebookAuthProvider.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _internals = require(_dependencyMap[0], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _events = require(_dependencyMap[1], "../../utils/events");

  var _utils = require(_dependencyMap[2], "../../utils");

  var _native = require(_dependencyMap[3], "../../utils/native");

  var PhoneAuthListener = function () {
    function PhoneAuthListener(auth, phoneNumber, timeout) {
      babelHelpers.classCallCheck(this, PhoneAuthListener);
      this._auth = auth;
      this._reject = null;
      this._resolve = null;
      this._promise = null;
      this._credential = null;
      this._timeout = timeout || 20;
      this._phoneAuthRequestKey = (0, _utils.generatePushID)();
      this._internalEvents = {
        codeSent: "phone:auth:" + this._phoneAuthRequestKey + ":onCodeSent",
        verificationFailed: "phone:auth:" + this._phoneAuthRequestKey + ":onVerificationFailed",
        verificationComplete: "phone:auth:" + this._phoneAuthRequestKey + ":onVerificationComplete",
        codeAutoRetrievalTimeout: "phone:auth:" + this._phoneAuthRequestKey + ":onCodeAutoRetrievalTimeout"
      };
      this._publicEvents = {
        error: "phone:auth:" + this._phoneAuthRequestKey + ":error",
        event: "phone:auth:" + this._phoneAuthRequestKey + ":event",
        success: "phone:auth:" + this._phoneAuthRequestKey + ":success"
      };

      this._subscribeToEvents();

      if (_utils.isAndroid) {
        (0, _native.getNativeModule)(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey, this._timeout);
      }

      if (_utils.isIOS) {
        (0, _native.getNativeModule)(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey);
      }
    }

    babelHelpers.createClass(PhoneAuthListener, [{
      key: "_subscribeToEvents",
      value: function _subscribeToEvents() {
        var events = Object.keys(this._internalEvents);

        for (var i = 0, len = events.length; i < len; i++) {
          var type = events[i];

          _events.SharedEventEmitter.once(this._internalEvents[type], this["_" + type + "Handler"].bind(this));
        }
      }
    }, {
      key: "_addUserObserver",
      value: function _addUserObserver(observer) {
        _events.SharedEventEmitter.addListener(this._publicEvents.event, observer);
      }
    }, {
      key: "_emitToObservers",
      value: function _emitToObservers(snapshot) {
        _events.SharedEventEmitter.emit(this._publicEvents.event, snapshot);
      }
    }, {
      key: "_emitToErrorCb",
      value: function _emitToErrorCb(snapshot) {
        var error = snapshot.error;
        if (this._reject) this._reject(error);

        _events.SharedEventEmitter.emit(this._publicEvents.error, error);
      }
    }, {
      key: "_emitToSuccessCb",
      value: function _emitToSuccessCb(snapshot) {
        if (this._resolve) this._resolve(snapshot);

        _events.SharedEventEmitter.emit(this._publicEvents.success, snapshot);
      }
    }, {
      key: "_removeAllListeners",
      value: function _removeAllListeners() {
        var _this = this;

        setTimeout(function () {
          Object.values(_this._internalEvents).forEach(function (event) {
            _events.SharedEventEmitter.removeAllListeners(event);
          });
          Object.values(_this._publicEvents).forEach(function (publicEvent) {
            _events.SharedEventEmitter.removeAllListeners(publicEvent);
          });
        }, 0);
      }
    }, {
      key: "_promiseDeferred",
      value: function _promiseDeferred() {
        var _this2 = this;

        if (!this._promise) {
          this._promise = new Promise(function (resolve, reject) {
            _this2._resolve = function (result) {
              _this2._resolve = null;
              return resolve(result);
            };

            _this2._reject = function (possibleError) {
              _this2._reject = null;
              return reject(possibleError);
            };
          });
        }
      }
    }, {
      key: "_codeSentHandler",
      value: function _codeSentHandler(credential) {
        var snapshot = {
          verificationId: credential.verificationId,
          code: null,
          error: null,
          state: 'sent'
        };

        this._emitToObservers(snapshot);

        if (_utils.isIOS) {
          this._emitToSuccessCb(snapshot);
        }

        if (_utils.isAndroid) {}
      }
    }, {
      key: "_codeAutoRetrievalTimeoutHandler",
      value: function _codeAutoRetrievalTimeoutHandler(credential) {
        var snapshot = {
          verificationId: credential.verificationId,
          code: null,
          error: null,
          state: 'timeout'
        };

        this._emitToObservers(snapshot);

        this._emitToSuccessCb(snapshot);
      }
    }, {
      key: "_verificationCompleteHandler",
      value: function _verificationCompleteHandler(credential) {
        var snapshot = {
          verificationId: credential.verificationId,
          code: credential.code || null,
          error: null,
          state: 'verified'
        };

        this._emitToObservers(snapshot);

        this._emitToSuccessCb(snapshot);

        this._removeAllListeners();
      }
    }, {
      key: "_verificationFailedHandler",
      value: function _verificationFailedHandler(state) {
        var snapshot = {
          verificationId: state.verificationId,
          code: null,
          error: null,
          state: 'error'
        };
        var _state$error = state.error,
            code = _state$error.code,
            message = _state$error.message,
            nativeErrorMessage = _state$error.nativeErrorMessage;
        snapshot.error = (0, _utils.nativeToJSError)(code, message, {
          nativeErrorMessage: nativeErrorMessage
        });

        this._emitToObservers(snapshot);

        this._emitToErrorCb(snapshot);

        this._removeAllListeners();
      }
    }, {
      key: "on",
      value: function on(event, observer, errorCb, successCb) {
        if (!(0, _utils.isString)(event)) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_ARG_NAMED('event', 'string', 'on'));
        }

        if (event !== 'state_changed') {
          throw new Error(_internals2.default.STRINGS.ERROR_ARG_INVALID_VALUE('event', 'state_changed', event));
        }

        if (!(0, _utils.isFunction)(observer)) {
          throw new Error(_internals2.default.STRINGS.ERROR_MISSING_ARG_NAMED('observer', 'function', 'on'));
        }

        this._addUserObserver(observer);

        if ((0, _utils.isFunction)(errorCb)) {
          _events.SharedEventEmitter.once(this._publicEvents.error, errorCb);
        }

        if ((0, _utils.isFunction)(successCb)) {
          _events.SharedEventEmitter.once(this._publicEvents.success, successCb);
        }

        return this;
      }
    }, {
      key: "then",
      value: function then(fn) {
        this._promiseDeferred();

        if (this._promise) return this._promise.then.bind(this._promise)(fn);
        return undefined;
      }
    }, {
      key: "catch",
      value: function _catch(fn) {
        this._promiseDeferred();

        if (this._promise) return this._promise.catch.bind(this._promise)(fn);
        return undefined;
      }
    }]);
    return PhoneAuthListener;
  }();

  exports.default = PhoneAuthListener;
},774,[750,745,751,754],"react-native-firebase/dist/modules/auth/PhoneAuthListener.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _ModuleBase2 = require(_dependencyMap[0], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[1], "../../utils/native");

  var _utils = require(_dependencyMap[2], "../../utils");

  var AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;
  var ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseAnalytics';
  var NAMESPACE = exports.NAMESPACE = 'analytics';

  var Analytics = function (_ModuleBase) {
    babelHelpers.inherits(Analytics, _ModuleBase);

    function Analytics(app) {
      babelHelpers.classCallCheck(this, Analytics);
      return babelHelpers.possibleConstructorReturn(this, (Analytics.__proto__ || Object.getPrototypeOf(Analytics)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(Analytics, [{
      key: "logEvent",
      value: function logEvent(name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!(0, _utils.isString)(name)) {
          throw new Error("analytics.logEvent(): First argument 'name' is required and must be a string value.");
        }

        if (typeof params !== 'undefined' && !(0, _utils.isObject)(params)) {
          throw new Error("analytics.logEvent(): Second optional argument 'params' must be an object if provided.");
        }

        if (ReservedEventNames.includes(name)) {
          throw new Error("analytics.logEvent(): event name '" + name + "' is a reserved event name and can not be used.");
        }

        if (!AlphaNumericUnderscore.test(name)) {
          throw new Error("analytics.logEvent(): Event name '" + name + "' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.");
        }

        if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).');
        (0, _native.getNativeModule)(this).logEvent(name, params);
      }
    }, {
      key: "setAnalyticsCollectionEnabled",
      value: function setAnalyticsCollectionEnabled(enabled) {
        (0, _native.getNativeModule)(this).setAnalyticsCollectionEnabled(enabled);
      }
    }, {
      key: "setCurrentScreen",
      value: function setCurrentScreen(screenName, screenClassOverride) {
        (0, _native.getNativeModule)(this).setCurrentScreen(screenName, screenClassOverride);
      }
    }, {
      key: "setMinimumSessionDuration",
      value: function setMinimumSessionDuration() {
        var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10000;
        (0, _native.getNativeModule)(this).setMinimumSessionDuration(milliseconds);
      }
    }, {
      key: "setSessionTimeoutDuration",
      value: function setSessionTimeoutDuration() {
        var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1800000;
        (0, _native.getNativeModule)(this).setSessionTimeoutDuration(milliseconds);
      }
    }, {
      key: "setUserId",
      value: function setUserId(id) {
        (0, _native.getNativeModule)(this).setUserId(id);
      }
    }, {
      key: "setUserProperty",
      value: function setUserProperty(name, value) {
        (0, _native.getNativeModule)(this).setUserProperty(name, value);
      }
    }, {
      key: "setUserProperties",
      value: function setUserProperties(object) {
        var _this2 = this;

        Object.keys(object).forEach(function (property) {
          (0, _native.getNativeModule)(_this2).setUserProperty(property, object[property]);
        });
      }
    }]);
    return Analytics;
  }(_ModuleBase3.default);

  exports.default = Analytics;
  var statics = exports.statics = {};
},775,[755,754,751],"react-native-firebase/dist/modules/analytics/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _log = require(_dependencyMap[0], "../../utils/log");

  var _ModuleBase2 = require(_dependencyMap[1], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[2], "../../utils/native");

  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseRemoteConfig';
  var NAMESPACE = exports.NAMESPACE = 'config';

  var RemoteConfig = function (_ModuleBase) {
    babelHelpers.inherits(RemoteConfig, _ModuleBase);

    function RemoteConfig(app) {
      babelHelpers.classCallCheck(this, RemoteConfig);

      var _this = babelHelpers.possibleConstructorReturn(this, (RemoteConfig.__proto__ || Object.getPrototypeOf(RemoteConfig)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));

      _this._developerModeEnabled = false;
      return _this;
    }

    babelHelpers.createClass(RemoteConfig, [{
      key: "_nativeValueToJS",
      value: function _nativeValueToJS(nativeValue) {
        return {
          source: nativeValue.source,
          val: function val() {
            if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;
            if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;
            if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;
            return nativeValue.stringValue;
          }
        };
      }
    }, {
      key: "enableDeveloperMode",
      value: function enableDeveloperMode() {
        if (!this._developerModeEnabled) {
          (0, _log.getLogger)(this).debug('Enabled developer mode');
          (0, _native.getNativeModule)(this).enableDeveloperMode();
          this._developerModeEnabled = true;
        }
      }
    }, {
      key: "fetch",
      value: function fetch(expiration) {
        if (expiration !== undefined) {
          (0, _log.getLogger)(this).debug("Fetching remote config data with expiration " + expiration.toString());
          return (0, _native.getNativeModule)(this).fetchWithExpirationDuration(expiration);
        }

        (0, _log.getLogger)(this).debug('Fetching remote config data');
        return (0, _native.getNativeModule)(this).fetch();
      }
    }, {
      key: "activateFetched",
      value: function activateFetched() {
        (0, _log.getLogger)(this).debug('Activating remote config');
        return (0, _native.getNativeModule)(this).activateFetched();
      }
    }, {
      key: "getValue",
      value: function getValue(key) {
        return (0, _native.getNativeModule)(this).getValue(key || '').then(this._nativeValueToJS);
      }
    }, {
      key: "getValues",
      value: function getValues(keys) {
        var _this2 = this;

        return (0, _native.getNativeModule)(this).getValues(keys || []).then(function (nativeValues) {
          var values = {};

          for (var i = 0, len = keys.length; i < len; i++) {
            values[keys[i]] = _this2._nativeValueToJS(nativeValues[i]);
          }

          return values;
        });
      }
    }, {
      key: "getKeysByPrefix",
      value: function getKeysByPrefix(prefix) {
        return (0, _native.getNativeModule)(this).getKeysByPrefix(prefix);
      }
    }, {
      key: "setDefaults",
      value: function setDefaults(defaults) {
        (0, _native.getNativeModule)(this).setDefaults(defaults);
      }
    }, {
      key: "setDefaultsFromResource",
      value: function setDefaultsFromResource(resource) {
        (0, _native.getNativeModule)(this).setDefaultsFromResource(resource);
      }
    }]);
    return RemoteConfig;
  }(_ModuleBase3.default);

  exports.default = RemoteConfig;
  var statics = exports.statics = {};
},776,[753,755,754],"react-native-firebase/dist/modules/config/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _ModuleBase2 = require(_dependencyMap[0], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[1], "../../utils/native");

  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseCrash';
  var NAMESPACE = exports.NAMESPACE = 'crash';

  var Crash = function (_ModuleBase) {
    babelHelpers.inherits(Crash, _ModuleBase);

    function Crash(app) {
      babelHelpers.classCallCheck(this, Crash);
      return babelHelpers.possibleConstructorReturn(this, (Crash.__proto__ || Object.getPrototypeOf(Crash)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(Crash, [{
      key: "setCrashCollectionEnabled",
      value: function setCrashCollectionEnabled(enabled) {
        (0, _native.getNativeModule)(this).setCrashCollectionEnabled(enabled);
      }
    }, {
      key: "isCrashCollectionEnabled",
      value: function isCrashCollectionEnabled() {
        return (0, _native.getNativeModule)(this).isCrashCollectionEnabled();
      }
    }, {
      key: "log",
      value: function log(message) {
        (0, _native.getNativeModule)(this).log(message);
      }
    }, {
      key: "logcat",
      value: function logcat(level, tag, message) {
        (0, _native.getNativeModule)(this).logcat(level, tag, message);
      }
    }, {
      key: "report",
      value: function report(error) {
        var maxStackSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
        if (!error || !error.message) return;
        var errorMessage = "Message: " + error.message + "\r\n";

        if (error.code) {
          errorMessage = errorMessage + "Code: " + error.code + "\r\n";
        }

        var stackRows = error.stack.split('\n');
        errorMessage = errorMessage + "\r\nStack: \r\n";

        for (var i = 0, len = stackRows.length; i < len; i++) {
          if (i === maxStackSize) break;
          errorMessage = errorMessage + "  -  " + stackRows[i] + "\r\n";
        }

        (0, _native.getNativeModule)(this).report(errorMessage);
      }
    }]);
    return Crash;
  }(_ModuleBase3.default);

  exports.default = Crash;
  var statics = exports.statics = {};
},777,[755,754],"react-native-firebase/dist/modules/crash/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _ModuleBase2 = require(_dependencyMap[0], "../../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[1], "../../../utils/native");

  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseCrashlytics';
  var NAMESPACE = exports.NAMESPACE = 'crashlytics';

  var Crashlytics = function (_ModuleBase) {
    babelHelpers.inherits(Crashlytics, _ModuleBase);

    function Crashlytics(app) {
      babelHelpers.classCallCheck(this, Crashlytics);
      return babelHelpers.possibleConstructorReturn(this, (Crashlytics.__proto__ || Object.getPrototypeOf(Crashlytics)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(Crashlytics, [{
      key: "crash",
      value: function crash() {
        (0, _native.getNativeModule)(this).crash();
      }
    }, {
      key: "log",
      value: function log(message) {
        (0, _native.getNativeModule)(this).log(message);
      }
    }, {
      key: "recordError",
      value: function recordError(code, message) {
        (0, _native.getNativeModule)(this).recordError(code, message);
      }
    }, {
      key: "setBoolValue",
      value: function setBoolValue(key, value) {
        (0, _native.getNativeModule)(this).setBoolValue(key, value);
      }
    }, {
      key: "setFloatValue",
      value: function setFloatValue(key, value) {
        (0, _native.getNativeModule)(this).setFloatValue(key, value);
      }
    }, {
      key: "setIntValue",
      value: function setIntValue(key, value) {
        (0, _native.getNativeModule)(this).setIntValue(key, value);
      }
    }, {
      key: "setStringValue",
      value: function setStringValue(key, value) {
        (0, _native.getNativeModule)(this).setStringValue(key, value);
      }
    }, {
      key: "setUserIdentifier",
      value: function setUserIdentifier(userId) {
        (0, _native.getNativeModule)(this).setUserIdentifier(userId);
      }
    }]);
    return Crashlytics;
  }(_ModuleBase3.default);

  exports.default = Crashlytics;
  var statics = exports.statics = {};
},778,[755,754],"react-native-firebase/dist/modules/fabric/crashlytics/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _Reference = require(_dependencyMap[1], "./Reference");

  var _Reference2 = babelHelpers.interopRequireDefault(_Reference);

  var _transaction = require(_dependencyMap[2], "./transaction");

  var _transaction2 = babelHelpers.interopRequireDefault(_transaction);

  var _ModuleBase2 = require(_dependencyMap[3], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[4], "../../utils/native");

  var NATIVE_EVENTS = ['database_transaction_event'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseDatabase';
  var NAMESPACE = exports.NAMESPACE = 'database';

  var Database = function (_ModuleBase) {
    babelHelpers.inherits(Database, _ModuleBase);

    function Database(app) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, Database);

      var _this = babelHelpers.possibleConstructorReturn(this, (Database.__proto__ || Object.getPrototypeOf(Database)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: true,
        namespace: NAMESPACE
      }));

      _this._transactionHandler = new _transaction2.default(_this);

      if (options.persistence) {
        (0, _native.getNativeModule)(_this).setPersistence(options.persistence);
      }

      setTimeout(function () {
        _this._serverTimeOffset = 0;
        _this._offsetRef = _this.ref('.info/serverTimeOffset');

        _this._offsetRef.on('value', function (snapshot) {
          _this._serverTimeOffset = snapshot.val() || _this._serverTimeOffset;
        });
      }, 1);
      return _this;
    }

    babelHelpers.createClass(Database, [{
      key: "getServerTime",
      value: function getServerTime() {
        return new Date(Date.now() + this._serverTimeOffset);
      }
    }, {
      key: "goOnline",
      value: function goOnline() {
        (0, _native.getNativeModule)(this).goOnline();
      }
    }, {
      key: "goOffline",
      value: function goOffline() {
        (0, _native.getNativeModule)(this).goOffline();
      }
    }, {
      key: "ref",
      value: function ref(path) {
        return new _Reference2.default(this, path);
      }
    }]);
    return Database;
  }(_ModuleBase3.default);

  exports.default = Database;
  var statics = exports.statics = {
    ServerValue: _reactNative.NativeModules.RNFirebaseDatabase ? {
      TIMESTAMP: _reactNative.NativeModules.RNFirebaseDatabase.serverValueTimestamp || {
        '.sv': 'timestamp'
      }
    } : {},
    enableLogging: function enableLogging(enabled) {
      if (_reactNative.NativeModules[MODULE_NAME]) {
        _reactNative.NativeModules[MODULE_NAME].enableLogging(enabled);
      }
    }
  };
},779,[12,780,786,755,754],"react-native-firebase/dist/modules/database/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Query = require(_dependencyMap[0], "./Query");

  var _Query2 = babelHelpers.interopRequireDefault(_Query);

  var _DataSnapshot = require(_dependencyMap[1], "./DataSnapshot");

  var _DataSnapshot2 = babelHelpers.interopRequireDefault(_DataSnapshot);

  var _OnDisconnect = require(_dependencyMap[2], "./OnDisconnect");

  var _OnDisconnect2 = babelHelpers.interopRequireDefault(_OnDisconnect);

  var _log = require(_dependencyMap[3], "../../utils/log");

  var _native = require(_dependencyMap[4], "../../utils/native");

  var _ReferenceBase2 = require(_dependencyMap[5], "../../utils/ReferenceBase");

  var _ReferenceBase3 = babelHelpers.interopRequireDefault(_ReferenceBase2);

  var _utils = require(_dependencyMap[6], "../../utils");

  var _SyncTree = require(_dependencyMap[7], "../../utils/SyncTree");

  var _SyncTree2 = babelHelpers.interopRequireDefault(_SyncTree);

  var listeners = 0;
  var ReferenceEventTypes = {
    value: 'value',
    child_added: 'child_added',
    child_removed: 'child_removed',
    child_changed: 'child_changed',
    child_moved: 'child_moved'
  };

  var Reference = function (_ReferenceBase) {
    babelHelpers.inherits(Reference, _ReferenceBase);

    function Reference(database, path, existingModifiers) {
      babelHelpers.classCallCheck(this, Reference);

      var _this = babelHelpers.possibleConstructorReturn(this, (Reference.__proto__ || Object.getPrototypeOf(Reference)).call(this, path));

      _this._promise = null;
      _this._refListeners = {};
      _this._database = database;
      _this._query = new _Query2.default(_this, existingModifiers);
      (0, _log.getLogger)(database).debug('Created new Reference', _this._getRefKey());
      return _this;
    }

    babelHelpers.createClass(Reference, [{
      key: "keepSynced",
      value: function keepSynced(bool) {
        return (0, _native.getNativeModule)(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);
      }
    }, {
      key: "set",
      value: function set(value, onComplete) {
        return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).set(this.path, this._serializeAnyType(value)), onComplete);
      }
    }, {
      key: "setPriority",
      value: function setPriority(priority, onComplete) {
        var _priority = this._serializeAnyType(priority);

        return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setPriority(this.path, _priority), onComplete);
      }
    }, {
      key: "setWithPriority",
      value: function setWithPriority(value, priority, onComplete) {
        var _value = this._serializeAnyType(value);

        var _priority = this._serializeAnyType(priority);

        return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setWithPriority(this.path, _value, _priority), onComplete);
      }
    }, {
      key: "update",
      value: function update(val, onComplete) {
        var value = this._serializeObject(val);

        return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).update(this.path, value), onComplete);
      }
    }, {
      key: "remove",
      value: function remove(onComplete) {
        return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).remove(this.path), onComplete);
      }
    }, {
      key: "transaction",
      value: function transaction(transactionUpdate, onComplete) {
        var _this2 = this;

        var applyLocally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (!(0, _utils.isFunction)(transactionUpdate)) {
          return Promise.reject(new Error('Missing transactionUpdate function argument.'));
        }

        return new Promise(function (resolve, reject) {
          var onCompleteWrapper = function onCompleteWrapper(error, committed, snapshotData) {
            if ((0, _utils.isFunction)(onComplete)) {
              if (error) {
                onComplete(error, committed, null);
              } else {
                onComplete(null, committed, new _DataSnapshot2.default(_this2, snapshotData));
              }
            }

            if (error) return reject(error);
            return resolve({
              committed: committed,
              snapshot: new _DataSnapshot2.default(_this2, snapshotData)
            });
          };

          _this2._database._transactionHandler.add(_this2, transactionUpdate, onCompleteWrapper, applyLocally);
        });
      }
    }, {
      key: "once",
      value: function once() {
        var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'value';
        var successCallback = arguments[1];

        var _this3 = this;

        var cancelOrContext = arguments[2];
        var context = arguments[3];
        return (0, _native.getNativeModule)(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(function (_ref) {
          var snapshot = _ref.snapshot;

          var _snapshot = new _DataSnapshot2.default(_this3, snapshot);

          if ((0, _utils.isFunction)(successCallback)) {
            if ((0, _utils.isObject)(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);
            if (context && (0, _utils.isObject)(context)) successCallback.bind(context)(_snapshot);
            successCallback(_snapshot);
          }

          return _snapshot;
        }).catch(function (error) {
          if ((0, _utils.isFunction)(cancelOrContext)) return cancelOrContext(error);
          return error;
        });
      }
    }, {
      key: "push",
      value: function push(value, onComplete) {
        if (value === null || value === undefined) {
          return new Reference(this._database, this.path + "/" + (0, _utils.generatePushID)(this._database._serverTimeOffset));
        }

        var newRef = new Reference(this._database, this.path + "/" + (0, _utils.generatePushID)(this._database._serverTimeOffset));
        var promise = newRef.set(value);

        if ((0, _utils.isFunction)(onComplete)) {
          return promise.then(function () {
            return onComplete(null, newRef);
          }).catch(function (error) {
            return onComplete(error, null);
          });
        }

        newRef._setThenable(promise);

        return newRef;
      }
    }, {
      key: "orderByKey",
      value: function orderByKey() {
        return this.orderBy('orderByKey');
      }
    }, {
      key: "orderByPriority",
      value: function orderByPriority() {
        return this.orderBy('orderByPriority');
      }
    }, {
      key: "orderByValue",
      value: function orderByValue() {
        return this.orderBy('orderByValue');
      }
    }, {
      key: "orderByChild",
      value: function orderByChild(key) {
        return this.orderBy('orderByChild', key);
      }
    }, {
      key: "orderBy",
      value: function orderBy(name, key) {
        var newRef = new Reference(this._database, this.path, this._query.getModifiers());

        newRef._query.orderBy(name, key);

        return newRef;
      }
    }, {
      key: "limitToLast",
      value: function limitToLast(limit) {
        return this.limit('limitToLast', limit);
      }
    }, {
      key: "limitToFirst",
      value: function limitToFirst(limit) {
        return this.limit('limitToFirst', limit);
      }
    }, {
      key: "limit",
      value: function limit(name, _limit) {
        var newRef = new Reference(this._database, this.path, this._query.getModifiers());

        newRef._query.limit(name, _limit);

        return newRef;
      }
    }, {
      key: "equalTo",
      value: function equalTo(value, key) {
        return this.filter('equalTo', value, key);
      }
    }, {
      key: "endAt",
      value: function endAt(value, key) {
        return this.filter('endAt', value, key);
      }
    }, {
      key: "startAt",
      value: function startAt(value, key) {
        return this.filter('startAt', value, key);
      }
    }, {
      key: "filter",
      value: function filter(name, value, key) {
        var newRef = new Reference(this._database, this.path, this._query.getModifiers());

        newRef._query.filter(name, value, key);

        return newRef;
      }
    }, {
      key: "onDisconnect",
      value: function onDisconnect() {
        return new _OnDisconnect2.default(this);
      }
    }, {
      key: "child",
      value: function child(path) {
        return new Reference(this._database, this.path + "/" + path);
      }
    }, {
      key: "toString",
      value: function toString() {
        return this._database.app.options.databaseURL + "/" + this.path;
      }
    }, {
      key: "isEqual",
      value: function isEqual(otherRef) {
        return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();
      }
    }, {
      key: "then",
      value: function then(fnResolve, fnReject) {
        var _this4 = this;

        if ((0, _utils.isFunction)(fnResolve) && this._promise && this._promise.then) {
          return this._promise.then.bind(this._promise)(function (result) {
            _this4._promise = null;
            return fnResolve(result);
          }, function (possibleErr) {
            _this4._promise = null;

            if ((0, _utils.isFunction)(fnReject)) {
              return fnReject(possibleErr);
            }

            throw possibleErr;
          });
        }

        throw new Error("Cannot read property 'then' of undefined.");
      }
    }, {
      key: "catch",
      value: function _catch(fnReject) {
        var _this5 = this;

        if ((0, _utils.isFunction)(fnReject) && this._promise && this._promise.catch) {
          return this._promise.catch.bind(this._promise)(function (possibleErr) {
            _this5._promise = null;
            return fnReject(possibleErr);
          });
        }

        throw new Error("Cannot read property 'catch' of undefined.");
      }
    }, {
      key: "_getRegistrationKey",
      value: function _getRegistrationKey(eventType) {
        return "$" + this._database.app.name + "$/" + this.path + "$" + this._query.queryIdentifier() + "$" + listeners + "$" + eventType;
      }
    }, {
      key: "_getRefKey",
      value: function _getRefKey() {
        return "$" + this._database.app.name + "$/" + this.path + "$" + this._query.queryIdentifier();
      }
    }, {
      key: "_setThenable",
      value: function _setThenable(promise) {
        this._promise = promise;
      }
    }, {
      key: "_serializeObject",
      value: function _serializeObject(obj) {
        if (!(0, _utils.isObject)(obj)) return obj;
        return (0, _utils.tryJSONParse)((0, _utils.tryJSONStringify)(obj));
      }
    }, {
      key: "_serializeAnyType",
      value: function _serializeAnyType(value) {
        if ((0, _utils.isObject)(value)) {
          return {
            type: 'object',
            value: this._serializeObject(value)
          };
        }

        return {
          type: typeof value,
          value: value
        };
      }
    }, {
      key: "on",
      value: function on(eventType, callback, cancelCallbackOrContext, context) {
        if (!eventType) {
          throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');
        }

        if (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType]) {
          throw new Error("Query.on failed: First argument must be a valid string event type: \"" + Object.keys(ReferenceEventTypes).join(', ') + "\"");
        }

        if (!callback) {
          throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');
        }

        if (!(0, _utils.isFunction)(callback)) {
          throw new Error('Query.on failed: Second argument must be a valid function.');
        }

        if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && !(0, _utils.isObject)(context) && !(0, _utils.isObject)(cancelCallbackOrContext)) {
          throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');
        }

        if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && context) {
          throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');
        }

        var eventRegistrationKey = this._getRegistrationKey(eventType);

        var registrationCancellationKey = eventRegistrationKey + "$cancelled";

        var _context = cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) ? cancelCallbackOrContext : context;

        var registrationObj = {
          eventType: eventType,
          ref: this,
          path: this.path,
          key: this._getRefKey(),
          appName: this._database.app.name,
          eventRegistrationKey: eventRegistrationKey
        };

        _SyncTree2.default.addRegistration(babelHelpers.extends({}, registrationObj, {
          listener: _context ? callback.bind(_context) : callback
        }));

        if (cancelCallbackOrContext && (0, _utils.isFunction)(cancelCallbackOrContext)) {
          _SyncTree2.default.addRegistration({
            ref: this,
            once: true,
            path: this.path,
            key: this._getRefKey(),
            appName: this._database.app.name,
            eventType: eventType + "$cancelled",
            eventRegistrationKey: registrationCancellationKey,
            listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext
          });
        }

        (0, _native.getNativeModule)(this._database).on({
          eventType: eventType,
          path: this.path,
          key: this._getRefKey(),
          appName: this._database.app.name,
          modifiers: this._query.getModifiers(),
          hasCancellationCallback: (0, _utils.isFunction)(cancelCallbackOrContext),
          registration: {
            eventRegistrationKey: eventRegistrationKey,
            key: registrationObj.key,
            registrationCancellationKey: registrationCancellationKey
          }
        });
        listeners += 1;
        return callback;
      }
    }, {
      key: "off",
      value: function off() {
        var eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var originalCallback = arguments[1];

        if (!arguments.length) {
          return _SyncTree2.default.removeListenersForRegistrations(_SyncTree2.default.getRegistrationsByPath(this.path));
        }

        if (eventType && (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType])) {
          throw new Error("Query.off failed: First argument must be a valid string event type: \"" + Object.keys(ReferenceEventTypes).join(', ') + "\"");
        }

        if (originalCallback && !(0, _utils.isFunction)(originalCallback)) {
          throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');
        }

        if (eventType && originalCallback) {
          var registration = _SyncTree2.default.getOneByPathEventListener(this.path, eventType, originalCallback);

          if (!registration) return [];

          _SyncTree2.default.removeListenersForRegistrations([registration + "$cancelled"]);

          return _SyncTree2.default.removeListenerRegistrations(originalCallback, [registration]);
        }

        var registrations = _SyncTree2.default.getRegistrationsByPathEvent(this.path, eventType);

        _SyncTree2.default.removeListenersForRegistrations(_SyncTree2.default.getRegistrationsByPathEvent(this.path, eventType + "$cancelled"));

        return _SyncTree2.default.removeListenersForRegistrations(registrations);
      }
    }, {
      key: "parent",
      get: function get() {
        if (this.path === '/') return null;
        return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));
      }
    }, {
      key: "ref",
      get: function get() {
        return this;
      }
    }, {
      key: "root",
      get: function get() {
        return new Reference(this._database, '/');
      }
    }]);
    return Reference;
  }(_ReferenceBase3.default);

  exports.default = Reference;
},780,[781,782,783,753,754,784,751,785],"react-native-firebase/dist/modules/database/Reference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _utils = require(_dependencyMap[0], "../../utils");

  var Query = function () {
    function Query(ref, existingModifiers) {
      babelHelpers.classCallCheck(this, Query);
      this.modifiers = existingModifiers ? [].concat(babelHelpers.toConsumableArray(existingModifiers)) : [];
      this._reference = ref;
    }

    babelHelpers.createClass(Query, [{
      key: "orderBy",
      value: function orderBy(name, key) {
        this.modifiers.push({
          id: "orderBy-" + name + ":" + (key || ''),
          type: 'orderBy',
          name: name,
          key: key
        });
        return this._reference;
      }
    }, {
      key: "limit",
      value: function limit(name, _limit) {
        this.modifiers.push({
          id: "limit-" + name + ":" + _limit,
          type: 'limit',
          name: name,
          limit: _limit
        });
        return this._reference;
      }
    }, {
      key: "filter",
      value: function filter(name, value, key) {
        this.modifiers.push({
          id: "filter-" + name + ":" + (0, _utils.objectToUniqueId)(value) + ":" + (key || ''),
          type: 'filter',
          name: name,
          value: value,
          valueType: typeof value,
          key: key
        });
        return this._reference;
      }
    }, {
      key: "getModifiers",
      value: function getModifiers() {
        return [].concat(babelHelpers.toConsumableArray(this.modifiers));
      }
    }, {
      key: "queryIdentifier",
      value: function queryIdentifier() {
        var sortedModifiers = this.getModifiers().sort(function (a, b) {
          if (a.id < b.id) return -1;
          if (a.id > b.id) return 1;
          return 0;
        });
        var key = '{';

        for (var i = 0; i < sortedModifiers.length; i++) {
          if (i !== 0) key += ',';
          key += sortedModifiers[i].id;
        }

        key += '}';
        return key;
      }
    }]);
    return Query;
  }();

  exports.default = Query;
},781,[751],"react-native-firebase/dist/modules/database/Query.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _utils = require(_dependencyMap[0], "./../../utils");

  var DataSnapshot = function () {
    function DataSnapshot(ref, snapshot) {
      babelHelpers.classCallCheck(this, DataSnapshot);
      this.key = snapshot.key;

      if (ref.key !== snapshot.key) {
        this.ref = ref.child(snapshot.key);
      } else {
        this.ref = ref;
      }

      this._value = snapshot.value;
      this._priority = snapshot.priority === undefined ? null : snapshot.priority;
      this._childKeys = snapshot.childKeys || [];
    }

    babelHelpers.createClass(DataSnapshot, [{
      key: "val",
      value: function val() {
        if ((0, _utils.isObject)(this._value) || Array.isArray(this._value)) return JSON.parse(JSON.stringify(this._value));
        return this._value;
      }
    }, {
      key: "child",
      value: function child(path) {
        var value = (0, _utils.deepGet)(this._value, path);
        var childRef = this.ref.child(path);
        return new DataSnapshot(childRef, {
          value: value,
          key: childRef.key,
          exists: value !== null,
          childKeys: (0, _utils.isObject)(value) ? Object.keys(value) : []
        });
      }
    }, {
      key: "exists",
      value: function exists() {
        return this._value !== null;
      }
    }, {
      key: "forEach",
      value: function forEach(action) {
        if (!this._childKeys.length) return false;
        var cancelled = false;

        for (var i = 0, len = this._childKeys.length; i < len; i++) {
          var key = this._childKeys[i];
          var childSnapshot = this.child(key);
          var returnValue = action(childSnapshot);

          if (returnValue === true) {
            cancelled = true;
            break;
          }
        }

        return cancelled;
      }
    }, {
      key: "getPriority",
      value: function getPriority() {
        return this._priority;
      }
    }, {
      key: "hasChild",
      value: function hasChild(path) {
        return (0, _utils.deepExists)(this._value, path);
      }
    }, {
      key: "hasChildren",
      value: function hasChildren() {
        return this.numChildren() > 0;
      }
    }, {
      key: "numChildren",
      value: function numChildren() {
        if (!(0, _utils.isObject)(this._value)) return 0;
        return Object.keys(this._value).length;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.val();
      }
    }]);
    return DataSnapshot;
  }();

  exports.default = DataSnapshot;
},782,[751],"react-native-firebase/dist/modules/database/DataSnapshot.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _utils = require(_dependencyMap[0], "../../utils");

  var _native = require(_dependencyMap[1], "../../utils/native");

  var OnDisconnect = function () {
    function OnDisconnect(ref) {
      babelHelpers.classCallCheck(this, OnDisconnect);
      this.ref = ref;
      this.path = ref.path;
      this._database = ref._database;
    }

    babelHelpers.createClass(OnDisconnect, [{
      key: "set",
      value: function set(value) {
        return (0, _native.getNativeModule)(this._database).onDisconnectSet(this.path, {
          type: (0, _utils.typeOf)(value),
          value: value
        });
      }
    }, {
      key: "update",
      value: function update(values) {
        return (0, _native.getNativeModule)(this._database).onDisconnectUpdate(this.path, values);
      }
    }, {
      key: "remove",
      value: function remove() {
        return (0, _native.getNativeModule)(this._database).onDisconnectRemove(this.path);
      }
    }, {
      key: "cancel",
      value: function cancel() {
        return (0, _native.getNativeModule)(this._database).onDisconnectCancel(this.path);
      }
    }]);
    return OnDisconnect;
  }();

  exports.default = OnDisconnect;
},783,[751,754],"react-native-firebase/dist/modules/database/OnDisconnect.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var ReferenceBase = function () {
    function ReferenceBase(path) {
      babelHelpers.classCallCheck(this, ReferenceBase);

      if (path) {
        this.path = path.length > 1 && path.endsWith('/') ? path.substring(0, path.length - 1) : path;
      } else {
        this.path = '/';
      }
    }

    babelHelpers.createClass(ReferenceBase, [{
      key: "key",
      get: function get() {
        return this.path === '/' ? null : this.path.substring(this.path.lastIndexOf('/') + 1);
      }
    }]);
    return ReferenceBase;
  }();

  exports.default = ReferenceBase;
},784,[],"react-native-firebase/dist/utils/ReferenceBase.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _events = require(_dependencyMap[1], "./events");

  var _DataSnapshot = require(_dependencyMap[2], "../modules/database/DataSnapshot");

  var _DataSnapshot2 = babelHelpers.interopRequireDefault(_DataSnapshot);

  var _Reference = require(_dependencyMap[3], "../modules/database/Reference");

  var _Reference2 = babelHelpers.interopRequireDefault(_Reference);

  var _utils = require(_dependencyMap[4], "../utils");

  var SyncTree = function () {
    function SyncTree() {
      babelHelpers.classCallCheck(this, SyncTree);
      this._tree = {};
      this._reverseLookup = {};

      if (_reactNative.NativeModules.RNFirebaseDatabase) {
        this._nativeEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.RNFirebaseDatabase);

        this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));
      }
    }

    babelHelpers.createClass(SyncTree, [{
      key: "_handleSyncEvent",
      value: function _handleSyncEvent(event) {
        if (event.error) {
          this._handleErrorEvent(event);
        } else {
          this._handleValueEvent(event);
        }
      }
    }, {
      key: "_handleValueEvent",
      value: function _handleValueEvent(event) {
        var _event$registration = event.registration,
            key = _event$registration.key,
            eventRegistrationKey = _event$registration.eventRegistrationKey;
        var registration = this.getRegistration(eventRegistrationKey);

        if (!registration) {
          return _reactNative.NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);
        }

        var _event$data = event.data,
            snapshot = _event$data.snapshot,
            previousChildName = _event$data.previousChildName;
        return _events.SharedEventEmitter.emit(eventRegistrationKey, new _DataSnapshot2.default(registration.ref, snapshot), previousChildName);
      }
    }, {
      key: "_handleErrorEvent",
      value: function _handleErrorEvent(event) {
        var _event$error = event.error,
            code = _event$error.code,
            message = _event$error.message;
        var _event$registration2 = event.registration,
            eventRegistrationKey = _event$registration2.eventRegistrationKey,
            registrationCancellationKey = _event$registration2.registrationCancellationKey;
        var registration = this.getRegistration(registrationCancellationKey);

        if (registration) {
          var error = (0, _utils.nativeToJSError)(code, message, {
            ref: registration.ref
          });

          _events.SharedEventEmitter.emit(registrationCancellationKey, error);

          this.removeRegistration(eventRegistrationKey);
        }
      }
    }, {
      key: "getRegistration",
      value: function getRegistration(registration) {
        return this._reverseLookup[registration] ? babelHelpers.extends({}, this._reverseLookup[registration]) : null;
      }
    }, {
      key: "removeListenersForRegistrations",
      value: function removeListenersForRegistrations(registrations) {
        if ((0, _utils.isString)(registrations)) {
          this.removeRegistration(registrations);

          _events.SharedEventEmitter.removeAllListeners(registrations);

          return 1;
        }

        if (!Array.isArray(registrations)) return 0;

        for (var i = 0, len = registrations.length; i < len; i++) {
          this.removeRegistration(registrations[i]);

          _events.SharedEventEmitter.removeAllListeners(registrations[i]);
        }

        return registrations.length;
      }
    }, {
      key: "removeListenerRegistrations",
      value: function removeListenerRegistrations(listener, registrations) {
        if (!Array.isArray(registrations)) return [];
        var removed = [];

        for (var i = 0, len = registrations.length; i < len; i++) {
          var registration = registrations[i];

          var subscriptions = _events.SharedEventEmitter._subscriber.getSubscriptionsForType(registration);

          if (subscriptions) {
            for (var j = 0, l = subscriptions.length; j < l; j++) {
              var subscription = subscriptions[j];

              if (subscription && subscription.listener === listener) {
                subscription.remove();
                removed.push(registration);
                this.removeRegistration(registration);
              }
            }
          }
        }

        return removed;
      }
    }, {
      key: "getRegistrationsByPath",
      value: function getRegistrationsByPath(path) {
        var out = [];
        var eventKeys = Object.keys(this._tree[path] || {});

        for (var i = 0, len = eventKeys.length; i < len; i++) {
          Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));
        }

        return out;
      }
    }, {
      key: "getRegistrationsByPathEvent",
      value: function getRegistrationsByPathEvent(path, eventType) {
        if (!this._tree[path]) return [];
        if (!this._tree[path][eventType]) return [];
        return Object.keys(this._tree[path][eventType]);
      }
    }, {
      key: "getOneByPathEventListener",
      value: function getOneByPathEventListener(path, eventType, listener) {
        if (!this._tree[path]) return null;
        if (!this._tree[path][eventType]) return null;
        var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);

        for (var i = 0; i < registrationsForPathEvent.length; i++) {
          var registration = registrationsForPathEvent[i];
          if (registration[1] === listener) return registration[0];
        }

        return null;
      }
    }, {
      key: "addRegistration",
      value: function addRegistration(registration) {
        var eventRegistrationKey = registration.eventRegistrationKey,
            eventType = registration.eventType,
            listener = registration.listener,
            once = registration.once,
            path = registration.path;
        if (!this._tree[path]) this._tree[path] = {};
        if (!this._tree[path][eventType]) this._tree[path][eventType] = {};
        this._tree[path][eventType][eventRegistrationKey] = listener;
        this._reverseLookup[eventRegistrationKey] = registration;

        if (once) {
          _events.SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));
        } else {
          _events.SharedEventEmitter.addListener(eventRegistrationKey, listener);
        }

        return eventRegistrationKey;
      }
    }, {
      key: "removeRegistration",
      value: function removeRegistration(registration) {
        if (!this._reverseLookup[registration]) return false;
        var _reverseLookup$regist = this._reverseLookup[registration],
            path = _reverseLookup$regist.path,
            eventType = _reverseLookup$regist.eventType,
            once = _reverseLookup$regist.once;

        if (!this._tree[path]) {
          delete this._reverseLookup[registration];
          return false;
        }

        if (!this._tree[path][eventType]) {
          delete this._reverseLookup[registration];
          return false;
        }

        var registrationObj = this._reverseLookup[registration];

        if (registrationObj && !once) {
          _reactNative.NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);
        }

        delete this._tree[path][eventType][registration];
        delete this._reverseLookup[registration];
        return !!registrationObj;
      }
    }, {
      key: "_onOnceRemoveRegistration",
      value: function _onOnceRemoveRegistration(registration, listener) {
        var _this = this;

        return function () {
          _this.removeRegistration(registration);

          listener.apply(undefined, arguments);
        };
      }
    }]);
    return SyncTree;
  }();

  exports.default = new SyncTree();
},785,[12,745,782,780,751],"react-native-firebase/dist/utils/SyncTree.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _events = require(_dependencyMap[0], "../../utils/events");

  var _log = require(_dependencyMap[1], "../../utils/log");

  var _native = require(_dependencyMap[2], "../../utils/native");

  var transactionId = 0;

  var generateTransactionId = function generateTransactionId() {
    return transactionId++;
  };

  var TransactionHandler = function () {
    function TransactionHandler(database) {
      babelHelpers.classCallCheck(this, TransactionHandler);
      this._transactions = {};
      this._database = database;

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));
    }

    babelHelpers.createClass(TransactionHandler, [{
      key: "add",
      value: function add(reference, transactionUpdater, onComplete) {
        var applyLocally = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var id = generateTransactionId();
        this._transactions[id] = {
          id: id,
          reference: reference,
          transactionUpdater: transactionUpdater,
          onComplete: onComplete,
          applyLocally: applyLocally,
          completed: false,
          started: true
        };
        (0, _native.getNativeModule)(this._database).transactionStart(reference.path, id, applyLocally);
      }
    }, {
      key: "_handleTransactionEvent",
      value: function _handleTransactionEvent() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        switch (event.type) {
          case 'update':
            return this._handleUpdate(event);

          case 'error':
            return this._handleError(event);

          case 'complete':
            return this._handleComplete(event);

          default:
            (0, _log.getLogger)(this._database).warn("Unknown transaction event type: '" + event.type + "'", event);
            return undefined;
        }
      }
    }, {
      key: "_handleUpdate",
      value: function _handleUpdate() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var newValue = void 0;
        var id = event.id,
            value = event.value;

        try {
          var transaction = this._transactions[id];
          if (!transaction) return;
          newValue = transaction.transactionUpdater(value);
        } finally {
          var abort = false;

          if (newValue === undefined) {
            abort = true;
          }

          (0, _native.getNativeModule)(this._database).transactionTryCommit(id, {
            value: newValue,
            abort: abort
          });
        }
      }
    }, {
      key: "_handleError",
      value: function _handleError() {
        var _this = this;

        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var transaction = this._transactions[event.id];

        if (transaction && !transaction.completed) {
          transaction.completed = true;

          try {
            transaction.onComplete(event.error, false, null);
          } finally {
            setImmediate(function () {
              delete _this._transactions[event.id];
            });
          }
        }
      }
    }, {
      key: "_handleComplete",
      value: function _handleComplete() {
        var _this2 = this;

        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var transaction = this._transactions[event.id];

        if (transaction && !transaction.completed) {
          transaction.completed = true;

          try {
            transaction.onComplete(null, event.committed, babelHelpers.extends({}, event.snapshot));
          } finally {
            setImmediate(function () {
              delete _this2._transactions[event.id];
            });
          }
        }
      }
    }]);
    return TransactionHandler;
  }();

  exports.default = TransactionHandler;
},786,[745,753,754],"react-native-firebase/dist/modules/database/transaction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _events = require(_dependencyMap[1], "../../utils/events");

  var _ModuleBase2 = require(_dependencyMap[2], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _CollectionReference = require(_dependencyMap[3], "./CollectionReference");

  var _CollectionReference2 = babelHelpers.interopRequireDefault(_CollectionReference);

  var _DocumentReference = require(_dependencyMap[4], "./DocumentReference");

  var _DocumentReference2 = babelHelpers.interopRequireDefault(_DocumentReference);

  var _FieldPath = require(_dependencyMap[5], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _FieldValue = require(_dependencyMap[6], "./FieldValue");

  var _FieldValue2 = babelHelpers.interopRequireDefault(_FieldValue);

  var _GeoPoint = require(_dependencyMap[7], "./GeoPoint");

  var _GeoPoint2 = babelHelpers.interopRequireDefault(_GeoPoint);

  var _Path = require(_dependencyMap[8], "./Path");

  var _Path2 = babelHelpers.interopRequireDefault(_Path);

  var _WriteBatch = require(_dependencyMap[9], "./WriteBatch");

  var _WriteBatch2 = babelHelpers.interopRequireDefault(_WriteBatch);

  var _TransactionHandler = require(_dependencyMap[10], "./TransactionHandler");

  var _TransactionHandler2 = babelHelpers.interopRequireDefault(_TransactionHandler);

  var _Transaction = require(_dependencyMap[11], "./Transaction");

  var _Transaction2 = babelHelpers.interopRequireDefault(_Transaction);

  var _internals = require(_dependencyMap[12], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseFirestore';
  var NAMESPACE = exports.NAMESPACE = 'firestore';

  var Firestore = function (_ModuleBase) {
    babelHelpers.inherits(Firestore, _ModuleBase);

    function Firestore(app) {
      babelHelpers.classCallCheck(this, Firestore);

      var _this = babelHelpers.possibleConstructorReturn(this, (Firestore.__proto__ || Object.getPrototypeOf(Firestore)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: true,
        namespace: NAMESPACE
      }));

      _this._referencePath = new _Path2.default([]);
      _this._transactionHandler = new _TransactionHandler2.default(_this);

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'firestore_collection_sync_event'), _this._onCollectionSyncEvent.bind(_this));

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'firestore_document_sync_event'), _this._onDocumentSyncEvent.bind(_this));

      return _this;
    }

    babelHelpers.createClass(Firestore, [{
      key: "batch",
      value: function batch() {
        return new _WriteBatch2.default(this);
      }
    }, {
      key: "collection",
      value: function collection(collectionPath) {
        var path = this._referencePath.child(collectionPath);

        if (!path.isCollection) {
          throw new Error('Argument "collectionPath" must point to a collection.');
        }

        return new _CollectionReference2.default(this, path);
      }
    }, {
      key: "doc",
      value: function doc(documentPath) {
        var path = this._referencePath.child(documentPath);

        if (!path.isDocument) {
          throw new Error('Argument "documentPath" must point to a document.');
        }

        return new _DocumentReference2.default(this, path);
      }
    }, {
      key: "runTransaction",
      value: function runTransaction(updateFunction) {
        return this._transactionHandler._add(updateFunction);
      }
    }, {
      key: "setLogLevel",
      value: function setLogLevel() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('firestore', 'setLogLevel'));
      }
    }, {
      key: "enableNetwork",
      value: function enableNetwork() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('firestore', 'enableNetwork'));
      }
    }, {
      key: "disableNetwork",
      value: function disableNetwork() {
        throw new Error(_internals2.default.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('firestore', 'disableNetwork'));
      }
    }, {
      key: "enablePersistence",
      value: function enablePersistence() {
        throw new Error('Persistence is enabled by default on the Firestore SDKs');
      }
    }, {
      key: "settings",
      value: function settings() {
        throw new Error('firebase.firestore().settings() coming soon');
      }
    }, {
      key: "_onCollectionSyncEvent",
      value: function _onCollectionSyncEvent(event) {
        if (event.error) {
          _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onQuerySnapshotError:" + event.listenerId), event.error);
        } else {
          _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onQuerySnapshot:" + event.listenerId), event.querySnapshot);
        }
      }
    }, {
      key: "_onDocumentSyncEvent",
      value: function _onDocumentSyncEvent(event) {
        if (event.error) {
          _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onDocumentSnapshotError:" + event.listenerId), event.error);
        } else {
          _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onDocumentSnapshot:" + event.listenerId), event.documentSnapshot);
        }
      }
    }]);
    return Firestore;
  }(_ModuleBase3.default);

  exports.default = Firestore;
  var statics = exports.statics = {
    FieldPath: _FieldPath2.default,
    FieldValue: _FieldValue2.default,
    GeoPoint: _GeoPoint2.default,
    enableLogging: function enableLogging(enabled) {
      if (_reactNative.NativeModules[MODULE_NAME]) {
        _reactNative.NativeModules[MODULE_NAME].enableLogging(enabled);
      }
    }
  };
},787,[12,745,755,788,789,791,794,795,792,800,801,802,750],"react-native-firebase/dist/modules/firestore/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DocumentReference = require(_dependencyMap[0], "./DocumentReference");

  var _DocumentReference2 = babelHelpers.interopRequireDefault(_DocumentReference);

  var _Query = require(_dependencyMap[1], "./Query");

  var _Query2 = babelHelpers.interopRequireDefault(_Query);

  var _utils = require(_dependencyMap[2], "../../utils");

  var CollectionReference = function () {
    function CollectionReference(firestore, collectionPath) {
      babelHelpers.classCallCheck(this, CollectionReference);
      this._collectionPath = collectionPath;
      this._firestore = firestore;
      this._query = new _Query2.default(firestore, collectionPath);
    }

    babelHelpers.createClass(CollectionReference, [{
      key: "add",
      value: function add(data) {
        var documentRef = this.doc();
        return documentRef.set(data).then(function () {
          return Promise.resolve(documentRef);
        });
      }
    }, {
      key: "doc",
      value: function doc(documentPath) {
        var newPath = documentPath || (0, _utils.firestoreAutoId)();

        var path = this._collectionPath.child(newPath);

        if (!path.isDocument) {
          throw new Error('Argument "documentPath" must point to a document.');
        }

        return new _DocumentReference2.default(this._firestore, path);
      }
    }, {
      key: "endAt",
      value: function endAt() {
        for (var _len = arguments.length, snapshotOrVarArgs = Array(_len), _key = 0; _key < _len; _key++) {
          snapshotOrVarArgs[_key] = arguments[_key];
        }

        return this._query.endAt(snapshotOrVarArgs);
      }
    }, {
      key: "endBefore",
      value: function endBefore() {
        for (var _len2 = arguments.length, snapshotOrVarArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          snapshotOrVarArgs[_key2] = arguments[_key2];
        }

        return this._query.endBefore(snapshotOrVarArgs);
      }
    }, {
      key: "get",
      value: function get() {
        return this._query.get();
      }
    }, {
      key: "limit",
      value: function limit(_limit) {
        return this._query.limit(_limit);
      }
    }, {
      key: "onSnapshot",
      value: function onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {
        return this._query.onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError);
      }
    }, {
      key: "orderBy",
      value: function orderBy(fieldPath, directionStr) {
        return this._query.orderBy(fieldPath, directionStr);
      }
    }, {
      key: "startAfter",
      value: function startAfter() {
        for (var _len3 = arguments.length, snapshotOrVarArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          snapshotOrVarArgs[_key3] = arguments[_key3];
        }

        return this._query.startAfter(snapshotOrVarArgs);
      }
    }, {
      key: "startAt",
      value: function startAt() {
        for (var _len4 = arguments.length, snapshotOrVarArgs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          snapshotOrVarArgs[_key4] = arguments[_key4];
        }

        return this._query.startAt(snapshotOrVarArgs);
      }
    }, {
      key: "where",
      value: function where(fieldPath, opStr, value) {
        return this._query.where(fieldPath, opStr, value);
      }
    }, {
      key: "firestore",
      get: function get() {
        return this._firestore;
      }
    }, {
      key: "id",
      get: function get() {
        return this._collectionPath.id;
      }
    }, {
      key: "parent",
      get: function get() {
        var parentPath = this._collectionPath.parent();

        return parentPath ? new _DocumentReference2.default(this._firestore, parentPath) : null;
      }
    }]);
    return CollectionReference;
  }();

  exports.default = CollectionReference;
},788,[789,797,751],"react-native-firebase/dist/modules/firestore/CollectionReference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _CollectionReference = require(_dependencyMap[0], "./CollectionReference");

  var _CollectionReference2 = babelHelpers.interopRequireDefault(_CollectionReference);

  var _DocumentSnapshot = require(_dependencyMap[1], "./DocumentSnapshot");

  var _DocumentSnapshot2 = babelHelpers.interopRequireDefault(_DocumentSnapshot);

  var _FieldPath = require(_dependencyMap[2], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _utils = require(_dependencyMap[3], "./utils");

  var _serialize = require(_dependencyMap[4], "./utils/serialize");

  var _events = require(_dependencyMap[5], "../../utils/events");

  var _log = require(_dependencyMap[6], "../../utils/log");

  var _utils2 = require(_dependencyMap[7], "../../utils");

  var _native = require(_dependencyMap[8], "../../utils/native");

  var DocumentReference = function () {
    function DocumentReference(firestore, documentPath) {
      babelHelpers.classCallCheck(this, DocumentReference);
      this._documentPath = documentPath;
      this._firestore = firestore;
    }

    babelHelpers.createClass(DocumentReference, [{
      key: "collection",
      value: function collection(collectionPath) {
        var path = this._documentPath.child(collectionPath);

        if (!path.isCollection) {
          throw new Error('Argument "collectionPath" must point to a collection.');
        }

        return new _CollectionReference2.default(this._firestore, path);
      }
    }, {
      key: "delete",
      value: function _delete() {
        return (0, _native.getNativeModule)(this._firestore).documentDelete(this.path);
      }
    }, {
      key: "get",
      value: function get() {
        var _this = this;

        return (0, _native.getNativeModule)(this._firestore).documentGet(this.path).then(function (result) {
          return new _DocumentSnapshot2.default(_this._firestore, result);
        });
      }
    }, {
      key: "onSnapshot",
      value: function onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {
        var _this2 = this;

        var observer = void 0;
        var docListenOptions = {};

        if ((0, _utils2.isFunction)(optionsOrObserverOrOnNext)) {
          if (observerOrOnNextOrOnError && !(0, _utils2.isFunction)(observerOrOnNextOrOnError)) {
            throw new Error('DocumentReference.onSnapshot failed: Second argument must be a valid function.');
          }

          observer = {
            next: optionsOrObserverOrOnNext,
            error: observerOrOnNextOrOnError
          };
        } else if (optionsOrObserverOrOnNext && (0, _utils2.isObject)(optionsOrObserverOrOnNext)) {
          if (optionsOrObserverOrOnNext.next) {
            if ((0, _utils2.isFunction)(optionsOrObserverOrOnNext.next)) {
              if (optionsOrObserverOrOnNext.error && !(0, _utils2.isFunction)(optionsOrObserverOrOnNext.error)) {
                throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');
              }

              observer = {
                next: optionsOrObserverOrOnNext.next,
                error: optionsOrObserverOrOnNext.error
              };
            } else {
              throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');
            }
          } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {
            docListenOptions = optionsOrObserverOrOnNext;

            if ((0, _utils2.isFunction)(observerOrOnNextOrOnError)) {
              if (onError && !(0, _utils2.isFunction)(onError)) {
                throw new Error('DocumentReference.onSnapshot failed: Third argument must be a valid function.');
              }

              observer = {
                next: observerOrOnNextOrOnError,
                error: onError
              };
            } else if (observerOrOnNextOrOnError && (0, _utils2.isObject)(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {
              if ((0, _utils2.isFunction)(observerOrOnNextOrOnError.next)) {
                if (observerOrOnNextOrOnError.error && !(0, _utils2.isFunction)(observerOrOnNextOrOnError.error)) {
                  throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');
                }

                observer = {
                  next: observerOrOnNextOrOnError.next,
                  error: observerOrOnNextOrOnError.error
                };
              } else {
                throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');
              }
            } else {
              throw new Error('DocumentReference.onSnapshot failed: Second argument must be a function or observer.');
            }
          } else {
            throw new Error('DocumentReference.onSnapshot failed: First argument must be a function, observer or options.');
          }
        } else {
          throw new Error('DocumentReference.onSnapshot failed: Called with invalid arguments.');
        }

        var listenerId = (0, _utils2.firestoreAutoId)();

        var listener = function listener(nativeDocumentSnapshot) {
          var documentSnapshot = new _DocumentSnapshot2.default(_this2.firestore, nativeDocumentSnapshot);
          observer.next(documentSnapshot);
        };

        _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onDocumentSnapshot:" + listenerId), listener);

        if (observer.error) {
          _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onDocumentSnapshotError:" + listenerId), observer.error);
        }

        (0, _native.getNativeModule)(this._firestore).documentOnSnapshot(this.path, listenerId, docListenOptions);
        return this._offDocumentSnapshot.bind(this, listenerId, listener);
      }
    }, {
      key: "set",
      value: function set(data, options) {
        var nativeData = (0, _serialize.buildNativeMap)(data);
        return (0, _native.getNativeModule)(this._firestore).documentSet(this.path, nativeData, options);
      }
    }, {
      key: "update",
      value: function update() {
        var data = {};

        if (arguments.length === 1) {
          if (!(0, _utils2.isObject)(arguments.length <= 0 ? undefined : arguments[0])) {
            throw new Error('DocumentReference.update failed: If using a single argument, it must be an object.');
          }

          data = arguments.length <= 0 ? undefined : arguments[0];
        } else if (arguments.length % 2 === 1) {
          throw new Error('DocumentReference.update failed: Must have either a single object argument, or equal numbers of key/value pairs.');
        } else {
          for (var i = 0; i < arguments.length; i += 2) {
            var key = arguments.length <= i ? undefined : arguments[i];
            var value = arguments.length <= i + 1 ? undefined : arguments[i + 1];

            if ((0, _utils2.isString)(key)) {
              data[key] = value;
            } else if (key instanceof _FieldPath2.default) {
              data = (0, _utils.mergeFieldPathData)(data, key._segments, value);
            } else {
              throw new Error("DocumentReference.update failed: Argument at index " + i + " must be a string or FieldPath");
            }
          }
        }

        var nativeData = (0, _serialize.buildNativeMap)(data);
        return (0, _native.getNativeModule)(this._firestore).documentUpdate(this.path, nativeData);
      }
    }, {
      key: "_offDocumentSnapshot",
      value: function _offDocumentSnapshot(listenerId, listener) {
        (0, _log.getLogger)(this._firestore).info('Removing onDocumentSnapshot listener');

        _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(this._firestore, "onDocumentSnapshot:" + listenerId), listener);

        _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(this._firestore, "onDocumentSnapshotError:" + listenerId), listener);

        (0, _native.getNativeModule)(this._firestore).documentOffSnapshot(this.path, listenerId);
      }
    }, {
      key: "firestore",
      get: function get() {
        return this._firestore;
      }
    }, {
      key: "id",
      get: function get() {
        return this._documentPath.id;
      }
    }, {
      key: "parent",
      get: function get() {
        var parentPath = this._documentPath.parent();

        if (!parentPath) {
          throw new Error('Invalid document path');
        }

        return new _CollectionReference2.default(this._firestore, parentPath);
      }
    }, {
      key: "path",
      get: function get() {
        return this._documentPath.relativeName;
      }
    }]);
    return DocumentReference;
  }();

  exports.default = DocumentReference;
},789,[788,790,791,796,793,745,753,751,754],"react-native-firebase/dist/modules/firestore/DocumentReference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DocumentReference = require(_dependencyMap[0], "./DocumentReference");

  var _DocumentReference2 = babelHelpers.interopRequireDefault(_DocumentReference);

  var _FieldPath = require(_dependencyMap[1], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _Path = require(_dependencyMap[2], "./Path");

  var _Path2 = babelHelpers.interopRequireDefault(_Path);

  var _utils = require(_dependencyMap[3], "../../utils");

  var _serialize = require(_dependencyMap[4], "./utils/serialize");

  var extractFieldPathData = function extractFieldPathData(data, segments) {
    if (!data || !(0, _utils.isObject)(data)) {
      return undefined;
    }

    var pathValue = data[segments[0]];

    if (segments.length === 1) {
      return pathValue;
    }

    return extractFieldPathData(pathValue, segments.slice(1));
  };

  var DocumentSnapshot = function () {
    function DocumentSnapshot(firestore, nativeData) {
      babelHelpers.classCallCheck(this, DocumentSnapshot);
      this._data = (0, _serialize.parseNativeMap)(firestore, nativeData.data);
      this._metadata = nativeData.metadata;
      this._ref = new _DocumentReference2.default(firestore, _Path2.default.fromName(nativeData.path));
    }

    babelHelpers.createClass(DocumentSnapshot, [{
      key: "data",
      value: function data() {
        return this._data;
      }
    }, {
      key: "get",
      value: function get(fieldPath) {
        if (fieldPath instanceof _FieldPath2.default) {
          return extractFieldPathData(this._data, fieldPath._segments);
        }

        return this._data ? this._data[fieldPath] : undefined;
      }
    }, {
      key: "exists",
      get: function get() {
        return this._data !== undefined;
      }
    }, {
      key: "id",
      get: function get() {
        return this._ref.id;
      }
    }, {
      key: "metadata",
      get: function get() {
        return this._metadata;
      }
    }, {
      key: "ref",
      get: function get() {
        return this._ref;
      }
    }]);
    return DocumentSnapshot;
  }();

  exports.default = DocumentSnapshot;
},790,[789,791,792,751,793],"react-native-firebase/dist/modules/firestore/DocumentSnapshot.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var FieldPath = function () {
    function FieldPath() {
      babelHelpers.classCallCheck(this, FieldPath);

      for (var _len = arguments.length, segments = Array(_len), _key = 0; _key < _len; _key++) {
        segments[_key] = arguments[_key];
      }

      this._segments = segments;
    }

    babelHelpers.createClass(FieldPath, null, [{
      key: "documentId",
      value: function documentId() {
        return DOCUMENT_ID;
      }
    }]);
    return FieldPath;
  }();

  exports.default = FieldPath;
  var DOCUMENT_ID = exports.DOCUMENT_ID = new FieldPath('__name__');
},791,[],"react-native-firebase/dist/modules/firestore/FieldPath.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var Path = function () {
    function Path(pathComponents) {
      babelHelpers.classCallCheck(this, Path);
      this._parts = pathComponents;
    }

    babelHelpers.createClass(Path, [{
      key: "child",
      value: function child(relativePath) {
        return new Path(this._parts.concat(relativePath.split('/')));
      }
    }, {
      key: "parent",
      value: function parent() {
        if (this._parts.length === 0) {
          return null;
        }

        return new Path(this._parts.slice(0, this._parts.length - 1));
      }
    }, {
      key: "id",
      get: function get() {
        if (this._parts.length > 0) {
          return this._parts[this._parts.length - 1];
        }

        return null;
      }
    }, {
      key: "isDocument",
      get: function get() {
        return this._parts.length > 0 && this._parts.length % 2 === 0;
      }
    }, {
      key: "isCollection",
      get: function get() {
        return this._parts.length % 2 === 1;
      }
    }, {
      key: "relativeName",
      get: function get() {
        return this._parts.join('/');
      }
    }], [{
      key: "fromName",
      value: function fromName(name) {
        var parts = name.split('/');

        if (parts.length === 0) {
          return new Path([]);
        }

        return new Path(parts);
      }
    }]);
    return Path;
  }();

  exports.default = Path;
},792,[],"react-native-firebase/dist/modules/firestore/Path.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseNativeMap = exports.buildTypeMap = exports.buildNativeArray = exports.buildNativeMap = undefined;

  var _DocumentReference = require(_dependencyMap[0], "../DocumentReference");

  var _DocumentReference2 = babelHelpers.interopRequireDefault(_DocumentReference);

  var _FieldPath = require(_dependencyMap[1], "../FieldPath");

  var _FieldValue = require(_dependencyMap[2], "../FieldValue");

  var _GeoPoint = require(_dependencyMap[3], "../GeoPoint");

  var _GeoPoint2 = babelHelpers.interopRequireDefault(_GeoPoint);

  var _Path = require(_dependencyMap[4], "../Path");

  var _Path2 = babelHelpers.interopRequireDefault(_Path);

  var _utils = require(_dependencyMap[5], "../../../utils");

  var buildNativeMap = exports.buildNativeMap = function buildNativeMap(data) {
    var nativeData = {};

    if (data) {
      Object.keys(data).forEach(function (key) {
        var typeMap = buildTypeMap(data[key]);

        if (typeMap) {
          nativeData[key] = typeMap;
        }
      });
    }

    return nativeData;
  };

  var buildNativeArray = exports.buildNativeArray = function buildNativeArray(array) {
    var nativeArray = [];

    if (array) {
      array.forEach(function (value) {
        var typeMap = buildTypeMap(value);

        if (typeMap) {
          nativeArray.push(typeMap);
        }
      });
    }

    return nativeArray;
  };

  var buildTypeMap = exports.buildTypeMap = function buildTypeMap(value) {
    var type = (0, _utils.typeOf)(value);

    if (value === null || value === undefined || Number.isNaN(value)) {
      return {
        type: 'null',
        value: null
      };
    } else if (value === _FieldValue.DELETE_FIELD_VALUE) {
      return {
        type: 'fieldvalue',
        value: 'delete'
      };
    } else if (value === _FieldValue.SERVER_TIMESTAMP_FIELD_VALUE) {
      return {
        type: 'fieldvalue',
        value: 'timestamp'
      };
    } else if (value === _FieldPath.DOCUMENT_ID) {
      return {
        type: 'documentid',
        value: null
      };
    } else if (type === 'boolean' || type === 'number' || type === 'string') {
      return {
        type: type,
        value: value
      };
    } else if (type === 'array') {
      return {
        type: type,
        value: buildNativeArray(value)
      };
    } else if (type === 'object') {
      if (value instanceof _DocumentReference2.default) {
        return {
          type: 'reference',
          value: value.path
        };
      } else if (value instanceof _GeoPoint2.default) {
        return {
          type: 'geopoint',
          value: {
            latitude: value.latitude,
            longitude: value.longitude
          }
        };
      } else if (value instanceof Date) {
        return {
          type: 'date',
          value: value.getTime()
        };
      }

      return {
        type: 'object',
        value: buildNativeMap(value)
      };
    }

    console.warn("Unknown data type received " + type);
    return null;
  };

  var parseNativeMap = exports.parseNativeMap = function parseNativeMap(firestore, nativeData) {
    var data = void 0;

    if (nativeData) {
      data = {};
      Object.keys(nativeData).forEach(function (key) {
        data[key] = parseTypeMap(firestore, nativeData[key]);
      });
    }

    return data;
  };

  var parseNativeArray = function parseNativeArray(firestore, nativeArray) {
    var array = [];

    if (nativeArray) {
      nativeArray.forEach(function (typeMap) {
        array.push(parseTypeMap(firestore, typeMap));
      });
    }

    return array;
  };

  var parseTypeMap = function parseTypeMap(firestore, typeMap) {
    var type = typeMap.type,
        value = typeMap.value;

    if (type === 'null') {
      return null;
    } else if (type === 'boolean' || type === 'number' || type === 'string') {
      return value;
    } else if (type === 'array') {
      return parseNativeArray(firestore, value);
    } else if (type === 'object') {
      return parseNativeMap(firestore, value);
    } else if (type === 'reference') {
      return new _DocumentReference2.default(firestore, _Path2.default.fromName(value));
    } else if (type === 'geopoint') {
      return new _GeoPoint2.default(value.latitude, value.longitude);
    } else if (type === 'date') {
      return new Date(value);
    }

    console.warn("Unknown data type received " + type);
    return value;
  };
},793,[789,791,794,795,792,751],"react-native-firebase/dist/modules/firestore/utils/serialize.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var FieldValue = function () {
    function FieldValue() {
      babelHelpers.classCallCheck(this, FieldValue);
    }

    babelHelpers.createClass(FieldValue, null, [{
      key: "delete",
      value: function _delete() {
        return DELETE_FIELD_VALUE;
      }
    }, {
      key: "serverTimestamp",
      value: function serverTimestamp() {
        return SERVER_TIMESTAMP_FIELD_VALUE;
      }
    }]);
    return FieldValue;
  }();

  exports.default = FieldValue;
  var DELETE_FIELD_VALUE = exports.DELETE_FIELD_VALUE = new FieldValue();
  var SERVER_TIMESTAMP_FIELD_VALUE = exports.SERVER_TIMESTAMP_FIELD_VALUE = new FieldValue();
},794,[],"react-native-firebase/dist/modules/firestore/FieldValue.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var GeoPoint = function () {
    function GeoPoint(latitude, longitude) {
      babelHelpers.classCallCheck(this, GeoPoint);
      this._latitude = latitude;
      this._longitude = longitude;
    }

    babelHelpers.createClass(GeoPoint, [{
      key: "latitude",
      get: function get() {
        return this._latitude;
      }
    }, {
      key: "longitude",
      get: function get() {
        return this._longitude;
      }
    }]);
    return GeoPoint;
  }();

  exports.default = GeoPoint;
},795,[],"react-native-firebase/dist/modules/firestore/GeoPoint.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var buildFieldPathData = function buildFieldPathData(segments, value) {
    if (segments.length === 1) {
      return babelHelpers.defineProperty({}, segments[0], value);
    }

    return babelHelpers.defineProperty({}, segments[0], buildFieldPathData(segments.slice(1), value));
  };

  var mergeFieldPathData = exports.mergeFieldPathData = function mergeFieldPathData(data, segments, value) {
    if (segments.length === 1) {
      return babelHelpers.extends({}, data, babelHelpers.defineProperty({}, segments[0], value));
    } else if (data[segments[0]]) {
      return babelHelpers.extends({}, data, babelHelpers.defineProperty({}, segments[0], mergeFieldPathData(data[segments[0]], segments.slice(1), value)));
    }

    return babelHelpers.extends({}, data, babelHelpers.defineProperty({}, segments[0], buildFieldPathData(segments.slice(1), value)));
  };
},796,[],"react-native-firebase/dist/modules/firestore/utils/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DocumentSnapshot = require(_dependencyMap[0], "./DocumentSnapshot");

  var _DocumentSnapshot2 = babelHelpers.interopRequireDefault(_DocumentSnapshot);

  var _FieldPath = require(_dependencyMap[1], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _QuerySnapshot = require(_dependencyMap[2], "./QuerySnapshot");

  var _QuerySnapshot2 = babelHelpers.interopRequireDefault(_QuerySnapshot);

  var _serialize = require(_dependencyMap[3], "./utils/serialize");

  var _events = require(_dependencyMap[4], "../../utils/events");

  var _log = require(_dependencyMap[5], "../../utils/log");

  var _utils = require(_dependencyMap[6], "../../utils");

  var _native = require(_dependencyMap[7], "../../utils/native");

  var DIRECTIONS = {
    ASC: 'ASCENDING',
    asc: 'ASCENDING',
    DESC: 'DESCENDING',
    desc: 'DESCENDING'
  };
  var OPERATORS = {
    '=': 'EQUAL',
    '==': 'EQUAL',
    '>': 'GREATER_THAN',
    '>=': 'GREATER_THAN_OR_EQUAL',
    '<': 'LESS_THAN',
    '<=': 'LESS_THAN_OR_EQUAL'
  };

  var buildNativeFieldPath = function buildNativeFieldPath(fieldPath) {
    if (fieldPath instanceof _FieldPath2.default) {
      return {
        elements: fieldPath._segments,
        type: 'fieldpath'
      };
    }

    return {
      string: fieldPath,
      type: 'string'
    };
  };

  var Query = function () {
    function Query(firestore, path, fieldFilters, fieldOrders, queryOptions) {
      babelHelpers.classCallCheck(this, Query);
      this._fieldFilters = fieldFilters || [];
      this._fieldOrders = fieldOrders || [];
      this._firestore = firestore;
      this._queryOptions = queryOptions || {};
      this._referencePath = path;
    }

    babelHelpers.createClass(Query, [{
      key: "endAt",
      value: function endAt() {
        for (var _len = arguments.length, snapshotOrVarArgs = Array(_len), _key = 0; _key < _len; _key++) {
          snapshotOrVarArgs[_key] = arguments[_key];
        }

        var options = babelHelpers.extends({}, this._queryOptions, {
          endAt: this._buildOrderByOption(snapshotOrVarArgs)
        });
        return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
      }
    }, {
      key: "endBefore",
      value: function endBefore() {
        for (var _len2 = arguments.length, snapshotOrVarArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          snapshotOrVarArgs[_key2] = arguments[_key2];
        }

        var options = babelHelpers.extends({}, this._queryOptions, {
          endBefore: this._buildOrderByOption(snapshotOrVarArgs)
        });
        return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
      }
    }, {
      key: "get",
      value: function get() {
        var _this = this;

        return (0, _native.getNativeModule)(this._firestore).collectionGet(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions).then(function (nativeData) {
          return new _QuerySnapshot2.default(_this._firestore, _this, nativeData);
        });
      }
    }, {
      key: "limit",
      value: function limit(_limit) {
        var options = babelHelpers.extends({}, this._queryOptions, {
          limit: _limit
        });
        return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
      }
    }, {
      key: "onSnapshot",
      value: function onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {
        var _this2 = this;

        var observer = void 0;
        var queryListenOptions = {};

        if ((0, _utils.isFunction)(optionsOrObserverOrOnNext)) {
          if (observerOrOnNextOrOnError && !(0, _utils.isFunction)(observerOrOnNextOrOnError)) {
            throw new Error('Query.onSnapshot failed: Second argument must be a valid function.');
          }

          observer = {
            next: optionsOrObserverOrOnNext,
            error: observerOrOnNextOrOnError
          };
        } else if (optionsOrObserverOrOnNext && (0, _utils.isObject)(optionsOrObserverOrOnNext)) {
          if (optionsOrObserverOrOnNext.next) {
            if ((0, _utils.isFunction)(optionsOrObserverOrOnNext.next)) {
              if (optionsOrObserverOrOnNext.error && !(0, _utils.isFunction)(optionsOrObserverOrOnNext.error)) {
                throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');
              }

              observer = {
                next: optionsOrObserverOrOnNext.next,
                error: optionsOrObserverOrOnNext.error
              };
            } else {
              throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');
            }
          } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeDocumentMetadataChanges') || Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeQueryMetadataChanges')) {
            queryListenOptions = optionsOrObserverOrOnNext;

            if ((0, _utils.isFunction)(observerOrOnNextOrOnError)) {
              if (onError && !(0, _utils.isFunction)(onError)) {
                throw new Error('Query.onSnapshot failed: Third argument must be a valid function.');
              }

              observer = {
                next: observerOrOnNextOrOnError,
                error: onError
              };
            } else if (observerOrOnNextOrOnError && (0, _utils.isObject)(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {
              if ((0, _utils.isFunction)(observerOrOnNextOrOnError.next)) {
                if (observerOrOnNextOrOnError.error && !(0, _utils.isFunction)(observerOrOnNextOrOnError.error)) {
                  throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');
                }

                observer = {
                  next: observerOrOnNextOrOnError.next,
                  error: observerOrOnNextOrOnError.error
                };
              } else {
                throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');
              }
            } else {
              throw new Error('Query.onSnapshot failed: Second argument must be a function or observer.');
            }
          } else {
            throw new Error('Query.onSnapshot failed: First argument must be a function, observer or options.');
          }
        } else {
          throw new Error('Query.onSnapshot failed: Called with invalid arguments.');
        }

        var listenerId = (0, _utils.firestoreAutoId)();

        var listener = function listener(nativeQuerySnapshot) {
          var querySnapshot = new _QuerySnapshot2.default(_this2._firestore, _this2, nativeQuerySnapshot);
          observer.next(querySnapshot);
        };

        _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshot:" + listenerId), listener);

        if (observer.error) {
          _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshotError:" + listenerId), observer.error);
        }

        (0, _native.getNativeModule)(this._firestore).collectionOnSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId, queryListenOptions);
        return this._offCollectionSnapshot.bind(this, listenerId, listener);
      }
    }, {
      key: "orderBy",
      value: function orderBy(fieldPath) {
        var directionStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';

        if (this._queryOptions.startAt || this._queryOptions.startAfter || this._queryOptions.endAt || this._queryOptions.endBefore) {
          throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');
        }

        var newOrder = {
          direction: DIRECTIONS[directionStr],
          fieldPath: buildNativeFieldPath(fieldPath)
        };

        var combinedOrders = this._fieldOrders.concat(newOrder);

        return new Query(this.firestore, this._referencePath, this._fieldFilters, combinedOrders, this._queryOptions);
      }
    }, {
      key: "startAfter",
      value: function startAfter() {
        for (var _len3 = arguments.length, snapshotOrVarArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          snapshotOrVarArgs[_key3] = arguments[_key3];
        }

        var options = babelHelpers.extends({}, this._queryOptions, {
          startAfter: this._buildOrderByOption(snapshotOrVarArgs)
        });
        return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
      }
    }, {
      key: "startAt",
      value: function startAt() {
        for (var _len4 = arguments.length, snapshotOrVarArgs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          snapshotOrVarArgs[_key4] = arguments[_key4];
        }

        var options = babelHelpers.extends({}, this._queryOptions, {
          startAt: this._buildOrderByOption(snapshotOrVarArgs)
        });
        return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
      }
    }, {
      key: "where",
      value: function where(fieldPath, opStr, value) {
        var nativeValue = (0, _serialize.buildTypeMap)(value);
        var newFilter = {
          fieldPath: buildNativeFieldPath(fieldPath),
          operator: OPERATORS[opStr],
          value: nativeValue
        };

        var combinedFilters = this._fieldFilters.concat(newFilter);

        return new Query(this.firestore, this._referencePath, combinedFilters, this._fieldOrders, this._queryOptions);
      }
    }, {
      key: "_buildOrderByOption",
      value: function _buildOrderByOption(snapshotOrVarArgs) {
        var values = void 0;

        if (snapshotOrVarArgs.length === 1 && snapshotOrVarArgs[0] instanceof _DocumentSnapshot2.default) {
          var docSnapshot = snapshotOrVarArgs[0];
          values = [];

          for (var i = 0; i < this._fieldOrders.length; i++) {
            var fieldOrder = this._fieldOrders[i];

            if (fieldOrder.fieldPath.type === 'string' && fieldOrder.fieldPath.string) {
              values.push(docSnapshot.get(fieldOrder.fieldPath.string));
            } else if (fieldOrder.fieldPath.fieldpath) {
              var fieldPath = new (Function.prototype.bind.apply(_FieldPath2.default, [null].concat(babelHelpers.toConsumableArray(fieldOrder.fieldPath.fieldpath))))();
              values.push(docSnapshot.get(fieldPath));
            }
          }
        } else {
          values = snapshotOrVarArgs;
        }

        return (0, _serialize.buildNativeArray)(values);
      }
    }, {
      key: "_offCollectionSnapshot",
      value: function _offCollectionSnapshot(listenerId, listener) {
        (0, _log.getLogger)(this._firestore).info('Removing onQuerySnapshot listener');

        _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshot:" + listenerId), listener);

        _events.SharedEventEmitter.removeListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshotError:" + listenerId), listener);

        (0, _native.getNativeModule)(this._firestore).collectionOffSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId);
      }
    }, {
      key: "firestore",
      get: function get() {
        return this._firestore;
      }
    }]);
    return Query;
  }();

  exports.default = Query;
},797,[790,791,798,793,745,753,751,754],"react-native-firebase/dist/modules/firestore/Query.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DocumentChange = require(_dependencyMap[0], "./DocumentChange");

  var _DocumentChange2 = babelHelpers.interopRequireDefault(_DocumentChange);

  var _DocumentSnapshot = require(_dependencyMap[1], "./DocumentSnapshot");

  var _DocumentSnapshot2 = babelHelpers.interopRequireDefault(_DocumentSnapshot);

  var QuerySnapshot = function () {
    function QuerySnapshot(firestore, query, nativeData) {
      babelHelpers.classCallCheck(this, QuerySnapshot);
      this._changes = nativeData.changes.map(function (change) {
        return new _DocumentChange2.default(firestore, change);
      });
      this._docs = nativeData.documents.map(function (doc) {
        return new _DocumentSnapshot2.default(firestore, doc);
      });
      this._metadata = nativeData.metadata;
      this._query = query;
    }

    babelHelpers.createClass(QuerySnapshot, [{
      key: "forEach",
      value: function forEach(callback) {
        this._docs.forEach(function (doc) {
          callback(doc);
        });
      }
    }, {
      key: "docChanges",
      get: function get() {
        return this._changes;
      }
    }, {
      key: "docs",
      get: function get() {
        return this._docs;
      }
    }, {
      key: "empty",
      get: function get() {
        return this._docs.length === 0;
      }
    }, {
      key: "metadata",
      get: function get() {
        return this._metadata;
      }
    }, {
      key: "query",
      get: function get() {
        return this._query;
      }
    }, {
      key: "size",
      get: function get() {
        return this._docs.length;
      }
    }]);
    return QuerySnapshot;
  }();

  exports.default = QuerySnapshot;
},798,[799,790],"react-native-firebase/dist/modules/firestore/QuerySnapshot.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _DocumentSnapshot = require(_dependencyMap[0], "./DocumentSnapshot");

  var _DocumentSnapshot2 = babelHelpers.interopRequireDefault(_DocumentSnapshot);

  var DocumentChange = function () {
    function DocumentChange(firestore, nativeData) {
      babelHelpers.classCallCheck(this, DocumentChange);
      this._document = new _DocumentSnapshot2.default(firestore, nativeData.document);
      this._newIndex = nativeData.newIndex;
      this._oldIndex = nativeData.oldIndex;
      this._type = nativeData.type;
    }

    babelHelpers.createClass(DocumentChange, [{
      key: "doc",
      get: function get() {
        return this._document;
      }
    }, {
      key: "newIndex",
      get: function get() {
        return this._newIndex;
      }
    }, {
      key: "oldIndex",
      get: function get() {
        return this._oldIndex;
      }
    }, {
      key: "type",
      get: function get() {
        return this._type;
      }
    }]);
    return DocumentChange;
  }();

  exports.default = DocumentChange;
},799,[790],"react-native-firebase/dist/modules/firestore/DocumentChange.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _FieldPath = require(_dependencyMap[0], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _utils = require(_dependencyMap[1], "./utils");

  var _serialize = require(_dependencyMap[2], "./utils/serialize");

  var _utils2 = require(_dependencyMap[3], "../../utils");

  var _native = require(_dependencyMap[4], "../../utils/native");

  var WriteBatch = function () {
    function WriteBatch(firestore) {
      babelHelpers.classCallCheck(this, WriteBatch);
      this._firestore = firestore;
      this._writes = [];
    }

    babelHelpers.createClass(WriteBatch, [{
      key: "commit",
      value: function commit() {
        return (0, _native.getNativeModule)(this._firestore).documentBatch(this._writes);
      }
    }, {
      key: "delete",
      value: function _delete(docRef) {
        this._writes.push({
          path: docRef.path,
          type: 'DELETE'
        });

        return this;
      }
    }, {
      key: "set",
      value: function set(docRef, data, options) {
        var nativeData = (0, _serialize.buildNativeMap)(data);

        this._writes.push({
          data: nativeData,
          options: options,
          path: docRef.path,
          type: 'SET'
        });

        return this;
      }
    }, {
      key: "update",
      value: function update(docRef) {
        var data = {};

        if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 1) {
          if (!(0, _utils2.isObject)(arguments.length <= 1 ? undefined : arguments[1])) {
            throw new Error('WriteBatch.update failed: If using two arguments, the second must be an object.');
          }

          data = arguments.length <= 1 ? undefined : arguments[1];
        } else if ((arguments.length <= 1 ? 0 : arguments.length - 1) % 2 === 1) {
          throw new Error('WriteBatch.update failed: Must have a document reference, followed by either a single object argument, or equal numbers of key/value pairs.');
        } else {
          for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i += 2) {
            var key = arguments.length <= i + 1 ? undefined : arguments[i + 1];
            var value = arguments.length <= i + 1 + 1 ? undefined : arguments[i + 1 + 1];

            if ((0, _utils2.isString)(key)) {
              data[key] = value;
            } else if (key instanceof _FieldPath2.default) {
              data = (0, _utils.mergeFieldPathData)(data, key._segments, value);
            } else {
              throw new Error("WriteBatch.update failed: Argument at index " + i + " must be a string or FieldPath");
            }
          }
        }

        var nativeData = (0, _serialize.buildNativeMap)(data);

        this._writes.push({
          data: nativeData,
          path: docRef.path,
          type: 'UPDATE'
        });

        return this;
      }
    }]);
    return WriteBatch;
  }();

  exports.default = WriteBatch;
},800,[791,796,793,751,754],"react-native-firebase/dist/modules/firestore/WriteBatch.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _events = require(_dependencyMap[0], "../../utils/events");

  var _log = require(_dependencyMap[1], "../../utils/log");

  var _native = require(_dependencyMap[2], "../../utils/native");

  var _Transaction = require(_dependencyMap[3], "./Transaction");

  var _Transaction2 = babelHelpers.interopRequireDefault(_Transaction);

  var regeneratorRuntime = require(_dependencyMap[4], "regenerator-runtime");

  var transactionId = 0;

  var generateTransactionId = function generateTransactionId() {
    return transactionId++;
  };

  var TransactionHandler = function () {
    function TransactionHandler(firestore) {
      babelHelpers.classCallCheck(this, TransactionHandler);
      this._pending = {};
      this._firestore = firestore;

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, 'firestore_transaction_event'), this._handleTransactionEvent.bind(this));
    }

    babelHelpers.createClass(TransactionHandler, [{
      key: "_add",
      value: function _add(updateFunction) {
        var _this = this;

        var id = generateTransactionId();
        var meta = {
          id: id,
          updateFunction: updateFunction,
          stack: new Error().stack.split('\n').slice(4).join('\n')
        };
        this._pending[id] = {
          meta: meta,
          transaction: new _Transaction2.default(this._firestore, meta)
        };
        return new Promise(function (resolve, reject) {
          (0, _native.getNativeModule)(_this._firestore).transactionBegin(id);

          meta.resolve = function (r) {
            resolve(r);

            _this._remove(id);
          };

          meta.reject = function (e) {
            reject(e);

            _this._remove(id);
          };
        });
      }
    }, {
      key: "_remove",
      value: function _remove(id) {
        (0, _native.getNativeModule)(this._firestore).transactionDispose(id);
        delete this._pending[id];
      }
    }, {
      key: "_handleTransactionEvent",
      value: function _handleTransactionEvent(event) {
        switch (event.type) {
          case 'update':
            return this._handleUpdate(event);

          case 'error':
            return this._handleError(event);

          case 'complete':
            return this._handleComplete(event);

          default:
            (0, _log.getLogger)(this._firestore).warn("Unknown transaction event type: '" + event.type + "'", event);
            return undefined;
        }
      }
    }, {
      key: "_handleUpdate",
      value: function _handleUpdate(event) {
        var id, _pending$id, meta, transaction, updateFunction, reject, finalError, updateFailed, pendingResult, possiblePromise;

        return regeneratorRuntime.async(function _handleUpdate$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                id = event.id;

                if (this._pending[id]) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", this._remove(id));

              case 3:
                _pending$id = this._pending[id], meta = _pending$id.meta, transaction = _pending$id.transaction;
                updateFunction = meta.updateFunction, reject = meta.reject;

                transaction._prepare();

                finalError = void 0;
                updateFailed = void 0;
                pendingResult = void 0;
                _context.prev = 9;
                possiblePromise = updateFunction(transaction);

                if (!(!possiblePromise || !possiblePromise.then)) {
                  _context.next = 15;
                  break;
                }

                finalError = new Error('Update function for `firestore.runTransaction(updateFunction)` must return a Promise.');
                _context.next = 18;
                break;

              case 15:
                _context.next = 17;
                return regeneratorRuntime.awrap(possiblePromise);

              case 17:
                pendingResult = _context.sent;

              case 18:
                _context.next = 24;
                break;

              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](9);
                updateFailed = true;
                finalError = _context.t0;

              case 24:
                if (!updateFailed) {
                  _context.next = 26;
                  break;
                }

                return _context.abrupt("return", reject(finalError));

              case 26:
                transaction._pendingResult = pendingResult;
                return _context.abrupt("return", (0, _native.getNativeModule)(this._firestore).transactionApplyBuffer(id, transaction._commandBuffer));

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[9, 20]]);
      }
    }, {
      key: "_handleError",
      value: function _handleError(event) {
        var id = event.id,
            error = event.error;
        var meta = this._pending[id].meta;

        if (meta && error) {
          var code = error.code,
              message = error.message;
          var errorWithStack = new Error(message);
          errorWithStack.code = code;
          errorWithStack.stack = meta.stack;
          meta.reject(errorWithStack);
        }
      }
    }, {
      key: "_handleComplete",
      value: function _handleComplete(event) {
        var id = event.id;
        var _pending$id2 = this._pending[id],
            meta = _pending$id2.meta,
            transaction = _pending$id2.transaction;

        if (meta) {
          var pendingResult = transaction._pendingResult;
          meta.resolve(pendingResult);
        }
      }
    }]);
    return TransactionHandler;
  }();

  exports.default = TransactionHandler;
},801,[745,753,754,802,36],"react-native-firebase/dist/modules/firestore/TransactionHandler.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _utils = require(_dependencyMap[0], "./utils");

  var _serialize = require(_dependencyMap[1], "./utils/serialize");

  var _DocumentSnapshot = require(_dependencyMap[2], "./DocumentSnapshot");

  var _DocumentSnapshot2 = babelHelpers.interopRequireDefault(_DocumentSnapshot);

  var _utils2 = require(_dependencyMap[3], "../../utils");

  var _FieldPath = require(_dependencyMap[4], "./FieldPath");

  var _FieldPath2 = babelHelpers.interopRequireDefault(_FieldPath);

  var _native = require(_dependencyMap[5], "../../utils/native");

  var Transaction = function () {
    function Transaction(firestore, meta) {
      babelHelpers.classCallCheck(this, Transaction);
      this._meta = meta;
      this._commandBuffer = [];
      this._firestore = firestore;
      this._pendingResult = undefined;
    }

    babelHelpers.createClass(Transaction, [{
      key: "_prepare",
      value: function _prepare() {
        this._commandBuffer = [];
        this._pendingResult = undefined;
      }
    }, {
      key: "get",
      value: function get(documentRef) {
        var _this = this;

        return (0, _native.getNativeModule)(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(function (result) {
          return new _DocumentSnapshot2.default(_this._firestore, result);
        });
      }
    }, {
      key: "set",
      value: function set(documentRef, data, options) {
        this._commandBuffer.push({
          type: 'set',
          path: documentRef.path,
          data: (0, _serialize.buildNativeMap)(data),
          options: options || {}
        });

        return this;
      }
    }, {
      key: "update",
      value: function update(documentRef) {
        var data = {};

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (args.length === 1) {
          if (!(0, _utils2.isObject)(args[0])) {
            throw new Error('Transaction.update failed: If using a single data argument, it must be an object.');
          }

          data = args[0];
        } else if (args.length % 2 === 1) {
          throw new Error('Transaction.update failed: Must have either a single object data argument, or equal numbers of data key/value pairs.');
        } else {
          for (var i = 0; i < args.length; i += 2) {
            var key = args[i];
            var value = args[i + 1];

            if ((0, _utils2.isString)(key)) {
              data[key] = value;
            } else if (key instanceof _FieldPath2.default) {
              data = (0, _utils.mergeFieldPathData)(data, key._segments, value);
            } else {
              throw new Error("Transaction.update failed: Argument at index " + i + " must be a string or FieldPath");
            }
          }
        }

        this._commandBuffer.push({
          type: 'update',
          path: documentRef.path,
          data: (0, _serialize.buildNativeMap)(data)
        });

        return this;
      }
    }, {
      key: "delete",
      value: function _delete(documentRef) {
        this._commandBuffer.push({
          type: 'delete',
          path: documentRef.path
        });

        return this;
      }
    }]);
    return Transaction;
  }();

  exports.default = Transaction;
},802,[796,793,790,751,791,754],"react-native-firebase/dist/modules/firestore/Transaction.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _events = require(_dependencyMap[0], "../../utils/events");

  var _ModuleBase2 = require(_dependencyMap[1], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _utils = require(_dependencyMap[2], "../../utils");

  var _native = require(_dependencyMap[3], "../../utils/native");

  var EVENT_TYPE = {
    Link: 'dynamic_link_received'
  };
  var NATIVE_EVENTS = [EVENT_TYPE.Link];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseLinks';
  var NAMESPACE = exports.NAMESPACE = 'links';

  function validateParameters(parameters) {
    var suportedParametersObject = {
      dynamicLinkDomain: 'string',
      link: 'string',
      androidInfo: {
        androidPackageName: 'string',
        androidFallbackLink: 'string',
        androidMinPackageVersionCode: 'string',
        androidLink: 'string'
      },
      iosInfo: {
        iosBundleId: 'string',
        iosFallbackLink: 'string',
        iosCustomScheme: 'string',
        iosIpadFallbackLink: 'string',
        iosIpadBundleId: 'string',
        iosAppStoreId: 'string'
      },
      socialMetaTagInfo: {
        socialTitle: 'string',
        socialDescription: 'string',
        socialImageLink: 'string'
      },
      suffix: {
        option: 'string'
      }
    };

    if (!(0, _utils.areObjectKeysContainedInOther)(parameters, suportedParametersObject)) {
      throw new Error('Invalid Parameters.');
    }
  }

  function checkForMandatoryParameters(parameters) {
    if (!(0, _utils.isString)(parameters.dynamicLinkDomain)) {
      throw new Error('No dynamicLinkDomain was specified.');
    }

    if (!(0, _utils.isString)(parameters.link)) {
      throw new Error('No link was specified.');
    }

    if ((0, _utils.isObject)(parameters.androidInfo) && !(0, _utils.isString)(parameters.androidInfo.androidPackageName)) {
      throw new Error('No androidPackageName was specified.');
    }

    if ((0, _utils.isObject)(parameters.iosInfo) && !(0, _utils.isString)(parameters.iosInfo.iosBundleId)) {
      throw new Error('No iosBundleId was specified.');
    }
  }

  var Links = function (_ModuleBase) {
    babelHelpers.inherits(Links, _ModuleBase);

    function Links(app) {
      babelHelpers.classCallCheck(this, Links);
      return babelHelpers.possibleConstructorReturn(this, (Links.__proto__ || Object.getPrototypeOf(Links)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(Links, [{
      key: "getInitialLink",
      value: function getInitialLink() {
        return (0, _native.getNativeModule)(this).getInitialLink();
      }
    }, {
      key: "onLink",
      value: function onLink(listener) {
        var rnListener = _events.SharedEventEmitter.addListener(EVENT_TYPE.Link, listener);

        return function () {
          return rnListener.remove();
        };
      }
    }, {
      key: "createDynamicLink",
      value: function createDynamicLink() {
        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        try {
          checkForMandatoryParameters(parameters);
          validateParameters(parameters);
          return (0, _native.getNativeModule)(this).createDynamicLink(parameters);
        } catch (error) {
          return Promise.reject(error);
        }
      }
    }, {
      key: "createShortDynamicLink",
      value: function createShortDynamicLink() {
        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        try {
          checkForMandatoryParameters(parameters);
          validateParameters(parameters);
          return (0, _native.getNativeModule)(this).createShortDynamicLink(parameters);
        } catch (error) {
          return Promise.reject(error);
        }
      }
    }, {
      key: "EVENT_TYPE",
      get: function get() {
        return EVENT_TYPE;
      }
    }]);
    return Links;
  }(_ModuleBase3.default);

  exports.default = Links;
  var statics = exports.statics = {
    EVENT_TYPE: EVENT_TYPE
  };
},803,[745,755,751,754],"react-native-firebase/dist/modules/links/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _events = require(_dependencyMap[1], "../../utils/events");

  var _ModuleBase2 = require(_dependencyMap[2], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _RemoteMessage = require(_dependencyMap[3], "./RemoteMessage");

  var _RemoteMessage2 = babelHelpers.interopRequireDefault(_RemoteMessage);

  var _native = require(_dependencyMap[4], "../../utils/native");

  var regeneratorRuntime = require(_dependencyMap[5], "regenerator-runtime");

  var EVENT_TYPE = {
    RefreshToken: 'messaging_token_refreshed',
    Notification: 'messaging_notification_received'
  };
  var NOTIFICATION_TYPE = {
    Remote: 'remote_notification',
    NotificationResponse: 'notification_response',
    WillPresent: 'will_present_notification',
    Local: 'local_notification'
  };
  var REMOTE_NOTIFICATION_RESULT = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  var WILL_PRESENT_RESULT = {
    All: 'UNNotificationPresentationOptionAll',
    None: 'UNNotificationPresentationOptionNone'
  };
  var NATIVE_EVENTS = [EVENT_TYPE.RefreshToken, EVENT_TYPE.Notification];
  var FirebaseMessaging = _reactNative.NativeModules.RNFirebaseMessaging;

  function finish(data) {
    if (_reactNative.Platform.OS !== 'ios') {
      return;
    }

    if (!this._finishCalled && this._completionHandlerId) {
      var result = data;
      this._finishCalled = true;

      switch (this._notificationType) {
        case NOTIFICATION_TYPE.Remote:
          result = result || REMOTE_NOTIFICATION_RESULT.NoData;

          if (!Object.values(REMOTE_NOTIFICATION_RESULT).includes(result)) {
            throw new Error('Invalid REMOTE_NOTIFICATION_RESULT value, use messaging().REMOTE_NOTIFICATION_RESULT');
          }

          FirebaseMessaging.finishRemoteNotification(this._completionHandlerId, result);
          return;

        case NOTIFICATION_TYPE.NotificationResponse:
          FirebaseMessaging.finishNotificationResponse(this._completionHandlerId);
          return;

        case NOTIFICATION_TYPE.WillPresent:
          result = result || (this.show_in_foreground ? WILL_PRESENT_RESULT.All : WILL_PRESENT_RESULT.None);

          if (!Object.values(WILL_PRESENT_RESULT).includes(result)) {
            throw new Error('Invalid WILL_PRESENT_RESULT value, use messaging().WILL_PRESENT_RESULT');
          }

          FirebaseMessaging.finishWillPresentNotification(this._completionHandlerId, result);
          break;

        default:}
    }
  }

  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseMessaging';
  var NAMESPACE = exports.NAMESPACE = 'messaging';

  var Messaging = function (_ModuleBase) {
    babelHelpers.inherits(Messaging, _ModuleBase);

    function Messaging(app) {
      babelHelpers.classCallCheck(this, Messaging);
      return babelHelpers.possibleConstructorReturn(this, (Messaging.__proto__ || Object.getPrototypeOf(Messaging)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(Messaging, [{
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return (0, _native.getNativeModule)(this).getInitialNotification();
      }
    }, {
      key: "getToken",
      value: function getToken() {
        return (0, _native.getNativeModule)(this).getToken();
      }
    }, {
      key: "deleteInstanceId",
      value: function deleteInstanceId() {
        return (0, _native.getNativeModule)(this).deleteInstanceId();
      }
    }, {
      key: "createLocalNotification",
      value: function createLocalNotification(notification) {
        var _notification = babelHelpers.extends({}, notification);

        _notification.id = _notification.id || new Date().getTime().toString();
        _notification.local_notification = true;
        return (0, _native.getNativeModule)(this).createLocalNotification(_notification);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(notification) {
        var _notification = babelHelpers.extends({}, notification);

        if (!notification.id) return Promise.reject(new Error('An id is required to schedule a local notification.'));
        _notification.local_notification = true;
        return (0, _native.getNativeModule)(this).scheduleLocalNotification(_notification);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications() {
        return (0, _native.getNativeModule)(this).getScheduledLocalNotifications();
      }
    }, {
      key: "cancelLocalNotification",
      value: function cancelLocalNotification(id) {
        if (!id) return Promise.reject(new Error('Missing notification id'));
        if (id === '*') return (0, _native.getNativeModule)(this).cancelAllLocalNotifications();
        return (0, _native.getNativeModule)(this).cancelLocalNotification(id);
      }
    }, {
      key: "removeDeliveredNotification",
      value: function removeDeliveredNotification(id) {
        if (!id) return Promise.reject(new Error('Missing notification id'));
        if (id === '*') return (0, _native.getNativeModule)(this).removeAllDeliveredNotifications();
        return (0, _native.getNativeModule)(this).removeDeliveredNotification(id);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions() {
        return (0, _native.getNativeModule)(this).requestPermissions();
      }
    }, {
      key: "setBadgeNumber",
      value: function setBadgeNumber(n) {
        (0, _native.getNativeModule)(this).setBadgeNumber(n);
      }
    }, {
      key: "getBadgeNumber",
      value: function getBadgeNumber() {
        return (0, _native.getNativeModule)(this).getBadgeNumber();
      }
    }, {
      key: "onMessage",
      value: function onMessage(listener) {
        var _this2 = this;

        var rnListener = _events.SharedEventEmitter.addListener(EVENT_TYPE.Notification, function _callee(event) {
          var data;
          return regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  data = babelHelpers.extends({}, event, {
                    finish: finish
                  });
                  _context.next = 3;
                  return regeneratorRuntime.awrap(listener(data));

                case 3:
                  if (!data._finishCalled) {
                    data.finish();
                  }

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, null, _this2);
        });

        return function () {
          return rnListener.remove();
        };
      }
    }, {
      key: "onTokenRefresh",
      value: function onTokenRefresh(listener) {
        var rnListener = _events.SharedEventEmitter.addListener(EVENT_TYPE.RefreshToken, listener);

        return function () {
          return rnListener.remove();
        };
      }
    }, {
      key: "subscribeToTopic",
      value: function subscribeToTopic(topic) {
        (0, _native.getNativeModule)(this).subscribeToTopic(topic);
      }
    }, {
      key: "unsubscribeFromTopic",
      value: function unsubscribeFromTopic(topic) {
        (0, _native.getNativeModule)(this).unsubscribeFromTopic(topic);
      }
    }, {
      key: "send",
      value: function send(remoteMessage) {
        if (!(remoteMessage instanceof _RemoteMessage2.default)) {
          throw new Error('messaging().send requires an instance of RemoteMessage as the first argument.');
        }

        return (0, _native.getNativeModule)(this).send(remoteMessage.toJSON());
      }
    }, {
      key: "EVENT_TYPE",
      get: function get() {
        return EVENT_TYPE;
      }
    }, {
      key: "NOTIFICATION_TYPE",
      get: function get() {
        return NOTIFICATION_TYPE;
      }
    }, {
      key: "REMOTE_NOTIFICATION_RESULT",
      get: function get() {
        return REMOTE_NOTIFICATION_RESULT;
      }
    }, {
      key: "WILL_PRESENT_RESULT",
      get: function get() {
        return WILL_PRESENT_RESULT;
      }
    }]);
    return Messaging;
  }(_ModuleBase3.default);

  exports.default = Messaging;
  var statics = exports.statics = {
    EVENT_TYPE: EVENT_TYPE,
    NOTIFICATION_TYPE: NOTIFICATION_TYPE,
    REMOTE_NOTIFICATION_RESULT: REMOTE_NOTIFICATION_RESULT,
    WILL_PRESENT_RESULT: WILL_PRESENT_RESULT,
    RemoteMessage: _RemoteMessage2.default
  };
},804,[12,745,755,805,754,36],"react-native-firebase/dist/modules/messaging/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _utils = require(_dependencyMap[0], "./../../utils");

  var RemoteMessage = function () {
    function RemoteMessage(sender) {
      babelHelpers.classCallCheck(this, RemoteMessage);
      this.properties = {
        id: (0, _utils.generatePushID)(),
        ttl: 3600,
        sender: ("" + sender).includes('@') ? sender : sender + "@gcm.googleapis.com",
        type: 'remote',
        data: {}
      };
    }

    babelHelpers.createClass(RemoteMessage, [{
      key: "setTtl",
      value: function setTtl(ttl) {
        this.properties.ttl = ttl;
        return this;
      }
    }, {
      key: "setId",
      value: function setId(id) {
        this.properties.id = "" + id;
        return this;
      }
    }, {
      key: "setType",
      value: function setType(type) {
        this.properties.type = "" + type;
        return this;
      }
    }, {
      key: "setCollapseKey",
      value: function setCollapseKey(key) {
        this.properties.collapseKey = "" + key;
        return this;
      }
    }, {
      key: "setData",
      value: function setData() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!(0, _utils.isObject)(data)) {
          throw new Error("RemoteMessage:setData expects an object as the first parameter but got type '" + typeof data + "'.");
        }

        var props = Object.keys(data);

        for (var i = 0, len = props.length; i < len; i++) {
          var prop = props[i];
          this.properties.data[prop] = "" + data[prop];
        }

        return this;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return babelHelpers.extends({}, this.properties);
      }
    }]);
    return RemoteMessage;
  }();

  exports.default = RemoteMessage;
},805,[751],"react-native-firebase/dist/modules/messaging/RemoteMessage.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _Trace = require(_dependencyMap[0], "./Trace");

  var _Trace2 = babelHelpers.interopRequireDefault(_Trace);

  var _ModuleBase2 = require(_dependencyMap[1], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[2], "../../utils/native");

  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebasePerformance';
  var NAMESPACE = exports.NAMESPACE = 'perf';

  var PerformanceMonitoring = function (_ModuleBase) {
    babelHelpers.inherits(PerformanceMonitoring, _ModuleBase);

    function PerformanceMonitoring(app) {
      babelHelpers.classCallCheck(this, PerformanceMonitoring);
      return babelHelpers.possibleConstructorReturn(this, (PerformanceMonitoring.__proto__ || Object.getPrototypeOf(PerformanceMonitoring)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(PerformanceMonitoring, [{
      key: "setPerformanceCollectionEnabled",
      value: function setPerformanceCollectionEnabled(enabled) {
        (0, _native.getNativeModule)(this).setPerformanceCollectionEnabled(enabled);
      }
    }, {
      key: "newTrace",
      value: function newTrace(trace) {
        return new _Trace2.default(this, trace);
      }
    }]);
    return PerformanceMonitoring;
  }(_ModuleBase3.default);

  exports.default = PerformanceMonitoring;
  var statics = exports.statics = {};
},806,[807,755,754],"react-native-firebase/dist/modules/perf/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _native = require(_dependencyMap[0], "../../utils/native");

  var Trace = function () {
    function Trace(perf, identifier) {
      babelHelpers.classCallCheck(this, Trace);
      this._perf = perf;
      this.identifier = identifier;
    }

    babelHelpers.createClass(Trace, [{
      key: "start",
      value: function start() {
        (0, _native.getNativeModule)(this._perf).start(this.identifier);
      }
    }, {
      key: "stop",
      value: function stop() {
        (0, _native.getNativeModule)(this._perf).stop(this.identifier);
      }
    }, {
      key: "incrementCounter",
      value: function incrementCounter(event) {
        (0, _native.getNativeModule)(this._perf).incrementCounter(this.identifier, event);
      }
    }]);
    return Trace;
  }();

  exports.default = Trace;
},807,[754],"react-native-firebase/dist/modules/perf/Trace.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _reference = require(_dependencyMap[1], "./reference");

  var _reference2 = babelHelpers.interopRequireDefault(_reference);

  var _events = require(_dependencyMap[2], "../../utils/events");

  var _log = require(_dependencyMap[3], "../../utils/log");

  var _ModuleBase2 = require(_dependencyMap[4], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var _native = require(_dependencyMap[5], "../../utils/native");

  var FirebaseStorage = _reactNative.NativeModules.RNFirebaseStorage;
  var NATIVE_EVENTS = ['storage_event', 'storage_error'];
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseStorage';
  var NAMESPACE = exports.NAMESPACE = 'storage';

  var Storage = function (_ModuleBase) {
    babelHelpers.inherits(Storage, _ModuleBase);

    function Storage(app) {
      babelHelpers.classCallCheck(this, Storage);

      var _this = babelHelpers.possibleConstructorReturn(this, (Storage.__proto__ || Object.getPrototypeOf(Storage)).call(this, app, {
        events: NATIVE_EVENTS,
        moduleName: MODULE_NAME,
        multiApp: true,
        namespace: NAMESPACE
      }));

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'storage_event'), _this._handleStorageEvent.bind(_this));

      _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(_this, 'storage_error'), _this._handleStorageEvent.bind(_this));

      return _this;
    }

    babelHelpers.createClass(Storage, [{
      key: "ref",
      value: function ref(path) {
        return new _reference2.default(this, path);
      }
    }, {
      key: "refFromURL",
      value: function refFromURL(url) {
        return new _reference2.default(this, "url::" + url);
      }
    }, {
      key: "setMaxOperationRetryTime",
      value: function setMaxOperationRetryTime(time) {
        (0, _native.getNativeModule)(this).setMaxOperationRetryTime(time);
      }
    }, {
      key: "setMaxUploadRetryTime",
      value: function setMaxUploadRetryTime(time) {
        (0, _native.getNativeModule)(this).setMaxUploadRetryTime(time);
      }
    }, {
      key: "setMaxDownloadRetryTime",
      value: function setMaxDownloadRetryTime(time) {
        (0, _native.getNativeModule)(this).setMaxDownloadRetryTime(time);
      }
    }, {
      key: "_getSubEventName",
      value: function _getSubEventName(path, eventName) {
        return (0, _events.getAppEventName)(this, path + "-" + eventName);
      }
    }, {
      key: "_handleStorageEvent",
      value: function _handleStorageEvent(event) {
        var path = event.path,
            eventName = event.eventName;
        var body = event.body || {};
        (0, _log.getLogger)(this).debug('_handleStorageEvent: ', path, eventName, body);

        _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);
      }
    }, {
      key: "_handleStorageError",
      value: function _handleStorageError(err) {
        var path = err.path,
            eventName = err.eventName;
        var body = err.body || {};
        (0, _log.getLogger)(this).debug('_handleStorageError ->', err);

        _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);
      }
    }, {
      key: "_addListener",
      value: function _addListener(path, eventName, cb) {
        _events.SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);
      }
    }, {
      key: "_removeListener",
      value: function _removeListener(path, eventName, origCB) {
        _events.SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);
      }
    }]);
    return Storage;
  }(_ModuleBase3.default);

  exports.default = Storage;
  var statics = exports.statics = {
    TaskEvent: {
      STATE_CHANGED: 'state_changed'
    },
    TaskState: {
      RUNNING: 'running',
      PAUSED: 'paused',
      SUCCESS: 'success',
      CANCELLED: 'cancelled',
      ERROR: 'error'
    },
    Native: FirebaseStorage ? {
      MAIN_BUNDLE_PATH: FirebaseStorage.MAIN_BUNDLE_PATH,
      CACHES_DIRECTORY_PATH: FirebaseStorage.CACHES_DIRECTORY_PATH,
      DOCUMENT_DIRECTORY_PATH: FirebaseStorage.DOCUMENT_DIRECTORY_PATH,
      EXTERNAL_DIRECTORY_PATH: FirebaseStorage.EXTERNAL_DIRECTORY_PATH,
      EXTERNAL_STORAGE_DIRECTORY_PATH: FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH,
      TEMP_DIRECTORY_PATH: FirebaseStorage.TEMP_DIRECTORY_PATH,
      LIBRARY_DIRECTORY_PATH: FirebaseStorage.LIBRARY_DIRECTORY_PATH,
      FILETYPE_REGULAR: FirebaseStorage.FILETYPE_REGULAR,
      FILETYPE_DIRECTORY: FirebaseStorage.FILETYPE_DIRECTORY
    } : {}
  };
},808,[12,809,745,753,755,754],"react-native-firebase/dist/modules/storage/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ReferenceBase2 = require(_dependencyMap[0], "../../utils/ReferenceBase");

  var _ReferenceBase3 = babelHelpers.interopRequireDefault(_ReferenceBase2);

  var _task = require(_dependencyMap[1], "./task");

  var _task2 = babelHelpers.interopRequireDefault(_task);

  var _native = require(_dependencyMap[2], "../../utils/native");

  var StorageReference = function (_ReferenceBase) {
    babelHelpers.inherits(StorageReference, _ReferenceBase);

    function StorageReference(storage, path) {
      babelHelpers.classCallCheck(this, StorageReference);

      var _this = babelHelpers.possibleConstructorReturn(this, (StorageReference.__proto__ || Object.getPrototypeOf(StorageReference)).call(this, path));

      _this._storage = storage;
      return _this;
    }

    babelHelpers.createClass(StorageReference, [{
      key: "toString",
      value: function toString() {
        return "gs://" + this._storage.app.options.storageBucket + this.path;
      }
    }, {
      key: "child",
      value: function child(path) {
        return new StorageReference(this._storage, this.path + "/" + path);
      }
    }, {
      key: "delete",
      value: function _delete() {
        return (0, _native.getNativeModule)(this._storage).delete(this.path);
      }
    }, {
      key: "getDownloadURL",
      value: function getDownloadURL() {
        return (0, _native.getNativeModule)(this._storage).getDownloadURL(this.path);
      }
    }, {
      key: "getMetadata",
      value: function getMetadata() {
        return (0, _native.getNativeModule)(this._storage).getMetadata(this.path);
      }
    }, {
      key: "updateMetadata",
      value: function updateMetadata() {
        var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return (0, _native.getNativeModule)(this._storage).updateMetadata(this.path, metadata);
      }
    }, {
      key: "downloadFile",
      value: function downloadFile(filePath) {
        return new _task2.default(_task.DOWNLOAD_TASK, (0, _native.getNativeModule)(this._storage).downloadFile(this.path, filePath), this);
      }
    }, {
      key: "putFile",
      value: function putFile(filePath) {
        var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _filePath = filePath.replace('file://', '');

        return new _task2.default(_task.UPLOAD_TASK, (0, _native.getNativeModule)(this._storage).putFile(this.path, _filePath, metadata), this);
      }
    }, {
      key: "fullPath",
      get: function get() {
        return this.path;
      }
    }, {
      key: "put",
      get: function get() {
        return this.putFile;
      }
    }]);
    return StorageReference;
  }(_ReferenceBase3.default);

  exports.default = StorageReference;
},809,[784,810,754],"react-native-firebase/dist/modules/storage/reference.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DOWNLOAD_TASK = exports.UPLOAD_TASK = undefined;

  var _ = require(_dependencyMap[0], "./");

  var _utils = require(_dependencyMap[1], "./../../utils");

  var UPLOAD_TASK = exports.UPLOAD_TASK = 'upload';
  var DOWNLOAD_TASK = exports.DOWNLOAD_TASK = 'download';

  var StorageTask = function () {
    function StorageTask(type, promise, storageRef) {
      babelHelpers.classCallCheck(this, StorageTask);
      this.type = type;
      this.ref = storageRef;
      this.storage = storageRef._storage;
      this.path = storageRef.path;
      this.then = promise.then.bind(promise);
      this.catch = promise.catch.bind(promise);
    }

    babelHelpers.createClass(StorageTask, [{
      key: "_interceptSnapshotEvent",
      value: function _interceptSnapshotEvent(f) {
        var _this = this;

        if (!(0, _utils.isFunction)(f)) return null;
        return function (snapshot) {
          var _snapshot = babelHelpers.extends({}, snapshot);

          _snapshot.task = _this;
          _snapshot.ref = _this.ref;
          return f && f(_snapshot);
        };
      }
    }, {
      key: "_interceptErrorEvent",
      value: function _interceptErrorEvent(f) {
        if (!(0, _utils.isFunction)(f)) return null;
        return function (error) {
          var _error = new Error(error.message);

          _error.code = error.code;
          return f && f(_error);
        };
      }
    }, {
      key: "_subscribe",
      value: function _subscribe(nextOrObserver, error, complete) {
        var _this2 = this;

        var _error = void 0;

        var _next = void 0;

        var _complete = void 0;

        if (typeof nextOrObserver === 'function') {
          _error = this._interceptErrorEvent(error);
          _next = this._interceptSnapshotEvent(nextOrObserver);
          _complete = this._interceptSnapshotEvent(complete);
        } else if (nextOrObserver) {
          _error = this._interceptErrorEvent(nextOrObserver.error);
          _next = this._interceptSnapshotEvent(nextOrObserver.next);
          _complete = this._interceptSnapshotEvent(nextOrObserver.complete);
        }

        if (_next) {
          this.storage._addListener(this.path, _.statics.TaskEvent.STATE_CHANGED, _next);
        }

        if (_error) {
          this.storage._addListener(this.path, this.type + "_failure", _error);
        }

        if (_complete) {
          this.storage._addListener(this.path, this.type + "_success", _complete);
        }

        return function () {
          if (_next) _this2.storage._removeListener(_this2.path, _.statics.TaskEvent.STATE_CHANGED, _next);
          if (_error) _this2.storage._removeListener(_this2.path, _this2.type + "_failure", _error);
          if (_complete) _this2.storage._removeListener(_this2.path, _this2.type + "_success", _complete);
        };
      }
    }, {
      key: "on",
      value: function on() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.statics.TaskEvent.STATE_CHANGED;
        var nextOrObserver = arguments[1];
        var error = arguments[2];
        var complete = arguments[3];

        if (!event) {
          throw new Error("StorageTask.on listener is missing required string argument 'event'.");
        }

        if (event !== _.statics.TaskEvent.STATE_CHANGED) {
          throw new Error("StorageTask.on event argument must be a string with a value of '" + _.statics.TaskEvent.STATE_CHANGED + "'");
        }

        if (!nextOrObserver && !error && !complete) {
          return this._subscribe.bind(this);
        }

        return this._subscribe(nextOrObserver, error, complete);
      }
    }, {
      key: "pause",
      value: function pause() {
        throw new Error('.pause() is not currently supported by react-native-firebase');
      }
    }, {
      key: "resume",
      value: function resume() {
        throw new Error('.resume() is not currently supported by react-native-firebase');
      }
    }, {
      key: "cancel",
      value: function cancel() {
        throw new Error('.cancel() is not currently supported by react-native-firebase');
      }
    }]);
    return StorageTask;
  }();

  exports.default = StorageTask;
},810,[808,751],"react-native-firebase/dist/modules/storage/task.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = undefined;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var _internals = require(_dependencyMap[1], "../../utils/internals");

  var _internals2 = babelHelpers.interopRequireDefault(_internals);

  var _utils = require(_dependencyMap[2], "../../utils");

  var _ModuleBase2 = require(_dependencyMap[3], "../../utils/ModuleBase");

  var _ModuleBase3 = babelHelpers.interopRequireDefault(_ModuleBase2);

  var FirebaseCoreModule = _reactNative.NativeModules.RNFirebase;
  var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseUtils';
  var NAMESPACE = exports.NAMESPACE = 'utils';

  var RNFirebaseUtils = function (_ModuleBase) {
    babelHelpers.inherits(RNFirebaseUtils, _ModuleBase);

    function RNFirebaseUtils(app) {
      babelHelpers.classCallCheck(this, RNFirebaseUtils);
      return babelHelpers.possibleConstructorReturn(this, (RNFirebaseUtils.__proto__ || Object.getPrototypeOf(RNFirebaseUtils)).call(this, app, {
        moduleName: MODULE_NAME,
        multiApp: false,
        namespace: NAMESPACE
      }));
    }

    babelHelpers.createClass(RNFirebaseUtils, [{
      key: "checkPlayServicesAvailability",
      value: function checkPlayServicesAvailability() {
        if (_utils.isIOS) return;
        var status = this.playServicesAvailability.status;

        if (!this.playServicesAvailability.isAvailable) {
          if (_internals2.default.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {
            this.promptForPlayServices();
          } else {
            var error = _internals2.default.STRINGS.ERROR_PLAY_SERVICES(status);

            if (_internals2.default.OPTIONS.errorOnMissingPlayServices) {
              if (status === 2) console.warn(error);else throw new Error(error);
            } else {
              console.warn(error);
            }
          }
        }
      }
    }, {
      key: "promptForPlayServices",
      value: function promptForPlayServices() {
        if (_utils.isIOS) return null;
        return FirebaseCoreModule.promptForPlayServices();
      }
    }, {
      key: "resolutionForPlayServices",
      value: function resolutionForPlayServices() {
        if (_utils.isIOS) return null;
        return FirebaseCoreModule.resolutionForPlayServices();
      }
    }, {
      key: "makePlayServicesAvailable",
      value: function makePlayServicesAvailable() {
        if (_utils.isIOS) return null;
        return FirebaseCoreModule.makePlayServicesAvailable();
      }
    }, {
      key: "logLevel",
      set: function set(logLevel) {
        _internals2.default.OPTIONS.logLevel = logLevel;
      }
    }, {
      key: "playServicesAvailability",
      get: function get() {
        return FirebaseCoreModule.playServicesAvailability || {
          isAvailable: true,
          status: 0
        };
      }
    }, {
      key: "errorOnMissingPlayServices",
      set: function set(bool) {
        _internals2.default.OPTIONS.errorOnMissingPlayServices = bool;
      }
    }, {
      key: "promptOnMissingPlayServices",
      set: function set(bool) {
        _internals2.default.OPTIONS.promptOnMissingPlayServices = bool;
      }
    }]);
    return RNFirebaseUtils;
  }(_ModuleBase3.default);

  exports.default = RNFirebaseUtils;
  var statics = exports.statics = {};
},811,[12,750,751,755],"react-native-firebase/dist/modules/utils/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = '3.3.1';
},812,[],"react-native-firebase/dist/version.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/CoinPage.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _reactNativeFirebase = require(_dependencyMap[2], "react-native-firebase");

    var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

    var _Chart = require(_dependencyMap[3], "./Chart/Chart");

    var _Chart2 = babelHelpers.interopRequireDefault(_Chart);

    var _Ranges = require(_dependencyMap[4], "./Range/Ranges");

    var _Ranges2 = babelHelpers.interopRequireDefault(_Ranges);

    var _PriceHeader = require(_dependencyMap[5], "./PriceHeader");

    var _PriceHeader2 = babelHelpers.interopRequireDefault(_PriceHeader);

    var _SocialRow = require(_dependencyMap[6], "./SocialRow");

    var _SocialRow2 = babelHelpers.interopRequireDefault(_SocialRow);

    var _InfoRow = require(_dependencyMap[7], "./InfoRow");

    var _InfoRow2 = babelHelpers.interopRequireDefault(_InfoRow);

    var _ChangeRow = require(_dependencyMap[8], "./ChangeRow");

    var _ChangeRow2 = babelHelpers.interopRequireDefault(_ChangeRow);

    var tempData = {
        id: 1,
        name: 'Bitcoin',
        symbol: 'BTC',
        rank: '1',
        price: '573.137',
        toSymbol: 'USD',
        price_btc: '1.0',
        volume_24h_usd: '72855700.0',
        market_cap_usd: '9080883500.0',
        available_supply: '15844176.0',
        total_supply: '15844179.0',
        percent_change_1h: '0.04',
        percent_change_24h: '-0.3',
        percent_change_7d: '-0.53',
        percent_change_1m: '-0.57',
        percent_change_3m: '-0.52',
        percent_change_6m: '-0.50',
        percent_change_1y: '-0.51',
        percent_change_all: '-0.43',
        description: '<p>Bitcoin uses peer-to-peer technology to operate with no central authority or banks; managing transactions and the issuing of bitcoins is carried out collectively by the network. Although other cryptocurrencies have come before, Bitcoin is the first decentralized cryptocurrency - Its reputation has spawned copies and evolution in the space.</p><p>With the largest variety of markets and the biggest value - having reached a peak of 18 billion USD - Bitcoin is here to stay. As with any new invention, there can be improvements or flaws in the initial model however the community and a team of dedicated developers are pushing to overcome any obstacle they come across. It is also the most traded cryptocurrency and one of the main entry points for all the other cryptocurrencies. The price is as unstable as always and it can go up or down by 10%-20% in a single day.</p><p>Bitcoin is an SHA-256 POW coin with 21,000,000 total minable coins. The block time is 10 minutes. See below for a full range of Bitcoin markets where you can trade US Dollars for Bitcoin, crypto to Bitcoin and many other fiat currencies too.</p><p>Learn about the history of Bitcoin <a href="https://fried.com/history-of-bitcoin/" target="_blank">here</a> and check out 50 crazy-fun facts about Bitcoin <a href="https://bitcoinplay.net/58-insane-facts-about-bitocin/" target="_blank">here</a>!</p>',
        features: '<p><strong>Mobile payments made easy</strong> Bitcoin on mobiles allows you to pay with a simple two step scan-and-pay. No need to sign up, swipe your card, type a PIN, or sign anything. All you need to receive Bitcoin payments is to display the QR code in your Bitcoin wallet app and let your friend scan your mobile, or touch the two phones together (using NFC radio technology).</p><p><strong>Security and control over your money</strong> Bitcoin transactions are secured by military grade cryptography. Nobody can charge you money or make a payment on your behalf. So long as you take the required steps to protect your wallet, Bitcoin can give you control over your money and a strong level of protection against many types of fraud.</p><p><strong>Works everywhere, anytime</strong> Just like with email, you don&#39;t need to ask your family to use the same software or the same service providers. Just let them stick to their own favorites. No problem there; they are all compatible as they use the same open technology. The Bitcoin network never sleeps, even on holidays!</p><p><strong>Fast international payments</strong> Sending bitcoins across borders is as easy as sending them across the street. There are no banks to make you wait three business days, no extra fees for making an international transfer, and no special limitations on the minimum or maximum amount you can send.</p><p><strong>Choose your own fees</strong> There is no fee to receive bitcoins, and many wallets let you control how large a fee to pay when spending. Most wallets have reasonable default fees, and higher fees can encourage faster confirmation of your transactions. Fees are unrelated to the amount transferred, so it&#39;s possible to send 100,000 bitcoins for the same fee it costs to send 1 bitcoin.</p><p><strong>Protect your identity</strong> With Bitcoin, there is no credit card number that some malicious actor can collect in order to impersonate you. In fact, it is even possible to send a payment without revealing your identity, almost just like with physical money. You should however take note that some effort can be required to protect your privacy.</p>',
        technology: '<p><strong>Balances - block chain</strong> The block chain is a shared public ledger on which the entire Bitcoin network relies. All confirmed transactions are included in the block chain. This way, Bitcoin wallets can calculate their spendable balance and new transactions can be verified to be spending bitcoins that are actually owned by the spender. The integrity and the chronological order of the block chain are enforced with cryptography.</p><p><strong>Transactions - private keys</strong> A transaction is a transfer of value between Bitcoin wallets that gets included in the block chain. Bitcoin wallets keep a secret piece of data called a private key or seed, which is used to sign transactions, providing a mathematical proof that they have come from the owner of the wallet. The signature also prevents the transaction from being altered by anybody once it has been issued. All transactions are broadcast between users and usually begin to be confirmed by the network in the following 10 minutes, through a process called mining.</p><p><strong>Processing - mining</strong> Mining is a distributed consensus system that is used to confirm waiting transactions by including them in the block chain. It enforces a chronological order in the block chain, protects the neutrality of the network, and allows different computers to agree on the state of the system. To be confirmed, transactions must be packed in a block that fits very strict cryptographic rules that will be verified by the network. These rules prevent previous blocks from being modified because doing so would invalidate all following blocks. Mining also creates the equivalent of a competitive lottery that prevents any individual from easily adding new blocks consecutively in the block chain. This way, no individuals can control what is included in the block chain or replace parts of the block chain to roll back their own spends.</p>',
        twitter: '@bitcoin',
        websiteUrl: 'https://bitcoin.org/en/',
        reddit: 'https://www.reddit.com/r/bitcoin/',
        facebook: 'https://www.facebook.com/bitcoins/',
        codeRepository: 'https://github.com/bitcoin/bitcoin',
        last_updated: '1472762067'
    };
    var coinData = Object.values(tempData);

    var CoinPage = function (_Component) {
        babelHelpers.inherits(CoinPage, _Component);

        function CoinPage() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, CoinPage);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CoinPage.__proto__ || Object.getPrototypeOf(CoinPage)).call.apply(_ref, [this].concat(args))), _this), _this.keyExtractor = function (item) {
                return coinData.indexOf(item);
            }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(CoinPage, [{
            key: "onRefresh",
            value: function onRefresh() {}
        }, {
            key: "renderItem",
            value: function renderItem(_ref2) {
                var item = _ref2.item,
                    index = _ref2.index;

                switch (index) {
                    case 0:
                        return _react2.default.createElement(_PriceHeader2.default, {
                            price: '7,305.34 ',
                            symbol: 'USD',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 54
                            }
                        });

                    case 1:
                        return _react2.default.createElement(_ChangeRow2.default, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 61
                            }
                        });

                    case 2:
                        return _react2.default.createElement(_Chart2.default, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 65
                            }
                        });

                    case 3:
                        return _react2.default.createElement(_Ranges2.default, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 69
                            }
                        });

                    case 4:
                        return _react2.default.createElement(_InfoRow2.default, {
                            title: '$230,473,713,323',
                            subtile: 'Market Cap',
                            badge: '#1',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 73
                            }
                        });

                    case 5:
                        return _react2.default.createElement(_InfoRow2.default, {
                            title: '16,802,662',
                            subtile: 'Cirucalting Supply',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 81
                            }
                        });

                    case 6:
                        return _react2.default.createElement(_InfoRow2.default, {
                            title: '$4,473,713,323',
                            subtile: '24h Volume',
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 88
                            }
                        });

                    default:
                        return null;
                }
            }
        }, {
            key: "render",
            value: function render() {
                console.log('RENDERING COINPAGE');
                console.log(coinData);
                return _react2.default.createElement(_reactNative.FlatList, {
                    data: coinData,
                    renderItem: this.renderItem,
                    keyExtractor: this.keyExtractor,
                    backgroundColor: 'white',
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 103
                    }
                });
            }
        }]);
        return CoinPage;
    }(_react.Component);

    exports.default = CoinPage;
},813,[109,12,741,814,817,820,821,822,823],"NNCoins/src/components/Screens/Coin/CoinPage.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/Chart/Chart.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _Line = require(_dependencyMap[2], "./Line");

  var _Line2 = babelHelpers.interopRequireDefault(_Line);

  var _colors = require(_dependencyMap[3], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _reactRedux = require(_dependencyMap[4], "react-redux");

  var _ChartActions = require(_dependencyMap[5], "./../../../../Actions/ChartActions");

  var Chart = function (_Component) {
    babelHelpers.inherits(Chart, _Component);

    function Chart() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Chart);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Chart.__proto__ || Object.getPrototypeOf(Chart)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewHeight: 0,
        prices: []
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Chart, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.props.updateChartPrices();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        console.log('componentWillReceiveProps', nextProps, nextProps.prices);

        if (nextProps.chartState.range !== this.props.chartState.range) {
          this.props.updateChartPrices();
        }

        this.setState({
          prices: nextProps.chartState.prices
        });
      }
    }, {
      key: "render",
      value: function render() {
        var chartState = this.props.chartState;
        console.log('RENDER CHART');
        console.log(chartState.loading, chartState.prices);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          chartState.loading && _react2.default.createElement(
            _reactNative.View,
            {
              pointerEvents: "box-none",
              style: styles.loading,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            _react2.default.createElement(_reactNative.ActivityIndicator, {
              size: "large",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 49
              }
            })
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.internalContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            },
            chartState.prices.length > 0 && _react2.default.createElement(_Line2.default, {
              values: this.state.prices,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 52
              }
            })
          )
        );
      }
    }]);
    return Chart;
  }(_react.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'white',
      height: 200,
      flex: 1
    },
    loading: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1
    }),
    internalContainer: {
      flex: 1,
      backgroundColor: 'white',
      paddingTop: 41,
      marginLeft: 24,
      marginRight: 24,
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: 8,
      borderWidth: 1,
      borderColor: _colors2.default.gray100,
      shadowColor: 'black',
      shadowOpacity: 0.2,
      shadowRadius: 16
    }
  });

  function mapStateToProps(state) {
    return {
      chartState: state.chartState
    };
  }

  exports.default = (0, _reactRedux.connect)(mapStateToProps, {
    updateChartPrices: _ChartActions.updateChartPrices
  })(Chart);
},814,[109,12,815,671,555,816],"NNCoins/src/components/Screens/Coin/Chart/Chart.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/Chart/Line.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _ReactNativeART = require(_dependencyMap[2], "react-native/Libraries/ART/ReactNativeART");

  var _colors = require(_dependencyMap[3], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Line = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(Line, _Component);

    function Line() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Line);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Line.__proto__ || Object.getPrototypeOf(Line)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        width: _reactNative.Dimensions.get('window').width - 50,
        height: 0
      }, _this.onLayout = function (event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            width = _event$nativeEvent$la.width,
            height = _event$nativeEvent$la.height;

        _this.setState({
          width: width,
          height: height
        });
      }, _this.buildPath = function (values) {
        var strokeWidth = _this.props.strokeWidth;
        var _this$state = _this.state,
            width = _this$state.width,
            height = _this$state.height;
        var firstPoint = true,
            previous = void 0;
        var minValue = Math.min.apply(Math, babelHelpers.toConsumableArray(values)),
            maxValue = Math.max.apply(Math, babelHelpers.toConsumableArray(values)) - minValue,
            stepX = width / (values.length - 1 || 1),
            stepY = maxValue ? (height - strokeWidth * 2) / maxValue : 0,
            adjustedValues = values.map(function (value) {
          return value - minValue;
        });
        var path = (0, _ReactNativeART.Path)().moveTo(-strokeWidth, strokeWidth);
        adjustedValues.forEach(function (number, index) {
          var x = index * stepX,
              y = -number * stepY - strokeWidth;

          if (firstPoint) {
            path.lineTo(-strokeWidth, y);
          } else {
            path.curveTo(previous.x + stepX / 3, previous.y, x - stepX / 3, y, x, y);
          }

          previous = {
            x: x,
            y: y
          };
          firstPoint = false;
        });
        return path.lineTo(width + strokeWidth, strokeWidth).close();
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Line, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate() {
        _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            values = _props.values,
            fillColor = _props.fillColor,
            strokeColor = _props.strokeColor,
            strokeWidth = _props.strokeWidth;
        var _state = this.state,
            width = _state.width,
            height = _state.height;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            onLayout: this.onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 130
            }
          },
          _react2.default.createElement(
            _ReactNativeART.Surface,
            {
              width: width,
              height: height,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 134
              }
            },
            _react2.default.createElement(
              _ReactNativeART.Group,
              {
                x: 0,
                y: height,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 135
                }
              },
              _react2.default.createElement(_ReactNativeART.Shape, {
                d: this.buildPath(values),
                fill: fillColor,
                stroke: strokeColor,
                strokeWidth: strokeWidth,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 136
                }
              })
            )
          )
        );
      }
    }]);
    return Line;
  }(_react.Component), _class.defaultProps = {
    fillColor: _colors2.default.chartOrange,
    strokeColor: _colors2.default.chartBorderOrange,
    strokeWidth: 1
  }, _temp2);
  exports.default = Line;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'flex-end'
    }
  });
},815,[109,12,175,671],"NNCoins/src/components/Screens/Coin/Chart/Line.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.selectCoin = exports.selectRange = undefined;
  exports.updateChartPrices = updateChartPrices;

  var _axios = require(_dependencyMap[0], "axios");

  var _axios2 = babelHelpers.interopRequireDefault(_axios);

  var _ActionTypes = require(_dependencyMap[1], "./../Utils/ActionTypes");

  var _Constants = require(_dependencyMap[2], "./../Utils/Constants");

  var selectRange = exports.selectRange = function selectRange(range) {
    return function (dispatch) {
      dispatch({
        type: _ActionTypes.SELECTED_CHART_RANGE,
        range: range
      });
    };
  };

  var selectCoin = exports.selectCoin = function selectCoin(symbol) {
    return function (dispatch) {
      dispatch({
        type: _ActionTypes.SELECTED_CURRENT_COIN,
        current: symbol
      });
    };
  };

  function updateChartPrices() {
    return function (dispatch, getState) {
      dispatch({
        type: _ActionTypes.LOADING_CHART_PRICES
      });

      var _getState = getState(),
          _getState$chartState = _getState.chartState,
          range = _getState$chartState.range,
          current = _getState$chartState.current;

      return _axios2.default.get(_Constants.CRYPTO_COMPARE_BASE_URL + "/" + buildAPIQuery(current, range)).then(function (res) {
        dispatch({
          type: _ActionTypes.LOADING_CHART_PRICES_SUCCESS,
          payload: res.data
        });
      }).catch(function (err) {
        dispatch({
          type: _ActionTypes.LOADING_CHART_PRICES_FAIL,
          payload: err
        });
      });
    };
  }

  var buildAPIQuery = function buildAPIQuery(symbol, range) {
    var endpoint = 'histohour';
    var aggregate = 1;
    var limit = 24;

    switch (range) {
      case _Constants.RANGE_1D:
        endpoint = 'histohour';
        aggregate = 1;
        limit = 24;
        break;

      case _Constants.RANGE_1W:
        endpoint = 'histoday';
        aggregate = 1;
        limit = 7;
        break;

      case _Constants.RANGE_1M:
        endpoint = 'histoday';
        aggregate = 1;
        limit = 30;
        break;

      case _Constants.RANGE_3M:
        endpoint = 'histoday';
        aggregate = 3;
        limit = 30;
        break;

      case _Constants.RANGE_6M:
        endpoint = 'histoday';
        aggregate = 6;
        limit = 30;
        break;

      case _Constants.RANGE_1Y:
        endpoint = 'histoday';
        aggregate = 12;
        limit = 30;
        break;

      case _Constants.RANGE_MAX:
        endpoint = 'histoday';
        aggregate = 200;
        limit = 2000;
        break;

      default:
        endpoint = 'histohour';
        aggregate = 1;
        limit = 24;
        break;
    }

    return "data/" + endpoint + "?fsym=" + symbol + "&tsym=USD&aggregate=" + aggregate + "&limit=" + limit;
  };
},816,[715,548,554],"NNCoins/src/Actions/ChartActions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/Range/Ranges.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactRedux = require(_dependencyMap[2], "react-redux");

  var _ChartActions = require(_dependencyMap[3], "./../../../../Actions/ChartActions");

  var _Switcher = require(_dependencyMap[4], "./Switcher");

  var _Switcher2 = babelHelpers.interopRequireDefault(_Switcher);

  var _Constants = require(_dependencyMap[5], "./../../../../Utils/Constants");

  var _colors = require(_dependencyMap[6], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Ranges = function (_Component) {
    babelHelpers.inherits(Ranges, _Component);

    function Ranges() {
      babelHelpers.classCallCheck(this, Ranges);
      return babelHelpers.possibleConstructorReturn(this, (Ranges.__proto__ || Object.getPrototypeOf(Ranges)).apply(this, arguments));
    }

    babelHelpers.createClass(Ranges, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            range = _props.range,
            selectRange = _props.selectRange;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          _react2.default.createElement(_Switcher2.default, {
            ranges: _Constants.RANGES,
            current: range,
            onSelectRange: selectRange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          })
        );
      }
    }]);
    return Ranges;
  }(_react.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _colors2.default.clear,
      marginLeft: 24,
      marginRight: 24
    }
  });

  function mapStateToProps(state) {
    return {
      range: state.range
    };
  }

  exports.default = (0, _reactRedux.connect)(mapStateToProps, {
    selectRange: _ChartActions.selectRange
  })(Ranges);
},817,[109,12,555,816,818,554,671],"NNCoins/src/components/Screens/Coin/Range/Ranges.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/Range/Switcher.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _Range = require(_dependencyMap[2], "./Range");

  var _Range2 = babelHelpers.interopRequireDefault(_Range);

  var Switcher = function (_Component) {
    babelHelpers.inherits(Switcher, _Component);

    function Switcher() {
      babelHelpers.classCallCheck(this, Switcher);
      return babelHelpers.possibleConstructorReturn(this, (Switcher.__proto__ || Object.getPrototypeOf(Switcher)).apply(this, arguments));
    }

    babelHelpers.createClass(Switcher, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            ranges = _props.ranges,
            current = _props.current,
            onSelectRange = _props.onSelectRange;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 17
            }
          },
          ranges.map(function (name, index) {
            return _react2.default.createElement(_Range2.default, {
              name: name,
              active: current === name,
              onPress: onSelectRange,
              key: index,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 19
              }
            });
          })
        );
      }
    }]);
    return Switcher;
  }(_react.Component);

  exports.default = Switcher;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'space-between'
    }
  });
},818,[109,12,819],"NNCoins/src/components/Screens/Coin/Range/Switcher.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/Range/Range.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Range = function (_Component) {
    babelHelpers.inherits(Range, _Component);

    function Range() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Range);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Range.__proto__ || Object.getPrototypeOf(Range)).call.apply(_ref, [this].concat(args))), _this), _this.onPress = function () {
        var _this$props = _this.props,
            name = _this$props.name,
            onPress = _this$props.onPress;
        onPress(name);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Range, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            name = _props.name,
            active = _props.active;
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: styles.container,
            onPress: this.onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: [styles.text, active ? styles.active : {}],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 34
              }
            },
            name
          )
        );
      }
    }]);
    return Range;
  }(_react.Component);

  exports.default = Range;

  var styles = _reactNative.StyleSheet.create({
    container: {
      padding: 15
    },
    text: {
      color: _colors2.default.gray900,
      fontFamily: 'Avenir',
      fontSize: 12
    },
    active: {
      color: '#FFFFFF'
    }
  });
},819,[109,12,671],"NNCoins/src/components/Screens/Coin/Range/Range.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/PriceHeader.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var PriceHeader = function PriceHeader(_ref) {
    var price = _ref.price,
        symbol = _ref.symbol;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.container,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 11
        }
      },
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: styles.priceStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 12
          }
        },
        price
      ),
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: styles.symbolStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 13
          }
        },
        symbol
      )
    );
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'white',
      height: 83,
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    priceStyle: {
      fontSize: 48,
      color: _colors2.default.gray900
    },
    symbolStyle: {
      fontSize: 48,
      color: _colors2.default.gray300
    }
  });

  exports.default = PriceHeader;
},820,[109,12,671],"NNCoins/src/components/Screens/Coin/PriceHeader.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/SocialRow.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var SocialRow = function (_Component) {
    babelHelpers.inherits(SocialRow, _Component);

    function SocialRow() {
      babelHelpers.classCallCheck(this, SocialRow);
      return babelHelpers.possibleConstructorReturn(this, (SocialRow.__proto__ || Object.getPrototypeOf(SocialRow)).apply(this, arguments));
    }

    babelHelpers.createClass(SocialRow, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(_reactNative.View, {
          style: styles.container,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        });
      }
    }]);
    return SocialRow;
  }(_react.Component);

  exports.default = SocialRow;

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: '#673AB7',
      height: 104
    }
  });
},821,[109,12],"NNCoins/src/components/Screens/Coin/SocialRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/InfoRow.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var InfoRow = function InfoRow(_ref) {
    var title = _ref.title,
        subtile = _ref.subtile,
        badge = _ref.badge;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.container,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 12
        }
      },
      _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.internalContainer,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 13
          }
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.title,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 14
            }
          },
          title
        ),
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.subtile,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 15
            }
          },
          subtile
        )
      ),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: badge != null ? styles.badge : styles.nobadge,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 17
          }
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.badgeText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 18
            }
          },
          badge
        )
      )
    );
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 104,
      flex: 1
    },
    internalContainer: {
      backgroundColor: 'white',
      height: 88,
      flex: 1,
      marginTop: 8,
      marginBottom: 8,
      marginLeft: 24,
      marginRight: 24,
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: 8,
      borderWidth: 1,
      borderColor: _colors2.default.gray100,
      shadowColor: 'black',
      shadowOpacity: 0.2,
      shadowRadius: 16
    },
    title: {
      fontSize: 32,
      color: _colors2.default.gray900
    },
    subtile: {
      fontSize: 16,
      color: _colors2.default.gray300
    },
    badge: {
      position: 'absolute',
      marginTop: 0,
      marginLeft: 16,
      backgroundColor: _colors2.default.gray900,
      justifyContent: 'center',
      alignItems: 'center',
      width: 24,
      height: 24,
      borderRadius: 12,
      borderColor: _colors2.default.gray100,
      borderWidth: 1
    },
    nobadge: {
      height: 0
    },
    badgeText: {
      color: 'white',
      fontSize: 12,
      fontWeight: '800'
    }
  });

  exports.default = InfoRow;
},822,[109,12,671],"NNCoins/src/components/Screens/Coin/InfoRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/Coin/ChangeRow.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _reactRedux = require(_dependencyMap[3], "react-redux");

  var _Constants = require(_dependencyMap[4], "./../../../Utils/Constants");

  var rangeDescription = function rangeDescription(range) {
    var description = 'this hour';

    switch (range) {
      case _Constants.RANGE_1D:
        description = 'today';
        break;

      case _Constants.RANGE_1W:
        description = 'this week';
        break;

      case _Constants.RANGE_1M:
        description = 'this month';
        break;

      case _Constants.RANGE_3M:
        description = 'past 3 months';
        break;

      case _Constants.RANGE_6M:
        description = 'past 6 months';
        break;

      case _Constants.RANGE_1Y:
        description = 'this year';
        break;

      case _Constants.RANGE_MAX:
        description = 'all time';
        break;

      default:
        description = 'today';
        break;
    }

    return description;
  };

  var getPercentageChange = function getPercentageChange(first, last) {
    var decreaseValue = last - first;
    var change = decreaseValue / first * 100;
    return change;
  };

  var ChangeRow = function (_Component) {
    babelHelpers.inherits(ChangeRow, _Component);

    function ChangeRow() {
      babelHelpers.classCallCheck(this, ChangeRow);
      return babelHelpers.possibleConstructorReturn(this, (ChangeRow.__proto__ || Object.getPrototypeOf(ChangeRow)).apply(this, arguments));
    }

    babelHelpers.createClass(ChangeRow, [{
      key: "render",
      value: function render() {
        var chartState = this.props.chartState;
        var prices = chartState.prices;
        var change = getPercentageChange(prices[0], prices[prices.length - 1]);
        var chnageDisplay = change.toFixed(2) + '%';
        console.log('RENDER ChangeRow');
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 61
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.changeContainer, change < 0 && styles.changeContainerMinus],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: [styles.priceChangePlus, change < 0 && styles.priceChangeMinus],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 63
                }
              },
              chnageDisplay
            )
          ),
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.periodStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 65
              }
            },
            rangeDescription(chartState.range)
          )
        );
      }
    }]);
    return ChangeRow;
  }(_react.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: 'white',
      height: 50,
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    changeContainer: {
      backgroundColor: _colors2.default.themeGreenT,
      borderRadius: 4,
      paddingRight: 7,
      paddingLeft: 7,
      paddingTop: 3,
      paddingBottom: 3
    },
    changeContainerMinus: {
      backgroundColor: _colors2.default.themeRedT
    },
    priceChangePlus: {
      color: _colors2.default.themeGreen,
      fontSize: 14,
      fontWeight: '800'
    },
    priceChangeMinus: {
      color: _colors2.default.themeRed
    },
    periodStyle: {
      fontSize: 14,
      paddingLeft: 4
    }
  });

  function mapStateToProps(state) {
    return {
      chartState: state.chartState
    };
  }

  exports.default = (0, _reactRedux.connect)(mapStateToProps)(ChangeRow);
},823,[109,12,671,555,554],"NNCoins/src/components/Screens/Coin/ChangeRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/NewsFeed/NewsFeed.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _colors = require(_dependencyMap[1], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _NewsItemsList = require(_dependencyMap[3], "./NewsItemsList");

  var _NewsItemsList2 = babelHelpers.interopRequireDefault(_NewsItemsList);

  var NewsFeed = function NewsFeed() {
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.container,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 9
        }
      },
      _react2.default.createElement(_reactNative.StatusBar, {
        backgroundColor: _colors2.default.gray200,
        barStyle: "dark-content",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      }),
      _react2.default.createElement(_NewsItemsList2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 14
        }
      })
    );
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: _colors2.default.gray50
    }
  });

  exports.default = NewsFeed;
},824,[109,671,12,825],"NNCoins/src/components/Screens/NewsFeed/NewsFeed.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/NewsFeed/NewsItemsList.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _NewsItemRow = require(_dependencyMap[2], "./NewsItemRow");

    var _NewsItemRow2 = babelHelpers.interopRequireDefault(_NewsItemRow);

    var _reactRedux = require(_dependencyMap[3], "react-redux");

    var _FetchNewsList = require(_dependencyMap[4], "./../../../Actions/FetchNewsList");

    var _FetchNewsList2 = babelHelpers.interopRequireDefault(_FetchNewsList);

    var _FetchWeeklyUpdateVideo = require(_dependencyMap[5], "./../../../Actions/FetchWeeklyUpdateVideo");

    var _FetchWeeklyUpdateVideo2 = babelHelpers.interopRequireDefault(_FetchWeeklyUpdateVideo);

    var _reactNativeRouterFlux = require(_dependencyMap[6], "react-native-router-flux");

    var _reactNativeVideoPlayer = require(_dependencyMap[7], "react-native-video-player");

    var _reactNativeVideoPlayer2 = babelHelpers.interopRequireDefault(_reactNativeVideoPlayer);

    var _memoize = require(_dependencyMap[8], "lodash/memoize");

    var _memoize2 = babelHelpers.interopRequireDefault(_memoize);

    var _reactNativeFirebase = require(_dependencyMap[9], "react-native-firebase");

    var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

    var _colors = require(_dependencyMap[10], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var windowWidth = _reactNative.Dimensions.get('window').width;

    var ITEM_HEIGHT = 128;

    var NewsItemList = function (_Component) {
        babelHelpers.inherits(NewsItemList, _Component);

        function NewsItemList() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, NewsItemList);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NewsItemList.__proto__ || Object.getPrototypeOf(NewsItemList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                disableTouch: false
            }, _this.onPressItem = function (item) {
                if (_this.state.disableTouch === false) {
                    _this.state.disableTouch = true;

                    _reactNativeRouterFlux.Actions.article({
                        url: item.url,
                        html: item.html
                    });

                    setTimeout(function () {
                        _this.state.disableTouch = false;
                    }, 2000);
                } else {
                    console.log('touch disabled');
                }
            }, _this.keyExtractor = function (item) {
                return item.guid;
            }, _this._renderVideo = (0, _memoize2.default)(function (video) {
                return _react2.default.createElement(_reactNativeVideoPlayer2.default, {
                    endWithThumbnail: true,
                    thumbnail: {
                        uri: video.thumbnailUrl
                    },
                    video: {
                        uri: video.videoUrl
                    },
                    videoWidth: windowWidth,
                    videoHeight: windowWidth / 1.78,
                    duration: video.video.duration,
                    ref: function ref(r) {
                        _this.player = r;
                    },
                    resizeMode: 'stretch',
                    onPlayPress: function onPlayPress() {
                        _reactNativeFirebase2.default.analytics().logEvent('click_play_weekly_video', {
                            url: video.videoUrl
                        });
                    },
                    onEnd: function onEnd() {
                        _reactNativeFirebase2.default.analytics().logEvent('weekly_video_end', {
                            url: video.videoUrl
                        });
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 48
                    }
                });
            }), _this.renderVideo = function () {
                var weeklyVideo = _this.props.weeklyVideo;

                if (weeklyVideo.video) {
                    console.log('VIDEO FOUND', _this._renderVideo(weeklyVideo));
                    return _this._renderVideo(weeklyVideo);
                }

                return null;
            }, _this.renderItem = function (_ref2) {
                var item = _ref2.item;
                return _react2.default.createElement(_NewsItemRow2.default, {
                    id: item.id,
                    item: item,
                    onPressItem: _this.onPressItem,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 75
                    }
                });
            }, _this.renderSeparator = function () {
                return _react2.default.createElement(_reactNative.View, {
                    style: {
                        height: 1,
                        width: windowWidth - 32,
                        backgroundColor: _colors2.default.gray100,
                        marginLeft: 16
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 84
                    }
                });
            }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(NewsItemList, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                console.log('componentWillMount news');
                this.onRefresh();
            }
        }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
                var shouldUpdate = this.props.newsList.data !== nextProps.newsList.data || this.props.weeklyVideo.video !== nextProps.weeklyVideo.video;
                console.log('ShoulUpdateNewsList', shouldUpdate);
                return shouldUpdate;
            }
        }, {
            key: "onRefresh",
            value: function onRefresh() {
                console.log('onRefresh news');
                this.props.fetchNewsList();
                this.props.fetchWeeklyUpdateVideo();
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                console.log('RENDERING NEWS LIST');
                console.log(windowWidth);
                var newsList = this.props.newsList;
                return _react2.default.createElement(_reactNative.FlatList, {
                    data: newsList.data,
                    extraData: this.state,
                    keyExtractor: this.keyExtractor,
                    refreshing: false,
                    renderItem: this.renderItem,
                    ListHeaderComponent: this.renderVideo,
                    ItemSeparatorComponent: this.renderSeparator,
                    onRefresh: function onRefresh() {
                        _reactNativeFirebase2.default.analytics().logEvent('pull_to_refresh_newslist', {});

                        _this2.onRefresh();
                    },
                    getItemLayout: function getItemLayout(data, index) {
                        return {
                            length: ITEM_HEIGHT,
                            offset: ITEM_HEIGHT * index,
                            index: index
                        };
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 100
                    }
                });
            }
        }]);
        return NewsItemList;
    }(_react.Component);

    function mapStateToProps(state) {
        return {
            newsList: state.newsList,
            weeklyVideo: state.weeklyVideo
        };
    }

    exports.default = (0, _reactRedux.connect)(mapStateToProps, {
        fetchNewsList: _FetchNewsList2.default,
        fetchWeeklyUpdateVideo: _FetchWeeklyUpdateVideo2.default
    })(NewsItemList);
},825,[109,12,826,555,835,836,573,837,527,741,671],"NNCoins/src/components/Screens/NewsFeed/NewsItemsList.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/NewsFeed/NewsItemRow.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _images = require(_dependencyMap[2], "@assets/images.js");

  var _images2 = babelHelpers.interopRequireDefault(_images);

  var _colors = require(_dependencyMap[3], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _moment = require(_dependencyMap[4], "moment");

  var _moment2 = babelHelpers.interopRequireDefault(_moment);

  var _common = require(_dependencyMap[5], "../../common");

  var _reactNativeProgress = require(_dependencyMap[6], "react-native-progress");

  var Progress = babelHelpers.interopRequireWildcard(_reactNativeProgress);

  var _reactNativeImgCache = require(_dependencyMap[7], "react-native-img-cache");

  var NewsItemRow = function (_Component) {
    babelHelpers.inherits(NewsItemRow, _Component);

    function NewsItemRow() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, NewsItemRow);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NewsItemRow.__proto__ || Object.getPrototypeOf(NewsItemRow)).call.apply(_ref, [this].concat(args))), _this), _this.stripHtmlTags = function (str) {
        if (str === null || str === '') {
          return false;
        }

        var strip = str.toString();
        return strip.replace(/<[^>]*>/g, '');
      }, _this.isFromLast24Hours = function (date) {
        var timeStamp = Math.round(new Date().getTime() / 1000);
        var timeStampYesterday = timeStamp - 24 * 3600;
        var is24 = date >= new Date(timeStampYesterday).getTime();
        return is24;
      }, _this.isToday = function (date) {
        var today = new Date();
        return today.toDateString() === date.toDateString();
      }, _this._onPress = function () {
        _this.props.onPressItem(_this.props.item);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(NewsItemRow, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        var update = this.props.id !== nextProps.id;
        return update;
      }
    }, {
      key: "render",
      value: function render() {
        var title = this.props.item.title;
        title = this.stripHtmlTags(title);
        var pubDate = this.props.item.published_on;
        var date = new Date(pubDate * 1000);
        var displayDate = void 0;

        if (this.isToday(date)) {
          displayDate = (0, _moment2.default)(date).format('HH:mm');
        } else {
          displayDate = (0, _moment2.default)(date).format('ddd, MMM DD, YYYY');
        }

        console.log('Render News Item Row');

        if (this.props.item.sponsored) {
          console.log(this.props.item.imageurl);
        }

        return _react2.default.createElement(
          _reactNative.TouchableHighlight,
          {
            onPress: this._onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.container, this.props.item.sponsored && styles.sponsored],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 59
              }
            },
            _react2.default.createElement(_reactNativeImgCache.CachedImage, {
              style: styles.image,
              source: {
                uri: this.props.item.imageurl
              },
              cache: "force-cache",
              indicator: Progress.CircleSnail,
              indicatorProps: {
                color: _colors2.default.themeRed
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.textContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 69
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.firstLine,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                  }
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    numberOfLines: 2,
                    style: styles.titleStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 71
                    }
                  },
                  title
                )
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.secondLine,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 73
                  }
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: [styles.sourceStyle, this.props.item.sponsored && styles.sponsoredSource],
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 74
                    }
                  },
                  this.props.item.sponsored ? 'Sponsored' : (0, _common.capitalizeFirstLetter)(this.props.item.source)
                ),
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.dateStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 75
                    }
                  },
                  displayDate
                )
              )
            )
          )
        );
      }
    }]);
    return NewsItemRow;
  }(_react.Component);

  var windowWidth = _reactNative.Dimensions.get('window').width;

  var windowHeight = _reactNative.Dimensions.get('window').height;

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 128,
      width: windowWidth,
      flex: 1,
      flexDirection: 'row',
      paddingLeft: 16,
      paddingTop: 16,
      paddingBottom: 16,
      paddingRight: 16,
      backgroundColor: _colors2.default.gray50
    },
    sponsored: {},
    image: {
      width: 96,
      height: 96,
      borderRadius: 4
    },
    textContainer: {
      flex: 1,
      justifyContent: 'flex-end',
      paddingLeft: 10
    },
    firstLine: {
      flexDirection: 'column',
      justifyContent: 'center'
    },
    secondLine: {
      flex: 0.4,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-end',
      paddingBottom: 7
    },
    titleStyle: {
      flexWrap: 'wrap',
      fontSize: 16,
      fontWeight: 'bold',
      color: _colors2.default.gray900,
      lineHeight: 24,
      paddingBottom: 16
    },
    dateStyle: {
      fontSize: 12,
      color: _colors2.default.gray700
    },
    sourceStyle: {
      fontSize: 12,
      color: _colors2.default.gray700
    },
    sponsoredSource: {
      backgroundColor: _colors2.default.sponsoredYellow,
      top: 4,
      paddingLeft: 8,
      paddingRight: 8,
      paddingTop: 4,
      paddingBottom: 4,
      borderRadius: 4,
      shadowColor: 'black',
      shadowOpacity: 0.2,
      shadowRadius: 16
    },
    imageStyle: {
      flex: 0.08
    }
  });

  exports.default = NewsItemRow;
},826,[109,12,659,671,827,828,675,684],"NNCoins/src/components/Screens/NewsFeed/NewsItemRow.js");
__d(function (global, require, module, exports, _dependencyMap) {
    ;

    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
    })(this, function () {
        'use strict';

        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
        }

        function isObject(input) {
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;

                for (k in obj) {
                    if (obj.hasOwnProperty(k)) {
                        return false;
                    }
                }

                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
        }

        function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
        }

        function map(arr, fn) {
            var res = [],
                i;

            for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
            }

            return res;
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }

            return m._pf;
        }

        var some;

        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function some(fun) {
                var t = Object(this);
                var len = t.length >>> 0;

                for (var i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m);
                var parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                });
                var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

                if (m._strict) {
                    isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                } else {
                    return isNowValid;
                }
            }

            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);

            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        var momentProperties = hooks.momentProperties = [];

        function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }

            if (!isUndefined(from._i)) {
                to._i = from._i;
            }

            if (!isUndefined(from._f)) {
                to._f = from._f;
            }

            if (!isUndefined(from._l)) {
                to._l = from._l;
            }

            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }

            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }

            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }

            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }

            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }

            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                    prop = momentProperties[i];
                    val = from[prop];

                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        var updateInProgress = false;

        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);

            if (!this.isValid()) {
                this._d = new Date(NaN);
            }

            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }

        function absFloor(number) {
            if (number < 0) {
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;

            for (i = 0; i < len; i++) {
                if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                    diffs++;
                }
            }

            return diffs + lengthDiff;
        }

        function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }

                if (firstTime) {
                    var args = [];
                    var arg;

                    for (var i = 0; i < arguments.length; i++) {
                        arg = '';

                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';

                            for (var key in arguments[0]) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }

                            arg = arg.slice(0, -2);
                        } else {
                            arg = arguments[i];
                        }

                        args.push(arg);
                    }

                    warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                    firstTime = false;
                }

                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }

            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
        }

        function set(config) {
            var prop, i;

            for (i in config) {
                prop = config[i];

                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }

            this._config = config;
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;

            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }

            for (prop in parentConfig) {
                if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                    res[prop] = extend({}, res[prop]);
                }
            }

            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function keys(obj) {
                var i,
                    res = [];

                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }

                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
                return val.slice(1);
            });
            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d';
        var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);

                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [];

            for (var u in unitsObj) {
                units.push({
                    unit: u,
                    priority: priorities[u]
                });
            }

            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }

        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
        var formatFunctions = {};
        var formatTokenFunctions = {};

        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;

            if (typeof callback === 'string') {
                func = function func() {
                    return this[callback]();
                };
            }

            if (token) {
                formatTokenFunctions[token] = func;
            }

            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }

            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(func.apply(this, arguments), token);
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }

            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;

                for (i = 0; i < length; i++) {
                    output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                }

                return output;
            };
        }

        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;

            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var match1 = /\d/;
        var match2 = /\d\d/;
        var match3 = /\d{3}/;
        var match4 = /\d{4}/;
        var match6 = /[+-]?\d{6}/;
        var match1to2 = /\d\d?/;
        var match3to4 = /\d\d\d\d?/;
        var match5to6 = /\d\d\d\d\d\d?/;
        var match1to3 = /\d{1,3}/;
        var match1to4 = /\d{1,4}/;
        var match1to6 = /[+-]?\d{1,6}/;
        var matchUnsigned = /\d+/;
        var matchSigned = /[+-]?\d+/;
        var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
        var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
        var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
        var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
        var regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
                return isStrict && strictRegex ? strictRegex : regex;
            };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            }));
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback;

            if (typeof token === 'string') {
                token = [token];
            }

            if (isNumber(callback)) {
                func = function func(input, array) {
                    array[callback] = toInt(input);
                };
            }

            for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0;
        var MONTH = 1;
        var DATE = 2;
        var HOUR = 3;
        var MINUTE = 4;
        var SECOND = 5;
        var MILLISECOND = 6;
        var WEEK = 7;
        var WEEKDAY = 8;
        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? '' + y : '+' + y;
        });
        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });
        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
        addUnitAlias('year', 'y');
        addUnitPriority('year', 1);
        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);
        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
        }

        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
                } else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        function stringGet(units) {
            units = normalizeUnits(units);

            if (isFunction(this[units])) {
                return this[units]();
            }

            return this;
        }

        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units);

                for (var i = 0; i < prioritized.length; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);

                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }

            return this;
        }

        function mod(n, x) {
            return (n % x + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function indexOf(o) {
                var i;

                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }

                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }

            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
        }

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });
        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });
        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });
        addUnitAlias('month', 'M');
        addUnitPriority('month', 8);
        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });
        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });
        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);

            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });
        var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months) ? this._months : this._months['standalone'];
            }

            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
        }

        var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
            }

            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];

                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                mom = createUTC([2000, i]);

                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }

                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }

                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);

                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        var defaultMonthsShortRegex = matchWord;

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }

                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }

                return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
        }

        var defaultMonthsRegex = matchWord;

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }

                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }

                return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;

            for (i = 0; i < 12; i++) {
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }

            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }

            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        }

        function createDate(y, m, d, h, M, s, ms) {
            var date = new Date(y, m, d, h, M, s, ms);

            if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }

            return date;
        }

        function createUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));

            if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }

            return date;
        }

        function firstWeekOffset(year, dow, doy) {
            var fwd = 7 + dow - doy,
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
        }

        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');
        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);
        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);
        addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        });

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0,
            doy: 6
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        addFormatToken('d', 0, 'do', 'day');
        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });
        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });
        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });
        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');
        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);
        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });
        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);

            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });
        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);

            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }

            return isNaN(input) ? null : input;
        }

        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

        function localeWeekdays(m, format) {
            if (!m) {
                return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
            }

            return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
        }

        var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

        function localeWeekdaysShort(m) {
            return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
        }

        var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

        function localeWeekdaysMin(m) {
            return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                mom = createUTC([2000, 1]).day(i);

                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                    this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                    this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
                }

                if (!this._weekdaysParse[i]) {
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }

                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        var defaultWeekdaysRegex = matchWord;

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }

                return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
        }

        var defaultWeekdaysShortRegex = matchWord;

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }

                return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
        }

        var defaultWeekdaysMinRegex = matchWord;

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }

                return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;

            for (i = 0; i < 7; i++) {
                mom = createUTC([2000, 1]).day(i);
                minp = this.weekdaysMin(mom, '');
                shortp = this.weekdaysShort(mom, '');
                longp = this.weekdays(mom, '');
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }

            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            for (i = 0; i < 7; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
        }

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);
        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
        }

        meridiem('a', true);
        meridiem('A', false);
        addUnitAlias('hour', 'h');
        addUnitPriority('hour', 13);

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);
        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);
        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        function localeIsPM(input) {
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var getSetHour = makeGetSet('Hours', true);
        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse
        };
        var locales = {};
        var localeFamilies = {};
        var globalLocale;

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;

                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));

                    if (locale) {
                        return locale;
                    }

                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        break;
                    }

                    j--;
                }

                i++;
            }

            return globalLocale;
        }

        function loadLocale(name) {
            var oldLocale = null;

            if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
                try {
                    oldLocale = globalLocale._abbr;
                    var aliasedRequire = require;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {}
            }

            return locales[name];
        }

        function getSetGlobalLocale(key, values) {
            var data;

            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;

                if (locales[name] != null) {
                    deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);

                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }

                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config
                            });
                            return null;
                        }
                    }
                }

                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                getSetGlobalLocale(name);
                return locales[name];
            } else {
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;
                tmpLocale = loadLocale(name);

                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }

                config = mergeConfigs(parentConfig, config);
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
                getSetGlobalLocale(name);
            } else {
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }

            return locales[name];
        }

        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                locale = loadLocale(key);

                if (locale) {
                    return locale;
                }

                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow;
            var a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

                if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }

                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }

                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }

            if (b != null) {
                return b;
            }

            return c;
        }

        function currentDateArray(config) {
            var nowValue = new Date(hooks.now());

            if (config._useUTC) {
                return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }

            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            for (; i < 7; i++) {
                config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }

            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
            w = config._w;

            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);

                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;
                var curWeek = weekOfYear(createLocal(), dow, doy);
                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    weekday = w.d;

                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    weekday = w.e + dow;

                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    weekday = dow;
                }
            }

            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
        var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
        var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
        var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];
        var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
        var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

            if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }

                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }

                if (match[3]) {
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }

                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }

                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }

                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }

                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);

            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }

            return year;
        }

        function preprocessRFC2822(s) {
            return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }

            return true;
        }

        var obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
        };

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                return 0;
            } else {
                var hm = parseInt(numOffset, 10);
                var m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i));

            if (match) {
                var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);
                config._d = createUTCDate.apply(null, config._a);

                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);

            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);

            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            hooks.createFromInputFallback(config);
        }

        hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        });

        hooks.ISO_8601 = function () {};

        hooks.RFC_2822 = function () {};

        function configFromStringAndFormat(config) {
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }

            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }

            config._a = [];
            getParsingFlags(config).empty = true;
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0;
            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];

                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));

                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }

                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }

                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }

                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                return hour;
            }

            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                isPm = locale.isPM(meridiem);

                if (isPm && hour < 12) {
                    hour += 12;
                }

                if (!isPm && hour === 12) {
                    hour = 0;
                }

                return hour;
            } else {
                return hour;
            }
        }

        function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;

            if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = copyConfig({}, config);

                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }

                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (!isValid(tempConfig)) {
                    continue;
                }

                currentScore += getParsingFlags(tempConfig).charsLeftOver;
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                getParsingFlags(tempConfig).score = currentScore;

                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i);
            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                return obj && parseInt(obj, 10);
            });
            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));

            if (res._nextDay) {
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;
            config._locale = config._locale || getLocale(config._l);

            if (input === null || format === undefined && input === '') {
                return createInvalid({
                    nullInput: true
                });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;

            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
                input = undefined;
            }

            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        });
        var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        });

        function pickBy(fn, moments) {
            var res, i;

            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }

            if (!moments.length) {
                return createLocal();
            }

            res = moments[0];

            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }

            return res;
        }

        function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
        }

        var now = function now() {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

        function isDurationValid(m) {
            for (var key in m) {
                if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                    return false;
                }
            }

            var unitHasDecimal = false;

            for (var i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false;
                    }

                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput);
            this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1000 * 60 * 60;
            this._days = +days + weeks * 7;
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset();
                var sign = '+';

                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }

                return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
        }

        offset('Z', ':');
        offset('ZZ', '');
        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher);

            if (matches === null) {
                return null;
            }

            var chunk = matches[matches.length - 1] || [];
            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            var minutes = +(parts[1] * 60) + toInt(parts[2]);
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        function cloneWithOffset(input, model) {
            var res, diff;

            if (model._isUTC) {
                res = model.clone();
                diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();

                res._d.setTime(res._d.valueOf() + diff);

                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
        }

        hooks.updateOffset = function () {};

        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;

            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);

                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }

                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }

                this._offset = input;
                this._isUTC = true;

                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }

                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);
                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }

            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);

                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }

            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }

            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {};
            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
        var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                };
            } else if (isNumber(input)) {
                duration = {};

                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
                };
            } else if (!!(match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign)
                };
            } else if (duration == null) {
                duration = {};
            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            var res = inp && parseFloat(inp.replace(',', '.'));
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {
                milliseconds: 0,
                months: 0
            };
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');
            return res;
        }

        function momentsDifference(base, other) {
            var res;

            if (!(base.isValid() && other.isValid())) {
                return {
                    milliseconds: 0,
                    months: 0
                };
            }

            other = cloneWithOffset(other, base);

            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;

                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                val = typeof val === 'string' ? +val : val;
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }

            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }

            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }

            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add');
        var subtract = createAdder(-1, 'subtract');

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
        }

        function calendar$1(time, formats) {
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse';
            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(units || 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;

                case 'month':
                    output = monthDiff(this, that);
                    break;

                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;

                case 'second':
                    output = (this - that) / 1e3;
                    break;

                case 'minute':
                    output = (this - that) / 6e4;
                    break;

                case 'hour':
                    output = (this - that) / 36e5;
                    break;

                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break;

                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break;

                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }

            var utc = keepOffset !== true;
            var m = utc ? this.clone().utc() : this;

            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }

            if (isFunction(Date.prototype.toISOString)) {
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
                }
            }

            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }

            var func = 'moment';
            var zone = '';

            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }

            var prefix = '[' + func + '("]';
            var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
            var suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }

            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                return createDuration({
                    to: this,
                    from: time
                }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                return createDuration({
                    from: this,
                    to: time
                }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);

                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }

                return this;
            }
        }

        var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        });

        function localeData() {
            return this._locale;
        }

        function startOf(units) {
            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    this.month(0);

                case 'quarter':
                case 'month':
                    this.date(1);

                case 'week':
                case 'isoWeek':
                case 'day':
                case 'date':
                    this.hours(0);

                case 'hour':
                    this.minutes(0);

                case 'minute':
                    this.seconds(0);

                case 'second':
                    this.milliseconds(0);
            }

            if (units === 'week') {
                this.weekday(0);
            }

            if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        }

        function endOf(units) {
            units = normalizeUnits(units);

            if (units === undefined || units === 'millisecond') {
                return this;
            }

            if (units === 'date') {
                units = 'day';
            }

            return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds()
            };
        }

        function toJSON() {
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
            };
        }

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });
        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');
        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');
        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);
        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);
        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        });
        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;

            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;

            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);

                if (week > weeksTarget) {
                    week = weeksTarget;
                }

                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        addFormatToken('Q', 0, 'Qo', 'quarter');
        addUnitAlias('quarter', 'Q');
        addUnitPriority('quarter', 7);
        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }

        addFormatToken('D', ['DD', 2], 'Do', 'date');
        addUnitAlias('date', 'D');
        addUnitPriority('date', 9);
        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });
        var getSetDayOfMonth = makeGetSet('Date', true);
        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
        addUnitAlias('dayOfYear', 'DDD');
        addUnitPriority('dayOfYear', 4);
        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        addFormatToken('m', ['mm', 2], 0, 'minute');
        addUnitAlias('minute', 'm');
        addUnitPriority('minute', 14);
        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);
        var getSetMinute = makeGetSet('Minutes', false);
        addFormatToken('s', ['ss', 2], 0, 'second');
        addUnitAlias('second', 's');
        addUnitPriority('second', 15);
        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);
        var getSetSecond = makeGetSet('Seconds', false);
        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });
        addUnitAlias('millisecond', 'ms');
        addUnitPriority('millisecond', 16);
        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);
        var token;

        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        var getSetMillisecond = makeGetSet('Milliseconds', false);
        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
        proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
        proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
        proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
        proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale();
            var utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i;
            var out = [];

            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }

            return out;
        }

        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0;

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            var i;
            var out = [];

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }

            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function ordinal(number) {
                var b = number % 10,
                    output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                return number + output;
            }
        });
        hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
        hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
        }

        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds;
            var days = this._days;
            var months = this._months;
            var data = this._data;
            var seconds, minutes, hours, years, monthsFromDays;

            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            data.milliseconds = milliseconds % 1000;
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
            days += absFloor(hours / 24);
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));
            years = absFloor(months / 12);
            months %= 12;
            data.days = days;
            data.months = months;
            data.years = years;
            return this;
        }

        function daysToMonths(days) {
            return days * 4800 / 146097;
        }

        function monthsToDays(months) {
            return months * 146097 / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }

            var days;
            var months;
            var milliseconds = this._milliseconds;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                return units === 'month' ? months : months / 12;
            } else {
                days = this._days + Math.round(monthsToDays(this._months));

                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;

                    case 'day':
                        return days + milliseconds / 864e5;

                    case 'hour':
                        return days * 24 + milliseconds / 36e5;

                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;

                    case 'second':
                        return days * 86400 + milliseconds / 1000;

                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;

                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }

            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms');
        var asSeconds = makeAs('s');
        var asMinutes = makeAs('m');
        var asHours = makeAs('h');
        var asDays = makeAs('d');
        var asWeeks = makeAs('w');
        var asMonths = makeAs('M');
        var asYears = makeAs('y');

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds');
        var seconds = makeGetter('seconds');
        var minutes = makeGetter('minutes');
        var hours = makeGetter('hours');
        var days = makeGetter('days');
        var months = makeGetter('months');
        var years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round;
        var thresholds = {
            ss: 44,
            s: 45,
            m: 45,
            h: 22,
            d: 26,
            M: 11
        };

        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, locale) {
            var duration = createDuration(posNegDuration).abs();
            var seconds = round(duration.as('s'));
            var minutes = round(duration.as('m'));
            var hours = round(duration.as('h'));
            var days = round(duration.as('d'));
            var months = round(duration.as('M'));
            var years = round(duration.as('y'));
            var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }

            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }

            return false;
        }

        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }

            if (limit === undefined) {
                return thresholds[threshold];
            }

            thresholds[threshold] = limit;

            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }

            return true;
        }

        function humanize(withSuffix) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var locale = this.localeData();
            var output = relativeTime$1(this, !withSuffix, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000;
            var days = abs$1(this._days);
            var months = abs$1(this._months);
            var minutes, hours, years;
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;
            years = absFloor(months / 12);
            months %= 12;
            var Y = years;
            var M = months;
            var D = days;
            var h = hours;
            var m = minutes;
            var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            var total = this.asSeconds();

            if (!total) {
                return 'P0D';
            }

            var totalSign = total < 0 ? '-' : '';
            var ymSign = sign(this._months) !== sign(total) ? '-' : '';
            var daysSign = sign(this._days) !== sign(total) ? '-' : '';
            var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
            return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
        }

        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
        proto$2.lang = lang;
        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');
        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input, 10) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });
        hooks.version = '2.22.1';
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
            DATE: 'YYYY-MM-DD',
            TIME: 'HH:mm',
            TIME_SECONDS: 'HH:mm:ss',
            TIME_MS: 'HH:mm:ss.SSS',
            WEEK: 'YYYY-[W]WW',
            MONTH: 'YYYY-MM'
        };
        return hooks;
    });
},827,[],"moment/moment.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Button = require(_dependencyMap[0], "./Button");

  Object.keys(_Button).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Button[key];
      }
    });
  });

  var _Card = require(_dependencyMap[1], "./Card");

  Object.keys(_Card).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Card[key];
      }
    });
  });

  var _CardSection = require(_dependencyMap[2], "./CardSection");

  Object.keys(_CardSection).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _CardSection[key];
      }
    });
  });

  var _Input = require(_dependencyMap[3], "./Input");

  Object.keys(_Input).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Input[key];
      }
    });
  });

  var _Badge = require(_dependencyMap[4], "./Badge");

  Object.keys(_Badge).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Badge[key];
      }
    });
  });

  var _Utils = require(_dependencyMap[5], "./Utils");

  Object.keys(_Utils).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Utils[key];
      }
    });
  });
},828,[829,830,831,832,833,834],"NNCoins/src/components/common/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Button = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/common/Button.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var Button = function Button(_ref) {
    var onPress = _ref.onPress,
        children = _ref.children;
    var buttonStyle = styles.buttonStyle,
        textStyle = styles.textStyle;
    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      {
        onPress: onPress,
        style: buttonStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      },
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: textStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        },
        children
      )
    );
  };

  var styles = {
    textStyle: {
      alignSelf: 'center',
      color: '#007aff',
      fontSize: 16,
      fontWeight: '600',
      paddingTop: 10,
      paddingBottom: 10
    },
    buttonStyle: {
      flex: 1,
      alignSelf: 'stretch',
      backgroundColor: '#fff',
      borderRadius: 5,
      borderWidth: 1,
      borderColor: '#007aff',
      marginLeft: 5,
      marginRight: 5
    }
  };
  exports.Button = Button;
},829,[109,12],"NNCoins/src/components/common/Button.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Card = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/common/Card.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var Card = function Card(props) {
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.containerStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 6
        }
      },
      props.children
    );
  };

  var styles = {
    containerStyle: {
      borderWidth: 1,
      borderRadius: 2,
      borderColor: '#ddd',
      borderBottomWidth: 0,
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.1,
      shadowRadius: 2,
      elevation: 1,
      marginLeft: 5,
      marginRight: 5,
      marginTop: 10
    }
  };
  exports.Card = Card;
},830,[109,12],"NNCoins/src/components/common/Card.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CardSection = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/common/CardSection.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var CardSection = function CardSection(props) {
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.containerStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 6
        }
      },
      props.children
    );
  };

  var styles = {
    containerStyle: {
      borderBottomWidth: 1,
      padding: 5,
      backgroundColor: '#fff',
      justifyContent: 'flex-start',
      flexDirection: 'row',
      borderColor: '#ddd',
      position: 'relative'
    }
  };
  exports.CardSection = CardSection;
},831,[109,12],"NNCoins/src/components/common/CardSection.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Input = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/common/Input.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Input = function Input(_ref) {
    var value = _ref.value,
        onChangeText = _ref.onChangeText,
        placeholder = _ref.placeholder,
        secureTextEntry = _ref.secureTextEntry;
    var inputStyle = styles.inputStyle,
        containerStyle = styles.containerStyle;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: containerStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 9
        }
      },
      _react2.default.createElement(_reactNative.TextInput, {
        secureTextEntry: secureTextEntry,
        placeholder: placeholder,
        placeholderTextColor: _colors2.default.gray300,
        autoCorrect: false,
        style: inputStyle,
        value: value,
        onChangeText: onChangeText,
        autoFocus: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      })
    );
  };

  var styles = {
    inputStyle: {
      paddingRight: 26,
      paddingLeft: 26,
      lineHeight: 23,
      flex: 2,
      color: _colors2.default.gray900,
      fontSize: 14,
      fontWeight: 'bold',
      textAlign: 'center'
    },
    labelStyle: {
      fontSize: 14,
      paddingLeft: 20,
      flex: 1
    },
    containerStyle: {
      height: 40,
      width: 247,
      flexDirection: 'row',
      alignItems: 'center',
      borderColor: _colors2.default.gray50,
      borderWidth: 1,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: 24,
      borderRadius: 2
    }
  };
  exports.Input = Input;
},832,[109,12,671],"NNCoins/src/components/common/Input.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Badge = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/common/Badge.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var Badge = function Badge(_ref) {
    var number = _ref.number;
    var badgeStyle = styles.badgeStyle,
        textStyle = styles.textStyle;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: badgeStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 9
        }
      },
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: textStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        },
        number
      )
    );
  };

  var styles = {
    textStyle: {
      alignSelf: 'center',
      color: _colors2.default.themeRed,
      fontSize: 12,
      fontWeight: '600'
    },
    badgeStyle: {
      position: 'absolute',
      backgroundColor: '#fff',
      borderRadius: 10,
      borderWidth: 1,
      borderColor: _colors2.default.themeRed,
      width: 20,
      height: 20,
      right: 30,
      bottom: 70,
      justifyContent: 'center'
    }
  };
  exports.Badge = Badge;
},833,[109,12,671],"NNCoins/src/components/common/Badge.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.capitalizeFirstLetter = capitalizeFirstLetter;

    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
},834,[],"NNCoins/src/components/common/Utils.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = fetchNewsList;

    var _axios = require(_dependencyMap[0], "axios");

    var _axios2 = babelHelpers.interopRequireDefault(_axios);

    var _Constants = require(_dependencyMap[1], "./../Utils/Constants");

    var _ActionTypes = require(_dependencyMap[2], "./../Utils/ActionTypes");

    function fetchNewsList() {
        return function (dispatch) {
            dispatch({
                type: _ActionTypes.FETCHING_NEWS_LIST
            });
            return _axios2.default.get('http://api.mobile.99bitcoins.com/news/').then(function (res) {
                dispatch({
                    type: _ActionTypes.FETCHING_NEWS_LIST_SUCCESS,
                    payload: res.data
                });
            }).catch(function (err) {
                dispatch({
                    type: _ActionTypes.FETCHING_NEWS_LIST_FAIL,
                    payload: err
                });
            });
        };
    }
},835,[715,554,548],"NNCoins/src/Actions/FetchNewsList.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = fetchWeeklyUpdateVideo;

    var _axios = require(_dependencyMap[0], "axios");

    var _axios2 = babelHelpers.interopRequireDefault(_axios);

    var _Constants = require(_dependencyMap[1], "./../Utils/Constants");

    var _ActionTypes = require(_dependencyMap[2], "./../Utils/ActionTypes");

    var WEEKLY_VIDEOS = 'weekly-videos';

    function fetchWeeklyUpdateVideo() {
        return function (dispatch) {
            dispatch({
                type: _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO
            });
            return _axios2.default.get(_Constants.NNBITCOINS_BASE_URL + "/" + WEEKLY_VIDEOS + "/latest").then(function (res) {
                dispatch({
                    type: _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO_SUCCESS,
                    payload: res.data
                });
            }).catch(function (err) {
                dispatch({
                    type: _ActionTypes.FETCHING_WEEKLY_UPDATE_VIDEO_FAIL,
                    payload: err
                });
            });
        };
    }
},836,[715,554,548],"NNCoins/src/Actions/FetchWeeklyUpdateVideo.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-video-player/index.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _MaterialIcons = require(_dependencyMap[3], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _reactNativeVideo = require(_dependencyMap[4], "react-native-video");

  var _reactNativeVideo2 = babelHelpers.interopRequireDefault(_reactNativeVideo);

  var BackgroundImage = _reactNative.ImageBackground || _reactNative.Image;

  var styles = _reactNative.StyleSheet.create({
    preloadingPlaceholder: {
      backgroundColor: 'black',
      justifyContent: 'center',
      alignItems: 'center'
    },
    thumbnail: {
      backgroundColor: 'black',
      justifyContent: 'center',
      alignItems: 'center'
    },
    playButton: {
      backgroundColor: 'rgba(0, 0, 0, 0.6)',
      width: 64,
      height: 64,
      borderRadius: 32,
      justifyContent: 'center',
      alignItems: 'center'
    },
    playArrow: {
      color: 'white'
    },
    video: _reactNative.Platform.Version >= 24 ? {} : {
      backgroundColor: 'black'
    },
    controls: {
      backgroundColor: 'rgba(0, 0, 0, 0.6)',
      height: 48,
      marginTop: -48,
      flexDirection: 'row',
      alignItems: 'center'
    },
    playControl: {
      color: 'white',
      padding: 8
    },
    extraControl: {
      color: 'white',
      padding: 8
    },
    seekBar: {
      alignItems: 'center',
      height: 30,
      flexGrow: 1,
      flexDirection: 'row',
      paddingHorizontal: 10,
      marginLeft: -10,
      marginRight: -5
    },
    seekBarFullWidth: {
      marginLeft: 0,
      marginRight: 0,
      paddingHorizontal: 0,
      marginTop: -3,
      height: 3
    },
    seekBarProgress: {
      height: 3,
      backgroundColor: '#F00'
    },
    seekBarKnob: {
      width: 20,
      height: 20,
      marginHorizontal: -8,
      marginVertical: -10,
      borderRadius: 10,
      backgroundColor: '#F00',
      transform: [{
        scale: 0.8
      }],
      zIndex: 1
    },
    seekBarBackground: {
      backgroundColor: 'rgba(255, 255, 255, 0.5)',
      height: 3
    },
    overlayButton: {
      flex: 1
    }
  });

  var VideoPlayer = function (_Component) {
    babelHelpers.inherits(VideoPlayer, _Component);

    function VideoPlayer(props) {
      babelHelpers.classCallCheck(this, VideoPlayer);

      var _this = babelHelpers.possibleConstructorReturn(this, (VideoPlayer.__proto__ || Object.getPrototypeOf(VideoPlayer)).call(this, props));

      _this.state = {
        isStarted: props.autoplay,
        isPlaying: props.autoplay,
        width: 200,
        progress: 0,
        isMuted: props.defaultMuted,
        isControlsVisible: !props.hideControlsOnStart,
        duration: 0,
        isSeeking: false
      };
      _this.seekBarWidth = 200;
      _this.wasPlayingBeforeSeek = props.autoplay;
      _this.seekTouchStart = 0;
      _this.seekProgressStart = 0;
      _this.onLayout = _this.onLayout.bind(_this);
      _this.onStartPress = _this.onStartPress.bind(_this);
      _this.onProgress = _this.onProgress.bind(_this);
      _this.onEnd = _this.onEnd.bind(_this);
      _this.onLoad = _this.onLoad.bind(_this);
      _this.onPlayPress = _this.onPlayPress.bind(_this);
      _this.onMutePress = _this.onMutePress.bind(_this);
      _this.showControls = _this.showControls.bind(_this);
      _this.onToggleFullScreen = _this.onToggleFullScreen.bind(_this);
      _this.onSeekBarLayout = _this.onSeekBarLayout.bind(_this);
      _this.onSeekGrant = _this.onSeekGrant.bind(_this);
      _this.onSeekRelease = _this.onSeekRelease.bind(_this);
      _this.onSeek = _this.onSeek.bind(_this);
      return _this;
    }

    babelHelpers.createClass(VideoPlayer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.autoplay) {
          this.hideControls();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.controlsTimeout) {
          clearTimeout(this.controlsTimeout);
          this.controlsTimeout = null;
        }
      }
    }, {
      key: "onLayout",
      value: function onLayout(event) {
        var width = event.nativeEvent.layout.width;
        this.setState({
          width: width
        });
      }
    }, {
      key: "onStartPress",
      value: function onStartPress() {
        if (this.props.onStart) {
          this.props.onStart();
        }

        this.setState({
          isPlaying: true,
          isStarted: true
        });
        this.hideControls();
      }
    }, {
      key: "onProgress",
      value: function onProgress(event) {
        if (this.state.isSeeking) {
          return;
        }

        if (this.props.onProgress) {
          this.props.onProgress(event);
        }

        this.setState({
          progress: event.currentTime / (this.props.duration || this.state.duration)
        });
      }
    }, {
      key: "onEnd",
      value: function onEnd(event) {
        if (this.props.onEnd) {
          this.props.onEnd(event);
        }

        if (this.props.endWithThumbnail) {
          this.setState({
            isStarted: false
          });
          this.player.dismissFullscreenPlayer();
        }

        this.setState({
          progress: 1
        });
        this.player.seek(0);

        if (!this.props.loop) {
          this.setState({
            isPlaying: false
          });
        }
      }
    }, {
      key: "onLoad",
      value: function onLoad(event) {
        if (this.props.onLoad) {
          this.props.onLoad(event);
        }

        var duration = event.duration;
        this.setState({
          duration: duration
        });
      }
    }, {
      key: "onPlayPress",
      value: function onPlayPress() {
        if (this.props.onPlayPress) {
          this.props.onPlayPress();
        }

        this.setState({
          isPlaying: !this.state.isPlaying
        });
        this.showControls();
      }
    }, {
      key: "onMutePress",
      value: function onMutePress() {
        this.setState({
          isMuted: !this.state.isMuted
        });
        this.showControls();
      }
    }, {
      key: "onToggleFullScreen",
      value: function onToggleFullScreen() {
        this.player.presentFullscreenPlayer();
      }
    }, {
      key: "onSeekBarLayout",
      value: function onSeekBarLayout(_ref) {
        var nativeEvent = _ref.nativeEvent;
        var customStyle = this.props.customStyles.seekBar;
        var padding = 0;

        if (customStyle && customStyle.paddingHorizontal) {
          padding = customStyle.paddingHorizontal * 2;
        } else if (customStyle) {
          padding = customStyle.paddingLeft || 0;
          padding += customStyle.paddingRight ? customStyle.paddingRight : 0;
        } else {
          padding = 20;
        }

        this.seekBarWidth = nativeEvent.layout.width - padding;
      }
    }, {
      key: "onSeekStartResponder",
      value: function onSeekStartResponder() {
        return true;
      }
    }, {
      key: "onSeekMoveResponder",
      value: function onSeekMoveResponder() {
        return true;
      }
    }, {
      key: "onSeekGrant",
      value: function onSeekGrant(e) {
        this.seekTouchStart = e.nativeEvent.pageX;
        this.seekProgressStart = this.state.progress;
        this.wasPlayingBeforeSeek = this.state.isPlaying;
        this.setState({
          isSeeking: true,
          isPlaying: false
        });
      }
    }, {
      key: "onSeekRelease",
      value: function onSeekRelease() {
        this.setState({
          isSeeking: false,
          isPlaying: this.wasPlayingBeforeSeek
        });
        this.showControls();
      }
    }, {
      key: "onSeek",
      value: function onSeek(e) {
        var diff = e.nativeEvent.pageX - this.seekTouchStart;
        var ratio = 100 / this.seekBarWidth;
        var progress = this.seekProgressStart + ratio * diff / 100;
        this.setState({
          progress: progress
        });
        this.player.seek(progress * this.state.duration);
      }
    }, {
      key: "getSizeStyles",
      value: function getSizeStyles() {
        var _props = this.props,
            videoWidth = _props.videoWidth,
            videoHeight = _props.videoHeight;
        var width = this.state.width;
        var ratio = videoHeight / videoWidth;
        return {
          height: width * ratio,
          width: width
        };
      }
    }, {
      key: "hideControls",
      value: function hideControls() {
        var _this2 = this;

        if (this.props.onHideControls) {
          this.props.onHideControls();
        }

        if (this.props.disableControlsAutoHide) {
          return;
        }

        if (this.controlsTimeout) {
          clearTimeout(this.controlsTimeout);
          this.controlsTimeout = null;
        }

        this.controlsTimeout = setTimeout(function () {
          _this2.setState({
            isControlsVisible: false
          });
        }, this.props.controlsTimeout);
      }
    }, {
      key: "showControls",
      value: function showControls() {
        if (this.props.onShowControls) {
          this.props.onShowControls();
        }

        this.setState({
          isControlsVisible: true
        });
        this.hideControls();
      }
    }, {
      key: "seek",
      value: function seek(t) {
        this.player.seek(t);
      }
    }, {
      key: "renderStartButton",
      value: function renderStartButton() {
        var customStyles = this.props.customStyles;
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: [styles.playButton, customStyles.playButton],
            onPress: this.onStartPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 318
            }
          },
          _react2.default.createElement(_MaterialIcons2.default, {
            style: [styles.playArrow, customStyles.playArrow],
            name: "play-arrow",
            size: 42,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 322
            }
          })
        );
      }
    }, {
      key: "renderThumbnail",
      value: function renderThumbnail() {
        var _props2 = this.props,
            thumbnail = _props2.thumbnail,
            style = _props2.style,
            customStyles = _props2.customStyles,
            props = babelHelpers.objectWithoutProperties(_props2, ["thumbnail", "style", "customStyles"]);
        return _react2.default.createElement(
          BackgroundImage,
          babelHelpers.extends({}, props, {
            style: [styles.thumbnail, this.getSizeStyles(), style, customStyles.thumbnail],
            source: thumbnail,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 330
            }
          }),
          this.renderStartButton()
        );
      }
    }, {
      key: "renderSeekBar",
      value: function renderSeekBar(fullWidth) {
        var _props3 = this.props,
            customStyles = _props3.customStyles,
            disableSeek = _props3.disableSeek;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.seekBar, fullWidth ? styles.seekBarFullWidth : {}, customStyles.seekBar, fullWidth ? customStyles.seekBarFullWidth : {}],
            onLayout: this.onSeekBarLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 348
            }
          },
          _react2.default.createElement(_reactNative.View, {
            style: [{
              flexGrow: this.state.progress
            }, styles.seekBarProgress, customStyles.seekBarProgress],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 357
            }
          }),
          !fullWidth && !disableSeek ? _react2.default.createElement(_reactNative.View, {
            style: [styles.seekBarKnob, customStyles.seekBarKnob, this.state.isSeeking ? {
              transform: [{
                scale: 1
              }]
            } : {}, this.state.isSeeking ? customStyles.seekBarKnobSeeking : {}],
            hitSlop: {
              top: 20,
              bottom: 20,
              left: 10,
              right: 20
            },
            onStartShouldSetResponder: this.onSeekStartResponder,
            onMoveShouldSetPanResponder: this.onSeekMoveResponder,
            onResponderGrant: this.onSeekGrant,
            onResponderMove: this.onSeek,
            onResponderRelease: this.onSeekRelease,
            onResponderTerminate: this.onSeekRelease,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 365
            }
          }) : null,
          _react2.default.createElement(_reactNative.View, {
            style: [styles.seekBarBackground, {
              flexGrow: 1 - this.state.progress
            }, customStyles.seekBarBackground],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 381
            }
          })
        );
      }
    }, {
      key: "renderControls",
      value: function renderControls() {
        var customStyles = this.props.customStyles;
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.controls, customStyles.controls],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 393
            }
          },
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.onPlayPress,
              style: [customStyles.controlButton, customStyles.playControl],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 394
              }
            },
            _react2.default.createElement(_MaterialIcons2.default, {
              style: [styles.playControl, customStyles.controlIcon, customStyles.playIcon],
              name: this.state.isPlaying ? 'pause' : 'play-arrow',
              size: 32,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 398
              }
            })
          ),
          this.renderSeekBar(),
          this.props.muted ? null : _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.onMutePress,
              style: customStyles.controlButton,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 406
              }
            },
            _react2.default.createElement(_MaterialIcons2.default, {
              style: [styles.extraControl, customStyles.controlIcon],
              name: this.state.isMuted ? 'volume-off' : 'volume-up',
              size: 24,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 407
              }
            })
          ),
          _reactNative.Platform.OS === 'android' || this.props.disableFullscreen ? null : _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.onToggleFullScreen,
              style: customStyles.controlButton,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 415
              }
            },
            _react2.default.createElement(_MaterialIcons2.default, {
              style: [styles.extraControl, customStyles.controlIcon],
              name: "fullscreen",
              size: 32,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 416
              }
            })
          )
        );
      }
    }, {
      key: "renderVideo",
      value: function renderVideo() {
        var _this3 = this;

        var _props4 = this.props,
            video = _props4.video,
            style = _props4.style,
            resizeMode = _props4.resizeMode,
            pauseOnPress = _props4.pauseOnPress,
            fullScreenOnLongPress = _props4.fullScreenOnLongPress,
            customStyles = _props4.customStyles,
            props = babelHelpers.objectWithoutProperties(_props4, ["video", "style", "resizeMode", "pauseOnPress", "fullScreenOnLongPress", "customStyles"]);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: customStyles.videoWrapper,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 438
            }
          },
          _react2.default.createElement(_reactNativeVideo2.default, babelHelpers.extends({}, props, {
            style: [styles.video, this.getSizeStyles(), style, customStyles.video],
            ref: function ref(p) {
              _this3.player = p;
            },
            muted: this.props.muted || this.state.isMuted,
            paused: !this.state.isPlaying,
            onProgress: this.onProgress,
            onEnd: this.onEnd,
            onLoad: this.onLoad,
            source: video,
            resizeMode: resizeMode,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 439
            }
          })),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [this.getSizeStyles(), {
                marginTop: -this.getSizeStyles().height
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 456
              }
            },
            _react2.default.createElement(_reactNative.TouchableOpacity, {
              style: styles.overlayButton,
              onPress: function onPress() {
                _this3.showControls();

                if (pauseOnPress) _this3.onPlayPress();
              },
              onLongPress: function onLongPress() {
                if (fullScreenOnLongPress && _reactNative.Platform.OS !== 'android') _this3.onToggleFullScreen();
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 462
              }
            })
          ),
          !this.state.isPlaying || this.state.isControlsVisible ? this.renderControls() : this.renderSeekBar(true)
        );
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var _props5 = this.props,
            thumbnail = _props5.thumbnail,
            style = _props5.style;
        var isStarted = this.state.isStarted;

        if (!isStarted && thumbnail) {
          return this.renderThumbnail();
        } else if (!isStarted) {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.preloadingPlaceholder, this.getSizeStyles(), style],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 489
              }
            },
            this.renderStartButton()
          );
        }

        return this.renderVideo();
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            onLayout: this.onLayout,
            style: this.props.customStyles.wrapper,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 499
            }
          },
          this.renderContent()
        );
      }
    }]);
    return VideoPlayer;
  }(_react.Component);

  exports.default = VideoPlayer;
  VideoPlayer.propTypes = {
    video: _reactNativeVideo2.default.propTypes.source,
    thumbnail: _reactNative.Image.propTypes.source,
    videoWidth: _propTypes2.default.number,
    videoHeight: _propTypes2.default.number,
    duration: _propTypes2.default.number,
    autoplay: _propTypes2.default.bool,
    defaultMuted: _propTypes2.default.bool,
    muted: _propTypes2.default.bool,
    style: _reactNative.ViewPropTypes.style,
    controlsTimeout: _propTypes2.default.number,
    disableControlsAutoHide: _propTypes2.default.bool,
    disableFullscreen: _propTypes2.default.bool,
    loop: _propTypes2.default.bool,
    resizeMode: _reactNativeVideo2.default.propTypes.resizeMode,
    hideControlsOnStart: _propTypes2.default.bool,
    endWithThumbnail: _propTypes2.default.bool,
    disableSeek: _propTypes2.default.bool,
    pauseOnPress: _propTypes2.default.bool,
    fullScreenOnLongPress: _propTypes2.default.bool,
    customStyles: _propTypes2.default.shape({
      wrapper: _reactNative.ViewPropTypes.style,
      video: _reactNativeVideo2.default.propTypes.style,
      videoWrapper: _reactNative.ViewPropTypes.style,
      controls: _reactNative.ViewPropTypes.style,
      playControl: _reactNative.TouchableOpacity.propTypes.style,
      controlButton: _reactNative.TouchableOpacity.propTypes.style,
      controlIcon: _MaterialIcons2.default.propTypes.style,
      playIcon: _MaterialIcons2.default.propTypes.style,
      seekBar: _reactNative.ViewPropTypes.style,
      seekBarFullWidth: _reactNative.ViewPropTypes.style,
      seekBarProgress: _reactNative.ViewPropTypes.style,
      seekBarKnob: _reactNative.ViewPropTypes.style,
      seekBarKnobSeeking: _reactNative.ViewPropTypes.style,
      seekBarBackground: _reactNative.ViewPropTypes.style,
      thumbnail: _reactNative.Image.propTypes.style,
      playButton: _reactNative.TouchableOpacity.propTypes.style,
      playArrow: _MaterialIcons2.default.propTypes.style
    }),
    onEnd: _propTypes2.default.func,
    onProgress: _propTypes2.default.func,
    onLoad: _propTypes2.default.func,
    onStart: _propTypes2.default.func,
    onPlayPress: _propTypes2.default.func,
    onHideControls: _propTypes2.default.func,
    onShowControls: _propTypes2.default.func
  };
  VideoPlayer.defaultProps = {
    videoWidth: 1280,
    videoHeight: 720,
    autoplay: false,
    controlsTimeout: 2000,
    loop: false,
    resizeMode: 'contain',
    disableSeek: false,
    pauseOnPress: false,
    fullScreenOnLongPress: false,
    customStyles: {}
  };
},837,[109,128,12,838,887],"react-native-video-player/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _MaterialIcons = require(_dependencyMap[1], "./glyphmaps/MaterialIcons.json");

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var iconSet = (0, _createIconSet2.default)(_MaterialIcons2.default, 'Material Icons', 'MaterialIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},838,[839,886],"react-native-vector-icons/MaterialIcons.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-vector-icons/lib/create-icon-set.js";
  exports.default = createIconSet;

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "./react-native");

  var _iconButton = require(_dependencyMap[3], "./icon-button");

  var _iconButton2 = babelHelpers.interopRequireDefault(_iconButton);

  var _tabBarItemIos = require(_dependencyMap[4], "./tab-bar-item-ios");

  var _tabBarItemIos2 = babelHelpers.interopRequireDefault(_tabBarItemIos);

  var _toolbarAndroid = require(_dependencyMap[5], "./toolbar-android");

  var _toolbarAndroid2 = babelHelpers.interopRequireDefault(_toolbarAndroid);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = 'black';

  function createIconSet(glyphMap, fontFamily, fontFile) {
    var _class, _temp2;

    var fontReference = fontFamily;

    if (_reactNative.Platform.OS === 'android' && fontFile) {
      fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
    }

    if (_reactNative.Platform.OS === 'windows' && fontFile) {
      fontReference = "Assets/" + fontFile + "#" + fontFamily;
    }

    var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

    var Icon = (_temp2 = _class = function (_PureComponent) {
      babelHelpers.inherits(Icon, _PureComponent);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
          _this.root = ref;
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              name = _props.name,
              size = _props.size,
              color = _props.color,
              style = _props.style,
              props = babelHelpers.objectWithoutProperties(_props, ["name", "size", "color", "style"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides];
          props.ref = this.handleRef;
          return _react2.default.createElement(
            _reactNative.Text,
            babelHelpers.extends({}, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            }),
            glyph,
            this.props.children
          );
        }
      }]);
      return Icon;
    }(_react.PureComponent), _class.propTypes = {
      name: IconNamePropType,
      size: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      children: _propTypes2.default.node,
      style: _propTypes2.default.any
    }, _class.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    }, _temp2);
    var imageSourceCache = {};

    function ensureNativeModuleAvailable() {
      if (!NativeIconAPI) {
        if (_reactNative.Platform.OS === 'android') {
          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
        }

        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
      }
    }

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      ensureNativeModuleAvailable();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        ensureNativeModuleAvailable();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, babelHelpers.toConsumableArray(file.split('.')));
      }

      return Promise.resolve();
    }

    function hasIcon(name) {
      return Object.prototype.hasOwnProperty.call(glyphMap, name);
    }

    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    Icon.hasIcon = hasIcon;
    return Icon;
  }
},839,[109,128,840,841,883,885],"react-native-vector-icons/lib/create-icon-set.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = require(_dependencyMap[0], "react-native");

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},840,[12],"react-native-vector-icons/lib/react-native.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-vector-icons/lib/icon-button.js";
  exports.default = createIconButtonComponent;

  var _isString = require(_dependencyMap[0], "lodash/isString");

  var _isString2 = babelHelpers.interopRequireDefault(_isString);

  var _omit = require(_dependencyMap[1], "lodash/omit");

  var _omit2 = babelHelpers.interopRequireDefault(_omit);

  var _pick = require(_dependencyMap[2], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[3], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[4], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[5], "./react-native");

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconButton, _PureComponent);

      function IconButton() {
        babelHelpers.classCallCheck(this, IconButton);
        return babelHelpers.possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
      }

      babelHelpers.createClass(IconButton, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              style = _props.style,
              iconStyle = _props.iconStyle,
              children = _props.children,
              restProps = babelHelpers.objectWithoutProperties(_props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
          var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick2.default)(this.props, 'color');
          var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react2.default.createElement(
            _reactNative.TouchableHighlight,
            babelHelpers.extends({
              style: [styles.touchable, blockStyle]
            }, touchableProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              babelHelpers.extends({
                style: [styles.container, blockStyle, style]
              }, props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 84
                }
              }),
              _react2.default.createElement(Icon, babelHelpers.extends({}, iconProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              })),
              (0, _isString2.default)(children) ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, colorStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                children
              ) : children
            )
          );
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      borderRadius: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      size: _propTypes2.default.number,
      iconStyle: _propTypes2.default.any,
      style: _propTypes2.default.any,
      children: _propTypes2.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},841,[842,843,879,109,128,840],"react-native-vector-icons/lib/icon-button.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseGetTag = require(_dependencyMap[0], './_baseGetTag'),
        isArray = require(_dependencyMap[1], './isArray'),
        isObjectLike = require(_dependencyMap[2], './isObjectLike');

    var stringTag = '[object String]';

    function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    module.exports = isString;
},842,[339,436,347],"lodash/isString.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayMap = require(_dependencyMap[0], './_arrayMap'),
      baseClone = require(_dependencyMap[1], './_baseClone'),
      baseUnset = require(_dependencyMap[2], './_baseUnset'),
      castPath = require(_dependencyMap[3], './_castPath'),
      copyObject = require(_dependencyMap[4], './_copyObject'),
      customOmitClone = require(_dependencyMap[5], './_customOmitClone'),
      flatRest = require(_dependencyMap[6], './_flatRest'),
      getAllKeysIn = require(_dependencyMap[7], './_getAllKeysIn');

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  module.exports = omit;
},843,[428,844,872,522,848,876,877,858],"lodash/omit.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Stack = require(_dependencyMap[0], './_Stack'),
      arrayEach = require(_dependencyMap[1], './_arrayEach'),
      assignValue = require(_dependencyMap[2], './_assignValue'),
      baseAssign = require(_dependencyMap[3], './_baseAssign'),
      baseAssignIn = require(_dependencyMap[4], './_baseAssignIn'),
      cloneBuffer = require(_dependencyMap[5], './_cloneBuffer'),
      copyArray = require(_dependencyMap[6], './_copyArray'),
      copySymbols = require(_dependencyMap[7], './_copySymbols'),
      copySymbolsIn = require(_dependencyMap[8], './_copySymbolsIn'),
      getAllKeys = require(_dependencyMap[9], './_getAllKeys'),
      getAllKeysIn = require(_dependencyMap[10], './_getAllKeysIn'),
      getTag = require(_dependencyMap[11], './_getTag'),
      initCloneArray = require(_dependencyMap[12], './_initCloneArray'),
      initCloneByTag = require(_dependencyMap[13], './_initCloneByTag'),
      initCloneObject = require(_dependencyMap[14], './_initCloneObject'),
      isArray = require(_dependencyMap[15], './isArray'),
      isBuffer = require(_dependencyMap[16], './isBuffer'),
      isMap = require(_dependencyMap[17], './isMap'),
      isObject = require(_dependencyMap[18], './isObject'),
      isSet = require(_dependencyMap[19], './isSet'),
      keys = require(_dependencyMap[20], './keys');

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    }

    stack || (stack = new Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }

      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
},844,[493,845,846,847,849,853,854,855,856,507,858,512,859,860,866,436,481,868,396,870,478],"lodash/_baseClone.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  module.exports = arrayEach;
},845,[],"lodash/_arrayEach.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseAssignValue = require(_dependencyMap[0], './_baseAssignValue'),
      eq = require(_dependencyMap[1], './eq');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},846,[474,409],"lodash/_assignValue.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var copyObject = require(_dependencyMap[0], './_copyObject'),
      keys = require(_dependencyMap[1], './keys');

  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
},847,[848,478],"lodash/_baseAssign.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assignValue = require(_dependencyMap[0], './_assignValue'),
      baseAssignValue = require(_dependencyMap[1], './_baseAssignValue');

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},848,[846,474],"lodash/_copyObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var copyObject = require(_dependencyMap[0], './_copyObject'),
      keysIn = require(_dependencyMap[1], './keysIn');

  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  module.exports = baseAssignIn;
},849,[848,850],"lodash/_baseAssignIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayLikeKeys = require(_dependencyMap[0], './_arrayLikeKeys'),
      baseKeysIn = require(_dependencyMap[1], './_baseKeysIn'),
      isArrayLike = require(_dependencyMap[2], './isArrayLike');

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
},850,[479,851,447],"lodash/keysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isObject = require(_dependencyMap[0], './isObject'),
      isPrototype = require(_dependencyMap[1], './_isPrototype'),
      nativeKeysIn = require(_dependencyMap[2], './_nativeKeysIn');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeysIn;
},851,[396,488,852],"lodash/_baseKeysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = nativeKeysIn;
},852,[],"lodash/_nativeKeysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var root = require(_dependencyMap[0], './_root');

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }

    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
},853,[341],"lodash/_cloneBuffer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  module.exports = copyArray;
},854,[],"lodash/_copyArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var copyObject = require(_dependencyMap[0], './_copyObject'),
      getSymbols = require(_dependencyMap[1], './_getSymbols');

  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
},855,[848,509],"lodash/_copySymbols.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var copyObject = require(_dependencyMap[0], './_copyObject'),
      getSymbolsIn = require(_dependencyMap[1], './_getSymbolsIn');

  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  module.exports = copySymbolsIn;
},856,[848,857],"lodash/_copySymbolsIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var arrayPush = require(_dependencyMap[0], './_arrayPush'),
      getPrototype = require(_dependencyMap[1], './_getPrototype'),
      getSymbols = require(_dependencyMap[2], './_getSymbols'),
      stubArray = require(_dependencyMap[3], './stubArray');

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},857,[432,345,509,511],"lodash/_getSymbolsIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGetAllKeys = require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbolsIn = require(_dependencyMap[1], './_getSymbolsIn'),
      keysIn = require(_dependencyMap[2], './keysIn');

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},858,[508,857,850],"lodash/_getAllKeysIn.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  module.exports = initCloneArray;
},859,[],"lodash/_initCloneArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = require(_dependencyMap[0], './_cloneArrayBuffer'),
      cloneDataView = require(_dependencyMap[1], './_cloneDataView'),
      cloneRegExp = require(_dependencyMap[2], './_cloneRegExp'),
      cloneSymbol = require(_dependencyMap[3], './_cloneSymbol'),
      cloneTypedArray = require(_dependencyMap[4], './_cloneTypedArray');

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor();

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor();

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
},860,[861,862,863,864,865],"lodash/_initCloneByTag.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Uint8Array = require(_dependencyMap[0], './_Uint8Array');

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
},861,[504],"lodash/_cloneArrayBuffer.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = require(_dependencyMap[0], './_cloneArrayBuffer');

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
},862,[861],"lodash/_cloneDataView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var reFlags = /\w*$/;

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
},863,[],"lodash/_cloneRegExp.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol');

  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
},864,[340],"lodash/_cloneSymbol.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var cloneArrayBuffer = require(_dependencyMap[0], './_cloneArrayBuffer');

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
},865,[861],"lodash/_cloneTypedArray.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseCreate = require(_dependencyMap[0], './_baseCreate'),
        getPrototype = require(_dependencyMap[1], './_getPrototype'),
        isPrototype = require(_dependencyMap[2], './_isPrototype');

    function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    module.exports = initCloneObject;
},866,[867,345,488],"lodash/_initCloneObject.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isObject = require(_dependencyMap[0], './isObject');

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
},867,[396],"lodash/_baseCreate.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsMap = require(_dependencyMap[0], './_baseIsMap'),
      baseUnary = require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = require(_dependencyMap[2], './_nodeUtil');

  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  module.exports = isMap;
},868,[869,429,486],"lodash/isMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getTag = require(_dependencyMap[0], './_getTag'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  var mapTag = '[object Map]';

  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  module.exports = baseIsMap;
},869,[512,347],"lodash/_baseIsMap.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsSet = require(_dependencyMap[0], './_baseIsSet'),
      baseUnary = require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = require(_dependencyMap[2], './_nodeUtil');

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  module.exports = isSet;
},870,[871,429,486],"lodash/isSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var getTag = require(_dependencyMap[0], './_getTag'),
      isObjectLike = require(_dependencyMap[1], './isObjectLike');

  var setTag = '[object Set]';

  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  module.exports = baseIsSet;
},871,[512,347],"lodash/_baseIsSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var castPath = require(_dependencyMap[0], './_castPath'),
      last = require(_dependencyMap[1], './last'),
      parent = require(_dependencyMap[2], './_parent'),
      toKey = require(_dependencyMap[3], './_toKey');

  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  module.exports = baseUnset;
},872,[522,873,874,530],"lodash/_baseUnset.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;
},873,[],"lodash/last.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseGet = require(_dependencyMap[0], './_baseGet'),
      baseSlice = require(_dependencyMap[1], './_baseSlice');

  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  module.exports = parent;
},874,[521,875],"lodash/_parent.js");
__d(function (global, require, module, exports, _dependencyMap) {
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  module.exports = baseSlice;
},875,[],"lodash/_baseSlice.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var isPlainObject = require(_dependencyMap[0], './isPlainObject');

  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  module.exports = customOmitClone;
},876,[338],"lodash/_customOmitClone.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var flatten = require(_dependencyMap[0], './flatten'),
      overRest = require(_dependencyMap[1], './_overRest'),
      setToString = require(_dependencyMap[2], './_setToString');

  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  module.exports = flatRest;
},877,[878,439,441],"lodash/_flatRest.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseFlatten = require(_dependencyMap[0], './_baseFlatten');

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  module.exports = flatten;
},878,[431],"lodash/flatten.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var basePick = require(_dependencyMap[0], './_basePick'),
      flatRest = require(_dependencyMap[1], './_flatRest');

  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  module.exports = pick;
},879,[880,877],"lodash/pick.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var basePickBy = require(_dependencyMap[0], './_basePickBy'),
      hasIn = require(_dependencyMap[1], './hasIn');

  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  module.exports = basePick;
},880,[881,531],"lodash/_basePick.js");
__d(function (global, require, module, exports, _dependencyMap) {
    var baseGet = require(_dependencyMap[0], './_baseGet'),
        baseSet = require(_dependencyMap[1], './_baseSet'),
        castPath = require(_dependencyMap[2], './_castPath');

    function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value);
            }
        }

        return result;
    }

    module.exports = basePickBy;
},881,[521,882,522],"lodash/_basePickBy.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var assignValue = require(_dependencyMap[0], './_assignValue'),
      castPath = require(_dependencyMap[1], './_castPath'),
      isIndex = require(_dependencyMap[2], './_isIndex'),
      isObject = require(_dependencyMap[3], './isObject'),
      toKey = require(_dependencyMap[4], './_toKey');

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  module.exports = baseSet;
},882,[846,522,483,396,530],"lodash/_baseSet.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js";
  exports.default = createTabBarItemIOSComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        babelHelpers.classCallCheck(this, TabBarItemIOS);
        return babelHelpers.possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
      }

      babelHelpers.createClass(TabBarItemIOS, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var keys = Object.keys(TabBarItemIOS.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            this.updateIconSources(nextProps);
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this2 = this;

          if (props.iconName) {
            getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
              return _this2.setState({
                icon: icon
              });
            });
          }

          if (props.selectedIconName || props.selectedIconColor) {
            var selectedIconName = props.selectedIconName || props.iconName;
            var selectedIconColor = props.selectedIconColor || props.iconColor;
            getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
              return _this2.setState({
                selectedIcon: selectedIcon
              });
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.TabBarIOS.Item, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          }));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      selectedIconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},883,[884,879,109,128,840],"react-native-vector-icons/lib/tab-bar-item-ios.js");
__d(function (global, require, module, exports, _dependencyMap) {
  var baseIsEqual = require(_dependencyMap[0], './_baseIsEqual');

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},884,[499],"lodash/isEqual.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-vector-icons/lib/toolbar-android.js";
  exports.default = createToolbarAndroidComponent;

  var _isEqual = require(_dependencyMap[0], "lodash/isEqual");

  var _isEqual2 = babelHelpers.interopRequireDefault(_isEqual);

  var _pick = require(_dependencyMap[1], "lodash/pick");

  var _pick2 = babelHelpers.interopRequireDefault(_pick);

  var _react = require(_dependencyMap[2], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[4], "./react-native");

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      babelHelpers.inherits(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        babelHelpers.classCallCheck(this, IconToolbarAndroid);
        return babelHelpers.possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
      }

      babelHelpers.createClass(IconToolbarAndroid, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _this2 = this;

          var keys = Object.keys(IconToolbarAndroid.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            var stateToEvict = {};

            if (!nextProps.logoName) {
              stateToEvict.logo = undefined;
            }

            if (!nextProps.navIconName) {
              stateToEvict.navIcon = undefined;
            }

            if (!nextProps.overflowIconName) {
              stateToEvict.overflowIcon = undefined;
            }

            if (this.state && Object.keys(stateToEvict).length) {
              this.setState(stateToEvict, function () {
                return _this2.updateIconSources(nextProps);
              });
            } else {
              this.updateIconSources(nextProps);
            }
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this3 = this;

          var size = props.iconSize;
          var color = props.iconColor || props.titleColor;

          if (props.logoName) {
            getImageSource(props.logoName, size, color).then(function (logo) {
              return _this3.setState({
                logo: logo
              });
            });
          }

          if (props.navIconName) {
            getImageSource(props.navIconName, size, color).then(function (navIcon) {
              return _this3.setState({
                navIcon: navIcon
              });
            });
          }

          if (props.overflowIconName) {
            getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
              return _this3.setState({
                overflowIcon: overflowIcon
              });
            });
          }

          Promise.all((props.actions || []).map(function (action) {
            if (action.iconName) {
              return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
                return babelHelpers.extends({}, action, {
                  icon: icon
                });
              });
            }

            return Promise.resolve(action);
          })).then(function (actions) {
            return _this3.setState({
              actions: actions
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(_reactNative.ToolbarAndroid, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          }));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes2.default.number,
        iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes2.default.bool
      })),
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},885,[884,879,109,128,840],"react-native-vector-icons/lib/toolbar-android.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "3d-rotation": 59469,
    "ac-unit": 60219,
    "access-alarm": 57744,
    "access-alarms": 57745,
    "access-time": 57746,
    "accessibility": 59470,
    "accessible": 59668,
    "account-balance": 59471,
    "account-balance-wallet": 59472,
    "account-box": 59473,
    "account-circle": 59475,
    "adb": 58894,
    "add": 57669,
    "add-a-photo": 58425,
    "add-alarm": 57747,
    "add-alert": 57347,
    "add-box": 57670,
    "add-circle": 57671,
    "add-circle-outline": 57672,
    "add-location": 58727,
    "add-shopping-cart": 59476,
    "add-to-photos": 58269,
    "add-to-queue": 57436,
    "adjust": 58270,
    "airline-seat-flat": 58928,
    "airline-seat-flat-angled": 58929,
    "airline-seat-individual-suite": 58930,
    "airline-seat-legroom-extra": 58931,
    "airline-seat-legroom-normal": 58932,
    "airline-seat-legroom-reduced": 58933,
    "airline-seat-recline-extra": 58934,
    "airline-seat-recline-normal": 58935,
    "airplanemode-active": 57749,
    "airplanemode-inactive": 57748,
    "airplay": 57429,
    "airport-shuttle": 60220,
    "alarm": 59477,
    "alarm-add": 59478,
    "alarm-off": 59479,
    "alarm-on": 59480,
    "album": 57369,
    "all-inclusive": 60221,
    "all-out": 59659,
    "android": 59481,
    "announcement": 59482,
    "apps": 58819,
    "archive": 57673,
    "arrow-back": 58820,
    "arrow-downward": 58843,
    "arrow-drop-down": 58821,
    "arrow-drop-down-circle": 58822,
    "arrow-drop-up": 58823,
    "arrow-forward": 58824,
    "arrow-upward": 58840,
    "art-track": 57440,
    "aspect-ratio": 59483,
    "assessment": 59484,
    "assignment": 59485,
    "assignment-ind": 59486,
    "assignment-late": 59487,
    "assignment-return": 59488,
    "assignment-returned": 59489,
    "assignment-turned-in": 59490,
    "assistant": 58271,
    "assistant-photo": 58272,
    "attach-file": 57894,
    "attach-money": 57895,
    "attachment": 58044,
    "audiotrack": 58273,
    "autorenew": 59491,
    "av-timer": 57371,
    "backspace": 57674,
    "backup": 59492,
    "battery-alert": 57756,
    "battery-charging-full": 57763,
    "battery-full": 57764,
    "battery-std": 57765,
    "battery-unknown": 57766,
    "beach-access": 60222,
    "beenhere": 58669,
    "block": 57675,
    "bluetooth": 57767,
    "bluetooth-audio": 58895,
    "bluetooth-connected": 57768,
    "bluetooth-disabled": 57769,
    "bluetooth-searching": 57770,
    "blur-circular": 58274,
    "blur-linear": 58275,
    "blur-off": 58276,
    "blur-on": 58277,
    "book": 59493,
    "bookmark": 59494,
    "bookmark-border": 59495,
    "border-all": 57896,
    "border-bottom": 57897,
    "border-clear": 57898,
    "border-color": 57899,
    "border-horizontal": 57900,
    "border-inner": 57901,
    "border-left": 57902,
    "border-outer": 57903,
    "border-right": 57904,
    "border-style": 57905,
    "border-top": 57906,
    "border-vertical": 57907,
    "branding-watermark": 57451,
    "brightness-1": 58278,
    "brightness-2": 58279,
    "brightness-3": 58280,
    "brightness-4": 58281,
    "brightness-5": 58282,
    "brightness-6": 58283,
    "brightness-7": 58284,
    "brightness-auto": 57771,
    "brightness-high": 57772,
    "brightness-low": 57773,
    "brightness-medium": 57774,
    "broken-image": 58285,
    "brush": 58286,
    "bubble-chart": 59101,
    "bug-report": 59496,
    "build": 59497,
    "burst-mode": 58428,
    "business": 57519,
    "business-center": 60223,
    "cached": 59498,
    "cake": 59369,
    "call": 57520,
    "call-end": 57521,
    "call-made": 57522,
    "call-merge": 57523,
    "call-missed": 57524,
    "call-missed-outgoing": 57572,
    "call-received": 57525,
    "call-split": 57526,
    "call-to-action": 57452,
    "camera": 58287,
    "camera-alt": 58288,
    "camera-enhance": 59644,
    "camera-front": 58289,
    "camera-rear": 58290,
    "camera-roll": 58291,
    "cancel": 58825,
    "card-giftcard": 59638,
    "card-membership": 59639,
    "card-travel": 59640,
    "casino": 60224,
    "cast": 58119,
    "cast-connected": 58120,
    "center-focus-strong": 58292,
    "center-focus-weak": 58293,
    "change-history": 59499,
    "chat": 57527,
    "chat-bubble": 57546,
    "chat-bubble-outline": 57547,
    "check": 58826,
    "check-box": 59444,
    "check-box-outline-blank": 59445,
    "check-circle": 59500,
    "chevron-left": 58827,
    "chevron-right": 58828,
    "child-care": 60225,
    "child-friendly": 60226,
    "chrome-reader-mode": 59501,
    "class": 59502,
    "clear": 57676,
    "clear-all": 57528,
    "close": 58829,
    "closed-caption": 57372,
    "cloud": 58045,
    "cloud-circle": 58046,
    "cloud-done": 58047,
    "cloud-download": 58048,
    "cloud-off": 58049,
    "cloud-queue": 58050,
    "cloud-upload": 58051,
    "code": 59503,
    "collections": 58294,
    "collections-bookmark": 58417,
    "color-lens": 58295,
    "colorize": 58296,
    "comment": 57529,
    "compare": 58297,
    "compare-arrows": 59669,
    "computer": 58122,
    "confirmation-number": 58936,
    "contact-mail": 57552,
    "contact-phone": 57551,
    "contacts": 57530,
    "content-copy": 57677,
    "content-cut": 57678,
    "content-paste": 57679,
    "control-point": 58298,
    "control-point-duplicate": 58299,
    "copyright": 59660,
    "create": 57680,
    "create-new-folder": 58060,
    "credit-card": 59504,
    "crop": 58302,
    "crop-16-9": 58300,
    "crop-3-2": 58301,
    "crop-5-4": 58303,
    "crop-7-5": 58304,
    "crop-din": 58305,
    "crop-free": 58306,
    "crop-landscape": 58307,
    "crop-original": 58308,
    "crop-portrait": 58309,
    "crop-rotate": 58423,
    "crop-square": 58310,
    "dashboard": 59505,
    "data-usage": 57775,
    "date-range": 59670,
    "dehaze": 58311,
    "delete": 59506,
    "delete-forever": 59691,
    "delete-sweep": 57708,
    "description": 59507,
    "desktop-mac": 58123,
    "desktop-windows": 58124,
    "details": 58312,
    "developer-board": 58125,
    "developer-mode": 57776,
    "device-hub": 58165,
    "devices": 57777,
    "devices-other": 58167,
    "dialer-sip": 57531,
    "dialpad": 57532,
    "directions": 58670,
    "directions-bike": 58671,
    "directions-boat": 58674,
    "directions-bus": 58672,
    "directions-car": 58673,
    "directions-railway": 58676,
    "directions-run": 58726,
    "directions-subway": 58675,
    "directions-transit": 58677,
    "directions-walk": 58678,
    "disc-full": 58896,
    "dns": 59509,
    "do-not-disturb": 58898,
    "do-not-disturb-alt": 58897,
    "do-not-disturb-off": 58947,
    "do-not-disturb-on": 58948,
    "dock": 58126,
    "domain": 59374,
    "done": 59510,
    "done-all": 59511,
    "donut-large": 59671,
    "donut-small": 59672,
    "drafts": 57681,
    "drag-handle": 57949,
    "drive-eta": 58899,
    "dvr": 57778,
    "edit": 58313,
    "edit-location": 58728,
    "eject": 59643,
    "email": 57534,
    "enhanced-encryption": 58943,
    "equalizer": 57373,
    "error": 57344,
    "error-outline": 57345,
    "euro-symbol": 59686,
    "ev-station": 58733,
    "event": 59512,
    "event-available": 58900,
    "event-busy": 58901,
    "event-note": 58902,
    "event-seat": 59651,
    "exit-to-app": 59513,
    "expand-less": 58830,
    "expand-more": 58831,
    "explicit": 57374,
    "explore": 59514,
    "exposure": 58314,
    "exposure-neg-1": 58315,
    "exposure-neg-2": 58316,
    "exposure-plus-1": 58317,
    "exposure-plus-2": 58318,
    "exposure-zero": 58319,
    "extension": 59515,
    "face": 59516,
    "fast-forward": 57375,
    "fast-rewind": 57376,
    "favorite": 59517,
    "favorite-border": 59518,
    "featured-play-list": 57453,
    "featured-video": 57454,
    "feedback": 59519,
    "fiber-dvr": 57437,
    "fiber-manual-record": 57441,
    "fiber-new": 57438,
    "fiber-pin": 57450,
    "fiber-smart-record": 57442,
    "file-download": 58052,
    "file-upload": 58054,
    "filter": 58323,
    "filter-1": 58320,
    "filter-2": 58321,
    "filter-3": 58322,
    "filter-4": 58324,
    "filter-5": 58325,
    "filter-6": 58326,
    "filter-7": 58327,
    "filter-8": 58328,
    "filter-9": 58329,
    "filter-9-plus": 58330,
    "filter-b-and-w": 58331,
    "filter-center-focus": 58332,
    "filter-drama": 58333,
    "filter-frames": 58334,
    "filter-hdr": 58335,
    "filter-list": 57682,
    "filter-none": 58336,
    "filter-tilt-shift": 58338,
    "filter-vintage": 58339,
    "find-in-page": 59520,
    "find-replace": 59521,
    "fingerprint": 59661,
    "first-page": 58844,
    "fitness-center": 60227,
    "flag": 57683,
    "flare": 58340,
    "flash-auto": 58341,
    "flash-off": 58342,
    "flash-on": 58343,
    "flight": 58681,
    "flight-land": 59652,
    "flight-takeoff": 59653,
    "flip": 58344,
    "flip-to-back": 59522,
    "flip-to-front": 59523,
    "folder": 58055,
    "folder-open": 58056,
    "folder-shared": 58057,
    "folder-special": 58903,
    "font-download": 57703,
    "format-align-center": 57908,
    "format-align-justify": 57909,
    "format-align-left": 57910,
    "format-align-right": 57911,
    "format-bold": 57912,
    "format-clear": 57913,
    "format-color-fill": 57914,
    "format-color-reset": 57915,
    "format-color-text": 57916,
    "format-indent-decrease": 57917,
    "format-indent-increase": 57918,
    "format-italic": 57919,
    "format-line-spacing": 57920,
    "format-list-bulleted": 57921,
    "format-list-numbered": 57922,
    "format-paint": 57923,
    "format-quote": 57924,
    "format-shapes": 57950,
    "format-size": 57925,
    "format-strikethrough": 57926,
    "format-textdirection-l-to-r": 57927,
    "format-textdirection-r-to-l": 57928,
    "format-underlined": 57929,
    "forum": 57535,
    "forward": 57684,
    "forward-10": 57430,
    "forward-30": 57431,
    "forward-5": 57432,
    "free-breakfast": 60228,
    "fullscreen": 58832,
    "fullscreen-exit": 58833,
    "functions": 57930,
    "g-translate": 59687,
    "gamepad": 58127,
    "games": 57377,
    "gavel": 59662,
    "gesture": 57685,
    "get-app": 59524,
    "gif": 59656,
    "golf-course": 60229,
    "gps-fixed": 57779,
    "gps-not-fixed": 57780,
    "gps-off": 57781,
    "grade": 59525,
    "gradient": 58345,
    "grain": 58346,
    "graphic-eq": 57784,
    "grid-off": 58347,
    "grid-on": 58348,
    "group": 59375,
    "group-add": 59376,
    "group-work": 59526,
    "hd": 57426,
    "hdr-off": 58349,
    "hdr-on": 58350,
    "hdr-strong": 58353,
    "hdr-weak": 58354,
    "headset": 58128,
    "headset-mic": 58129,
    "healing": 58355,
    "hearing": 57379,
    "help": 59527,
    "help-outline": 59645,
    "high-quality": 57380,
    "highlight": 57951,
    "highlight-off": 59528,
    "history": 59529,
    "home": 59530,
    "hot-tub": 60230,
    "hotel": 58682,
    "hourglass-empty": 59531,
    "hourglass-full": 59532,
    "http": 59650,
    "https": 59533,
    "image": 58356,
    "image-aspect-ratio": 58357,
    "import-contacts": 57568,
    "import-export": 57539,
    "important-devices": 59666,
    "inbox": 57686,
    "indeterminate-check-box": 59657,
    "info": 59534,
    "info-outline": 59535,
    "input": 59536,
    "insert-chart": 57931,
    "insert-comment": 57932,
    "insert-drive-file": 57933,
    "insert-emoticon": 57934,
    "insert-invitation": 57935,
    "insert-link": 57936,
    "insert-photo": 57937,
    "invert-colors": 59537,
    "invert-colors-off": 57540,
    "iso": 58358,
    "keyboard": 58130,
    "keyboard-arrow-down": 58131,
    "keyboard-arrow-left": 58132,
    "keyboard-arrow-right": 58133,
    "keyboard-arrow-up": 58134,
    "keyboard-backspace": 58135,
    "keyboard-capslock": 58136,
    "keyboard-hide": 58138,
    "keyboard-return": 58139,
    "keyboard-tab": 58140,
    "keyboard-voice": 58141,
    "kitchen": 60231,
    "label": 59538,
    "label-outline": 59539,
    "landscape": 58359,
    "language": 59540,
    "laptop": 58142,
    "laptop-chromebook": 58143,
    "laptop-mac": 58144,
    "laptop-windows": 58145,
    "last-page": 58845,
    "launch": 59541,
    "layers": 58683,
    "layers-clear": 58684,
    "leak-add": 58360,
    "leak-remove": 58361,
    "lens": 58362,
    "library-add": 57390,
    "library-books": 57391,
    "library-music": 57392,
    "lightbulb-outline": 59663,
    "line-style": 59673,
    "line-weight": 59674,
    "linear-scale": 57952,
    "link": 57687,
    "linked-camera": 58424,
    "list": 59542,
    "live-help": 57542,
    "live-tv": 58937,
    "local-activity": 58687,
    "local-airport": 58685,
    "local-atm": 58686,
    "local-bar": 58688,
    "local-cafe": 58689,
    "local-car-wash": 58690,
    "local-convenience-store": 58691,
    "local-dining": 58710,
    "local-drink": 58692,
    "local-florist": 58693,
    "local-gas-station": 58694,
    "local-grocery-store": 58695,
    "local-hospital": 58696,
    "local-hotel": 58697,
    "local-laundry-service": 58698,
    "local-library": 58699,
    "local-mall": 58700,
    "local-movies": 58701,
    "local-offer": 58702,
    "local-parking": 58703,
    "local-pharmacy": 58704,
    "local-phone": 58705,
    "local-pizza": 58706,
    "local-play": 58707,
    "local-post-office": 58708,
    "local-printshop": 58709,
    "local-see": 58711,
    "local-shipping": 58712,
    "local-taxi": 58713,
    "location-city": 59377,
    "location-disabled": 57782,
    "location-off": 57543,
    "location-on": 57544,
    "location-searching": 57783,
    "lock": 59543,
    "lock-open": 59544,
    "lock-outline": 59545,
    "looks": 58364,
    "looks-3": 58363,
    "looks-4": 58365,
    "looks-5": 58366,
    "looks-6": 58367,
    "looks-one": 58368,
    "looks-two": 58369,
    "loop": 57384,
    "loupe": 58370,
    "low-priority": 57709,
    "loyalty": 59546,
    "mail": 57688,
    "mail-outline": 57569,
    "map": 58715,
    "markunread": 57689,
    "markunread-mailbox": 59547,
    "memory": 58146,
    "menu": 58834,
    "merge-type": 57938,
    "message": 57545,
    "mic": 57385,
    "mic-none": 57386,
    "mic-off": 57387,
    "mms": 58904,
    "mode-comment": 57939,
    "mode-edit": 57940,
    "monetization-on": 57955,
    "money-off": 57948,
    "monochrome-photos": 58371,
    "mood": 59378,
    "mood-bad": 59379,
    "more": 58905,
    "more-horiz": 58835,
    "more-vert": 58836,
    "motorcycle": 59675,
    "mouse": 58147,
    "move-to-inbox": 57704,
    "movie": 57388,
    "movie-creation": 58372,
    "movie-filter": 58426,
    "multiline-chart": 59103,
    "music-note": 58373,
    "music-video": 57443,
    "my-location": 58716,
    "nature": 58374,
    "nature-people": 58375,
    "navigate-before": 58376,
    "navigate-next": 58377,
    "navigation": 58717,
    "near-me": 58729,
    "network-cell": 57785,
    "network-check": 58944,
    "network-locked": 58906,
    "network-wifi": 57786,
    "new-releases": 57393,
    "next-week": 57706,
    "nfc": 57787,
    "no-encryption": 58945,
    "no-sim": 57548,
    "not-interested": 57395,
    "note": 57455,
    "note-add": 59548,
    "notifications": 59380,
    "notifications-active": 59383,
    "notifications-none": 59381,
    "notifications-off": 59382,
    "notifications-paused": 59384,
    "offline-pin": 59658,
    "ondemand-video": 58938,
    "opacity": 59676,
    "open-in-browser": 59549,
    "open-in-new": 59550,
    "open-with": 59551,
    "pages": 59385,
    "pageview": 59552,
    "palette": 58378,
    "pan-tool": 59685,
    "panorama": 58379,
    "panorama-fish-eye": 58380,
    "panorama-horizontal": 58381,
    "panorama-vertical": 58382,
    "panorama-wide-angle": 58383,
    "party-mode": 59386,
    "pause": 57396,
    "pause-circle-filled": 57397,
    "pause-circle-outline": 57398,
    "payment": 59553,
    "people": 59387,
    "people-outline": 59388,
    "perm-camera-mic": 59554,
    "perm-contact-calendar": 59555,
    "perm-data-setting": 59556,
    "perm-device-information": 59557,
    "perm-identity": 59558,
    "perm-media": 59559,
    "perm-phone-msg": 59560,
    "perm-scan-wifi": 59561,
    "person": 59389,
    "person-add": 59390,
    "person-outline": 59391,
    "person-pin": 58714,
    "person-pin-circle": 58730,
    "personal-video": 58939,
    "pets": 59677,
    "phone": 57549,
    "phone-android": 58148,
    "phone-bluetooth-speaker": 58907,
    "phone-forwarded": 58908,
    "phone-in-talk": 58909,
    "phone-iphone": 58149,
    "phone-locked": 58910,
    "phone-missed": 58911,
    "phone-paused": 58912,
    "phonelink": 58150,
    "phonelink-erase": 57563,
    "phonelink-lock": 57564,
    "phonelink-off": 58151,
    "phonelink-ring": 57565,
    "phonelink-setup": 57566,
    "photo": 58384,
    "photo-album": 58385,
    "photo-camera": 58386,
    "photo-filter": 58427,
    "photo-library": 58387,
    "photo-size-select-actual": 58418,
    "photo-size-select-large": 58419,
    "photo-size-select-small": 58420,
    "picture-as-pdf": 58389,
    "picture-in-picture": 59562,
    "picture-in-picture-alt": 59665,
    "pie-chart": 59076,
    "pie-chart-outlined": 59077,
    "pin-drop": 58718,
    "place": 58719,
    "play-arrow": 57399,
    "play-circle-filled": 57400,
    "play-circle-outline": 57401,
    "play-for-work": 59654,
    "playlist-add": 57403,
    "playlist-add-check": 57445,
    "playlist-play": 57439,
    "plus-one": 59392,
    "poll": 59393,
    "polymer": 59563,
    "pool": 60232,
    "portable-wifi-off": 57550,
    "portrait": 58390,
    "power": 58940,
    "power-input": 58166,
    "power-settings-new": 59564,
    "pregnant-woman": 59678,
    "present-to-all": 57567,
    "print": 59565,
    "priority-high": 58949,
    "public": 59403,
    "publish": 57941,
    "query-builder": 59566,
    "question-answer": 59567,
    "queue": 57404,
    "queue-music": 57405,
    "queue-play-next": 57446,
    "radio": 57406,
    "radio-button-checked": 59447,
    "radio-button-unchecked": 59446,
    "rate-review": 58720,
    "receipt": 59568,
    "recent-actors": 57407,
    "record-voice-over": 59679,
    "redeem": 59569,
    "redo": 57690,
    "refresh": 58837,
    "remove": 57691,
    "remove-circle": 57692,
    "remove-circle-outline": 57693,
    "remove-from-queue": 57447,
    "remove-red-eye": 58391,
    "remove-shopping-cart": 59688,
    "reorder": 59646,
    "repeat": 57408,
    "repeat-one": 57409,
    "replay": 57410,
    "replay-10": 57433,
    "replay-30": 57434,
    "replay-5": 57435,
    "reply": 57694,
    "reply-all": 57695,
    "report": 57696,
    "report-problem": 59570,
    "restaurant": 58732,
    "restaurant-menu": 58721,
    "restore": 59571,
    "restore-page": 59689,
    "ring-volume": 57553,
    "room": 59572,
    "room-service": 60233,
    "rotate-90-degrees-ccw": 58392,
    "rotate-left": 58393,
    "rotate-right": 58394,
    "rounded-corner": 59680,
    "router": 58152,
    "rowing": 59681,
    "rss-feed": 57573,
    "rv-hookup": 58946,
    "satellite": 58722,
    "save": 57697,
    "scanner": 58153,
    "schedule": 59573,
    "school": 59404,
    "screen-lock-landscape": 57790,
    "screen-lock-portrait": 57791,
    "screen-lock-rotation": 57792,
    "screen-rotation": 57793,
    "screen-share": 57570,
    "sd-card": 58915,
    "sd-storage": 57794,
    "search": 59574,
    "security": 58154,
    "select-all": 57698,
    "send": 57699,
    "sentiment-dissatisfied": 59409,
    "sentiment-neutral": 59410,
    "sentiment-satisfied": 59411,
    "sentiment-very-dissatisfied": 59412,
    "sentiment-very-satisfied": 59413,
    "settings": 59576,
    "settings-applications": 59577,
    "settings-backup-restore": 59578,
    "settings-bluetooth": 59579,
    "settings-brightness": 59581,
    "settings-cell": 59580,
    "settings-ethernet": 59582,
    "settings-input-antenna": 59583,
    "settings-input-component": 59584,
    "settings-input-composite": 59585,
    "settings-input-hdmi": 59586,
    "settings-input-svideo": 59587,
    "settings-overscan": 59588,
    "settings-phone": 59589,
    "settings-power": 59590,
    "settings-remote": 59591,
    "settings-system-daydream": 57795,
    "settings-voice": 59592,
    "share": 59405,
    "shop": 59593,
    "shop-two": 59594,
    "shopping-basket": 59595,
    "shopping-cart": 59596,
    "short-text": 57953,
    "show-chart": 59105,
    "shuffle": 57411,
    "signal-cellular-4-bar": 57800,
    "signal-cellular-connected-no-internet-4-bar": 57805,
    "signal-cellular-no-sim": 57806,
    "signal-cellular-null": 57807,
    "signal-cellular-off": 57808,
    "signal-wifi-4-bar": 57816,
    "signal-wifi-4-bar-lock": 57817,
    "signal-wifi-off": 57818,
    "sim-card": 58155,
    "sim-card-alert": 58916,
    "skip-next": 57412,
    "skip-previous": 57413,
    "slideshow": 58395,
    "slow-motion-video": 57448,
    "smartphone": 58156,
    "smoke-free": 60234,
    "smoking-rooms": 60235,
    "sms": 58917,
    "sms-failed": 58918,
    "snooze": 57414,
    "sort": 57700,
    "sort-by-alpha": 57427,
    "spa": 60236,
    "space-bar": 57942,
    "speaker": 58157,
    "speaker-group": 58158,
    "speaker-notes": 59597,
    "speaker-notes-off": 59690,
    "speaker-phone": 57554,
    "spellcheck": 59598,
    "star": 59448,
    "star-border": 59450,
    "star-half": 59449,
    "stars": 59600,
    "stay-current-landscape": 57555,
    "stay-current-portrait": 57556,
    "stay-primary-landscape": 57557,
    "stay-primary-portrait": 57558,
    "stop": 57415,
    "stop-screen-share": 57571,
    "storage": 57819,
    "store": 59601,
    "store-mall-directory": 58723,
    "straighten": 58396,
    "streetview": 58734,
    "strikethrough-s": 57943,
    "style": 58397,
    "subdirectory-arrow-left": 58841,
    "subdirectory-arrow-right": 58842,
    "subject": 59602,
    "subscriptions": 57444,
    "subtitles": 57416,
    "subway": 58735,
    "supervisor-account": 59603,
    "surround-sound": 57417,
    "swap-calls": 57559,
    "swap-horiz": 59604,
    "swap-vert": 59605,
    "swap-vertical-circle": 59606,
    "switch-camera": 58398,
    "switch-video": 58399,
    "sync": 58919,
    "sync-disabled": 58920,
    "sync-problem": 58921,
    "system-update": 58922,
    "system-update-alt": 59607,
    "tab": 59608,
    "tab-unselected": 59609,
    "tablet": 58159,
    "tablet-android": 58160,
    "tablet-mac": 58161,
    "tag-faces": 58400,
    "tap-and-play": 58923,
    "terrain": 58724,
    "text-fields": 57954,
    "text-format": 57701,
    "textsms": 57560,
    "texture": 58401,
    "theaters": 59610,
    "thumb-down": 59611,
    "thumb-up": 59612,
    "thumbs-up-down": 59613,
    "time-to-leave": 58924,
    "timelapse": 58402,
    "timeline": 59682,
    "timer": 58405,
    "timer-10": 58403,
    "timer-3": 58404,
    "timer-off": 58406,
    "title": 57956,
    "toc": 59614,
    "today": 59615,
    "toll": 59616,
    "tonality": 58407,
    "touch-app": 59667,
    "toys": 58162,
    "track-changes": 59617,
    "traffic": 58725,
    "train": 58736,
    "tram": 58737,
    "transfer-within-a-station": 58738,
    "transform": 58408,
    "translate": 59618,
    "trending-down": 59619,
    "trending-flat": 59620,
    "trending-up": 59621,
    "tune": 58409,
    "turned-in": 59622,
    "turned-in-not": 59623,
    "tv": 58163,
    "unarchive": 57705,
    "undo": 57702,
    "unfold-less": 58838,
    "unfold-more": 58839,
    "update": 59683,
    "usb": 57824,
    "verified-user": 59624,
    "vertical-align-bottom": 57944,
    "vertical-align-center": 57945,
    "vertical-align-top": 57946,
    "vibration": 58925,
    "video-call": 57456,
    "video-label": 57457,
    "video-library": 57418,
    "videocam": 57419,
    "videocam-off": 57420,
    "videogame-asset": 58168,
    "view-agenda": 59625,
    "view-array": 59626,
    "view-carousel": 59627,
    "view-column": 59628,
    "view-comfy": 58410,
    "view-compact": 58411,
    "view-day": 59629,
    "view-headline": 59630,
    "view-list": 59631,
    "view-module": 59632,
    "view-quilt": 59633,
    "view-stream": 59634,
    "view-week": 59635,
    "vignette": 58421,
    "visibility": 59636,
    "visibility-off": 59637,
    "voice-chat": 58926,
    "voicemail": 57561,
    "volume-down": 57421,
    "volume-mute": 57422,
    "volume-off": 57423,
    "volume-up": 57424,
    "vpn-key": 57562,
    "vpn-lock": 58927,
    "wallpaper": 57788,
    "warning": 57346,
    "watch": 58164,
    "watch-later": 59684,
    "wb-auto": 58412,
    "wb-cloudy": 58413,
    "wb-incandescent": 58414,
    "wb-iridescent": 58422,
    "wb-sunny": 58416,
    "wc": 58941,
    "web": 57425,
    "web-asset": 57449,
    "weekend": 57707,
    "whatshot": 59406,
    "widgets": 57789,
    "wifi": 58942,
    "wifi-lock": 57825,
    "wifi-tethering": 57826,
    "work": 59641,
    "wrap-text": 57947,
    "youtube-searched-for": 59642,
    "zoom-in": 59647,
    "zoom-out": 59648,
    "zoom-out-map": 58731
  };
},886,[],"react-native-vector-icons/glyphmaps/MaterialIcons.json");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-video/Video.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _resolveAssetSource = require(_dependencyMap[3], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

  var _VideoResizeMode = require(_dependencyMap[4], "./VideoResizeMode.js");

  var _VideoResizeMode2 = babelHelpers.interopRequireDefault(_VideoResizeMode);

  var styles = _reactNative.StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });

  var Video = function (_Component) {
    babelHelpers.inherits(Video, _Component);

    function Video(props) {
      babelHelpers.classCallCheck(this, Video);

      var _this = babelHelpers.possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this, props));

      _this.seek = function (time) {
        _this.setNativeProps({
          seek: time
        });
      };

      _this.presentFullscreenPlayer = function () {
        _this.setNativeProps({
          fullscreen: true
        });
      };

      _this.dismissFullscreenPlayer = function () {
        _this.setNativeProps({
          fullscreen: false
        });
      };

      _this._assignRoot = function (component) {
        _this._root = component;
      };

      _this._onLoadStart = function (event) {
        if (_this.props.onLoadStart) {
          _this.props.onLoadStart(event.nativeEvent);
        }
      };

      _this._onLoad = function (event) {
        if (_this.props.onLoad) {
          _this.props.onLoad(event.nativeEvent);
        }
      };

      _this._onError = function (event) {
        if (_this.props.onError) {
          _this.props.onError(event.nativeEvent);
        }
      };

      _this._onProgress = function (event) {
        if (_this.props.onProgress) {
          _this.props.onProgress(event.nativeEvent);
        }
      };

      _this._onSeek = function (event) {
        if (_this.state.showPoster) {
          _this.setState({
            showPoster: false
          });
        }

        if (_this.props.onSeek) {
          _this.props.onSeek(event.nativeEvent);
        }
      };

      _this._onEnd = function (event) {
        if (_this.props.onEnd) {
          _this.props.onEnd(event.nativeEvent);
        }
      };

      _this._onTimedMetadata = function (event) {
        if (_this.props.onTimedMetadata) {
          _this.props.onTimedMetadata(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerWillPresent = function (event) {
        if (_this.props.onFullscreenPlayerWillPresent) {
          _this.props.onFullscreenPlayerWillPresent(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerDidPresent = function (event) {
        if (_this.props.onFullscreenPlayerDidPresent) {
          _this.props.onFullscreenPlayerDidPresent(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerWillDismiss = function (event) {
        if (_this.props.onFullscreenPlayerWillDismiss) {
          _this.props.onFullscreenPlayerWillDismiss(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerDidDismiss = function (event) {
        if (_this.props.onFullscreenPlayerDidDismiss) {
          _this.props.onFullscreenPlayerDidDismiss(event.nativeEvent);
        }
      };

      _this._onReadyForDisplay = function (event) {
        if (_this.props.onReadyForDisplay) {
          _this.props.onReadyForDisplay(event.nativeEvent);
        }
      };

      _this._onPlaybackStalled = function (event) {
        if (_this.props.onPlaybackStalled) {
          _this.props.onPlaybackStalled(event.nativeEvent);
        }
      };

      _this._onPlaybackResume = function (event) {
        if (_this.props.onPlaybackResume) {
          _this.props.onPlaybackResume(event.nativeEvent);
        }
      };

      _this._onPlaybackRateChange = function (event) {
        if (_this.state.showPoster && event.nativeEvent.playbackRate !== 0) {
          _this.setState({
            showPoster: false
          });
        }

        if (_this.props.onPlaybackRateChange) {
          _this.props.onPlaybackRateChange(event.nativeEvent);
        }
      };

      _this._onAudioBecomingNoisy = function () {
        if (_this.props.onAudioBecomingNoisy) {
          _this.props.onAudioBecomingNoisy();
        }
      };

      _this._onAudioFocusChanged = function (event) {
        if (_this.props.onAudioFocusChanged) {
          _this.props.onAudioFocusChanged(event.nativeEvent);
        }
      };

      _this._onBuffer = function (event) {
        if (_this.props.onBuffer) {
          _this.props.onBuffer(event.nativeEvent);
        }
      };

      _this.state = {
        showPoster: true
      };
      return _this;
    }

    babelHelpers.createClass(Video, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var resizeMode = this.props.resizeMode;
        var source = (0, _resolveAssetSource2.default)(this.props.source) || {};
        var uri = source.uri || '';

        if (uri && uri.match(/^\//)) {
          uri = "file://" + uri;
        }

        var isNetwork = !!(uri && uri.match(/^https?:/));
        var isAsset = !!(uri && uri.match(/^(assets-library|file|content|ms-appx|ms-appdata):/));
        var nativeResizeMode = void 0;

        if (resizeMode === _VideoResizeMode2.default.stretch) {
          nativeResizeMode = _reactNative.NativeModules.UIManager.RCTVideo.Constants.ScaleToFill;
        } else if (resizeMode === _VideoResizeMode2.default.contain) {
          nativeResizeMode = _reactNative.NativeModules.UIManager.RCTVideo.Constants.ScaleAspectFit;
        } else if (resizeMode === _VideoResizeMode2.default.cover) {
          nativeResizeMode = _reactNative.NativeModules.UIManager.RCTVideo.Constants.ScaleAspectFill;
        } else {
          nativeResizeMode = _reactNative.NativeModules.UIManager.RCTVideo.Constants.ScaleNone;
        }

        var nativeProps = babelHelpers.extends({}, this.props);
        babelHelpers.extends(nativeProps, {
          style: [styles.base, nativeProps.style],
          resizeMode: nativeResizeMode,
          src: {
            uri: uri,
            isNetwork: isNetwork,
            isAsset: isAsset,
            type: source.type || '',
            mainVer: source.mainVer || 0,
            patchVer: source.patchVer || 0
          },
          onVideoLoadStart: this._onLoadStart,
          onVideoLoad: this._onLoad,
          onVideoError: this._onError,
          onVideoProgress: this._onProgress,
          onVideoSeek: this._onSeek,
          onVideoEnd: this._onEnd,
          onVideoBuffer: this._onBuffer,
          onTimedMetadata: this._onTimedMetadata,
          onVideoFullscreenPlayerWillPresent: this._onFullscreenPlayerWillPresent,
          onVideoFullscreenPlayerDidPresent: this._onFullscreenPlayerDidPresent,
          onVideoFullscreenPlayerWillDismiss: this._onFullscreenPlayerWillDismiss,
          onVideoFullscreenPlayerDidDismiss: this._onFullscreenPlayerDidDismiss,
          onReadyForDisplay: this._onReadyForDisplay,
          onPlaybackStalled: this._onPlaybackStalled,
          onPlaybackResume: this._onPlaybackResume,
          onPlaybackRateChange: this._onPlaybackRateChange,
          onAudioFocusChanged: this._onAudioFocusChanged,
          onAudioBecomingNoisy: this._onAudioBecomingNoisy
        });

        if (this.props.poster && this.state.showPoster) {
          var posterStyle = {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            resizeMode: 'contain'
          };
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: nativeProps.style,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 225
              }
            },
            _react2.default.createElement(RCTVideo, babelHelpers.extends({
              ref: this._assignRoot
            }, nativeProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 226
              }
            })),
            _react2.default.createElement(_reactNative.Image, {
              style: posterStyle,
              source: {
                uri: this.props.poster
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 230
              }
            })
          );
        }

        return _react2.default.createElement(RCTVideo, babelHelpers.extends({
          ref: this._assignRoot
        }, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 239
          }
        }));
      }
    }]);
    return Video;
  }(_react.Component);

  exports.default = Video;
  Video.propTypes = babelHelpers.extends({
    src: _propTypes2.default.object,
    seek: _propTypes2.default.number,
    fullscreen: _propTypes2.default.bool,
    onVideoLoadStart: _propTypes2.default.func,
    onVideoLoad: _propTypes2.default.func,
    onVideoBuffer: _propTypes2.default.func,
    onVideoError: _propTypes2.default.func,
    onVideoProgress: _propTypes2.default.func,
    onVideoSeek: _propTypes2.default.func,
    onVideoEnd: _propTypes2.default.func,
    onTimedMetadata: _propTypes2.default.func,
    onVideoFullscreenPlayerWillPresent: _propTypes2.default.func,
    onVideoFullscreenPlayerDidPresent: _propTypes2.default.func,
    onVideoFullscreenPlayerWillDismiss: _propTypes2.default.func,
    onVideoFullscreenPlayerDidDismiss: _propTypes2.default.func,
    source: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string
    }), _propTypes2.default.number]),
    resizeMode: _propTypes2.default.string,
    poster: _propTypes2.default.string,
    repeat: _propTypes2.default.bool,
    paused: _propTypes2.default.bool,
    muted: _propTypes2.default.bool,
    volume: _propTypes2.default.number,
    rate: _propTypes2.default.number,
    playInBackground: _propTypes2.default.bool,
    playWhenInactive: _propTypes2.default.bool,
    ignoreSilentSwitch: _propTypes2.default.oneOf(['ignore', 'obey']),
    disableFocus: _propTypes2.default.bool,
    controls: _propTypes2.default.bool,
    currentTime: _propTypes2.default.number,
    progressUpdateInterval: _propTypes2.default.number,
    onLoadStart: _propTypes2.default.func,
    onLoad: _propTypes2.default.func,
    onBuffer: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    onProgress: _propTypes2.default.func,
    onSeek: _propTypes2.default.func,
    onEnd: _propTypes2.default.func,
    onFullscreenPlayerWillPresent: _propTypes2.default.func,
    onFullscreenPlayerDidPresent: _propTypes2.default.func,
    onFullscreenPlayerWillDismiss: _propTypes2.default.func,
    onFullscreenPlayerDidDismiss: _propTypes2.default.func,
    onReadyForDisplay: _propTypes2.default.func,
    onPlaybackStalled: _propTypes2.default.func,
    onPlaybackResume: _propTypes2.default.func,
    onPlaybackRateChange: _propTypes2.default.func,
    onAudioFocusChanged: _propTypes2.default.func,
    onAudioBecomingNoisy: _propTypes2.default.func,
    scaleX: _propTypes2.default.number,
    scaleY: _propTypes2.default.number,
    translateX: _propTypes2.default.number,
    translateY: _propTypes2.default.number,
    rotation: _propTypes2.default.number
  }, _reactNative.View.propTypes);
  var RCTVideo = (0, _reactNative.requireNativeComponent)('RCTVideo', Video, {
    nativeOnly: {
      src: true,
      seek: true,
      fullscreen: true
    }
  });
},887,[109,128,12,161,888],"react-native-video/Video.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _keymirror = require(_dependencyMap[0], "keymirror");

  var _keymirror2 = babelHelpers.interopRequireDefault(_keymirror);

  exports.default = (0, _keymirror2.default)({
    contain: null,
    cover: null,
    stretch: null
  });
},888,[889],"react-native-video/VideoResizeMode.js");
__d(function (global, require, module, exports, _dependencyMap) {
  "use strict";

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;

    if (!(obj instanceof Object && !Array.isArray(obj))) {
      throw new Error('keyMirror(...): Argument must be an object.');
    }

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},889,[],"keymirror/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/WebView/NewsWebView.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _colors = require(_dependencyMap[2], "@assets/colors.js");

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _reactNativeLoadingSpinnerOverlay = require(_dependencyMap[3], "react-native-loading-spinner-overlay");

  var _reactNativeLoadingSpinnerOverlay2 = babelHelpers.interopRequireDefault(_reactNativeLoadingSpinnerOverlay);

  var _reactNativeFirebase = require(_dependencyMap[4], "react-native-firebase");

  var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

  var NewsWebView = function (_Component) {
    babelHelpers.inherits(NewsWebView, _Component);

    function NewsWebView(props) {
      babelHelpers.classCallCheck(this, NewsWebView);

      var _this = babelHelpers.possibleConstructorReturn(this, (NewsWebView.__proto__ || Object.getPrototypeOf(NewsWebView)).call(this));

      _this.state = {
        loading: true
      };
      return _this;
    }

    babelHelpers.createClass(NewsWebView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.mounted = true;
        setInterval(function () {
          if (_this2.mounted) {
            _this2.setState({
              loading: false
            });
          }
        }, 4000);
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.loading !== nextState.loading || this.props.html !== nextProps.html;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
      }
    }, {
      key: "onShare",
      value: function onShare(url) {
        _reactNativeFirebase2.default.analytics().logEvent('click_share_article', {
          url: url
        });

        _reactNative.Share.share({
          message: 'Found this intresteing article on the 99Bitcoins App ',
          url: url,
          title: 'Wow, did you see that?'
        }, {
          dialogTitle: url
        });
      }
    }, {
      key: "getBaseURL",
      value: function getBaseURL(url) {
        var pathArray = url.split('/');
        var protocol = pathArray[0];
        var host = pathArray[2];
        var baseUrl = protocol + '//' + host;
        return baseUrl;
      }
    }, {
      key: "renderLoadingView",
      value: function renderLoadingView() {
        return _react2.default.createElement(_reactNative.ActivityIndicator, {
          color: "rgb(33, 33, 33)",
          size: "small",
          style: {
            padding: 20,
            overflow: 'hidden'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        console.log('RENDER WEB VIEW');
        console.log(this.props.url);
        var renderTime = Date.now();
        var baseUrl = this.getBaseURL(this.props.url);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: {
              flex: 1
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 67
            }
          },
          _react2.default.createElement(_reactNativeLoadingSpinnerOverlay2.default, {
            visible: this.state.loading,
            cancelable: true,
            color: _colors2.default.gray200,
            overlayColor: _colors2.default.gray100T,
            animation: 'fade',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          }),
          _react2.default.createElement(_reactNative.WebView, {
            source: {
              html: this.props.html,
              baseUrl: baseUrl
            },
            onLoad: function onLoad() {
              console.log('WebView On load event', "Loading time : " + (Date.now() - renderTime));

              if (_this3.mounted) {
                _this3.setState({
                  loading: false
                });
              }
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 75
            }
          })
        );
      }
    }]);
    return NewsWebView;
  }(_react.Component);

  exports.default = NewsWebView;
},890,[109,12,671,891,741],"NNCoins/src/components/Screens/WebView/NewsWebView.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-loading-spinner-overlay/src/index.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: 'transparent',
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    },
    background: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center'
    },
    textContainer: {
      flex: 1,
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center',
      position: 'absolute'
    },
    textContent: {
      top: 80,
      height: 50,
      fontSize: 20,
      fontWeight: 'bold'
    }
  });

  var ANIMATION = ['none', 'slide', 'fade'];
  var SIZES = ['small', 'normal', 'large'];
  var Spinner = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Spinner, _React$Component);

    function Spinner(props) {
      babelHelpers.classCallCheck(this, Spinner);

      var _this = babelHelpers.possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).call(this, props));

      _this.state = {
        visible: _this.props.visible,
        textContent: _this.props.textContent
      };
      return _this;
    }

    babelHelpers.createClass(Spinner, [{
      key: "close",
      value: function close() {
        this.setState({
          visible: false
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var visible = nextProps.visible,
            textContent = nextProps.textContent;
        this.setState({
          visible: visible,
          textContent: textContent
        });
      }
    }, {
      key: "_handleOnRequestClose",
      value: function _handleOnRequestClose() {
        if (this.props.cancelable) {
          this.close();
        }
      }
    }, {
      key: "_renderDefaultContent",
      value: function _renderDefaultContent() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.background,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 112
            }
          },
          _react2.default.createElement(_reactNative.ActivityIndicator, {
            color: this.props.color,
            size: this.props.size,
            style: {
              flex: 1
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 113
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.textContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 118
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: [styles.textContent, this.props.textStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 119
                }
              },
              this.state.textContent
            )
          )
        );
      }
    }, {
      key: "_renderSpinner",
      value: function _renderSpinner() {
        var _this2 = this;

        var visible = this.state.visible;
        if (!visible) return null;

        var spinner = _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, {
              backgroundColor: this.props.overlayColor
            }],
            key: "spinner_" + Date.now(),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 131
            }
          },
          this.props.children ? this.props.children : this._renderDefaultContent()
        );

        return _react2.default.createElement(
          _reactNative.Modal,
          {
            animationType: this.props.animation,
            onRequestClose: function onRequestClose() {
              return _this2._handleOnRequestClose();
            },
            supportedOrientations: ['landscape', 'portrait'],
            transparent: true,
            visible: visible,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 140
            }
          },
          spinner
        );
      }
    }, {
      key: "render",
      value: function render() {
        return this._renderSpinner();
      }
    }]);
    return Spinner;
  }(_react2.default.Component), _class.propTypes = {
    visible: _propTypes2.default.bool,
    cancelable: _propTypes2.default.bool,
    textContent: _propTypes2.default.string,
    animation: _propTypes2.default.oneOf(ANIMATION),
    color: _propTypes2.default.string,
    size: _propTypes2.default.oneOf(SIZES),
    overlayColor: _propTypes2.default.string
  }, _class.defaultProps = {
    visible: false,
    cancelable: false,
    textContent: '',
    animation: 'none',
    color: 'white',
    size: 'large',
    overlayColor: 'rgba(0, 0, 0, 0.25)'
  }, _temp);
  exports.default = Spinner;
},891,[109,128,12],"react-native-loading-spinner-overlay/src/index.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/AMA/ChatForm.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = require(_dependencyMap[1], "react-native");

    var _colors = require(_dependencyMap[2], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var _images = require(_dependencyMap[3], "@assets/images.js");

    var _images2 = babelHelpers.interopRequireDefault(_images);

    var _common = require(_dependencyMap[4], "../../common");

    var _ChatActions = require(_dependencyMap[5], "../../../Actions/ChatActions");

    var _reactRedux = require(_dependencyMap[6], "react-redux");

    var ChatForm = function (_Component) {
        babelHelpers.inherits(ChatForm, _Component);

        function ChatForm() {
            babelHelpers.classCallCheck(this, ChatForm);
            return babelHelpers.possibleConstructorReturn(this, (ChatForm.__proto__ || Object.getPrototypeOf(ChatForm)).apply(this, arguments));
        }

        babelHelpers.createClass(ChatForm, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                console.log('componentWillMount in ChatForm');
                this.props.checkIfNameWasSet();
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                console.log('componentDidMount in ChatForm');
            }
        }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
                return this.props.chatState.modalVisible !== nextProps.chatState.modalVisible || this.props.chatState.userNickName !== nextProps.chatState.userNickName;
            }
        }, {
            key: "onStartChat",
            value: function onStartChat() {
                if (this.props.chatState.userNickName.length > 0) {
                    this.props.openChat(this.props.chatState.userNickName);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                console.log('RENDER CHAT FORM');
                var chatState = this.props.chatState;
                console.log(chatState.userNickName);
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.containerStyle,
                        pointerEvents: "box-none",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 35
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Modal,
                        {
                            animationType: 'fade',
                            transparent: true,
                            visible: chatState.modalVisible,
                            onRequestClose: function onRequestClose() {
                                _this2.props.closeChatForm();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 36
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableWithoutFeedback,
                            {
                                onPress: function onPress() {
                                    return _this2.props.closeChatForm();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 44
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.modalStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 46
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: styles.cardStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 47
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: styles.closeButtonContainerStyle,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 48
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.TouchableOpacity,
                                            {
                                                onPress: function onPress() {
                                                    return _this2.props.closeChatForm();
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 49
                                                }
                                            },
                                            _react2.default.createElement(_reactNative.Image, {
                                                source: _images2.default.closeIcon,
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 50
                                                }
                                            })
                                        )
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: styles.backgroundContainer,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 53
                                            }
                                        },
                                        _react2.default.createElement(_reactNative.Image, {
                                            source: _images2.default.imgCoins,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 54
                                            }
                                        }),
                                        _react2.default.createElement(_reactNative.Image, {
                                            source: _images2.default.imgHands,
                                            style: styles.handsImageStyle,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 55
                                            }
                                        })
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: styles.textContainerStyle,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 57
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: styles.titleStyle,
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 58
                                                }
                                            },
                                            "Meet Your Personal Bitcoin Mentor!"
                                        ),
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: styles.decriptionStyle,
                                                allowFontScaling: true,
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 59
                                                }
                                            },
                                            "Ask us anything and one of our team members will answer shortly."
                                        )
                                    ),
                                    _react2.default.createElement(_common.Input, {
                                        placeholder: "Enter a nickname to begin..",
                                        onChangeText: function onChangeText(text) {
                                            _this2.props.setNickName(text);
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 63
                                        }
                                    }),
                                    _react2.default.createElement(
                                        _reactNative.TouchableOpacity,
                                        {
                                            onPress: function onPress() {
                                                _this2.onStartChat();
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 69
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.View,
                                            {
                                                style: [styles.buttonContainer, this.props.chatState.userNickName.length > 0 && styles.buttonContainerEnabled],
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 72
                                                }
                                            },
                                            _react2.default.createElement(
                                                _reactNative.Text,
                                                {
                                                    style: [styles.buttonText, this.props.chatState.userNickName.length > 0 && styles.buttonTextEnabled],
                                                    __source: {
                                                        fileName: _jsxFileName,
                                                        lineNumber: 73
                                                    }
                                                },
                                                "START CHAT"
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return ChatForm;
    }(_react.Component);

    var windowWidth = _reactNative.Dimensions.get('window').width;

    var windowHeight = _reactNative.Dimensions.get('window').height;

    var styles = _reactNative.StyleSheet.create({
        containerStyle: {
            position: 'absolute',
            top: 0,
            left: 0,
            height: windowHeight,
            width: windowWidth,
            flexDirection: 'column',
            flex: 1,
            alignItems: 'flex-end',
            justifyContent: 'flex-end'
        },
        chatButtonContainerStyle: {
            alignSelf: 'flex-end',
            top: 100
        },
        modalStyle: {
            backgroundColor: 'rgba(33,33,33,0.5)',
            position: 'absolute',
            flex: 1,
            justifyContent: 'flex-start',
            height: windowHeight,
            width: windowWidth
        },
        cardStyle: {
            backgroundColor: 'white',
            height: windowWidth - 32,
            marginLeft: 16,
            marginRight: 16,
            alignItems: 'center',
            justifyContent: 'space-between',
            borderRadius: 4,
            marginTop: 56
        },
        closeButtonContainerStyle: {
            marginTop: 16,
            width: windowWidth - 64,
            alignItems: 'flex-end'
        },
        handsImageStyle: {
            position: 'absolute'
        },
        textContainerStyle: {
            marginLeft: 16,
            marginRight: 16
        },
        titleStyle: {
            textAlign: 'center',
            color: _colors2.default.gray900,
            fontWeight: 'bold',
            fontSize: 16
        },
        backgroundContainer: {
            width: windowWidth - 32,
            height: 80.4,
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column'
        },
        decriptionStyle: {
            textAlign: 'center',
            color: _colors2.default.gray700,
            fontSize: 14,
            marginTop: 8
        },
        buttonContainer: {
            width: 188,
            height: 48,
            borderColor: _colors2.default.themeRed,
            borderWidth: 1,
            borderRadius: 4,
            justifyContent: 'center',
            marginBottom: 16
        },
        buttonContainerEnabled: {
            backgroundColor: _colors2.default.themeRed
        },
        buttonText: {
            color: _colors2.default.themeRed,
            fontSize: 16,
            fontWeight: 'bold',
            textAlign: 'center'
        },
        buttonTextEnabled: {
            color: 'white'
        }
    });

    function mapStateToProps(state) {
        return {
            chatState: state.chatState
        };
    }

    exports.default = (0, _reactRedux.connect)(mapStateToProps, {
        checkIfNameWasSet: _ChatActions.checkIfNameWasSet,
        closeChatForm: _ChatActions.closeChatForm,
        setNickName: _ChatActions.setNickName,
        openChat: _ChatActions.openChat
    })(ChatForm);
},892,[109,12,671,659,828,893,555],"NNCoins/src/components/Screens/AMA/ChatForm.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.receiveData = exports.checkIfNameWasSet = exports.saveNickNameSet = exports.setNickName = exports.closeChatForm = exports.openChat = undefined;
    exports.chatButtonTapped = chatButtonTapped;
    exports.getUnreadCount = getUnreadCount;

    var _reactNativeFirebase = require(_dependencyMap[0], "react-native-firebase");

    var _reactNativeFirebase2 = babelHelpers.interopRequireDefault(_reactNativeFirebase);

    var _ActionTypes = require(_dependencyMap[1], "./../Utils/ActionTypes");

    var _reactNative = require(_dependencyMap[2], "react-native");

    var Smooch = require(_dependencyMap[3], 'react-native-smooch');

    function chatButtonTapped() {
        return function (dispatch, getState) {
            _reactNativeFirebase2.default.analytics().logEvent('click_chat_button', {});

            if (getState().chatState.shouldShowModal) {
                _reactNativeFirebase2.default.analytics().logEvent('page_chat_form', {});

                dispatch({
                    type: _ActionTypes.OPEN_CHAT_FORM
                });
                return;
            }

            dispatch(openChat());
        };
    }

    var openChat = exports.openChat = function openChat(nickName) {
        return function (dispatch) {
            if (nickName) {
                console.log('Nickname:', nickName);
                Smooch.setFirstName(nickName);
                dispatch(saveNickNameSet());
                setTimeout(function () {
                    return Smooch.show();
                }, 1000);
            } else {
                Smooch.show();
            }

            _reactNativeFirebase2.default.analytics().logEvent('page_chat', {});

            dispatch({
                type: _ActionTypes.OPEN_CHAT_WINDOW
            });
        };
    };

    var closeChatForm = exports.closeChatForm = function closeChatForm() {
        return function (dispatch) {
            _reactNativeFirebase2.default.analytics().logEvent('click_dismiss_chat_form', {});

            dispatch({
                type: _ActionTypes.CLOSE_CHAT_FORM
            });
        };
    };

    var setNickName = exports.setNickName = function setNickName(nickName) {
        return function (dispatch) {
            _reactNativeFirebase2.default.analytics().logEvent('enter_nickname', {
                nickname: nickName
            });

            dispatch({
                type: _ActionTypes.SET_NICK_NAME,
                payload: nickName
            });
        };
    };

    var saveNickNameSet = exports.saveNickNameSet = function saveNickNameSet() {
        return function (dispatch) {
            dispatch({
                type: _ActionTypes.SAVE_NICNAME_SET
            });
            return _reactNative.AsyncStorage.setItem('@didSetNickName', 'true').then(function () {
                _reactNativeFirebase2.default.analytics().logEvent('nickname_saved', {});

                dispatch({
                    type: _ActionTypes.SAVE_NICNAME_SET_SUCCESS
                });
            });
        };
    };

    var checkIfNameWasSet = exports.checkIfNameWasSet = function checkIfNameWasSet() {
        return function (dispatch) {
            dispatch({
                type: _ActionTypes.CHECK_IF_NAME_SET
            });
            return _reactNative.AsyncStorage.getItem('@didSetNickName').then(function (value) {
                dispatch(receiveData(value));
            });
        };
    };

    var receiveData = exports.receiveData = function receiveData(value) {
        return {
            type: _ActionTypes.CHECK_IF_NAME_SET_SUCCESS,
            payload: value || ''
        };
    };

    function getUnreadCount() {
        return function (dispatch) {
            return Smooch.getUnreadCount().then(function (res) {
                dispatch({
                    type: _ActionTypes.GET_UNREAD_COUNT_SUCCESS,
                    payload: res
                });
            });
        };
    }
},893,[741,548,12,894],"NNCoins/src/Actions/ChatActions.js");
__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var SmoochManager = _reactNative.NativeModules.SmoochManager;
  module.exports = babelHelpers.extends({}, SmoochManager);
},894,[109,12],"react-native-smooch/lib/SmoochClient.js");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/AMA/ChatButton.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNativeActionButton = require(_dependencyMap[1], "react-native-action-button");

    var _reactNativeActionButton2 = babelHelpers.interopRequireDefault(_reactNativeActionButton);

    var _FontAwesome = require(_dependencyMap[2], "react-native-vector-icons/FontAwesome");

    var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

    var _ChatActions = require(_dependencyMap[3], "../../../Actions/ChatActions");

    var _reactRedux = require(_dependencyMap[4], "react-redux");

    var _colors = require(_dependencyMap[5], "@assets/colors.js");

    var _colors2 = babelHelpers.interopRequireDefault(_colors);

    var chatIcon = _react2.default.createElement(_FontAwesome2.default, {
        name: "comments",
        size: 30,
        color: "white",
        __source: {
            fileName: _jsxFileName,
            lineNumber: 8
        }
    });

    var ChatButton = function (_Component) {
        babelHelpers.inherits(ChatButton, _Component);

        function ChatButton() {
            babelHelpers.classCallCheck(this, ChatButton);
            return babelHelpers.possibleConstructorReturn(this, (ChatButton.__proto__ || Object.getPrototypeOf(ChatButton)).apply(this, arguments));
        }

        babelHelpers.createClass(ChatButton, [{
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate() {
                return false;
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                console.log('RENDER CHAT BUTTON');
                return _react2.default.createElement(_reactNativeActionButton2.default, {
                    buttonColor: _colors2.default.themeRed,
                    onPress: function onPress() {
                        _this2.props.chatButtonTapped();
                    },
                    icon: chatIcon,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 19
                    }
                });
            }
        }]);
        return ChatButton;
    }(_react.Component);

    exports.default = (0, _reactRedux.connect)(null, {
        chatButtonTapped: _ChatActions.chatButtonTapped
    })(ChatButton);
},895,[109,896,899,893,555,671],"NNCoins/src/components/Screens/AMA/ChatButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-action-button/ActionButton.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _ActionButtonItem = require(_dependencyMap[3], "./ActionButtonItem");

  var _ActionButtonItem2 = babelHelpers.interopRequireDefault(_ActionButtonItem);

  var _shared = require(_dependencyMap[4], "./shared");

  var ActionButton = function (_Component) {
    babelHelpers.inherits(ActionButton, _Component);

    function ActionButton(props) {
      babelHelpers.classCallCheck(this, ActionButton);

      var _this = babelHelpers.possibleConstructorReturn(this, (ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).call(this, props));

      _this.state = {
        resetToken: props.resetToken,
        active: props.active
      };
      _this.anim = new _reactNative.Animated.Value(props.active ? 1 : 0);
      _this.timeout = null;
      return _this;
    }

    babelHelpers.createClass(ActionButton, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this.timeout);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        if (nextProps.resetToken !== this.state.resetToken) {
          if (nextProps.active === false && this.state.active === true) {
            if (this.props.onReset) this.props.onReset();

            _reactNative.Animated.spring(this.anim, {
              toValue: 0
            }).start();

            setTimeout(function () {
              return _this2.setState({
                active: false,
                resetToken: nextProps.resetToken
              });
            }, 250);
            return;
          }

          if (nextProps.active === true && this.state.active === false) {
            _reactNative.Animated.spring(this.anim, {
              toValue: 1
            }).start();

            this.setState({
              active: true,
              resetToken: nextProps.resetToken
            });
            return;
          }

          this.setState({
            resetToken: nextProps.resetToken,
            active: nextProps.active
          });
        }
      }
    }, {
      key: "getOrientation",
      value: function getOrientation() {
        return {
          alignItems: _shared.alignItemsMap[this.props.position]
        };
      }
    }, {
      key: "getOffsetXY",
      value: function getOffsetXY() {
        return {
          paddingVertical: this.props.offsetY
        };
      }
    }, {
      key: "getOverlayStyles",
      value: function getOverlayStyles() {
        return [styles.overlay, {
          elevation: this.props.elevation,
          zIndex: this.props.zIndex,
          justifyContent: this.props.verticalOrientation === "up" ? "flex-end" : "flex-start"
        }];
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "box-none",
            style: [this.getOverlayStyles(), this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 97
            }
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [this.getOverlayStyles(), {
                backgroundColor: this.props.bgColor,
                opacity: this.anim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, this.props.bgOpacity]
                })
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 101
              }
            },
            this.props.backdrop
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              pointerEvents: "box-none",
              style: [this.getOverlayStyles(), this.getOrientation(), this.getOffsetXY()],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 116
              }
            },
            this.state.active && !this.props.backgroundTappable && this._renderTappableBackground(),
            this.props.verticalOrientation === "up" && this.props.children && this._renderActions(),
            this._renderMainButton(),
            this.props.verticalOrientation === "down" && this.props.children && this._renderActions()
          )
        );
      }
    }, {
      key: "_renderMainButton",
      value: function _renderMainButton() {
        var _this3 = this;

        var animatedViewStyle = {
          transform: [{
            scale: this.anim.interpolate({
              inputRange: [0, 1],
              outputRange: [1, this.props.outRangeScale]
            })
          }, {
            rotate: this.anim.interpolate({
              inputRange: [0, 1],
              outputRange: ["0deg", this.props.degrees + "deg"]
            })
          }]
        };
        var wrapperStyle = {
          backgroundColor: this.anim.interpolate({
            inputRange: [0, 1],
            outputRange: [this.props.buttonColor, this.props.btnOutRange || this.props.buttonColor]
          }),
          width: this.props.size,
          height: this.props.size,
          borderRadius: this.props.size / 2
        };
        var buttonStyle = {
          width: this.props.size,
          height: this.props.size,
          borderRadius: this.props.size / 2,
          alignItems: "center",
          justifyContent: "center"
        };
        var Touchable = (0, _shared.getTouchableComponent)(this.props.useNativeFeedback);
        var parentStyle = _shared.isAndroid && this.props.fixNativeFeedbackRadius ? {
          right: this.props.offsetX,
          zIndex: this.props.zIndex,
          borderRadius: this.props.size / 2,
          width: this.props.size
        } : {
          marginHorizontal: this.props.offsetX,
          zIndex: this.props.zIndex
        };
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [parentStyle, !this.props.hideShadow && _shared.shadowStyle, !this.props.hideShadow && this.props.shadowStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 191
            }
          },
          _react2.default.createElement(
            Touchable,
            {
              testID: this.props.testID,
              background: (0, _shared.touchableBackground)(this.props.nativeFeedbackRippleColor, this.props.fixNativeFeedbackRadius),
              activeOpacity: this.props.activeOpacity,
              onLongPress: this.props.onLongPress,
              onPress: function onPress() {
                _this3.props.onPress();

                if (_this3.props.children) _this3.animateButton();
              },
              onPressIn: this.props.onPressIn,
              onPressOut: this.props.onPressOut,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 197
              }
            },
            _react2.default.createElement(
              _reactNative.Animated.View,
              {
                style: wrapperStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 212
                }
              },
              _react2.default.createElement(
                _reactNative.Animated.View,
                {
                  style: [buttonStyle, animatedViewStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 215
                  }
                },
                this._renderButtonIcon()
              )
            )
          )
        );
      }
    }, {
      key: "_renderButtonIcon",
      value: function _renderButtonIcon() {
        var _props = this.props,
            icon = _props.icon,
            renderIcon = _props.renderIcon,
            btnOutRangeTxt = _props.btnOutRangeTxt,
            buttonTextStyle = _props.buttonTextStyle,
            buttonText = _props.buttonText;
        if (renderIcon) return renderIcon(this.state.active);

        if (icon) {
          console.warn('react-native-action-button: The `icon` prop is deprecated! Use `renderIcon` instead.');
          return icon;
        }

        var textColor = buttonTextStyle.color || "rgba(255,255,255,1)";
        return _react2.default.createElement(
          _reactNative.Animated.Text,
          {
            style: [styles.btnText, buttonTextStyle, {
              color: this.anim.interpolate({
                inputRange: [0, 1],
                outputRange: [textColor, btnOutRangeTxt || textColor]
              })
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 235
            }
          },
          buttonText
        );
      }
    }, {
      key: "_renderActions",
      value: function _renderActions() {
        var _this4 = this;

        var _props2 = this.props,
            children = _props2.children,
            verticalOrientation = _props2.verticalOrientation;
        if (!this.state.active) return null;
        var actionButtons = !Array.isArray(children) ? [children] : children;
        var actionStyle = {
          flex: 1,
          alignSelf: "stretch",
          justifyContent: verticalOrientation === "up" ? "flex-end" : "flex-start",
          paddingTop: this.props.verticalOrientation === "down" ? this.props.spacing : 0,
          zIndex: this.props.zIndex
        };
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: actionStyle,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 271
            }
          },
          actionButtons.map(function (ActionButton, idx) {
            return _react2.default.createElement(_ActionButtonItem2.default, babelHelpers.extends({
              key: idx,
              anim: _this4.anim
            }, _this4.props, ActionButton.props, {
              parentSize: _this4.props.size,
              btnColor: _this4.props.btnOutRange,
              onPress: function onPress() {
                if (_this4.props.autoInactive) {
                  _this4.timeout = setTimeout(_this4.reset.bind(_this4), 200);
                }

                ActionButton.props.onPress();
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273
              }
            }));
          })
        );
      }
    }, {
      key: "_renderTappableBackground",
      value: function _renderTappableBackground() {
        return _react2.default.createElement(_reactNative.TouchableOpacity, {
          activeOpacity: 1,
          style: this.getOverlayStyles(),
          onPress: this.reset.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 294
          }
        });
      }
    }, {
      key: "animateButton",
      value: function animateButton() {
        var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (this.state.active) return this.reset();

        if (animate) {
          _reactNative.Animated.spring(this.anim, {
            toValue: 1
          }).start();
        } else {
          this.anim.setValue(1);
        }

        this.setState({
          active: true,
          resetToken: this.state.resetToken
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        var _this5 = this;

        var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (this.props.onReset) this.props.onReset();

        if (animate) {
          _reactNative.Animated.spring(this.anim, {
            toValue: 0
          }).start();
        } else {
          this.anim.setValue(0);
        }

        setTimeout(function () {
          return _this5.setState({
            active: false,
            resetToken: _this5.state.resetToken
          });
        }, 250);
      }
    }]);
    return ActionButton;
  }(_react.Component);

  exports.default = ActionButton;
  ActionButton.Item = _ActionButtonItem2.default;
  ActionButton.propTypes = {
    resetToken: _propTypes2.default.any,
    active: _propTypes2.default.bool,
    position: _propTypes2.default.string,
    elevation: _propTypes2.default.number,
    zIndex: _propTypes2.default.number,
    hideShadow: _propTypes2.default.bool,
    shadowStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.number]),
    renderIcon: _propTypes2.default.func,
    bgColor: _propTypes2.default.string,
    bgOpacity: _propTypes2.default.number,
    buttonColor: _propTypes2.default.string,
    buttonTextStyle: _reactNative.Text.propTypes.style,
    buttonText: _propTypes2.default.string,
    offsetX: _propTypes2.default.number,
    offsetY: _propTypes2.default.number,
    spacing: _propTypes2.default.number,
    size: _propTypes2.default.number,
    autoInactive: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onPressIn: _propTypes2.default.func,
    onPressOut: _propTypes2.default.func,
    backdrop: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),
    degrees: _propTypes2.default.number,
    verticalOrientation: _propTypes2.default.oneOf(["up", "down"]),
    backgroundTappable: _propTypes2.default.bool,
    activeOpacity: _propTypes2.default.number,
    useNativeFeedback: _propTypes2.default.bool,
    fixNativeFeedbackRadius: _propTypes2.default.bool,
    nativeFeedbackRippleColor: _propTypes2.default.string,
    testID: _propTypes2.default.string
  };
  ActionButton.defaultProps = {
    resetToken: null,
    active: false,
    bgColor: "transparent",
    bgOpacity: 1,
    buttonColor: "rgba(0,0,0,1)",
    buttonTextStyle: {},
    buttonText: "+",
    spacing: 20,
    outRangeScale: 1,
    autoInactive: true,
    onPress: function onPress() {},
    onPressIn: function onPressIn() {},
    onPressOn: function onPressOn() {},
    backdrop: false,
    degrees: 45,
    position: "right",
    offsetX: 30,
    offsetY: 30,
    size: 56,
    verticalOrientation: "up",
    backgroundTappable: false,
    useNativeFeedback: true,
    activeOpacity: _shared.DEFAULT_ACTIVE_OPACITY,
    fixNativeFeedbackRadius: false,
    nativeFeedbackRippleColor: "rgba(255,255,255,0.75)",
    testID: undefined
  };

  var styles = _reactNative.StyleSheet.create({
    overlay: {
      position: "absolute",
      bottom: 0,
      left: 0,
      right: 0,
      top: 0,
      backgroundColor: "transparent"
    },
    btnText: {
      marginTop: -4,
      fontSize: 24,
      backgroundColor: "transparent"
    }
  });
},896,[109,128,12,897,898],"react-native-action-button/ActionButton.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/node_modules/react-native-action-button/ActionButtonItem.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _shared = require(_dependencyMap[3], "./shared");

  var _Dimensions$get = _reactNative.Dimensions.get("window"),
      WIDTH = _Dimensions$get.width;

  var SHADOW_SPACE = 10;
  var TEXT_HEIGHT = 22;
  var TextTouchable = _shared.isAndroid ? _reactNative.TouchableNativeFeedback : _reactNative.TouchableWithoutFeedback;

  var ActionButtonItem = function (_Component) {
    babelHelpers.inherits(ActionButtonItem, _Component);

    function ActionButtonItem() {
      babelHelpers.classCallCheck(this, ActionButtonItem);
      return babelHelpers.possibleConstructorReturn(this, (ActionButtonItem.__proto__ || Object.getPrototypeOf(ActionButtonItem)).apply(this, arguments));
    }

    babelHelpers.createClass(ActionButtonItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            size = _props.size,
            position = _props.position,
            verticalOrientation = _props.verticalOrientation,
            hideShadow = _props.hideShadow,
            spacing = _props.spacing;
        if (!this.props.active) return null;
        var animatedViewStyle = {
          marginBottom: -SHADOW_SPACE,
          alignItems: _shared.alignItemsMap[position],
          opacity: this.props.anim,
          transform: [{
            translateY: this.props.anim.interpolate({
              inputRange: [0, 1],
              outputRange: [verticalOrientation === "down" ? -40 : 40, 0]
            })
          }]
        };
        var buttonStyle = {
          justifyContent: "center",
          alignItems: "center",
          width: size,
          height: size,
          borderRadius: size / 2,
          backgroundColor: this.props.buttonColor || this.props.btnColor
        };
        if (position !== "center") buttonStyle[position] = (this.props.parentSize - size) / 2;
        var Touchable = (0, _shared.getTouchableComponent)(this.props.useNativeFeedback);
        var parentStyle = _shared.isAndroid && this.props.fixNativeFeedbackRadius ? {
          height: size,
          marginBottom: spacing,
          right: this.props.offsetX,
          borderRadius: this.props.size / 2
        } : {
          paddingHorizontal: this.props.offsetX,
          height: size + SHADOW_SPACE + spacing
        };
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: "box-none",
            style: [animatedViewStyle, parentStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 105
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 109
              }
            },
            _react2.default.createElement(
              Touchable,
              {
                testID: this.props.testID,
                background: (0, _shared.touchableBackground)(this.props.nativeFeedbackRippleColor, this.props.fixNativeFeedbackRadius),
                activeOpacity: this.props.activeOpacity || _shared.DEFAULT_ACTIVE_OPACITY,
                onPress: this.props.onPress,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 110
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: [buttonStyle, !hideShadow ? babelHelpers.extends({}, _shared.shadowStyle, this.props.shadowStyle) : null],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 119
                  }
                },
                this.props.children
              )
            )
          ),
          this._renderTitle()
        );
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle() {
        if (!this.props.title) return null;
        var _props2 = this.props,
            textContainerStyle = _props2.textContainerStyle,
            hideLabelShadow = _props2.hideLabelShadow,
            offsetX = _props2.offsetX,
            parentSize = _props2.parentSize,
            size = _props2.size,
            position = _props2.position,
            spaceBetween = _props2.spaceBetween;
        var offsetTop = Math.max(size / 2 - TEXT_HEIGHT / 2, 0);
        var positionStyles = {
          top: offsetTop
        };
        var hideShadow = hideLabelShadow === undefined ? this.props.hideShadow : hideLabelShadow;

        if (position !== "center") {
          positionStyles[position] = offsetX + (parentSize - size) / 2 + size + spaceBetween;
        } else {
          positionStyles.right = WIDTH / 2 + size / 2 + spaceBetween;
        }

        var textStyles = [styles.textContainer, positionStyles, !hideShadow && _shared.shadowStyle, textContainerStyle];
        var title = _react2.default.isValidElement(this.props.title) ? this.props.title : _react2.default.createElement(
          _reactNative.Text,
          {
            allowFontScaling: false,
            style: [styles.text, this.props.textStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 168
            }
          },
          this.props.title
        );
        return _react2.default.createElement(
          TextTouchable,
          {
            background: (0, _shared.touchableBackground)(this.props.nativeFeedbackRippleColor, this.props.fixNativeFeedbackRadius),
            activeOpacity: this.props.activeOpacity || _shared.DEFAULT_ACTIVE_OPACITY,
            onPress: this.props.onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 178
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: textStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 186
              }
            },
            title
          )
        );
      }
    }], [{
      key: "defaultProps",
      get: function get() {
        return {
          active: true,
          spaceBetween: 15,
          useNativeFeedback: true,
          activeOpacity: _shared.DEFAULT_ACTIVE_OPACITY,
          fixNativeFeedbackRadius: false,
          nativeFeedbackRippleColor: "rgba(255,255,255,0.75)"
        };
      }
    }, {
      key: "propTypes",
      get: function get() {
        return {
          active: _propTypes2.default.bool,
          useNativeFeedback: _propTypes2.default.bool,
          fixNativeFeedbackRadius: _propTypes2.default.bool,
          nativeFeedbackRippleColor: _propTypes2.default.string,
          activeOpacity: _propTypes2.default.number
        };
      }
    }]);
    return ActionButtonItem;
  }(_react.Component);

  exports.default = ActionButtonItem;

  var styles = _reactNative.StyleSheet.create({
    textContainer: {
      position: "absolute",
      paddingVertical: _shared.isAndroid ? 2 : 3,
      paddingHorizontal: 8,
      borderRadius: 3,
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: "#eee",
      backgroundColor: "white",
      height: TEXT_HEIGHT
    },
    text: {
      flex: 1,
      fontSize: 12,
      color: "#444"
    }
  });
},897,[109,128,12,898],"react-native-action-button/ActionButtonItem.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAndroid = exports.alignItemsMap = exports.shadowStyle = exports.DEFAULT_ACTIVE_OPACITY = undefined;
  exports.getTouchableComponent = getTouchableComponent;
  exports.touchableBackground = touchableBackground;

  var _reactNative = require(_dependencyMap[0], "react-native");

  var DEFAULT_ACTIVE_OPACITY = exports.DEFAULT_ACTIVE_OPACITY = 0.85;
  var shadowStyle = exports.shadowStyle = {
    shadowOpacity: 0.35,
    shadowOffset: {
      width: 0,
      height: 5
    },
    shadowColor: "#000",
    shadowRadius: 3,
    elevation: 5
  };
  var alignItemsMap = exports.alignItemsMap = {
    center: "center",
    left: "flex-start",
    right: "flex-end"
  };
  var isAndroid = exports.isAndroid = _reactNative.Platform.OS === "android";

  function getTouchableComponent(useNativeFeedback) {
    if (useNativeFeedback === true && isAndroid === true) {
      return _reactNative.TouchableNativeFeedback;
    }

    return _reactNative.TouchableOpacity;
  }

  function touchableBackground(color, fixRadius) {
    if (isAndroid) {
      if (_reactNative.Platform["Version"] >= 21) {
        return _reactNative.TouchableNativeFeedback.Ripple(color || "rgba(255,255,255,0.75)", fixRadius);
      } else {
        _reactNative.TouchableNativeFeedback.SelectableBackground();
      }
    }

    return undefined;
  }
},898,[12],"react-native-action-button/shared.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = babelHelpers.interopRequireDefault(_createIconSet);

  var _FontAwesome = require(_dependencyMap[1], "./glyphmaps/FontAwesome.json");

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var iconSet = (0, _createIconSet2.default)(_FontAwesome2.default, 'FontAwesome', 'FontAwesome.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},899,[839,900],"react-native-vector-icons/FontAwesome.js");
__d(function (global, require, module, exports, _dependencyMap) {
  module.exports = {
    "glass": 61440,
    "music": 61441,
    "search": 61442,
    "envelope-o": 61443,
    "heart": 61444,
    "star": 61445,
    "star-o": 61446,
    "user": 61447,
    "film": 61448,
    "th-large": 61449,
    "th": 61450,
    "th-list": 61451,
    "check": 61452,
    "remove": 61453,
    "close": 61453,
    "times": 61453,
    "search-plus": 61454,
    "search-minus": 61456,
    "power-off": 61457,
    "signal": 61458,
    "gear": 61459,
    "cog": 61459,
    "trash-o": 61460,
    "home": 61461,
    "file-o": 61462,
    "clock-o": 61463,
    "road": 61464,
    "download": 61465,
    "arrow-circle-o-down": 61466,
    "arrow-circle-o-up": 61467,
    "inbox": 61468,
    "play-circle-o": 61469,
    "rotate-right": 61470,
    "repeat": 61470,
    "refresh": 61473,
    "list-alt": 61474,
    "lock": 61475,
    "flag": 61476,
    "headphones": 61477,
    "volume-off": 61478,
    "volume-down": 61479,
    "volume-up": 61480,
    "qrcode": 61481,
    "barcode": 61482,
    "tag": 61483,
    "tags": 61484,
    "book": 61485,
    "bookmark": 61486,
    "print": 61487,
    "camera": 61488,
    "font": 61489,
    "bold": 61490,
    "italic": 61491,
    "text-height": 61492,
    "text-width": 61493,
    "align-left": 61494,
    "align-center": 61495,
    "align-right": 61496,
    "align-justify": 61497,
    "list": 61498,
    "dedent": 61499,
    "outdent": 61499,
    "indent": 61500,
    "video-camera": 61501,
    "photo": 61502,
    "image": 61502,
    "picture-o": 61502,
    "pencil": 61504,
    "map-marker": 61505,
    "adjust": 61506,
    "tint": 61507,
    "edit": 61508,
    "pencil-square-o": 61508,
    "share-square-o": 61509,
    "check-square-o": 61510,
    "arrows": 61511,
    "step-backward": 61512,
    "fast-backward": 61513,
    "backward": 61514,
    "play": 61515,
    "pause": 61516,
    "stop": 61517,
    "forward": 61518,
    "fast-forward": 61520,
    "step-forward": 61521,
    "eject": 61522,
    "chevron-left": 61523,
    "chevron-right": 61524,
    "plus-circle": 61525,
    "minus-circle": 61526,
    "times-circle": 61527,
    "check-circle": 61528,
    "question-circle": 61529,
    "info-circle": 61530,
    "crosshairs": 61531,
    "times-circle-o": 61532,
    "check-circle-o": 61533,
    "ban": 61534,
    "arrow-left": 61536,
    "arrow-right": 61537,
    "arrow-up": 61538,
    "arrow-down": 61539,
    "mail-forward": 61540,
    "share": 61540,
    "expand": 61541,
    "compress": 61542,
    "plus": 61543,
    "minus": 61544,
    "asterisk": 61545,
    "exclamation-circle": 61546,
    "gift": 61547,
    "leaf": 61548,
    "fire": 61549,
    "eye": 61550,
    "eye-slash": 61552,
    "warning": 61553,
    "exclamation-triangle": 61553,
    "plane": 61554,
    "calendar": 61555,
    "random": 61556,
    "comment": 61557,
    "magnet": 61558,
    "chevron-up": 61559,
    "chevron-down": 61560,
    "retweet": 61561,
    "shopping-cart": 61562,
    "folder": 61563,
    "folder-open": 61564,
    "arrows-v": 61565,
    "arrows-h": 61566,
    "bar-chart-o": 61568,
    "bar-chart": 61568,
    "twitter-square": 61569,
    "facebook-square": 61570,
    "camera-retro": 61571,
    "key": 61572,
    "gears": 61573,
    "cogs": 61573,
    "comments": 61574,
    "thumbs-o-up": 61575,
    "thumbs-o-down": 61576,
    "star-half": 61577,
    "heart-o": 61578,
    "sign-out": 61579,
    "linkedin-square": 61580,
    "thumb-tack": 61581,
    "external-link": 61582,
    "sign-in": 61584,
    "trophy": 61585,
    "github-square": 61586,
    "upload": 61587,
    "lemon-o": 61588,
    "phone": 61589,
    "square-o": 61590,
    "bookmark-o": 61591,
    "phone-square": 61592,
    "twitter": 61593,
    "facebook-f": 61594,
    "facebook": 61594,
    "github": 61595,
    "unlock": 61596,
    "credit-card": 61597,
    "feed": 61598,
    "rss": 61598,
    "hdd-o": 61600,
    "bullhorn": 61601,
    "bell": 61683,
    "certificate": 61603,
    "hand-o-right": 61604,
    "hand-o-left": 61605,
    "hand-o-up": 61606,
    "hand-o-down": 61607,
    "arrow-circle-left": 61608,
    "arrow-circle-right": 61609,
    "arrow-circle-up": 61610,
    "arrow-circle-down": 61611,
    "globe": 61612,
    "wrench": 61613,
    "tasks": 61614,
    "filter": 61616,
    "briefcase": 61617,
    "arrows-alt": 61618,
    "group": 61632,
    "users": 61632,
    "chain": 61633,
    "link": 61633,
    "cloud": 61634,
    "flask": 61635,
    "cut": 61636,
    "scissors": 61636,
    "copy": 61637,
    "files-o": 61637,
    "paperclip": 61638,
    "save": 61639,
    "floppy-o": 61639,
    "square": 61640,
    "navicon": 61641,
    "reorder": 61641,
    "bars": 61641,
    "list-ul": 61642,
    "list-ol": 61643,
    "strikethrough": 61644,
    "underline": 61645,
    "table": 61646,
    "magic": 61648,
    "truck": 61649,
    "pinterest": 61650,
    "pinterest-square": 61651,
    "google-plus-square": 61652,
    "google-plus": 61653,
    "money": 61654,
    "caret-down": 61655,
    "caret-up": 61656,
    "caret-left": 61657,
    "caret-right": 61658,
    "columns": 61659,
    "unsorted": 61660,
    "sort": 61660,
    "sort-down": 61661,
    "sort-desc": 61661,
    "sort-up": 61662,
    "sort-asc": 61662,
    "envelope": 61664,
    "linkedin": 61665,
    "rotate-left": 61666,
    "undo": 61666,
    "legal": 61667,
    "gavel": 61667,
    "dashboard": 61668,
    "tachometer": 61668,
    "comment-o": 61669,
    "comments-o": 61670,
    "flash": 61671,
    "bolt": 61671,
    "sitemap": 61672,
    "umbrella": 61673,
    "paste": 61674,
    "clipboard": 61674,
    "lightbulb-o": 61675,
    "exchange": 61676,
    "cloud-download": 61677,
    "cloud-upload": 61678,
    "user-md": 61680,
    "stethoscope": 61681,
    "suitcase": 61682,
    "bell-o": 61602,
    "coffee": 61684,
    "cutlery": 61685,
    "file-text-o": 61686,
    "building-o": 61687,
    "hospital-o": 61688,
    "ambulance": 61689,
    "medkit": 61690,
    "fighter-jet": 61691,
    "beer": 61692,
    "h-square": 61693,
    "plus-square": 61694,
    "angle-double-left": 61696,
    "angle-double-right": 61697,
    "angle-double-up": 61698,
    "angle-double-down": 61699,
    "angle-left": 61700,
    "angle-right": 61701,
    "angle-up": 61702,
    "angle-down": 61703,
    "desktop": 61704,
    "laptop": 61705,
    "tablet": 61706,
    "mobile-phone": 61707,
    "mobile": 61707,
    "circle-o": 61708,
    "quote-left": 61709,
    "quote-right": 61710,
    "spinner": 61712,
    "circle": 61713,
    "mail-reply": 61714,
    "reply": 61714,
    "github-alt": 61715,
    "folder-o": 61716,
    "folder-open-o": 61717,
    "smile-o": 61720,
    "frown-o": 61721,
    "meh-o": 61722,
    "gamepad": 61723,
    "keyboard-o": 61724,
    "flag-o": 61725,
    "flag-checkered": 61726,
    "terminal": 61728,
    "code": 61729,
    "mail-reply-all": 61730,
    "reply-all": 61730,
    "star-half-empty": 61731,
    "star-half-full": 61731,
    "star-half-o": 61731,
    "location-arrow": 61732,
    "crop": 61733,
    "code-fork": 61734,
    "unlink": 61735,
    "chain-broken": 61735,
    "question": 61736,
    "info": 61737,
    "exclamation": 61738,
    "superscript": 61739,
    "subscript": 61740,
    "eraser": 61741,
    "puzzle-piece": 61742,
    "microphone": 61744,
    "microphone-slash": 61745,
    "shield": 61746,
    "calendar-o": 61747,
    "fire-extinguisher": 61748,
    "rocket": 61749,
    "maxcdn": 61750,
    "chevron-circle-left": 61751,
    "chevron-circle-right": 61752,
    "chevron-circle-up": 61753,
    "chevron-circle-down": 61754,
    "html5": 61755,
    "css3": 61756,
    "anchor": 61757,
    "unlock-alt": 61758,
    "bullseye": 61760,
    "ellipsis-h": 61761,
    "ellipsis-v": 61762,
    "rss-square": 61763,
    "play-circle": 61764,
    "ticket": 61765,
    "minus-square": 61766,
    "minus-square-o": 61767,
    "level-up": 61768,
    "level-down": 61769,
    "check-square": 61770,
    "pencil-square": 61771,
    "external-link-square": 61772,
    "share-square": 61773,
    "compass": 61774,
    "toggle-down": 61776,
    "caret-square-o-down": 61776,
    "toggle-up": 61777,
    "caret-square-o-up": 61777,
    "toggle-right": 61778,
    "caret-square-o-right": 61778,
    "euro": 61779,
    "eur": 61779,
    "gbp": 61780,
    "dollar": 61781,
    "usd": 61781,
    "rupee": 61782,
    "inr": 61782,
    "cny": 61783,
    "rmb": 61783,
    "yen": 61783,
    "jpy": 61783,
    "ruble": 61784,
    "rouble": 61784,
    "rub": 61784,
    "won": 61785,
    "krw": 61785,
    "bitcoin": 61786,
    "btc": 61786,
    "file": 61787,
    "file-text": 61788,
    "sort-alpha-asc": 61789,
    "sort-alpha-desc": 61790,
    "sort-amount-asc": 61792,
    "sort-amount-desc": 61793,
    "sort-numeric-asc": 61794,
    "sort-numeric-desc": 61795,
    "thumbs-up": 61796,
    "thumbs-down": 61797,
    "youtube-square": 61798,
    "youtube": 61799,
    "xing": 61800,
    "xing-square": 61801,
    "youtube-play": 61802,
    "dropbox": 61803,
    "stack-overflow": 61804,
    "instagram": 61805,
    "flickr": 61806,
    "adn": 61808,
    "bitbucket": 61809,
    "bitbucket-square": 61810,
    "tumblr": 61811,
    "tumblr-square": 61812,
    "long-arrow-down": 61813,
    "long-arrow-up": 61814,
    "long-arrow-left": 61815,
    "long-arrow-right": 61816,
    "apple": 61817,
    "windows": 61818,
    "android": 61819,
    "linux": 61820,
    "dribbble": 61821,
    "skype": 61822,
    "foursquare": 61824,
    "trello": 61825,
    "female": 61826,
    "male": 61827,
    "gittip": 61828,
    "gratipay": 61828,
    "sun-o": 61829,
    "moon-o": 61830,
    "archive": 61831,
    "bug": 61832,
    "vk": 61833,
    "weibo": 61834,
    "renren": 61835,
    "pagelines": 61836,
    "stack-exchange": 61837,
    "arrow-circle-o-right": 61838,
    "arrow-circle-o-left": 61840,
    "toggle-left": 61841,
    "caret-square-o-left": 61841,
    "dot-circle-o": 61842,
    "wheelchair": 61843,
    "vimeo-square": 61844,
    "turkish-lira": 61845,
    "try": 61845,
    "plus-square-o": 61846,
    "space-shuttle": 61847,
    "slack": 61848,
    "envelope-square": 61849,
    "wordpress": 61850,
    "openid": 61851,
    "institution": 61852,
    "bank": 61852,
    "university": 61852,
    "mortar-board": 61853,
    "graduation-cap": 61853,
    "yahoo": 61854,
    "google": 61856,
    "reddit": 61857,
    "reddit-square": 61858,
    "stumbleupon-circle": 61859,
    "stumbleupon": 61860,
    "delicious": 61861,
    "digg": 61862,
    "pied-piper-pp": 61863,
    "pied-piper-alt": 61864,
    "drupal": 61865,
    "joomla": 61866,
    "language": 61867,
    "fax": 61868,
    "building": 61869,
    "child": 61870,
    "paw": 61872,
    "spoon": 61873,
    "cube": 61874,
    "cubes": 61875,
    "behance": 61876,
    "behance-square": 61877,
    "steam": 61878,
    "steam-square": 61879,
    "recycle": 61880,
    "automobile": 61881,
    "car": 61881,
    "cab": 61882,
    "taxi": 61882,
    "tree": 61883,
    "spotify": 61884,
    "deviantart": 61885,
    "soundcloud": 61886,
    "database": 61888,
    "file-pdf-o": 61889,
    "file-word-o": 61890,
    "file-excel-o": 61891,
    "file-powerpoint-o": 61892,
    "file-photo-o": 61893,
    "file-picture-o": 61893,
    "file-image-o": 61893,
    "file-zip-o": 61894,
    "file-archive-o": 61894,
    "file-sound-o": 61895,
    "file-audio-o": 61895,
    "file-movie-o": 61896,
    "file-video-o": 61896,
    "file-code-o": 61897,
    "vine": 61898,
    "codepen": 61899,
    "jsfiddle": 61900,
    "life-bouy": 61901,
    "life-buoy": 61901,
    "life-saver": 61901,
    "support": 61901,
    "life-ring": 61901,
    "circle-o-notch": 61902,
    "ra": 61904,
    "resistance": 61904,
    "rebel": 61904,
    "ge": 61905,
    "empire": 61905,
    "git-square": 61906,
    "git": 61907,
    "y-combinator-square": 61908,
    "yc-square": 61908,
    "hacker-news": 61908,
    "tencent-weibo": 61909,
    "qq": 61910,
    "wechat": 61911,
    "weixin": 61911,
    "send": 61912,
    "paper-plane": 61912,
    "send-o": 61913,
    "paper-plane-o": 61913,
    "history": 61914,
    "circle-thin": 61915,
    "header": 61916,
    "paragraph": 61917,
    "sliders": 61918,
    "share-alt": 61920,
    "share-alt-square": 61921,
    "bomb": 61922,
    "soccer-ball-o": 61923,
    "futbol-o": 61923,
    "tty": 61924,
    "binoculars": 61925,
    "plug": 61926,
    "slideshare": 61927,
    "twitch": 61928,
    "yelp": 61929,
    "newspaper-o": 61930,
    "wifi": 61931,
    "calculator": 61932,
    "paypal": 61933,
    "google-wallet": 61934,
    "cc-visa": 61936,
    "cc-mastercard": 61937,
    "cc-discover": 61938,
    "cc-amex": 61939,
    "cc-paypal": 61940,
    "cc-stripe": 61941,
    "bell-slash": 61942,
    "bell-slash-o": 61943,
    "trash": 61944,
    "copyright": 61945,
    "at": 61946,
    "eyedropper": 61947,
    "paint-brush": 61948,
    "birthday-cake": 61949,
    "area-chart": 61950,
    "pie-chart": 61952,
    "line-chart": 61953,
    "lastfm": 61954,
    "lastfm-square": 61955,
    "toggle-off": 61956,
    "toggle-on": 61957,
    "bicycle": 61958,
    "bus": 61959,
    "ioxhost": 61960,
    "angellist": 61961,
    "cc": 61962,
    "shekel": 61963,
    "sheqel": 61963,
    "ils": 61963,
    "meanpath": 61964,
    "buysellads": 61965,
    "connectdevelop": 61966,
    "dashcube": 61968,
    "forumbee": 61969,
    "leanpub": 61970,
    "sellsy": 61971,
    "shirtsinbulk": 61972,
    "simplybuilt": 61973,
    "skyatlas": 61974,
    "cart-plus": 61975,
    "cart-arrow-down": 61976,
    "diamond": 61977,
    "ship": 61978,
    "user-secret": 61979,
    "motorcycle": 61980,
    "street-view": 61981,
    "heartbeat": 61982,
    "venus": 61985,
    "mars": 61986,
    "mercury": 61987,
    "intersex": 61988,
    "transgender": 61988,
    "transgender-alt": 61989,
    "venus-double": 61990,
    "mars-double": 61991,
    "venus-mars": 61992,
    "mars-stroke": 61993,
    "mars-stroke-v": 61994,
    "mars-stroke-h": 61995,
    "neuter": 61996,
    "genderless": 61997,
    "facebook-official": 62000,
    "pinterest-p": 62001,
    "whatsapp": 62002,
    "server": 62003,
    "user-plus": 62004,
    "user-times": 62005,
    "hotel": 62006,
    "bed": 62006,
    "viacoin": 62007,
    "train": 62008,
    "subway": 62009,
    "medium": 62010,
    "yc": 62011,
    "y-combinator": 62011,
    "optin-monster": 62012,
    "opencart": 62013,
    "expeditedssl": 62014,
    "battery-4": 62016,
    "battery": 62016,
    "battery-full": 62016,
    "battery-3": 62017,
    "battery-three-quarters": 62017,
    "battery-2": 62018,
    "battery-half": 62018,
    "battery-1": 62019,
    "battery-quarter": 62019,
    "battery-0": 62020,
    "battery-empty": 62020,
    "mouse-pointer": 62021,
    "i-cursor": 62022,
    "object-group": 62023,
    "object-ungroup": 62024,
    "sticky-note": 62025,
    "sticky-note-o": 62026,
    "cc-jcb": 62027,
    "cc-diners-club": 62028,
    "clone": 62029,
    "balance-scale": 62030,
    "hourglass-o": 62032,
    "hourglass-1": 62033,
    "hourglass-start": 62033,
    "hourglass-2": 62034,
    "hourglass-half": 62034,
    "hourglass-3": 62035,
    "hourglass-end": 62035,
    "hourglass": 62036,
    "hand-grab-o": 62037,
    "hand-rock-o": 62037,
    "hand-stop-o": 62038,
    "hand-paper-o": 62038,
    "hand-scissors-o": 62039,
    "hand-lizard-o": 62040,
    "hand-spock-o": 62041,
    "hand-pointer-o": 62042,
    "hand-peace-o": 62043,
    "trademark": 62044,
    "registered": 62045,
    "creative-commons": 62046,
    "gg": 62048,
    "gg-circle": 62049,
    "tripadvisor": 62050,
    "odnoklassniki": 62051,
    "odnoklassniki-square": 62052,
    "get-pocket": 62053,
    "wikipedia-w": 62054,
    "safari": 62055,
    "chrome": 62056,
    "firefox": 62057,
    "opera": 62058,
    "internet-explorer": 62059,
    "tv": 62060,
    "television": 62060,
    "contao": 62061,
    "500px": 62062,
    "amazon": 62064,
    "calendar-plus-o": 62065,
    "calendar-minus-o": 62066,
    "calendar-times-o": 62067,
    "calendar-check-o": 62068,
    "industry": 62069,
    "map-pin": 62070,
    "map-signs": 62071,
    "map-o": 62072,
    "map": 62073,
    "commenting": 62074,
    "commenting-o": 62075,
    "houzz": 62076,
    "vimeo": 62077,
    "black-tie": 62078,
    "fonticons": 62080,
    "reddit-alien": 62081,
    "edge": 62082,
    "credit-card-alt": 62083,
    "codiepie": 62084,
    "modx": 62085,
    "fort-awesome": 62086,
    "usb": 62087,
    "product-hunt": 62088,
    "mixcloud": 62089,
    "scribd": 62090,
    "pause-circle": 62091,
    "pause-circle-o": 62092,
    "stop-circle": 62093,
    "stop-circle-o": 62094,
    "shopping-bag": 62096,
    "shopping-basket": 62097,
    "hashtag": 62098,
    "bluetooth": 62099,
    "bluetooth-b": 62100,
    "percent": 62101,
    "gitlab": 62102,
    "wpbeginner": 62103,
    "wpforms": 62104,
    "envira": 62105,
    "universal-access": 62106,
    "wheelchair-alt": 62107,
    "question-circle-o": 62108,
    "blind": 62109,
    "audio-description": 62110,
    "volume-control-phone": 62112,
    "braille": 62113,
    "assistive-listening-systems": 62114,
    "asl-interpreting": 62115,
    "american-sign-language-interpreting": 62115,
    "deafness": 62116,
    "hard-of-hearing": 62116,
    "deaf": 62116,
    "glide": 62117,
    "glide-g": 62118,
    "signing": 62119,
    "sign-language": 62119,
    "low-vision": 62120,
    "viadeo": 62121,
    "viadeo-square": 62122,
    "snapchat": 62123,
    "snapchat-ghost": 62124,
    "snapchat-square": 62125,
    "pied-piper": 62126,
    "first-order": 62128,
    "yoast": 62129,
    "themeisle": 62130,
    "google-plus-circle": 62131,
    "google-plus-official": 62131,
    "fa": 62132,
    "font-awesome": 62132,
    "handshake-o": 62133,
    "envelope-open": 62134,
    "envelope-open-o": 62135,
    "linode": 62136,
    "address-book": 62137,
    "address-book-o": 62138,
    "vcard": 62139,
    "address-card": 62139,
    "vcard-o": 62140,
    "address-card-o": 62140,
    "user-circle": 62141,
    "user-circle-o": 62142,
    "user-o": 62144,
    "id-badge": 62145,
    "drivers-license": 62146,
    "id-card": 62146,
    "drivers-license-o": 62147,
    "id-card-o": 62147,
    "quora": 62148,
    "free-code-camp": 62149,
    "telegram": 62150,
    "thermometer-4": 62151,
    "thermometer": 62151,
    "thermometer-full": 62151,
    "thermometer-3": 62152,
    "thermometer-three-quarters": 62152,
    "thermometer-2": 62153,
    "thermometer-half": 62153,
    "thermometer-1": 62154,
    "thermometer-quarter": 62154,
    "thermometer-0": 62155,
    "thermometer-empty": 62155,
    "shower": 62156,
    "bathtub": 62157,
    "s15": 62157,
    "bath": 62157,
    "podcast": 62158,
    "window-maximize": 62160,
    "window-minimize": 62161,
    "window-restore": 62162,
    "times-rectangle": 62163,
    "window-close": 62163,
    "times-rectangle-o": 62164,
    "window-close-o": 62164,
    "bandcamp": 62165,
    "grav": 62166,
    "etsy": 62167,
    "imdb": 62168,
    "ravelry": 62169,
    "eercast": 62170,
    "microchip": 62171,
    "snowflake-o": 62172,
    "superpowers": 62173,
    "wpexplorer": 62174,
    "meetup": 62176
  };
},900,[],"react-native-vector-icons/glyphmaps/FontAwesome.json");
__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/matanguttman/RN/NNBitcoins/src/components/Screens/AMA/UnreadBadge.js";

    var _react = require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _ChatActions = require(_dependencyMap[1], "../../../Actions/ChatActions");

    var _reactRedux = require(_dependencyMap[2], "react-redux");

    var _common = require(_dependencyMap[3], "../../common");

    var UnreadBadge = function (_Component) {
        babelHelpers.inherits(UnreadBadge, _Component);

        function UnreadBadge() {
            babelHelpers.classCallCheck(this, UnreadBadge);
            return babelHelpers.possibleConstructorReturn(this, (UnreadBadge.__proto__ || Object.getPrototypeOf(UnreadBadge)).apply(this, arguments));
        }

        babelHelpers.createClass(UnreadBadge, [{
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
                return this.props.chatState.badgeCount !== nextProps.chatState.badgeCount;
            }
        }, {
            key: "render",
            value: function render() {
                console.log('RENDER BADGE');
                var chatState = this.props.chatState;

                if (chatState.badgeCount > 0) {
                    return _react2.default.createElement(_common.Badge, {
                        number: chatState.badgeCount,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 16
                        }
                    });
                }

                return null;
            }
        }]);
        return UnreadBadge;
    }(_react.Component);

    function mapStateToProps(state) {
        return {
            chatState: state.chatState
        };
    }

    exports.default = (0, _reactRedux.connect)(mapStateToProps, {
        getUnreadCount: _ChatActions.getUnreadCount
    })(UnreadBadge);
},901,[109,893,555,828],"NNCoins/src/components/Screens/AMA/UnreadBadge.js");
__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = require(_dependencyMap[0], "react");

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _reactNativeRouterFlux = require(_dependencyMap[2], "react-native-router-flux");

  var _FetchNewsList = require(_dependencyMap[3], "../Actions/FetchNewsList");

  var _FetchNewsList2 = babelHelpers.interopRequireDefault(_FetchNewsList);

  var _FetchPriceData = require(_dependencyMap[4], "../Actions/FetchPriceData");

  var _FetchPriceData2 = babelHelpers.interopRequireDefault(_FetchPriceData);

  var _ChatActions = require(_dependencyMap[5], "../Actions/ChatActions");

  var _reactRedux = require(_dependencyMap[6], "react-redux");

  var EventHandler = function (_Component) {
    babelHelpers.inherits(EventHandler, _Component);

    function EventHandler() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, EventHandler);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = EventHandler.__proto__ || Object.getPrototypeOf(EventHandler)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        appState: _reactNative.AppState.currentState
      }, _this.handleAppStateChange = function (nextAppState) {
        if (_this.state.appState.match(/inactive|background/) && nextAppState === 'active') {
          console.log('App has come to the foreground!');
          console.log('Currentscene:', _reactNativeRouterFlux.Actions.currentScene);

          _this.props.getUnreadCount();

          if (_reactNativeRouterFlux.Actions.currentScene === 'Price') {
            _this.props.fetchPriceData();
          } else if (_reactNativeRouterFlux.Actions.currentScene === 'News') {
            _this.props.fetchNewsList();
          }
        }

        _this.setState({
          appState: nextAppState
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(EventHandler, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _reactNative.AppState.addEventListener('change', this.handleAppStateChange);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.AppState.removeEventListener('change', this.handleAppStateChange);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return EventHandler;
  }(_react.Component);

  exports.default = (0, _reactRedux.connect)(null, {
    fetchNewsList: _FetchNewsList2.default,
    fetchPriceData: _FetchPriceData2.default,
    getUnreadCount: _ChatActions.getUnreadCount
  })(EventHandler);
},902,[109,12,573,835,714,893,555],"NNCoins/src/components/EventHandler.js");
require(23);
require(11);